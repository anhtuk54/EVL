diff --git a/Documentation/dovetail.rst b/Documentation/dovetail.rst
new file mode 100644
index 000000000000..fd8af6ce28d3
--- /dev/null
+++ b/Documentation/dovetail.rst
@@ -0,0 +1,342 @@
+========================
+Introduction to Dovetail
+========================
+
+:Copyright: |copy| 2016-2018: Philippe Gerum
+
+Using Linux as a host for lightweight software cores specialized in
+delivering very short and bounded response times has been a popular
+way of supporting real-time applications in the embedded space over
+the years.
+
+This design - known as the *dual kernel* approach - introduces a small
+real-time infrastructure which schedules time-critical activities
+independently from the main kernel. Application threads co-managed by
+this infrastructure still benefit from the ancillary kernel services
+such as virtual memory management, and can also leverage the rich GPOS
+feature set Linux provides such as networking, data storage or GUIs.
+
+There are significant upsides to keeping the real-time core separate
+from the GPOS infrastructure:
+
+- because the two kernels are independent, real-time activities are
+  not serialized with GPOS operations internally, removing potential
+  delays which might be induced by the non time-critical
+  work. Likewise, there is no requirement for keeping the GPOS
+  operations fine-grained and highly preemptible at any time, which
+  would otherwise induce noticeable overhead on low-end hardware, due
+  to the need for pervasive task priority inheritance and IRQ
+  threading.
+
+- when debugging a real-time issue, the functional isolation of the
+  real-time infrastructure from the rest of the kernel code restricts
+  bug hunting to the scope of the small co-kernel, excluding most
+  interactions with the very large GPOS kernel base.
+
+- with a dedicated infrastructure providing a specific, well-defined
+  set of real-time services, applications can unambiguously figure out
+  which API calls are available for supporting time-critical work,
+  excluding all the rest as being potentially non-deterministic with
+  respect to response time.
+
+To support such a *dual kernel system*, we need the kernel to exhibit
+a high-priority execution context, for running out-of-band real-time
+duties concurrently to the regular operations.
+
+.. NOTE:: Dovetail only introduces the basic mechanisms for hosting
+such a real-time core, enabling the common programming model for its
+applications in user-space. It does *not* implement the real-time core
+per se, which should be provided by a separate kernel component.
+
+Interrupt pipelining
+====================
+
+.. _pipeline
+The real-time core has to act upon device interrupts with no delay,
+regardless of the regular kernel operations which may be ongoing when
+the interrupt is received by the CPU. Therefore, there is a basic
+requirement for prioritizing interrupt masking and delivery between
+the real-time core and GPOS operations, while maintaining consistent
+internal serialization for the kernel.
+
+To this end, Dovetail leverages a mechanism called *interrupt
+pipelining*, which is described in the
+:ref:`Documentation/irq_pipeline.rst <Interrupt Pipeline>`)
+document. Understanding the concepts and mechanisms described in the
+later document is required for a full comprehension of the Dovetail
+basics.
+
+Alternate scheduling
+====================
+
+Dovetail promotes the idea that a *dual kernel* system should keep the
+functional overlap between the kernel and the real-time core
+minimal. To this end, a real-time thread should be merely seen as a
+regular task with additional scheduling capabilities guaranteeing very
+low response times.
+
+To support such idea, Dovetail enables kthreads and regular user tasks
+to run alternatively in the out-of-band execution context introduced
+by the interrupt pipeline_ (aka *oob* stage), or the common in-band
+kernel context for GPOS operations (aka *in-band* stage).
+
+As a result, real-time core applications in user-space benefit from
+the common Linux programming model - including virtual memory
+protection -, and still have access to the regular Linux services when
+carrying out non time-critical work.
+
+Task migration to the oob stage
+-------------------------------
+
+Low latency response time to events can be achieved when Linux tasks
+wait for them from the out-of-band execution context. The real-time
+core is responsible for switching a task to such a context as part of
+its task management rules; Dovetail facilitates this migration with
+dedicated services.
+
+The migration process of a task from the GPOS/in-band context to the
+high-priority, out-of-band context is as follows:
+
+1. :c:func:`dovetail_leave_inband` is invoked from the migrating task
+   context, with the same prerequisites than for calling
+   :c:func:`schedule` (preemption enabled, interrupts on).
+
+.. _`in-band sleep operation`:
+2. the caller is put to interruptible sleep state (S).
+
+3. the real-time core's implementation of :c:func:`resume_oob_task` is
+   passed a pointer to the task_struct descriptor of the migrating
+   task. This routine is expected to perform the necessary steps for
+   taking control over the task on behalf of the real-time core,
+   re-scheduling its code appropriately over the oob stage. This
+   typically involves resuming it from the `out-of-band suspended
+   state`_ applied during the converse migration path.
+
+4. at some point later, when the migrated task is picked by the
+   real-time scheduler, it resumes execution on the oob stage with the
+   register file previously saved by the kernel scheduler in
+   :c:func:`switch_to` at step 1.
+
+Task migration to the in-band stage
+-----------------------------------
+
+Sometimes, a real-time thread may want to leave the out-of-band
+context, continuing execution from the in-band context instead, so as
+to:
+
+- run non time-critical (in-band) work involving regular system calls
+  handled by the kernel,
+
+- recover from CPU exceptions, such as handling major memory access
+  faults, for which there is no point in caring for response time, and
+  therefore makes no sense to duplicate in the real-time core anyway.
+
+.. NOTE: The discussion about exception_ handling covers the last
+   point in details.
+
+The migration process of a task from the high-priority, out-of-band
+context to the GPOS/in-band context is as follows::
+
+1. the real-time core schedules an in-band handler for execution which
+   should call :c:func:`wake_up_process` to unblock the migrating task
+   from the standpoint of the kernel scheduler. This is the
+   counterpart of the :ref:`in-band sleep operation <in-band sleep
+   operation>` from the converse migration path. The
+   :ref:`Documentation/irq_pipeline.rst` <irq_work> mechanism can be
+   used for scheduling such event from the out-of-band context.
+
+.. _`out-of-band suspended state`:
+2. the real-time core suspends execution of the current task from its
+   own standpoint, calling :c:func:`dovetail_leave_oob` right before
+   scheduling out the task. The real-time scheduler is assumed to be
+   using the common :c:func:`switch_to` routine for switching task
+   contexts.
+
+3. at some point later, the out-of-band context is exited by the
+   current CPU when no more high-priority work is left, causing the
+   preempted in-band kernel code to resume execution on the in-band
+   stage. The handler scheduled at step 1 eventually runs, waking up
+   the migrating task from the standpoint of the kernel.
+
+4. the migrating task resumes from the tail scheduling code of the
+   real-time scheduler, where it suspended in step 2. Noticing the
+   migration, the real-time core eventually calls
+   :c:func:`dovetail_resume_inband` for finalizing the transition of
+   the incoming task to the in-band stage.
+
+Binding to the real-time core
+-----------------------------
+
+.. _binding:
+Dovetail facilitates fine-grained per-thread management from the
+real-time core, as opposed to per-process. For this reason, the
+real-time core should at least implement a mechanism for turning a
+regular task into a real-time thread with extended capabilities,
+binding it to the core.
+
+The real-time core should inform the kernel about its intent to share
+control over a task, by calling :c:func::`dovetail_start_altsched` on
+behalf of that task, i.e. when such task is current.
+
+For this reason, the binding operation is usually carried out by a
+dedicated system call exposed by the real-time core, which a regular
+task would invoke.
+
+Once :c:func::`dovetail_start_altsched` has returned, Dovetail
+notifications are enabled for the current task (see below).
+
+.. NOTE:: Whether there should be distinct procedures for binding
+	  processes *and* threads to the real-time core, or only a
+	  thread binding procedure is up to the real-time core
+	  implementation.
+
+Notifications
+-------------
+
+Exception handling
+~~~~~~~~~~~~~~~~~~
+
+.. _exception
+If a processor exception is raised while the CPU is busy running a
+real-time thread in the out-of-band context (e.g. due to some invalid
+memory access, bad instruction, FPU or alignment error etc), the task
+may have to leave such context immediately if the fault handler is not
+protected against out-of-band interrupts, and therefore cannot be
+properly serialized with out-of-band code.
+
+Dovetail notifies the real-time core about incoming exceptions early
+from the low-level fault handlers, but only when some out-of-band code
+was running when the exception was taken. The real-time core may then
+take action, such as reconciling the current task's execution context
+with the kernel's expectations before the task may traverse the
+regular fault handling code.
+
+.. HINT:: Enabling debuggers to trace real-time thread involves
+          dealing with debug traps the former may poke into the
+          debuggee's code for breakpointing duties.
+
+The notification is issued by a call to :c:func:`oob_trap_notify`
+which in turn invokes the :c:func:`handle_oob_trap` routine the
+real-time core should override for receiving those events (*__weak*
+binding). Interrupts are **disabled** in the CPU when
+:c:func:`handle_oob_trap` is called.::
+
+     /* out-of-band code running */
+     *bad_pointer = 42;
+        [ACCESS EXCEPTION]
+	   /* low-level fault handler in arch/<arch>/mm */
+           -> do_page_fault()
+	      -> oob_trap_notify(...)
+	         /* real-time core */
+	         -> handle_oob_trap(...)
+		    -> forced task migration to in-band stage
+	   ...
+           -> handle_mm_fault()
+
+.. NOTE:: handling minor memory access faults only requiring quick PTE
+          fixups should not involve switching the current task to the
+          in-band context though. Instead, the fixup code should be
+          made :ref:`Documentation/irq_pipeline.rst` strictly <atomic>
+          for serializing accesses from any context.
+
+System calls
+~~~~~~~~~~~~
+
+A real-time core interfaced with the kernel via Dovetail may introduce
+its own set of system calls. From the standpoint of the kernel, this
+is a foreign set of calls, which can be distinguished unambiguously
+from regular ones based on an arch-specific marker.
+
+.. HINT:: Syscall numbers from this set might have a different base,
+	  and/or some high-order bit set which regular syscall numbers
+	  would not have.
+
+If a task bound to the real-time core issues any system call,
+regardless of which of the kernel or real-time core should handle it,
+the latter must be given the opportunity to:
+
+- perform the service directly, possibly switching the caller to
+  out-of-band context first would the request require it.
+
+- pass the request downward to the normal system call path on the
+  in-band stage, possibly switching the caller to in-band context if
+  needed.
+
+If a regular task (i.e. *not* known from the real-time core [yet])
+issues any foreign system call, the real-time core is given a chance
+to handle it. This way, a foreign system call which would initially
+bind a regular task to the real-time core would be delivered to the
+real-time core as expected (see binding_).
+
+Dovetail intercepts system calls early in the kernel entry code,
+delivering them to the proper handler according to the following
+logic::
+
+     is_foreign(syscall_nr)?
+	    Y: is_bound(task)
+	           Y: -> handle_oob_syscall()
+		   N: -> handle_pipelined_syscall()
+            N: is_bound(task)
+	           Y: -> handle_pipelined_syscall()
+		   N: -> normal syscall handling
+
+:c:func:`handle_oob_syscall` is the fast path for handling foreign
+system calls from tasks already running in out-of-band context.
+
+:c:func:`handle_pipelined_syscall` is a slower path for handling requests
+which might require the caller to switch to the out-of-band context
+first before proceeding.
+
+In-band kernel events
+~~~~~~~~~~~~~~~~~~~~~
+
+The last set of notifications involves pure in-band events which the
+real-time core may need to know about, as they may affect its own task
+management. Except for INBAND_PROCESS_CLEANUP which is called for
+*any* exiting user-space task, all other notifications are only issued
+for tasks bound to the real-time core (which may involve kthreads).
+
+The notification is issued by a call to :c:func:`inband_event_notify`
+which in turn invokes the :c:func:`handle_inband_event` routine the
+real-time core should override for receiving those events (*__weak*
+binding). Interrupts are **enabled** in the CPU when
+:c:func:`handle_inband_event` is called.
+
+The notification hook is given the event type code, and a single
+pointer argument which relates to the event type.
+
+The following events are defined (include/linux/dovetail.h):
+
+- INBAND_TASK_SCHEDULE(struct task_struct *next)
+
+  sent in preparation of a context switch, right before the memory
+  context is switched to *next*.
+
+- INBAND_TASK_SIGNAL(struct task_struct *target)
+
+  sent when *target* is about to receive a signal. The real-time core
+  may decide to schedule a transition of the recipient to the in-band
+  stage in order to have it handle that signal asap, which is required
+  for keeping the kernel sane. This notification is always sent from
+  the context of the issuer.
+
+- INBAND_TASK_MIGRATION(struct dovetail_migration_data *p)
+
+  sent when p->task is about to move to CPU p->dest_cpu.
+
+- INBAND_TASK_EXIT(struct task_struct *current)
+
+  sent from :c:func:`do_exit` before the current task has dropped the
+  files and mappings it owns.
+
+- INBAND_PROCESS_CLEANUP(struct mm_struct *mm)
+
+  sent before *mm* is entirely dropped, before the mappings are
+  exited. Per-process resources which might be maintained by the
+  real-time core could be released there, as all threads have exited.
+
+Terminology
+===========
+
+See the :ref:`Documentation/irq_pipeline.rst` <Interrupt Pipeline
+terminology>.
diff --git a/Documentation/irq_pipeline.rst b/Documentation/irq_pipeline.rst
new file mode 100644
index 000000000000..4f84c28e31f7
--- /dev/null
+++ b/Documentation/irq_pipeline.rst
@@ -0,0 +1,693 @@
+.. include:: <isonum.txt>
+
+====================
+Interrupt pipelining
+====================
+
+:Copyright: |copy| 2016-2018: Philippe Gerum
+
+Purpose
+=======
+
+To protect from deadlocks and maintain data integrity, Linux hard
+disables interrupts around any critical section of code which must not
+be preempted by interrupt handlers on the same CPU, enforcing a
+strictly serialized execution among those contexts.
+
+The unpredictable delay this may cause before external events can be
+handled is a major roadblock for kernel components requiring
+predictable and very short response times to external events, in the
+range of a few microseconds.
+
+To address this issue, a mechanism called *interrupt pipelining* turns
+all device IRQs into pseudo-NMIs, only to run NMI-safe interrupt
+handlers from the perspective of the regular kernel activities.
+
+Two-stage IRQ pipeline
+======================
+
+Interrupt pipelining is a lightweight approach based on the
+introduction of a separate, high-priority execution stage for running
+out-of-band interrupt handlers immediately upon IRQ receipt, which
+cannot be delayed by the in-band, regular kernel work even if the
+latter serializes the execution by - seemingly - disabling interrupts.
+
+IRQs which have no handlers in the high priority stage may be deferred
+on the receiving CPU until the out-of-band activity has quiesced on
+that CPU. Eventually, the preempted in-band code can resume normally,
+which may involve handling the deferred interrupts.
+
+In other words, interrupts are flowing down from the out-of-band to
+the in-band interrupt stages, which form a two-stage pipeline for
+prioritizing interrupt delivery.
+
+The runtime context of the out-of-band interrupt handlers is known as
+the *oob stage* of the pipeline, as opposed to the in-band kernel
+activities sitting on the *inband stage*::
+
+                    Out-of-band                 In-band
+                    IRQ handlers()            IRQ handlers()
+               __________   _______________________   ______
+                  .     /  /  .             .     /  /  .
+                  .    /  /   .             .    /  /   .
+                  .   /  /    .             .   /  /    .
+                  ___/  /______________________/  /     .
+     [IRQ] -----> _______________________________/      .
+                  .           .             .           .
+                  .   OOB     .             .   In-band .
+                  .   Stage   .             .   Stage   .
+               _____________________________________________
+
+
+A software core can base its own activities on the oob stage,
+interposing on specific IRQ events, for delivering real-time
+capabilities to a particular set of applications. Meanwhile, the
+regular kernel operations keep going over the in-band stage
+unaffected, only delayed by short preemption times for running the
+out-of-band work.  A generic interface for coupling such a real-time
+core to the kernel is described in the
+:ref:`Documentation/dovetail.rst <Dovetail>`) document.
+
+.. NOTE:: Interrupt pipelining is a partial implementation of [#f2]_,
+          in which an interrupt *stage* is a limited form of an
+          operating system *domain*.
+
+Virtual interrupt flag
+----------------------
+
+.. _flag:
+As hinted earlier, predictable response time of out-of-band handlers
+to IRQ receipts requires the in-band kernel work not to be allowed to
+delay them by masking interrupts in the CPU.
+
+However, critical sections delimited this way by the in-band code must
+still be enforced for the *in-band stage*, so that system integrity is
+not at risk. This means that although out-of-band IRQ handlers may run
+at any time while the *oob stage* is accepting interrupts, in-band IRQ
+handlers should be allowed to run only when the in-band stage is
+accepting interrupts too.
+
+So we need to decouple the interrupt masking and delivery logic which
+applies to the oob stage from the one in effect on the in-band stage,
+by implementing a dual interrupt control.
+
+To this end, a software logic managing a virtual interrupt disable
+flag is introduced by the interrupt pipeline between the hardware and
+the generic IRQ management layer. This logic can mask IRQs from the
+perspective of the regular kernel work when :c:func:`local_irq_save`,
+:c:func:`local_irq_disable` or any lock-controlled masking operations
+like :c:func:`spin_lock_irqsave` is called, while still accepting IRQs
+from the CPU for immediate delivery to out-of-band handlers.
+
+The oob stage protects from interrupts by disabling them in the CPU's
+status register, while the in-band stage disables interrupts only
+virtually. A stage for which interrupts are disabled is said to be
+*stalled*. Conversely, *unstalling* a stage means re-enabling
+interrupts for it.
+
+Obviously, stalling the oob stage implicitly means disabling
+further IRQ receipts for the in-band stage too.
+
+Interrupt deferral for the *in-band stage*
+---------------------------------------
+
+.. _deferral:
+.. _deferred:
+When the in-band stage is stalled because the virtual interrupt disable
+flag is set, any IRQ event which was not immediately delivered to the
+*oob stage* is recorded into a per-CPU log, postponing delivery to
+the regular kernel handler.
+
+Such delivery is deferred until the in-band kernel code clears the
+virtual interrupt disable flag by calling :c:func:`local_irq_enable`
+or any of its variants, which unstalls the in-band stage. When this
+happens, the interrupt state is resynchronized by playing the log,
+firing the in-band handlers for which an IRQ event is pending.
+
+::
+   /* Both stages unstalled on entry */
+   local_irq_save(flags);
+   <IRQx received: no out-of-band handler>
+       (pipeline logs IRQx event)
+   ...
+   local_irq_restore(flags);
+       (pipeline plays IRQx event)
+            handle_IRQx_interrupt();
+
+If the in-band stage is unstalled at the time of the IRQ receipt, the
+in-band handler is immediately invoked, just like with the
+non-pipelined IRQ model.
+
+.. NOTE:: The principle of deferring interrupt delivery based on a
+          software flag coupled to an event log has been originally
+          described as "Optimistic interrupt protection" in [#f1]_.
+
+Device interrupts virtually turned into NMIs
+--------------------------------------------
+
+From the standpoint of the in-band kernel code (i.e. the one running
+over the *in-band* interrupt stage) , the interrupt pipelining logic
+virtually turns all device IRQs into NMIs, for running out-of-band
+handlers.
+
+.. _re-entry:
+For this reason, out-of-band code may generally **NOT** re-enter
+in-band code, for preventing creepy situations like this one::
+
+   /* in-band context */
+   spin_lock_irqsave(&lock, flags);
+      <IRQx received: out-of-band handler installed>
+         handle_oob_event();
+            /* attempted re-entry to in-band from out-of-band. */
+            in_band_routine();
+               spin_lock_irqsave(&lock, flags);
+               <DEADLOCK>
+               ...
+            ...
+         ...
+   ...
+   spin_unlock irqrestore(&lock, flags);
+
+Even in absence of an attempt to get a spinlock recursively, the outer
+in-band code in the example above is entitled to assume that no access
+race can occur on the current CPU while interrupts are
+masked. Re-entering in-band code from an out-of-band handler would
+invalidate this assumption.
+
+In rare cases, we may need to fix up the in-band kernel routines in
+order to allow out-of-band handlers to call them. Typically, atomic_
+helpers are such routines, which serialize in-band and out-of-band
+callers.
+
+Synthetic interrupt vectors
+---------------------------
+
+.. _synthetic:
+The pipeline introduces an additional type of interrupts, which are
+purely software-originated, with no hardware involvement. These IRQs
+can be triggered by any kernel code. Synthetic IRQs are inherently
+per-CPU events.
+
+Because the common pipeline flow_ applies to synthetic interrupts, it
+is possible to attach them to out-of-band and/or in-band handlers,
+just like device interrupts.
+
+.. NOTE:: synthetic interrupts and regular softirqs differ in essence:
+          the latter only exist in the in-band context, and therefore
+          cannot trigger out-of-band activities.
+
+Synthetic interrupt vectors are allocated from the
+*synthetic_irq_domain*, using the :c:func:`irq_create_direct_mapping`
+routine.
+
+For instance, a synthetic interrupt can be used for triggering an
+in-band activity on the in-band stage from the oob stage as follows::
+
+  #include <linux/irq_pipeline.h>
+
+  static irqreturn_t sirq_handler(int sirq, void *dev_id)
+  {
+        do_in_band_work();
+
+        return IRQ_HANDLED;
+  }
+
+  static struct irqaction sirq_action = {
+        .handler = sirq_handler,
+        .name = "In-band synthetic interrupt",
+        .flags = IRQF_NO_THREAD,
+  };
+
+  unsigned int alloc_sirq(void)
+  {
+	unsigned int sirq;
+
+	sirq = irq_create_direct_mapping(synthetic_irq_domain);
+	if (!sirq)
+		return 0;
+
+	setup_percpu_irq(sirq, &sirq_action);
+
+	return sirq;
+  }
+
+Code can schedule the execution of :c:func:`sirq_handler` like this::
+
+  irq_inject_pipeline(sirq);
+
+or, via a lightweight injection method requiring hard IRQs to be
+disabled::
+
+  unsigned long flags = hard_local_irqsave();
+  irq_post_inband(sirq);
+  hard_local_irqrestore(flags);
+
+Conversely, a synthetic interrupt can be handled from the out-of-band
+context::
+
+  static irqreturn_t sirq_oob_handler(int sirq, void *dev_id)
+  {
+        do_out_of_band_work();
+
+        return IRQ_HANDLED;
+  }
+
+  unsigned int alloc_sirq(void)
+  {
+	unsigned int sirq;
+
+	sirq  = irq_create_direct_mapping(synthetic_irq_domain);
+	if (!sirq)
+		return 0;
+
+	ret = __request_percpu_irq(sirq, sirq_oob_handler,
+                                   IRQF_OOB,
+                                   "Out-of-band synthetic interrupt",
+                                   dev_id);
+	if (ret) {
+		irq_dispose_mapping(sirq);
+		return 0;
+	}
+
+	return sirq;
+  }
+
+Code can trigger the immediate execution of :c:func:`sirq_oob_handler`
+on the oob stage as follows::
+
+  irq_inject_pipeline(sirq);
+
+Pipelined interrupt flow
+------------------------
+
+.. _flow:
+When interrupt pipelining is enabled, IRQs are first delivered to
+the pipeline entry point via a call to
+:c:func:`generic_pipeline_irq`::
+
+    asm_irq_entry
+       -> irqchip_handle_irq()
+          -> handle_domain_irq()
+             -> generic_pipeline_irq()
+                -> irq_flow_handler()
+                <IRQ delivery logic>
+
+Contrary to the non-pipelined model, the generic IRQ flow handler does
+*not* call the in-band interrupt handler immediately, but only runs
+the irqchip-specific handler for acknowledging the incoming IRQ event
+in the interrupt controller, before running out-of-band handlers for
+that event if any.
+
+In absence of out-of-band handler for the event, the device may keep
+asserting the interrupt signal until the cause has been lifted in its
+own registers. For this reason, the flow handlers as modified by the
+pipeline code may have to to mask the interrupt line until the in-band
+handler has run from the in-band stage, lifting the interrupt cause. This
+typically happens with level-triggered interrupts. This addresses the
+following scenario, which happens for a similar reason while an IRQ
+thread waits for being scheduled in, requiring the same kind of
+provision::
+
+    /* in-band stage stalled on entry */
+    asm_irq_entry
+       ...
+          -> generic_pipeline_irq()
+             ...
+                <IRQ logged, delivery deferred>
+    asm_irq_exit
+    /*
+     * CPU allowed to accept interrupts again with IRQ cause not
+     * acknowledged in device yet => **IRQ storm**.
+     */
+    asm_irq_entry
+       ...
+    asm_irq_exit
+    asm_irq_entry
+       ...
+    asm_irq_exit
+
+Since all of the IRQ handlers sharing an interrupt line are either
+in-band or out-of-band in a mutually exclusive way, such masking
+cannot delay out-of-band events.
+
+Prerequisites
+=============
+
+The interrupt pipeline requires the following features to be available
+from the target kernel:
+
+- Generic IRQ handling
+- IRQ domains
+- Clock event abstraction
+
+Implementation
+==============
+
+The following kernel areas are involved in interrupt pipelining:
+
+- Generic IRQ core
+
+  * IRQ descriptor management.
+
+    The driver API to the IRQ subsystem exposes the new interrupt type
+    flag `IRQF_OOB`, denoting an out-of-band handler with the
+    :c:func:`setup_irq`, :c:func:`request_irq`, and
+    :c:func:`__request_percpu_irq` routines.
+
+    Support for IRQ domains is a prerequisite for interrupt
+    pipelining. :c:func:`handle_domain_irq` from the IRQ domain
+    interface redirects the interrupt flow to the pipeline entry,
+    represented by the :c:func:`generic_pipeline_irq`
+    routine.
+
+  * IRQ flow handlers
+
+    Generic flow handlers acknowledge the incoming IRQ event in the
+    hardware as usual, by calling the appropriate irqchip routine
+    (e.g. :c:func:`irq_ack`, :c:func:`irq_eoi`). However, the flow_
+    handlers do not immediately invoke the in-band interrupt
+    handlers. Instead, they hand the event over to the pipeline core
+    by calling :c:func:`handle_oob_irq`.
+
+    If an out-of-band handler exists for the interrupt received,
+    :c:func:`handle_oob_irq` invokes it immediately, after switching
+    the execution context to the oob stage if not current yet.
+
+    Otherwise, if the execution context is currently over the in-band
+    stage and unstalled, the pipeline core delivers it immediately to
+    the in-band handler. In all other cases, the interrupt is
+    deferred, marked as pending into the current CPU's event log, then
+    the IRQ frame is left.
+
+  * IRQ work
+
+    .. _irq_work:
+    With interrupt pipelining, a code running over the oob stage
+    could have preempted the in-band stage in the middle of a critical
+    section. For this reason, it would be unsafe to call any
+    in-band routine from an out-of-band context.
+
+    Triggering in-band work handlers from out-of-band code can be done
+    by using :c:func:`irq_work_queue`. The work request issued from
+    the oob stage will be scheduled for running over the in-band
+    stage.
+
+    .. NOTE:: the interrupt pipeline forces the use of a synthetic_
+              IRQ as a notification signal for the IRQ work machinery,
+              instead of a hardware-specific interrupt vector.
+
+  * IRQ pipeline core
+
+- Arch-specific bits
+
+  * CPU interrupt mask handling
+
+    The architecture-specific code which manipulates the interrupt
+    flag in the CPU's state register
+    (i.e. arch/<arch>/include/asm/irqflags.h) is split between real
+    and virtual interrupt control:
+
+    + the *native_* level helpers affect the hardware state in the CPU.
+
+    + the *arch_* level helpers affect the virtual interrupt disable
+      flag_ implemented by the pipeline core for controlling the in-band
+      stage protection against interrupts.
+
+    This means that generic helpers from <linux/irqflags.h> such as
+    :c:func:`local_irq_disable` and :c:func:`local_irq_enable`
+    actually refer to the virtual protection scheme when interrupts
+    are pipelined, implementing interrupt deferral_ for the protected
+    in-band code running over the in-band stage.
+
+  * Assembly-level IRQ, exception paths
+
+    Since interrupts are only virtually masked for the in-band code,
+    IRQs can still be taken by the CPU although they should not be
+    visible from the in-band stage when they happen in the following
+    situations:
+
+    + when the virtual protection flag_ is raised, meaning the in-band
+      stage does not accept IRQs, in which case interrupt _deferral
+      happens.
+
+    + when the CPU runs out-of-band code, regardless of the state of
+      the virtual protection flag.
+
+    In both cases, the low-level assembly code handling incoming IRQs
+    takes a fast exit path unwinding the interrupt frame early,
+    instead of running the common in-band epilogue which checks for
+    task rescheduling opportunities and pending signals.
+
+    Likewise, the low-level fault/exception handling code also takes a
+    fast exit path under the same circumstances. Typically, an
+    out-of-band handler causing a minor page fault should benefit from
+    a lightweight PTE fixup performed by the high-level fault handler,
+    but is not allowed to traverse the rescheduling logic upon return
+    from exception.
+
+- Scheduler core
+
+  * CPUIDLE support
+
+    The logic of the CPUIDLE framework has to account for those
+    specific issues the interrupt pipelining introduces:
+
+    - the kernel might be idle in the sense that no in-band activity
+    is scheduled yet, and planning to shut down the timer device
+    suffering the C3STOP (mis)feature.  However, at the same time,
+    some out-of-band code might wait for a tick event already
+    programmed in the timer hardware they both share via the proxy_
+    clock event device.
+
+    - switching the CPU to a power saving state may incur a
+    significant latency, particularly for waking it up before it can
+    handle an incoming IRQ, which is at odds with the purpose of
+    interrupt pipelining.
+
+    Obviously, we don't want the CPUIDLE logic to turn off the
+    hardware timer when C3STOP is in effect for the timer device,
+    which would cause the pending out-of-band event to be
+    lost.
+
+    Likewise, the wake up latency induced by entering a sleep state on
+    a particular hardware may not always be acceptable.
+
+    Since the in-band kernel code does not know about the out-of-band
+    code plans by design, CPUIDLE calls :c:func:`irq_cpuidle_control`
+    to figure out whether the out-of-band system is fine with entering
+    the idle state as well.  This routine should be overriden by the
+    out-of-band code for receiving such notification (*__weak*
+    binding).
+
+    If this hook returns a boolean *true* value, CPUIDLE proceeds as
+    normally. Otherwise, the CPU is simply denied from entering the
+    idle state, leaving the timer hardware enabled.
+
+    ..CAUTION:: If some out-of-band code waiting for an external event
+    cannot bear with the latency that might be induced by the default
+    architecture-specific CPU idling code, then CPUIDLE is not usable
+    and should be disabled at build time.
+
+  * Kernel preemption control (PREEMPT)
+
+    :c:func:`preempt_schedule_irq` reconciles the virtual interrupt
+    state - which has not been touched by the assembly level code upon
+    kernel entry - with basic assumptions made by the scheduler core,
+    such as entering with interrupts disabled.
+
+- Timer management
+
+  * Proxy tick device
+
+.. _proxy:
+    The proxy tick device is a synthetic clock event device for
+    handing over control of the hardware tick device in use by the
+    kernel to an out-of-band timing logic.
+
+    With this proxy in place, the out-of-band code must carry out the
+    timing requests from the in-band timer core (i.e. hrtimers) in
+    addition to its own timing duties.
+
+    In other words, the proxy tick device shares the functionality of
+    the actual device between the in-band and out-of-band contexts,
+    with only the latter actually programming the hardware.
+
+- Generic locking & atomic
+
+  * Generic atomic ops
+
+.. _atomic:
+    The effect of virtualizing interrupt protection must be reversed
+    for atomic helpers in <asm-generic/{atomic|bitops/atomic}.h> and
+    <asm-generic/cmpxchg-local.h>, so that no interrupt can preempt
+    their execution, regardless of the stage their caller live
+    on.
+
+    This is required to keep those helpers usable on data which
+    might be accessed concurrently from both stages.
+
+    The usual way to revert such virtualization consists of delimiting
+    the protected section with :c:func:`hard_local_irq_save`,
+    :c:func:`hard_local_irq_restore` calls, in replacement for
+    :c:func:`local_irq_save`, :c:func:`local_irq_restore`
+    respectively.
+
+  * Mutable and hard spinlocks
+
+    .. _spinlocks:
+    The pipeline core introduces two spinlock types:
+
+    + *hard* spinlocks manipulate the CPU interrupt mask, and don't
+      affect the kernel preemption state in locking/unlocking
+      operations.
+
+      This type of spinlock is useful for implementing a critical
+      section to serialize concurrent accesses from both in-band and
+      out-of-band contexts, i.e. from in-band and oob stages. Obviously,
+      sleeping into a critical section protected by a hard spinlock
+      would be a very bad idea.
+
+      In other words, hard spinlocks are not subject to virtual
+      interrupt disabling, therefore can be used to serialize with
+      out-of-band activities, including from the in-band kernel
+      code. At any rate, those sections ought to be quite short, for
+      keeping latency low.
+
+   + Mutable spinlocks are used internally by the pipeline core to
+     protect access to IRQ descriptors (`struct irq_desc::lock`), so
+     that we can keep the original locking scheme of the generic IRQ
+     core unmodified for handling out-of-band interrupts.
+
+     Mutable spinlocks behave like *hard* spinlocks when traversed by
+     the low-level IRQ handling code on entry to the pipeline, or
+     common *raw* spinlocks otherwise, preserving the kernel
+     (virtualized) interrupt and preemption states as perceived by the
+     in-band context. This type of lock is not meant to be used in any
+     other situation.
+
+  * Lockdep
+
+    The lock validator automatically reconciles the real and virtual
+    interrupt states, so it can deliver proper diagnosis for locking
+    constructs defined in both in-band and out-of-band contexts.
+
+    This means that *hard* and *mutable* spinlocks_ are included in
+    the validation set when LOCKDEP is enabled.
+
+  .. CAUTION:: These two additional types are subject to LOCKDEP
+                analysis. However, be aware that latency figures are
+                likely to be really **bad** when LOCKDEP is enabled,
+                due to the large amount of work the lock validator may
+                have to do while critical sections are being enforced
+                by disabling interrupts in the CPU.
+
+- Drivers
+
+  * IRQ chip drivers
+
+    .. _irqchip:
+    `irqchip` drivers need to be specifically adapted for supporting the
+    pipelined interrupt model. The basic task is to ensure that the
+    following `struct irq_chip` handlers can be called from an
+    out-of-band context safely when defined for the interrupt
+    controller: :c:func:`irq_mask`, :c:func:`irq_ack`,
+    :c:func:`irq_mask_ack`, :c:func:`irq_eoi`, :c:func:`irq_unmask`.
+
+    Such handler is deemed safe to be called from out-of-band context
+    when it does not invoke **any** regular kernel service, which
+    might cause an invalid in-band context re-entry_.
+
+    The generic IRQ management core serializes calls to `irqchip`
+    handlers for a given IRQ by serializing access to its interrupt
+    descriptor, acquiring the per-descriptor `irq_desc::lock`
+    spinlock.  Holding `irq_desc::lock` when running a handler for any
+    IRQ shared between all CPUs ensures that a single CPU handles the
+    event.
+
+    In addition, there might be inner spinlocks defined by some
+    `irqchip` drivers for serializing handlers accessing a common
+    interrupt controller hardware for _distinct_ IRQs from multiple
+    CPUs concurrently.  Adapting the `irqchip` driver to support
+    interrupt pipelining may involve converting those spinlocks hard
+    spinlocks_.
+
+    .. CAUTION:: switching to hard spinlocks_ should involve a careful
+                 review of any section in the `irqchip` driver
+                 serializing execution with such spinlock. Any such
+                 section would then have the same requirement about
+                 not calling any regular kernel service, and be short
+                 enough to keep interrupt latency figures low.
+
+    Other section of code which were originally serialized by common
+    interrupt disabling may need to be made fully atomic_ for running
+    consistenly in pipelined interrupt mode. This can be done by
+    introducing hard masking with :c:func:`hard_local_irq_save()`,
+    :c:func:`hard_local_irq_restore()`.
+
+    Finally, `IRQCHIP_PIPELINE_SAFE` must be added to `struct
+    irqchip::flags` member of a pipeline-aware `irqchip` driver, in
+    order to notify the kernel that such controller can operate in
+    pipelined interrupt mode.
+
+    .. NOTE:: :c:func:`irq_set_chip` will complain loudly with a
+              kernel warning whenever the `irqchip` descriptor passed
+              does not bear the `IRQCHIP_PIPELINE_SAFE` flag and
+              CONFIG_IRQ_PIPELINE is enabled.
+
+  * Clock event devices
+
+    Clock chip devices which may be controlled by the proxy tick
+    device need their drivers to be specifically adapted for such use:
+
+    + :c:func:`clockevents_handle_event` must be used to invoke the
+      event handler from the interrupt handler, instead of
+      dereferencing `struct clock_event_device::event_handler`
+      directly.
+
+    + `struct clock_event_device::irq` must be properly set to the
+      actual IRQ number signaling an event from this device.
+
+    + `struct clock_event_device::features` must include
+      `CLOCK_EVT_FEAT_PIPELINE`.
+
+    + `__IRQF_TIMER` must be set for the action handler of the timer
+       device interrupt.
+
+    .. CAUTION:: only oneshot-capable clock event devices can be
+                 shared via the proxy tick device.
+
+- Misc
+
+  * :c:func:`printk`
+
+    :c:func:`printk` may be called by out-of-band code safely, without
+    encurring extra latency. The output is conveyed like
+    NMI-originated output, which involves some delay until the in-band
+    code resumes, and the console driver(s) can handle it.
+
+  * Tracing core
+
+    Tracepoints can be traversed by out-of-band code safely. Dynamic
+    tracing is available to a kernel running the pipelined interrupt
+    model too.
+
+Terminology
+===========
+
+.. _terminology:
+======================   =======================================================
+    Term                                       Definition
+======================   =======================================================
+OOB stage                high-priority execution context trigged by out-of-band IRQs
+In-band stage            regular execution context performing GPOS work
+Out-of-band code         code running over the oob stage
+In-band code             code running over the in-band stage
+
+
+Resources
+=========
+
+.. [#f1] Stodolsky, Chen & Bershad; "Fast Interrupt Priority Management in Operating System Kernels"
+    https://www.usenix.org/legacy/publications/library/proceedings/micro93/full_papers/stodolsky.txt
+.. [#f2] Yaghmour, Karim; "ADEOS - Adaptive Domain Environment for Operating Systems"
+    https://www.opersys.com/ftp/pub/Adeos/adeos.pdf
diff --git a/arch/Kconfig b/arch/Kconfig
index 5f8a5d84dbbe..1a4733f30cd4 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -201,6 +201,9 @@ config HAVE_FUNCTION_ERROR_INJECTION
 config HAVE_NMI
 	bool
 
+config HAVE_PERCPU_PREEMPT_COUNT
+	bool
+
 #
 # An arch should select this if it provides all these things:
 #
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 8a50efb559f3..5586d6484e03 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -285,6 +285,8 @@ config PGTABLE_LEVELS
 	default 3 if ARM_LPAE
 	default 2
 
+source "kernel/Kconfig.evl"
+
 menu "System Type"
 
 config MMU
@@ -580,6 +582,12 @@ config ARCH_MULTI_V7
 config ARCH_MULTI_V6_V7
 	bool
 	select MIGHT_HAVE_CACHE_L2X0
+	select HAVE_IRQ_PIPELINE
+	select HAVE_DOVETAIL if CPU_HAS_ASID
+	select HAVE_ARCH_EVL
+	select WARN_CPUFREQ_GOVERNOR if CPU_FREQ && \
+	       !(CPU_FREQ_DEFAULT_GOV_PERFORMANCE || \
+	        CPU_FREQ_DEFAULT_GOV_POWERSAVE)
 
 config ARCH_MULTI_CPU_AUTO
 	def_bool !(ARCH_MULTI_V4 || ARCH_MULTI_V4T || ARCH_MULTI_V6_V7)
@@ -1238,6 +1246,8 @@ config SCHED_SMT
 	  MultiThreading at a cost of slightly increased overhead in some
 	  places. If unsure say N here.
 
+source "kernel/Kconfig.dovetail"
+
 config HAVE_ARM_SCU
 	bool
 	help
diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index db857d07114f..a68789988823 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -271,6 +271,10 @@ KBUILD_CPPFLAGS += $(patsubst %,-I$(srctree)/%include,$(machdirs) $(platdirs))
 endif
 endif
 
+ifeq ($(CONFIG_EVL),y)
+KBUILD_CFLAGS += -Iarch/$(SRCARCH)/evl/include -Iinclude/evl
+endif
+
 export	TEXT_OFFSET GZFLAGS MMUEXT
 
 core-$(CONFIG_FPE_NWFPE)	+= arch/arm/nwfpe/
diff --git a/arch/arm/include/asm/assembler.h b/arch/arm/include/asm/assembler.h
index 99929122dad7..b6e57ed31382 100644
--- a/arch/arm/include/asm/assembler.h
+++ b/arch/arm/include/asm/assembler.h
@@ -107,6 +107,18 @@
 	.endm
 #endif
 
+	.macro  disable_irq_if_pipelined
+#ifdef CONFIG_IRQ_PIPELINE
+	disable_irq_notrace
+#endif
+	.endm
+
+	.macro  enable_irq_if_pipelined
+#ifdef CONFIG_IRQ_PIPELINE
+	enable_irq_notrace
+#endif
+	.endm
+
 	.macro asm_trace_hardirqs_off, save=1
 #if defined(CONFIG_TRACE_IRQFLAGS)
 	.if \save
diff --git a/arch/arm/include/asm/atomic.h b/arch/arm/include/asm/atomic.h
index 75bb2c543e59..57665cc84942 100644
--- a/arch/arm/include/asm/atomic.h
+++ b/arch/arm/include/asm/atomic.h
@@ -166,9 +166,9 @@ static inline void atomic_##op(int i, atomic_t *v)			\
 {									\
 	unsigned long flags;						\
 									\
-	raw_local_irq_save(flags);					\
+	flags = hard_local_irq_save();					\
 	v->counter c_op i;						\
-	raw_local_irq_restore(flags);					\
+	hard_local_irq_restore(flags);					\
 }									\
 
 #define ATOMIC_OP_RETURN(op, c_op, asm_op)				\
@@ -177,10 +177,10 @@ static inline int atomic_##op##_return(int i, atomic_t *v)		\
 	unsigned long flags;						\
 	int val;							\
 									\
-	raw_local_irq_save(flags);					\
+	flags = hard_local_irq_save();					\
 	v->counter c_op i;						\
 	val = v->counter;						\
-	raw_local_irq_restore(flags);					\
+	hard_local_irq_restore(flags);					\
 									\
 	return val;							\
 }
@@ -191,10 +191,10 @@ static inline int atomic_fetch_##op(int i, atomic_t *v)			\
 	unsigned long flags;						\
 	int val;							\
 									\
-	raw_local_irq_save(flags);					\
+	flags = hard_local_irq_save();					\
 	val = v->counter;						\
 	v->counter c_op i;						\
-	raw_local_irq_restore(flags);					\
+	hard_local_irq_restore(flags);					\
 									\
 	return val;							\
 }
@@ -204,11 +204,11 @@ static inline int atomic_cmpxchg(atomic_t *v, int old, int new)
 	int ret;
 	unsigned long flags;
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	ret = v->counter;
 	if (likely(ret == old))
 		v->counter = new;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return ret;
 }
diff --git a/arch/arm/include/asm/bitops.h b/arch/arm/include/asm/bitops.h
index c92e42a5c8f7..9779f321b7dd 100644
--- a/arch/arm/include/asm/bitops.h
+++ b/arch/arm/include/asm/bitops.h
@@ -40,9 +40,9 @@ static inline void ____atomic_set_bit(unsigned int bit, volatile unsigned long *
 
 	p += BIT_WORD(bit);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	*p |= mask;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline void ____atomic_clear_bit(unsigned int bit, volatile unsigned long *p)
@@ -52,9 +52,9 @@ static inline void ____atomic_clear_bit(unsigned int bit, volatile unsigned long
 
 	p += BIT_WORD(bit);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	*p &= ~mask;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline void ____atomic_change_bit(unsigned int bit, volatile unsigned long *p)
@@ -64,9 +64,9 @@ static inline void ____atomic_change_bit(unsigned int bit, volatile unsigned lon
 
 	p += BIT_WORD(bit);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	*p ^= mask;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline int
@@ -78,10 +78,10 @@ ____atomic_test_and_set_bit(unsigned int bit, volatile unsigned long *p)
 
 	p += BIT_WORD(bit);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	res = *p;
 	*p = res | mask;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return (res & mask) != 0;
 }
@@ -95,10 +95,10 @@ ____atomic_test_and_clear_bit(unsigned int bit, volatile unsigned long *p)
 
 	p += BIT_WORD(bit);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	res = *p;
 	*p = res & ~mask;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return (res & mask) != 0;
 }
@@ -112,10 +112,10 @@ ____atomic_test_and_change_bit(unsigned int bit, volatile unsigned long *p)
 
 	p += BIT_WORD(bit);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	res = *p;
 	*p = res ^ mask;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return (res & mask) != 0;
 }
diff --git a/arch/arm/include/asm/clocksource.h b/arch/arm/include/asm/clocksource.h
index 0b350a7e26f3..ceb2048a2846 100644
--- a/arch/arm/include/asm/clocksource.h
+++ b/arch/arm/include/asm/clocksource.h
@@ -1,8 +1,16 @@
 #ifndef _ASM_CLOCKSOURCE_H
 #define _ASM_CLOCKSOURCE_H
 
+enum arch_clock_uaccess_type {
+	ARM_CLOCK_NONE = 0,
+	ARM_CLOCK_ARCH_TIMER,
+
+	ARM_CLOCK_USER_MMIO_BASE, /* Must remain last */
+};
+
 struct arch_clocksource_data {
 	bool vdso_direct;	/* Usable for direct VDSO access? */
+	enum arch_clock_uaccess_type clock_type;
 };
 
 #endif
diff --git a/arch/arm/include/asm/cmpxchg.h b/arch/arm/include/asm/cmpxchg.h
index 8b701f8e175c..60ccad3c936f 100644
--- a/arch/arm/include/asm/cmpxchg.h
+++ b/arch/arm/include/asm/cmpxchg.h
@@ -77,17 +77,17 @@ static inline unsigned long __xchg(unsigned long x, volatile void *ptr, int size
 #error SMP is not supported on this platform
 #endif
 	case 1:
-		raw_local_irq_save(flags);
+		flags = hard_local_irq_save();
 		ret = *(volatile unsigned char *)ptr;
 		*(volatile unsigned char *)ptr = x;
-		raw_local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		break;
 
 	case 4:
-		raw_local_irq_save(flags);
+		flags = hard_local_irq_save();
 		ret = *(volatile unsigned long *)ptr;
 		*(volatile unsigned long *)ptr = x;
-		raw_local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		break;
 #else
 	case 1:
diff --git a/arch/arm/include/asm/dovetail.h b/arch/arm/include/asm/dovetail.h
new file mode 100644
index 000000000000..6b975d0ca6d6
--- /dev/null
+++ b/arch/arm/include/asm/dovetail.h
@@ -0,0 +1,30 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum.
+ */
+#ifndef _ASM_ARM_DOVETAIL_H
+#define _ASM_ARM_DOVETAIL_H
+
+/* ARM traps */
+#define ARM_TRAP_ACCESS		0	/* Data or instruction access exception */
+#define ARM_TRAP_SECTION	1	/* Section fault */
+#define ARM_TRAP_DABT		2	/* Generic data abort */
+#define ARM_TRAP_PABT		3	/* Prefetch abort */
+#define ARM_TRAP_BREAK		4	/* Instruction breakpoint */
+#define ARM_TRAP_FPU		5	/* Floating point exception */
+#define ARM_TRAP_VFP		6	/* VFP floating point exception */
+#define ARM_TRAP_UNDEFINSTR	7	/* Undefined instruction */
+#define ARM_TRAP_ALIGNMENT	8	/* Unaligned access exception */
+
+#ifndef __ASSEMBLY__
+
+static inline void arch_dovetail_switch_prepare(bool leave_inband)
+{ }
+
+static inline void arch_dovetail_switch_finish(bool enter_inband)
+{ }
+
+#endif
+
+#endif /* _ASM_ARM_DOVETAIL_H */
diff --git a/arch/arm/include/asm/efi.h b/arch/arm/include/asm/efi.h
index 7667826b93f1..40c33fd846f1 100644
--- a/arch/arm/include/asm/efi.h
+++ b/arch/arm/include/asm/efi.h
@@ -38,7 +38,11 @@ int efi_set_mapping_permissions(struct mm_struct *mm, efi_memory_desc_t *md);
 
 static inline void efi_set_pgd(struct mm_struct *mm)
 {
+	unsigned long flags;
+
+	protect_inband_mm(flags);
 	check_and_switch_context(mm, NULL);
+	unprotect_inband_mm(flags);
 }
 
 void efi_virtmap_load(void);
diff --git a/arch/arm/include/asm/evl/fptest.h b/arch/arm/include/asm/evl/fptest.h
new file mode 100644
index 000000000000..e581304727e2
--- /dev/null
+++ b/arch/arm/include/asm/evl/fptest.h
@@ -0,0 +1,25 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_ARM_ASM_FPTEST_H
+#define _EVL_ARM_ASM_FPTEST_H
+
+#include <linux/cpufeature.h>
+#include <uapi/asm/evl/fptest.h>
+
+static inline bool evl_begin_fpu(void)
+{
+	return false;
+}
+
+static inline void evl_end_fpu(void) { }
+
+static inline u32 evl_detect_fpu(void)
+{
+	u32 features = 0;
+
+	if (elf_hwcap & HWCAP_VFP)
+		return features |= evl_arm_vfp;
+
+	return features;
+}
+
+#endif /* _EVL_ARM_ASM_FPTEST_H */
diff --git a/arch/arm/include/asm/evl/syscall.h b/arch/arm/include/asm/evl/syscall.h
new file mode 100644
index 000000000000..0c0727dfe87f
--- /dev/null
+++ b/arch/arm/include/asm/evl/syscall.h
@@ -0,0 +1,46 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _EVL_ARM_ASM_SYSCALL_H
+#define _EVL_ARM_ASM_SYSCALL_H
+
+#include <linux/uaccess.h>
+#include <asm/unistd.h>
+#include <asm/ptrace.h>
+#include <asm/syscall.h>
+#include <uapi/asm/dovetail.h>
+
+#define raw_put_user(src, dst)  __put_user(src, dst)
+#define raw_get_user(dst, src)  __get_user(dst, src)
+
+#define is_oob_syscall(__regs)	((__regs)->ARM_r7 == __ARM_NR_dovetail)
+#define oob_syscall_nr(__regs)	((__regs)->ARM_ORIG_r0)
+
+#define oob_retval(__regs)	((__regs)->ARM_r0)
+#define oob_arg1(__regs)	((__regs)->ARM_r1)
+#define oob_arg2(__regs)	((__regs)->ARM_r2)
+#define oob_arg3(__regs)	((__regs)->ARM_r3)
+#define oob_arg4(__regs)	((__regs)->ARM_r4)
+#define oob_arg5(__regs)	((__regs)->ARM_r5)
+
+/*
+ * Fetch and test inband syscall number (valid only if
+ * !is_oob_syscall(__regs)).
+ */
+#define inband_syscall_nr(__regs, __nr)					\
+	({								\
+		*(__nr) = (__regs)->ARM_r7;				\
+		*(__nr) < NR_syscalls || *(__nr) >= __ARM_NR_BASE;	\
+	})
+
+static inline void
+set_oob_error(struct pt_regs *regs, int err)
+{
+	oob_retval(regs) = err;
+}
+
+static inline
+void set_oob_retval(struct pt_regs *regs, long ret)
+{
+	oob_retval(regs) = ret;
+}
+
+#endif /* !_EVL_ARM_ASM_SYSCALL_H */
diff --git a/arch/arm/include/asm/evl/thread.h b/arch/arm/include/asm/evl/thread.h
new file mode 100644
index 000000000000..393aa65a461a
--- /dev/null
+++ b/arch/arm/include/asm/evl/thread.h
@@ -0,0 +1,13 @@
+/*
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2005 Stelian Pop
+ */
+#ifndef _EVL_ARM_ASM_THREAD_H
+#define _EVL_ARM_ASM_THREAD_H
+
+static inline bool evl_is_breakpoint(int trapnr)
+{
+	return trapnr == ARM_TRAP_BREAK || trapnr == ARM_TRAP_UNDEFINSTR;
+}
+
+#endif /* !_EVL_ARM_ASM_THREAD_H */
diff --git a/arch/arm/include/asm/irq_pipeline.h b/arch/arm/include/asm/irq_pipeline.h
new file mode 100644
index 000000000000..ae1173e73ebc
--- /dev/null
+++ b/arch/arm/include/asm/irq_pipeline.h
@@ -0,0 +1,126 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef _ASM_ARM_IRQ_PIPELINE_H
+#define _ASM_ARM_IRQ_PIPELINE_H
+
+#include <asm-generic/irq_pipeline.h>
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+/*
+ * Out-of-band IPIs are directly mapped to SGI1-2, instead of
+ * multiplexed over SGI0 like regular in-band messages.
+ */
+#define INBAND_NR_IPI		(NR_IPI + 1) /* +IPI_CPU_BACKTRACE */
+#define OOB_IPI_BASE		2048
+#define OOB_NR_IPI		2
+#define TIMER_OOB_IPI		(OOB_IPI_BASE + INBAND_NR_IPI)
+#define RESCHEDULE_OOB_IPI	(OOB_IPI_BASE + INBAND_NR_IPI + 1)
+
+static inline notrace
+unsigned long arch_irqs_virtual_to_native_flags(int stalled)
+{
+	return (!!stalled) << IRQMASK_I_POS;
+}
+
+static inline notrace
+unsigned long arch_irqs_native_to_virtual_flags(unsigned long flags)
+{
+	return (!!hard_irqs_disabled_flags(flags)) << IRQMASK_i_POS;
+}
+
+static inline notrace unsigned long arch_local_irq_save(void)
+{
+	int stalled = inband_irq_save();
+	barrier();
+	return arch_irqs_virtual_to_native_flags(stalled);
+}
+
+static inline notrace void arch_local_irq_enable(void)
+{
+	barrier();
+	inband_irq_enable();
+}
+
+static inline notrace void arch_local_irq_disable(void)
+{
+	inband_irq_disable();
+	barrier();
+}
+
+static inline notrace unsigned long arch_local_save_flags(void)
+{
+	int stalled = inband_irqs_disabled();
+	barrier();
+	return arch_irqs_virtual_to_native_flags(stalled);
+}
+
+static inline int arch_irqs_disabled_flags(unsigned long flags)
+{
+	return native_irqs_disabled_flags(flags);
+}
+
+static inline notrace void arch_local_irq_restore(unsigned long flags)
+{
+	inband_irq_restore(arch_irqs_disabled_flags(flags));
+	barrier();
+}
+
+static inline
+void arch_save_timer_regs(struct pt_regs *dst,
+			  struct pt_regs *src, bool head_context)
+{
+	dst->ARM_cpsr = src->ARM_cpsr;
+	dst->ARM_pc = src->ARM_pc;
+	if (head_context)
+		dst->ARM_cpsr |= IRQMASK_I_BIT;
+}
+
+static inline bool arch_steal_pipelined_tick(struct pt_regs *regs)
+{
+	return !!(regs->ARM_cpsr & IRQMASK_I_BIT);
+}
+
+static inline int arch_enable_oob_stage(void)
+{
+	return 0;
+}
+
+#else /* !CONFIG_IRQ_PIPELINE */
+
+static inline unsigned long arch_local_irq_save(void)
+{
+	return native_irq_save();
+}
+
+static inline void arch_local_irq_enable(void)
+{
+	native_irq_enable();
+}
+
+static inline void arch_local_irq_disable(void)
+{
+	native_irq_disable();
+}
+
+static inline unsigned long arch_local_save_flags(void)
+{
+	return native_save_flags();
+}
+
+static inline void arch_local_irq_restore(unsigned long flags)
+{
+	native_irq_restore(flags);
+}
+
+static inline int arch_irqs_disabled_flags(unsigned long flags)
+{
+	return native_irqs_disabled_flags(flags);
+}
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
+#endif /* _ASM_ARM_IRQ_PIPELINE_H */
diff --git a/arch/arm/include/asm/irqflags.h b/arch/arm/include/asm/irqflags.h
index aeec7f24eb75..a51be113176c 100644
--- a/arch/arm/include/asm/irqflags.h
+++ b/arch/arm/include/asm/irqflags.h
@@ -13,41 +13,44 @@
 #define IRQMASK_REG_NAME_R "primask"
 #define IRQMASK_REG_NAME_W "primask"
 #define IRQMASK_I_BIT	1
+#define IRQMASK_I_POS	0
 #else
 #define IRQMASK_REG_NAME_R "cpsr"
 #define IRQMASK_REG_NAME_W "cpsr_c"
 #define IRQMASK_I_BIT	PSR_I_BIT
+#define IRQMASK_I_POS	7
 #endif
+#define IRQMASK_i_POS	31
 
 #if __LINUX_ARM_ARCH__ >= 6
 
 #define arch_local_irq_save arch_local_irq_save
-static inline unsigned long arch_local_irq_save(void)
+static inline unsigned long native_irq_save(void)
 {
 	unsigned long flags;
 
 	asm volatile(
-		"	mrs	%0, " IRQMASK_REG_NAME_R "	@ arch_local_irq_save\n"
+		"	mrs	%0, " IRQMASK_REG_NAME_R "	@ native_irq_save\n"
 		"	cpsid	i"
 		: "=r" (flags) : : "memory", "cc");
 	return flags;
 }
 
 #define arch_local_irq_enable arch_local_irq_enable
-static inline void arch_local_irq_enable(void)
+static inline void native_irq_enable(void)
 {
 	asm volatile(
-		"	cpsie i			@ arch_local_irq_enable"
+		"	cpsie i			@ native_irq_enable"
 		:
 		:
 		: "memory", "cc");
 }
 
 #define arch_local_irq_disable arch_local_irq_disable
-static inline void arch_local_irq_disable(void)
+static inline void native_irq_disable(void)
 {
 	asm volatile(
-		"	cpsid i			@ arch_local_irq_disable"
+		"	cpsid i			@ native_irq_disable"
 		:
 		:
 		: "memory", "cc");
@@ -69,12 +72,12 @@ static inline void arch_local_irq_disable(void)
  * Save the current interrupt enable state & disable IRQs
  */
 #define arch_local_irq_save arch_local_irq_save
-static inline unsigned long arch_local_irq_save(void)
+static inline unsigned long native_irq_save(void)
 {
 	unsigned long flags, temp;
 
 	asm volatile(
-		"	mrs	%0, cpsr	@ arch_local_irq_save\n"
+		"	mrs	%0, cpsr	@ native_irq_save\n"
 		"	orr	%1, %0, #128\n"
 		"	msr	cpsr_c, %1"
 		: "=r" (flags), "=r" (temp)
@@ -87,11 +90,11 @@ static inline unsigned long arch_local_irq_save(void)
  * Enable IRQs
  */
 #define arch_local_irq_enable arch_local_irq_enable
-static inline void arch_local_irq_enable(void)
+static inline void native_irq_enable(void)
 {
 	unsigned long temp;
 	asm volatile(
-		"	mrs	%0, cpsr	@ arch_local_irq_enable\n"
+		"	mrs	%0, cpsr	@ native_irq_enable\n"
 		"	bic	%0, %0, #128\n"
 		"	msr	cpsr_c, %0"
 		: "=r" (temp)
@@ -103,11 +106,11 @@ static inline void arch_local_irq_enable(void)
  * Disable IRQs
  */
 #define arch_local_irq_disable arch_local_irq_disable
-static inline void arch_local_irq_disable(void)
+static inline void native_irq_disable(void)
 {
 	unsigned long temp;
 	asm volatile(
-		"	mrs	%0, cpsr	@ arch_local_irq_disable\n"
+		"	mrs	%0, cpsr	@ native_irq_disable\n"
 		"	orr	%0, %0, #128\n"
 		"	msr	cpsr_c, %0"
 		: "=r" (temp)
@@ -149,15 +152,22 @@ static inline void arch_local_irq_disable(void)
 #define local_abt_disable()	do { } while (0)
 #endif
 
+static inline void native_irq_sync(void)
+{
+	native_irq_enable();
+	isb();
+	native_irq_disable();
+}
+
 /*
  * Save the current interrupt enable state.
  */
 #define arch_local_save_flags arch_local_save_flags
-static inline unsigned long arch_local_save_flags(void)
+static inline unsigned long native_save_flags(void)
 {
 	unsigned long flags;
 	asm volatile(
-		"	mrs	%0, " IRQMASK_REG_NAME_R "	@ local_save_flags"
+		"	mrs	%0, " IRQMASK_REG_NAME_R "	@ native_save_flags"
 		: "=r" (flags) : : "memory", "cc");
 	return flags;
 }
@@ -166,21 +176,28 @@ static inline unsigned long arch_local_save_flags(void)
  * restore saved IRQ & FIQ state
  */
 #define arch_local_irq_restore arch_local_irq_restore
-static inline void arch_local_irq_restore(unsigned long flags)
+static inline void native_irq_restore(unsigned long flags)
 {
 	asm volatile(
-		"	msr	" IRQMASK_REG_NAME_W ", %0	@ local_irq_restore"
+		"	msr	" IRQMASK_REG_NAME_W ", %0	@ native_irq_restore"
 		:
 		: "r" (flags)
 		: "memory", "cc");
 }
 
 #define arch_irqs_disabled_flags arch_irqs_disabled_flags
-static inline int arch_irqs_disabled_flags(unsigned long flags)
+static inline int native_irqs_disabled_flags(unsigned long flags)
 {
 	return flags & IRQMASK_I_BIT;
 }
 
+static inline bool native_irqs_disabled(void)
+{
+	unsigned long flags = native_save_flags();
+	return native_irqs_disabled_flags(flags);
+}
+
+#include <asm/irq_pipeline.h>
 #include <asm-generic/irqflags.h>
 
 #endif /* ifdef __KERNEL__ */
diff --git a/arch/arm/include/asm/mmu_context.h b/arch/arm/include/asm/mmu_context.h
index f99ed524fe41..08103f884766 100644
--- a/arch/arm/include/asm/mmu_context.h
+++ b/arch/arm/include/asm/mmu_context.h
@@ -72,6 +72,7 @@ static inline void check_and_switch_context(struct mm_struct *mm,
 static inline void finish_arch_post_lock_switch(void)
 {
 	struct mm_struct *mm = current->mm;
+	unsigned long flags;
 
 	if (mm && mm->context.switch_pending) {
 		/*
@@ -83,7 +84,9 @@ static inline void finish_arch_post_lock_switch(void)
 		preempt_disable();
 		if (mm->context.switch_pending) {
 			mm->context.switch_pending = 0;
+			protect_inband_mm(flags);
 			cpu_switch_mm(mm->pgd, mm);
+			unprotect_inband_mm(flags);
 		}
 		preempt_enable_no_resched();
 	}
@@ -102,7 +105,7 @@ init_new_context(struct task_struct *tsk, struct mm_struct *mm)
 #endif	/* CONFIG_CPU_HAS_ASID */
 
 #define destroy_context(mm)		do { } while(0)
-#define activate_mm(prev,next)		switch_mm(prev, next, NULL)
+#define activate_mm(prev,next)		__switch_mm(prev, next, NULL)
 
 /*
  * This is called when "tsk" is about to enter lazy TLB mode.
@@ -118,15 +121,9 @@ enter_lazy_tlb(struct mm_struct *mm, struct task_struct *tsk)
 {
 }
 
-/*
- * This is the actual mm switch as far as the scheduler
- * is concerned.  No registers are touched.  We avoid
- * calling the CPU specific function when the mm hasn't
- * actually changed.
- */
 static inline void
-switch_mm(struct mm_struct *prev, struct mm_struct *next,
-	  struct task_struct *tsk)
+__switch_mm(struct mm_struct *prev, struct mm_struct *next,
+	    struct task_struct *tsk)
 {
 #ifdef CONFIG_MMU
 	unsigned int cpu = smp_processor_id();
@@ -149,6 +146,30 @@ switch_mm(struct mm_struct *prev, struct mm_struct *next,
 #endif
 }
 
+/*
+ * This is the actual mm switch as far as the scheduler
+ * is concerned.  No registers are touched.  We avoid
+ * calling the CPU specific function when the mm hasn't
+ * actually changed.
+ */
+static inline void
+switch_mm(struct mm_struct *prev, struct mm_struct *next,
+	  struct task_struct *tsk)
+{
+	unsigned long flags;
+
+	protect_inband_mm(flags);
+	__switch_mm(prev, next, tsk);
+	unprotect_inband_mm(flags);
+}
+
 #define deactivate_mm(tsk,mm)	do { } while (0)
 
+static inline void
+switch_oob_mm(struct mm_struct *prev, struct mm_struct *next,
+	      struct task_struct *tsk)
+{
+	__switch_mm(prev, next, tsk);
+}
+
 #endif
diff --git a/arch/arm/include/asm/smp.h b/arch/arm/include/asm/smp.h
index a91f21e3c5b5..b386dc840ed4 100644
--- a/arch/arm/include/asm/smp.h
+++ b/arch/arm/include/asm/smp.h
@@ -30,10 +30,15 @@ extern void show_ipi_list(struct seq_file *, int);
 asmlinkage void do_IPI(int ipinr, struct pt_regs *regs);
 
 /*
- * Called from C code, this handles an IPI.
+ * Called from C code, this handles an IPI (including oob).
  */
 void handle_IPI(int ipinr, struct pt_regs *regs);
 
+/*
+ * Handles IPIs for the in-band stage exclusively.
+ */
+void __handle_IPI(int ipinr, struct pt_regs *regs);
+
 /*
  * Setup the set of possible CPUs (via set_cpu_possible)
  */
@@ -45,6 +50,11 @@ extern void smp_init_cpus(void);
  */
 extern void set_smp_cross_call(void (*)(const struct cpumask *, unsigned int));
 
+/*
+ * Raise an IPI.
+ */
+void smp_cross_call(const struct cpumask *target, unsigned int ipinr);
+
 /*
  * Called from platform specific assembly code, this is the
  * secondary CPU entry point.
diff --git a/arch/arm/include/asm/thread_info.h b/arch/arm/include/asm/thread_info.h
index 0d0d5178e2c3..d1469e7f01d3 100644
--- a/arch/arm/include/asm/thread_info.h
+++ b/arch/arm/include/asm/thread_info.h
@@ -21,6 +21,7 @@
 
 struct task_struct;
 
+#include <dovetail/thread_info.h>
 #include <asm/types.h>
 
 typedef unsigned long mm_segment_t;
@@ -45,6 +46,7 @@ struct cpu_context_save {
  */
 struct thread_info {
 	unsigned long		flags;		/* low level flags */
+	__u32			local_flags;	/* local (synchronous) flags */
 	int			preempt_count;	/* 0 => preemptable, <0 => bug */
 	mm_segment_t		addr_limit;	/* address limit */
 	struct task_struct	*task;		/* main task structure */
@@ -65,16 +67,20 @@ struct thread_info {
 #ifdef CONFIG_ARM_THUMBEE
 	unsigned long		thumbee_state;	/* ThumbEE Handler Base register */
 #endif
+	struct oob_thread_state	oob_state; /* co-kernel thread state */
 };
 
 #define INIT_THREAD_INFO(tsk)						\
 {									\
 	.task		= &tsk,						\
 	.flags		= 0,						\
+	.local_flags	= 0,						\
 	.preempt_count	= INIT_PREEMPT_COUNT,				\
 	.addr_limit	= KERNEL_DS,					\
 }
 
+#define ti_local_flags(__ti)	((__ti)->local_flags)
+
 /*
  * how to get the current stack pointer in C
  */
@@ -145,6 +151,7 @@ extern int vfp_restore_user_hwstate(struct user_vfp *,
 #define TIF_USING_IWMMXT	17
 #define TIF_MEMDIE		18	/* is terminating due to OOM killer */
 #define TIF_RESTORE_SIGMASK	20
+#define TIF_MAYDAY		21	/* emergency trap pending */
 
 #define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)
 #define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
@@ -155,6 +162,7 @@ extern int vfp_restore_user_hwstate(struct user_vfp *,
 #define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)
 #define _TIF_SECCOMP		(1 << TIF_SECCOMP)
 #define _TIF_USING_IWMMXT	(1 << TIF_USING_IWMMXT)
+#define _TIF_MAYDAY		(1 << TIF_MAYDAY)
 
 /* Checks for any syscall work in entry-common.S */
 #define _TIF_SYSCALL_WORK (_TIF_SYSCALL_TRACE | _TIF_SYSCALL_AUDIT | \
@@ -166,5 +174,12 @@ extern int vfp_restore_user_hwstate(struct user_vfp *,
 #define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_SIGPENDING | \
 				 _TIF_NOTIFY_RESUME | _TIF_UPROBE)
 
+/*
+ * Local (synchronous) thread flags.
+ */
+#define _TLF_OOB		0x0001
+#define _TLF_DOVETAIL		0x0002
+#define _TLF_OFFSTAGE		0x0004
+
 #endif /* __KERNEL__ */
 #endif /* __ASM_ARM_THREAD_INFO_H */
diff --git a/arch/arm/include/asm/trace/exceptions.h b/arch/arm/include/asm/trace/exceptions.h
new file mode 100644
index 000000000000..bdb666b3da4e
--- /dev/null
+++ b/arch/arm/include/asm/trace/exceptions.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM exceptions
+
+#if !defined(_TRACE_EXCEPTIONS_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_EXCEPTIONS_H
+
+#include <linux/tracepoint.h>
+#include <asm/ptrace.h>
+#include <asm/dovetail.h>
+
+#define __trace_trap(__sym)	{ __sym, #__sym }
+
+#define trace_trap_symbolic(__trapnr)				\
+	__print_symbolic(__trapnr,				\
+			__trace_trap(ARM_TRAP_ACCESS),		\
+			__trace_trap(ARM_TRAP_SECTION),		\
+			__trace_trap(ARM_TRAP_DABT),		\
+			__trace_trap(ARM_TRAP_PABT),		\
+			__trace_trap(ARM_TRAP_BREAK),		\
+			__trace_trap(ARM_TRAP_FPU),		\
+			__trace_trap(ARM_TRAP_VFP),		\
+			__trace_trap(ARM_TRAP_UNDEFINSTR),	\
+			__trace_trap(ARM_TRAP_ALIGNMENT))
+
+DECLARE_EVENT_CLASS(ARM_trap_event,
+	TP_PROTO(int trapnr, struct pt_regs *regs),
+	TP_ARGS(trapnr, regs),
+
+	TP_STRUCT__entry(
+		__field(int, trapnr)
+		__field(struct pt_regs *, regs)
+		),
+
+	TP_fast_assign(
+		__entry->trapnr = trapnr;
+		__entry->regs = regs;
+		),
+
+	TP_printk("%s mode trap: %s",
+		user_mode(__entry->regs) ? "user" : "kernel",
+		trace_trap_symbolic(__entry->trapnr))
+);
+
+DEFINE_EVENT(ARM_trap_event, ARM_trap_entry,
+	TP_PROTO(int trapnr, struct pt_regs *regs),
+	TP_ARGS(trapnr, regs)
+);
+
+DEFINE_EVENT(ARM_trap_event, ARM_trap_exit,
+	TP_PROTO(int trapnr, struct pt_regs *regs),
+	TP_ARGS(trapnr, regs)
+);
+
+#undef TRACE_INCLUDE_PATH
+#undef TRACE_INCLUDE_FILE
+#define TRACE_INCLUDE_PATH asm/trace
+#define TRACE_INCLUDE_FILE exceptions
+#endif /*  _TRACE_EXCEPTIONS_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
diff --git a/arch/arm/include/asm/vdso_datapage.h b/arch/arm/include/asm/vdso_datapage.h
index 7910abf89b1c..7f40de454add 100644
--- a/arch/arm/include/asm/vdso_datapage.h
+++ b/arch/arm/include/asm/vdso_datapage.h
@@ -19,7 +19,7 @@
  */
 struct vdso_data {
 	u32 seq_count;		/* sequence count - odd during updates */
-	u16 tk_is_cntvct;	/* fall back to syscall if false */
+	u32 cs_type_and_seq;	/* clocksource type and change count */
 	u16 cs_shift;		/* clocksource shift */
 	u32 xtime_coarse_sec;	/* coarse time */
 	u32 xtime_coarse_nsec;
@@ -35,6 +35,7 @@ struct vdso_data {
 	u64 xtime_clock_snsec;	/* CLOCK_REALTIME sub-ns base */
 	u32 tz_minuteswest;	/* timezone info for gettimeofday(2) */
 	u32 tz_dsttime;
+	unsigned char mmio_dev_name[64];
 };
 
 union vdso_data_store {
diff --git a/arch/arm/include/dovetail/irq.h b/arch/arm/include/dovetail/irq.h
new file mode 100644
index 000000000000..f214e2f6ee2b
--- /dev/null
+++ b/arch/arm/include/dovetail/irq.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_DOVETAIL_IRQ_H
+#define _EVL_DOVETAIL_IRQ_H
+
+#ifdef CONFIG_EVL
+#include <asm-generic/evl/irq.h>
+#else
+#include_next <dovetail/irq.h>
+#endif
+
+#endif /* !_EVL_DOVETAIL_IRQ_H */
diff --git a/arch/arm/include/dovetail/thread_info.h b/arch/arm/include/dovetail/thread_info.h
new file mode 100644
index 000000000000..4253b13fe47f
--- /dev/null
+++ b/arch/arm/include/dovetail/thread_info.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_DOVETAIL_THREAD_INFO_H
+#define _EVL_DOVETAIL_THREAD_INFO_H
+
+#include <asm-generic/evl/thread_info.h>
+
+#endif /* !_EVL_DOVETAIL_THREAD_INFO_H */
diff --git a/arch/arm/include/uapi/asm/dovetail.h b/arch/arm/include/uapi/asm/dovetail.h
new file mode 100644
index 000000000000..8413e8f2389e
--- /dev/null
+++ b/arch/arm/include/uapi/asm/dovetail.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _UAPI_ASM_DOVETAIL_H
+#define _UAPI_ASM_DOVETAIL_H
+
+#define __ARM_NR_dovetail	0xf0042
+
+#endif /* _UAPI_ASM_DOVETAIL_H */
diff --git a/arch/arm/include/uapi/asm/evl/fptest.h b/arch/arm/include/uapi/asm/evl/fptest.h
new file mode 100644
index 000000000000..1ea355d28a5d
--- /dev/null
+++ b/arch/arm/include/uapi/asm/evl/fptest.h
@@ -0,0 +1,49 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>.
+ */
+#ifndef _EVL_ARM_ASM_UAPI_FPTEST_H
+#define _EVL_ARM_ASM_UAPI_FPTEST_H
+
+#include <linux/types.h>
+
+#define evl_arm_vfp  0x1
+
+#define evl_set_fpregs(__features, __val)				\
+	do {								\
+		unsigned int __i;					\
+		__u64 __e[16];						\
+									\
+		if (__features & evl_arm_vfp) {				\
+			for (__i = 0; __i < 16; __i++)			\
+				__e[__i] = (__val);			\
+			/* vldm %0!, {d0-d15}, AKA fldmiax %0!, {d0-d15} */ \
+			__asm__ __volatile__("ldc p11, cr0, [%0],#32*4": \
+					     "=r"(__i):			\
+					     "0"(&__e[0]): "memory");	\
+		}							\
+	} while (0)
+
+#define evl_check_fpregs(__features, __val, __bad)			\
+	({								\
+		unsigned int __result = (__val), __i;			\
+		__u64 __e[16];						\
+									\
+		if (__features & evl_arm_vfp) {				\
+			/* vstm %0!, {d0-d15}, AKA fstmiax %0!, {d0-d15} */ \
+			__asm__ __volatile__("stc p11, cr0, [%0],#32*4": \
+					     "=r"(__i):			\
+					     "0"(&__e[0]): "memory");	\
+			for (__i = 0; __i < 16; __i++)			\
+				if (__e[__i] != __val) {		\
+					__result = __e[__i];		\
+					(__bad) = __i;			\
+					break;				\
+				}					\
+		}							\
+		__result;						\
+	})
+
+#endif /* !_EVL_ARM_ASM_UAPI_FPTEST_H */
diff --git a/arch/arm/kernel/Makefile b/arch/arm/kernel/Makefile
index 8cad59465af3..4771a5876d59 100644
--- a/arch/arm/kernel/Makefile
+++ b/arch/arm/kernel/Makefile
@@ -88,6 +88,11 @@ obj-$(CONFIG_PARAVIRT)	+= paravirt.o
 head-y			:= head$(MMUEXT).o
 obj-$(CONFIG_DEBUG_LL)	+= debug.o
 obj-$(CONFIG_EARLY_PRINTK)	+= early_printk.o
+ifeq ($(CONFIG_DEBUG_LL),y)
+obj-$(CONFIG_RAW_PRINTK)	+= raw_printk.o
+endif
+
+obj-$(CONFIG_IRQ_PIPELINE)	+= irq_pipeline.o
 
 # This is executed very early using a temporary stack when no memory allocator
 # nor global data is available. Everything has to be allocated on the stack.
diff --git a/arch/arm/kernel/asm-offsets.c b/arch/arm/kernel/asm-offsets.c
index c773b829ee8e..95a876cbba06 100644
--- a/arch/arm/kernel/asm-offsets.c
+++ b/arch/arm/kernel/asm-offsets.c
@@ -52,6 +52,7 @@ int main(void)
 #endif
   BLANK();
   DEFINE(TI_FLAGS,		offsetof(struct thread_info, flags));
+  DEFINE(TI_LOCAL_FLAGS,	offsetof(struct thread_info, local_flags));
   DEFINE(TI_PREEMPT,		offsetof(struct thread_info, preempt_count));
   DEFINE(TI_ADDR_LIMIT,		offsetof(struct thread_info, addr_limit));
   DEFINE(TI_TASK,		offsetof(struct thread_info, task));
@@ -61,6 +62,7 @@ int main(void)
   DEFINE(TI_USED_CP,		offsetof(struct thread_info, used_cp));
   DEFINE(TI_TP_VALUE,		offsetof(struct thread_info, tp_value));
   DEFINE(TI_FPSTATE,		offsetof(struct thread_info, fpstate));
+  DEFINE(TI_OOB_MASK,		STAGE_MASK);
 #ifdef CONFIG_VFP
   DEFINE(TI_VFPSTATE,		offsetof(struct thread_info, vfpstate));
 #ifdef CONFIG_SMP
@@ -177,6 +179,7 @@ int main(void)
   BLANK();
 #ifdef CONFIG_VDSO
   DEFINE(VDSO_DATA_SIZE,	sizeof(union vdso_data_store));
+  DEFINE(VDSO_PRIV_SIZE,	PAGE_SIZE);
 #endif
   BLANK();
 #ifdef CONFIG_ARM_MPU
diff --git a/arch/arm/kernel/entry-armv.S b/arch/arm/kernel/entry-armv.S
index 858d4e541532..67517f26f3af 100644
--- a/arch/arm/kernel/entry-armv.S
+++ b/arch/arm/kernel/entry-armv.S
@@ -5,6 +5,7 @@
  *  Copyright (C) 1996,1997,1998 Russell King.
  *  ARM700 fix by Matthew Godbolt (linux-user@willothewisp.demon.co.uk)
  *  nommu support by Hyok S. Choi (hyok.choi@samsung.com)
+ *  Copyright (C) 2005 Stelian Pop.
  *
  *  Low-level vector interface routines
  *
@@ -31,16 +32,24 @@
 #include "entry-header.S"
 #include <asm/entry-macro-multi.S>
 #include <asm/probes.h>
+#include <asm/dovetail.h>
 
 /*
  * Interrupt handling.
  */
 	.macro	irq_handler
 #ifdef CONFIG_GENERIC_IRQ_MULTI_HANDLER
-	ldr	r1, =handle_arch_irq
 	mov	r0, sp
 	badr	lr, 9997f
+#ifdef CONFIG_IRQ_PIPELINE
+	ldr	r1, =handle_arch_irq_pipelined
+	mov	pc, r1
+#else
+	ldr	r1, =handle_arch_irq
 	ldr	pc, [r1]
+#endif
+#elif CONFIG_IRQ_PIPELINE
+#error "Legacy IRQ handling not pipelined"
 #else
 	arch_irq_handler_default
 #endif
@@ -210,6 +219,10 @@ ENDPROC(__dabt_svc)
 __irq_svc:
 	svc_entry
 	irq_handler
+#ifdef CONFIG_IRQ_PIPELINE
+	tst	r0, r0
+	beq	1f
+#endif
 
 #ifdef CONFIG_PREEMPT
 	ldr	r8, [tsk, #TI_PREEMPT]		@ get preempt count
@@ -220,6 +233,7 @@ __irq_svc:
 	blne	svc_preempt
 #endif
 
+1:
 	svc_exit r5, irq = 1			@ return from exception
  UNWIND(.fnend		)
 ENDPROC(__irq_svc)
@@ -258,6 +272,16 @@ __und_svc:
 	svc_entry MAX_STACK_SIZE
 #else
 	svc_entry
+#endif
+#ifdef CONFIG_DOVETAIL
+	get_thread_info tsk
+	ldr	r0, [tsk, #TI_PREEMPT]		@ get preempt count
+	tst	r0, #TI_OOB_MASK		@ oob stage?
+	beq	1f
+	mov	r0, #ARM_TRAP_UNDEFINSTR
+	mov	r1, sp				@ r1 = &regs
+	bl	__oob_trap_notify
+1:
 #endif
 	@
 	@ call emulation code, which returns using r9 if it has emulated
@@ -455,8 +479,13 @@ __irq_usr:
 	usr_entry
 	kuser_cmpxchg_check
 	irq_handler
-	get_thread_info tsk
 	mov	why, #0
+#ifdef CONFIG_IRQ_PIPELINE
+THUMB(	it ne)
+	tst	r0, r0
+	beq	fast_ret_to_user	@ fast exit if in-band stage is stalled
+#endif
+	get_thread_info tsk
 	b	ret_to_user_from_irq
  UNWIND(.fnend		)
 ENDPROC(__irq_usr)
@@ -467,6 +496,18 @@ ENDPROC(__irq_usr)
 __und_usr:
 	usr_entry uaccess=0
 
+#ifdef CONFIG_DOVETAIL
+	get_thread_info tsk
+	ldr	r0, [tsk, #TI_PREEMPT]		@ get preempt count
+	tst	r0, #TI_OOB_MASK		@ oob stage?
+	beq	1f
+	mov	r0, #ARM_TRAP_UNDEFINSTR
+	mov	r1, sp				@ r1 = &regs
+	bl	__oob_trap_notify
+	uaccess_enable ip
+1:
+#endif
+
 	mov	r2, r4
 	mov	r3, r5
 
@@ -751,7 +792,7 @@ ENTRY(ret_from_exception)
  UNWIND(.cantunwind	)
 	get_thread_info tsk
 	mov	why, #0
-	b	ret_to_user
+	ret_to_user_pipelined r1
  UNWIND(.fnend		)
 ENDPROC(__pabt_usr)
 ENDPROC(ret_from_exception)
diff --git a/arch/arm/kernel/entry-common.S b/arch/arm/kernel/entry-common.S
index 271cb8a1eba1..e4a587b5c3ec 100644
--- a/arch/arm/kernel/entry-common.S
+++ b/arch/arm/kernel/entry-common.S
@@ -3,6 +3,7 @@
  *  linux/arch/arm/kernel/entry-common.S
  *
  *  Copyright (C) 2000 Russell King
+ *  Copyright (C) 2005 Stelian Pop.
  */
 
 #include <asm/assembler.h>
@@ -12,6 +13,7 @@
 #include <asm/memory.h>
 #ifdef CONFIG_AEABI
 #include <asm/unistd-oabi.h>
+#include <uapi/asm/dovetail.h>
 #endif
 
 	.equ	NR_syscalls, __NR_syscalls
@@ -143,11 +145,16 @@ no_work_pending:
 	restore_user_regs fast = 0, offset = 0
 ENDPROC(ret_to_user_from_irq)
 ENDPROC(ret_to_user)
+ENTRY(fast_ret_to_user)
+	disable_irq_notrace			@ disable interrupts
+	b	no_work_pending
+ENDPROC(fast_ret_to_user)
 
 /*
  * This is how we return from a fork.
  */
 ENTRY(ret_from_fork)
+	enable_irq_if_pipelined
 	bl	schedule_tail
 	cmp	r5, #0
 	movne	r0, r4
@@ -248,6 +255,45 @@ ENTRY(vector_swi)
  TRACE(	ldmia	sp, {r0 - r3}		)
 
 local_restart:
+#ifdef CONFIG_DOVETAIL
+	ldr	r10, [tsk, #TI_LOCAL_FLAGS]	@ tsk(r9) is callee-saved
+	ldr	r0, =(__ARM_NR_dovetail - __NR_SYSCALL_BASE)
+	cmp	scno, r0
+	bne	slow_path
+	tst	r10, #_TLF_OOB
+	beq	slow_path
+	mov	r0, sp				@ regs
+	bl	handle_oob_syscall
+	ldr	r10, [tsk, #TI_LOCAL_FLAGS]
+	tst	r10, #_TLF_OOB
+	bne	fastcall_exit_check		@ check for MAYDAY
+	bl	sync_inband_irqs
+	b	ret_slow_syscall
+fastcall_exit_check:
+	ldr	r10, [tsk, #TI_FLAGS]
+	tst	r10, #_TIF_MAYDAY
+	beq	fast_ret_to_user
+	mov	r0, sp
+	bl	dovetail_call_mayday
+	b	fast_ret_to_user
+slow_path:
+	tst	r10, #_TLF_DOVETAIL
+	bne	pipeline_syscall
+	cmp	scno, r0
+	bne	root_syscall
+pipeline_syscall:
+	mov	r1, sp				@ regs
+	mov	r0, tsk
+	bl	__pipeline_syscall
+	ldr	r10, [tsk, #TI_LOCAL_FLAGS]
+	tst	r10, #_TLF_OOB
+	bne	fast_ret_to_user
+	cmp	r0, #0
+	bgt	ret_slow_syscall
+root_syscall:
+	ldmia	sp, { r0 - r3 }
+#endif /* CONFIG_DOVETAIL */
+
 	ldr	r10, [tsk, #TI_FLAGS]		@ check for syscall tracing
 	stmdb	sp!, {r4, r5}			@ push fifth and sixth args
 
diff --git a/arch/arm/kernel/entry-header.S b/arch/arm/kernel/entry-header.S
index 32051ec5b33f..9d9d06a158cb 100644
--- a/arch/arm/kernel/entry-header.S
+++ b/arch/arm/kernel/entry-header.S
@@ -205,14 +205,14 @@
 #ifdef CONFIG_TRACE_IRQFLAGS
 	@ The parent context IRQs must have been enabled to get here in
 	@ the first place, so there's no point checking the PSR I bit.
-	bl	trace_hardirqs_on
+	bl	trace_hardirqs_on_pipelined
 #endif
 	.else
 	@ IRQs off again before pulling preserved data off the stack
 	disable_irq_notrace
 #ifdef CONFIG_TRACE_IRQFLAGS
 	tst	\rpsr, #PSR_I_BIT
-	bleq	trace_hardirqs_on
+	bleq	trace_hardirqs_on_pipelined
 	tst	\rpsr, #PSR_I_BIT
 	blne	trace_hardirqs_off
 #endif
@@ -404,6 +404,19 @@
 #endif
 	.endm
 
+/*
+ * Branch to the exception epilogue, skipping the in-band work
+ * if running over the out-of-band interrupt stage.
+ */
+	.macro ret_to_user_pipelined, tmp
+#ifdef CONFIG_IRQ_PIPELINE
+	ldr	\tmp, [tsk, #TI_LOCAL_FLAGS]
+	tst	\tmp, #_TLF_OOB
+	bne	fast_ret_to_user
+#endif
+	b	ret_to_user
+	.endm
+
 /*
  * These are the registers used in the syscall handler, and allow us to
  * have in theory up to 7 arguments to a function - r0 to r6.
diff --git a/arch/arm/kernel/irq.c b/arch/arm/kernel/irq.c
index ee514034c0a1..d50a12ab2bba 100644
--- a/arch/arm/kernel/irq.c
+++ b/arch/arm/kernel/irq.c
@@ -24,6 +24,7 @@
 #include <linux/interrupt.h>
 #include <linux/irq.h>
 #include <linux/irqchip.h>
+#include <linux/irq_pipeline.h>
 #include <linux/random.h>
 #include <linux/smp.h>
 #include <linux/init.h>
@@ -98,6 +99,14 @@ void __init init_IRQ(void)
 	uniphier_cache_init();
 }
 
+#ifdef CONFIG_IRQ_PIPELINE
+asmlinkage int __exception_irq_entry
+handle_arch_irq_pipelined(struct pt_regs *regs)
+{
+	return handle_irq_pipelined(regs);
+}
+#endif
+
 #ifdef CONFIG_SPARSE_IRQ
 int __init arch_probe_nr_irqs(void)
 {
diff --git a/arch/arm/kernel/irq_pipeline.c b/arch/arm/kernel/irq_pipeline.c
new file mode 100644
index 000000000000..a275c6fc8305
--- /dev/null
+++ b/arch/arm/kernel/irq_pipeline.c
@@ -0,0 +1,93 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/kernel.h>
+#include <linux/smp.h>
+#include <linux/irq.h>
+#include <linux/irq_pipeline.h>
+#include <asm/exception.h>
+
+#ifdef CONFIG_SMP
+
+static struct irq_domain *sipic_domain;
+
+static void sipic_irq_noop(struct irq_data *data) { }
+
+static unsigned int sipic_irq_noop_ret(struct irq_data *data)
+{
+	return 0;
+}
+
+static struct irq_chip sipic_chip = {
+	.name		= "SIPIC",
+	.irq_startup	= sipic_irq_noop_ret,
+	.irq_shutdown	= sipic_irq_noop,
+	.irq_enable	= sipic_irq_noop,
+	.irq_disable	= sipic_irq_noop,
+	.flags		= IRQCHIP_PIPELINE_SAFE | IRQCHIP_SKIP_SET_WAKE,
+};
+
+static int sipic_irq_map(struct irq_domain *d, unsigned int irq,
+			irq_hw_number_t hwirq)
+{
+	irq_set_percpu_devid(irq);
+	irq_set_chip_and_handler(irq, &sipic_chip, handle_synthetic_irq);
+
+	return 0;
+}
+
+static struct irq_domain_ops sipic_domain_ops = {
+	.map	= sipic_irq_map,
+};
+
+static void create_ipi_domain(void)
+{
+	/*
+	 * Create an IRQ domain for mapping all IPIs (in-band and
+	 * out-of-band), with fixed sirq numbers starting from
+	 * OOB_IPI_BASE. The sirqs obtained can be injected into the
+	 * pipeline upon IPI receipt like other interrupts.
+	 */
+	sipic_domain = irq_domain_add_simple(NULL, INBAND_NR_IPI + OOB_NR_IPI,
+					     OOB_IPI_BASE,
+					     &sipic_domain_ops, NULL);
+}
+
+void irq_pipeline_send_remote(unsigned int ipi,
+			      const struct cpumask *cpumask)
+{
+	unsigned int ipinr = ipi - OOB_IPI_BASE;
+	smp_cross_call(cpumask, ipinr);
+}
+EXPORT_SYMBOL_GPL(irq_pipeline_send_remote);
+
+#endif	/* CONFIG_SMP */
+
+void arch_do_IRQ_pipelined(struct irq_desc *desc)
+{
+	struct pt_regs *regs = raw_cpu_ptr(&irq_pipeline.tick_regs);
+	unsigned int irq = irq_desc_get_irq(desc);
+
+#ifdef CONFIG_SMP
+	/*
+	 * Check for IPIs, handing them over to the specific dispatch
+	 * code.
+	 */
+	if (irq >= OOB_IPI_BASE &&
+	    irq < OOB_IPI_BASE + INBAND_NR_IPI + OOB_NR_IPI) {
+		__handle_IPI(irq - OOB_IPI_BASE, regs);
+		return;
+	}
+#endif
+
+	__handle_domain_irq(NULL, irq, false, regs);
+}
+
+void __init arch_irq_pipeline_init(void)
+{
+#ifdef CONFIG_SMP
+	create_ipi_domain();
+#endif
+}
diff --git a/arch/arm/kernel/patch.c b/arch/arm/kernel/patch.c
index d0a05a3bdb96..86108122ae00 100644
--- a/arch/arm/kernel/patch.c
+++ b/arch/arm/kernel/patch.c
@@ -16,7 +16,7 @@ struct patch {
 	unsigned int insn;
 };
 
-static DEFINE_RAW_SPINLOCK(patch_lock);
+static DEFINE_HARD_SPINLOCK(patch_lock);
 
 static void __kprobes *patch_map(void *addr, int fixmap, unsigned long *flags)
 	__acquires(&patch_lock)
diff --git a/arch/arm/kernel/process.c b/arch/arm/kernel/process.c
index 9485acc520a4..7cd001e6e968 100644
--- a/arch/arm/kernel/process.c
+++ b/arch/arm/kernel/process.c
@@ -69,7 +69,7 @@ void arch_cpu_idle(void)
 		arm_pm_idle();
 	else
 		cpu_do_idle();
-	local_irq_enable();
+	local_irq_enable_full();
 }
 
 void arch_cpu_idle_prepare(void)
diff --git a/arch/arm/kernel/ptrace.c b/arch/arm/kernel/ptrace.c
index 324352787aea..0c484dcae91b 100644
--- a/arch/arm/kernel/ptrace.c
+++ b/arch/arm/kernel/ptrace.c
@@ -206,6 +206,7 @@ void ptrace_break(struct pt_regs *regs)
 
 static int break_trap(struct pt_regs *regs, unsigned int instr)
 {
+	oob_trap_notify(ARM_TRAP_BREAK, regs);
 	ptrace_break(regs);
 	return 0;
 }
diff --git a/arch/arm/kernel/raw_printk.c b/arch/arm/kernel/raw_printk.c
new file mode 100644
index 000000000000..9024b772fca4
--- /dev/null
+++ b/arch/arm/kernel/raw_printk.c
@@ -0,0 +1,30 @@
+#include <linux/kernel.h>
+#include <linux/console.h>
+#include <linux/init.h>
+
+/*
+ * If both CONFIG_DEBUG_LL and CONFIG_RAW_PRINTK are set, create a
+ * console device sending the raw output to printascii().
+ */
+void printascii(const char *s);
+
+static void raw_console_write(struct console *co,
+			      const char *s, unsigned count)
+{
+	printascii(s);
+}
+
+static struct console raw_console = {
+	.name		= "rawcon",
+	.write_raw	= raw_console_write,
+	.flags		= CON_PRINTBUFFER | CON_ENABLED,
+	.index		= -1,
+};
+
+static int __init raw_console_init(void)
+{
+	register_console(&raw_console);
+
+	return 0;
+}
+console_initcall(raw_console_init);
diff --git a/arch/arm/kernel/signal.c b/arch/arm/kernel/signal.c
index ab2568996ddb..7601879fa841 100644
--- a/arch/arm/kernel/signal.c
+++ b/arch/arm/kernel/signal.c
@@ -8,6 +8,7 @@
 #include <linux/random.h>
 #include <linux/signal.h>
 #include <linux/personality.h>
+#include <linux/irq_pipeline.h>
 #include <linux/uaccess.h>
 #include <linux/tracehook.h>
 #include <linux/uprobes.h>
@@ -642,13 +643,22 @@ static int do_signal(struct pt_regs *regs, int syscall)
 asmlinkage int
 do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
 {
+	WARN_ON_ONCE(irq_pipeline_debug() &&
+		(irqs_disabled() || running_oob()));
+
 	/*
 	 * The assembly code enters us with IRQs off, but it hasn't
 	 * informed the tracing code of that for efficiency reasons.
 	 * Update the trace code with the current status.
 	 */
-	trace_hardirqs_off();
+	if (!irqs_pipelined())
+		trace_hardirqs_off();
 	do {
+		if (irqs_pipelined()) {
+			local_irq_disable();
+			hard_cond_local_irq_enable();
+		}
+
 		if (likely(thread_flags & _TIF_NEED_RESCHED)) {
 			schedule();
 		} else {
@@ -674,9 +684,9 @@ do_work_pending(struct pt_regs *regs, unsigned int thread_flags, int syscall)
 				rseq_handle_notify_resume(NULL, regs);
 			}
 		}
-		local_irq_disable();
+		hard_local_irq_disable();
 		thread_flags = current_thread_info()->flags;
-	} while (thread_flags & _TIF_WORK_MASK);
+	} while (inband_irq_pending() || (thread_flags & _TIF_WORK_MASK));
 	return 0;
 }
 
diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index 4b0bab2607e4..275e7474ff49 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -393,6 +393,13 @@ asmlinkage void secondary_start_kernel(void)
 	enter_lazy_tlb(mm, current);
 	local_flush_tlb_all();
 
+	/*
+	 * When pipelining IRQs, debug_smp_processor_id() accesses
+	 * percpu data.
+	 */
+	if (irqs_pipelined())
+		set_my_cpu_offset(per_cpu_offset(raw_smp_processor_id()));
+
 	/*
 	 * All kernel threads share the same mm context; grab a
 	 * reference and switch to it.
@@ -435,7 +442,7 @@ asmlinkage void secondary_start_kernel(void)
 
 	complete(&cpu_running);
 
-	local_irq_enable();
+	local_irq_enable_full();
 	local_fiq_enable();
 	local_abt_enable();
 
@@ -517,12 +524,68 @@ static const char *ipi_types[NR_IPI] __tracepoint_string = {
 	S(IPI_COMPLETION, "completion interrupts"),
 };
 
-static void smp_cross_call(const struct cpumask *target, unsigned int ipinr)
+#ifdef CONFIG_IRQ_PIPELINE
+
+static DEFINE_PER_CPU(unsigned long, ipi_messages);
+
+static inline
+void send_IPI_message(const struct cpumask *target, unsigned int ipinr)
+{
+	unsigned int cpu, sgi;
+
+	if (ipinr < INBAND_NR_IPI) {
+		/* regular in-band IPI (multiplexed over SGI0). */
+		trace_ipi_raise_rcuidle(target, ipi_types[ipinr]);
+		for_each_cpu(cpu, target)
+			set_bit(ipinr, &per_cpu(ipi_messages, cpu));
+		smp_mb();
+		sgi = 0;
+	} else	/* out-of-band IPI (SGI1-3). */
+		sgi = ipinr - INBAND_NR_IPI + 1;
+
+	__smp_cross_call(target, sgi);
+}
+
+static inline
+void handle_IPI_pipelined(int sgi, struct pt_regs *regs)
+{
+	unsigned int ipinr, irq;
+	unsigned long *pmsg;
+
+	if (sgi) {		/* SGI1-3 */
+		irq = sgi + INBAND_NR_IPI - 1 + OOB_IPI_BASE;
+		generic_pipeline_irq(irq, regs);
+		return;
+	}
+
+	/* In-band IPI (0..INBAND_NR_IPI - 1) multiplexed over SGI0. */
+	pmsg = raw_cpu_ptr(&ipi_messages);
+	while (*pmsg) {
+		ipinr = ffs(*pmsg) - 1;
+		clear_bit(ipinr, pmsg);
+		irq = OOB_IPI_BASE + ipinr;
+		generic_pipeline_irq(irq, regs);
+	}
+}
+
+#else
+
+static inline
+void send_IPI_message(const struct cpumask *target, unsigned int ipinr)
 {
-	trace_ipi_raise_rcuidle(target, ipi_types[ipinr]);
 	__smp_cross_call(target, ipinr);
 }
 
+static inline void handle_IPI_pipelined(int ipinr, struct pt_regs *regs)
+{ }
+
+#endif /* CONFIG_IRQ_PIPELINE */
+
+void smp_cross_call(const struct cpumask *target, unsigned int ipinr)
+{
+	send_IPI_message(target, ipinr);
+}
+
 void show_ipi_list(struct seq_file *p, int prec)
 {
 	unsigned int cpu, i;
@@ -596,7 +659,7 @@ static void ipi_cpu_stop(unsigned int cpu)
 	set_cpu_online(cpu, false);
 
 	local_fiq_disable();
-	local_irq_disable();
+	hard_local_irq_disable();
 
 	while (1) {
 		cpu_relax();
@@ -625,7 +688,7 @@ asmlinkage void __exception_irq_entry do_IPI(int ipinr, struct pt_regs *regs)
 	handle_IPI(ipinr, regs);
 }
 
-void handle_IPI(int ipinr, struct pt_regs *regs)
+void __handle_IPI(int ipinr, struct pt_regs *regs)
 {
 	unsigned int cpu = smp_processor_id();
 	struct pt_regs *old_regs = set_irq_regs(regs);
@@ -685,6 +748,18 @@ void handle_IPI(int ipinr, struct pt_regs *regs)
 		printk_nmi_exit();
 		break;
 
+#ifdef CONFIG_IRQ_PIPELINE
+	/*
+	 * In the unlikely event out-of-band IPIs have a in-band stage
+	 * handler.
+	 */
+	case INBAND_NR_IPI ... INBAND_NR_IPI + OOB_NR_IPI - 1:
+		irq_enter();
+		generic_handle_irq(OOB_IPI_BASE + ipinr);
+		irq_exit();
+		break;
+#endif
+
 	default:
 		pr_crit("CPU%u: Unknown IPI message 0x%x\n",
 		        cpu, ipinr);
@@ -696,6 +771,14 @@ void handle_IPI(int ipinr, struct pt_regs *regs)
 	set_irq_regs(old_regs);
 }
 
+void handle_IPI(int ipinr, struct pt_regs *regs)
+{
+	if (irqs_pipelined())
+		handle_IPI_pipelined(ipinr, regs);
+	else
+		__handle_IPI(ipinr, regs);
+}
+
 void smp_send_reschedule(int cpu)
 {
 	smp_cross_call(cpumask_of(cpu), IPI_RESCHEDULE);
diff --git a/arch/arm/kernel/smp_twd.c b/arch/arm/kernel/smp_twd.c
index 9a14f721a2b0..8377f1d030c3 100644
--- a/arch/arm/kernel/smp_twd.c
+++ b/arch/arm/kernel/smp_twd.c
@@ -31,7 +31,7 @@ static DEFINE_PER_CPU(bool, percpu_setup_called);
 
 static struct clock_event_device __percpu *twd_evt;
 static unsigned int twd_features =
-		CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT;
+		CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_PIPELINE;
 static int twd_ppi;
 
 static int twd_shutdown(struct clock_event_device *clk)
@@ -182,7 +182,7 @@ static irqreturn_t twd_handler(int irq, void *dev_id)
 	struct clock_event_device *evt = dev_id;
 
 	if (twd_timer_ack()) {
-		evt->event_handler(evt);
+		clockevents_handle_event(evt);
 		return IRQ_HANDLED;
 	}
 
@@ -279,7 +279,8 @@ static int __init twd_local_timer_common_register(struct device_node *np)
 		goto out_free;
 	}
 
-	err = request_percpu_irq(twd_ppi, twd_handler, "twd", twd_evt);
+	err = __request_percpu_irq(twd_ppi, twd_handler,
+				   IRQF_TIMER, "twd", twd_evt);
 	if (err) {
 		pr_err("twd: can't register interrupt %d (%d)\n", twd_ppi, err);
 		goto out_free;
diff --git a/arch/arm/kernel/traps.c b/arch/arm/kernel/traps.c
index c053abd1fb53..e48a85f03ea1 100644
--- a/arch/arm/kernel/traps.c
+++ b/arch/arm/kernel/traps.c
@@ -396,7 +396,7 @@ int is_valid_bugaddr(unsigned long pc)
 #endif
 
 static LIST_HEAD(undef_hook);
-static DEFINE_RAW_SPINLOCK(undef_lock);
+static DEFINE_HARD_SPINLOCK(undef_lock);
 
 void register_undef_hook(struct undef_hook *hook)
 {
diff --git a/arch/arm/kernel/vdso.c b/arch/arm/kernel/vdso.c
index 9bf16c93ee6a..749e3f60c22d 100644
--- a/arch/arm/kernel/vdso.c
+++ b/arch/arm/kernel/vdso.c
@@ -24,13 +24,14 @@
 #include <asm/vdso_datapage.h>
 #include <clocksource/arm_arch_timer.h>
 
-#define MAX_SYMNAME	64
-
 static struct page **vdso_text_pagelist;
 
 extern char vdso_start[], vdso_end[];
 
-/* Total number of pages needed for the data and text portions of the VDSO. */
+/*
+ * Total number of pages needed for the data, private and text
+ * portions of the VDSO.
+ */
 unsigned int vdso_total_pages __ro_after_init;
 
 /*
@@ -51,8 +52,8 @@ static int vdso_mremap(const struct vm_special_mapping *sm,
 	unsigned long new_size = new_vma->vm_end - new_vma->vm_start;
 	unsigned long vdso_size;
 
-	/* without VVAR page */
-	vdso_size = (vdso_total_pages - 1) << PAGE_SHIFT;
+	/* without VVAR and VPRIV pages */
+	vdso_size = (vdso_total_pages - 2) << PAGE_SHIFT;
 
 	if (vdso_size != new_size)
 		return -EINVAL;
@@ -67,122 +68,6 @@ static struct vm_special_mapping vdso_text_mapping __ro_after_init = {
 	.mremap = vdso_mremap,
 };
 
-struct elfinfo {
-	Elf32_Ehdr	*hdr;		/* ptr to ELF */
-	Elf32_Sym	*dynsym;	/* ptr to .dynsym section */
-	unsigned long	dynsymsize;	/* size of .dynsym section */
-	char		*dynstr;	/* ptr to .dynstr section */
-};
-
-/* Cached result of boot-time check for whether the arch timer exists,
- * and if so, whether the virtual counter is useable.
- */
-static bool cntvct_ok __ro_after_init;
-
-static bool __init cntvct_functional(void)
-{
-	struct device_node *np;
-	bool ret = false;
-
-	if (!IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
-		goto out;
-
-	/* The arm_arch_timer core should export
-	 * arch_timer_use_virtual or similar so we don't have to do
-	 * this.
-	 */
-	np = of_find_compatible_node(NULL, NULL, "arm,armv7-timer");
-	if (!np)
-		goto out_put;
-
-	if (of_property_read_bool(np, "arm,cpu-registers-not-fw-configured"))
-		goto out_put;
-
-	ret = true;
-
-out_put:
-	of_node_put(np);
-out:
-	return ret;
-}
-
-static void * __init find_section(Elf32_Ehdr *ehdr, const char *name,
-				  unsigned long *size)
-{
-	Elf32_Shdr *sechdrs;
-	unsigned int i;
-	char *secnames;
-
-	/* Grab section headers and strings so we can tell who is who */
-	sechdrs = (void *)ehdr + ehdr->e_shoff;
-	secnames = (void *)ehdr + sechdrs[ehdr->e_shstrndx].sh_offset;
-
-	/* Find the section they want */
-	for (i = 1; i < ehdr->e_shnum; i++) {
-		if (strcmp(secnames + sechdrs[i].sh_name, name) == 0) {
-			if (size)
-				*size = sechdrs[i].sh_size;
-			return (void *)ehdr + sechdrs[i].sh_offset;
-		}
-	}
-
-	if (size)
-		*size = 0;
-	return NULL;
-}
-
-static Elf32_Sym * __init find_symbol(struct elfinfo *lib, const char *symname)
-{
-	unsigned int i;
-
-	for (i = 0; i < (lib->dynsymsize / sizeof(Elf32_Sym)); i++) {
-		char name[MAX_SYMNAME], *c;
-
-		if (lib->dynsym[i].st_name == 0)
-			continue;
-		strlcpy(name, lib->dynstr + lib->dynsym[i].st_name,
-			MAX_SYMNAME);
-		c = strchr(name, '@');
-		if (c)
-			*c = 0;
-		if (strcmp(symname, name) == 0)
-			return &lib->dynsym[i];
-	}
-	return NULL;
-}
-
-static void __init vdso_nullpatch_one(struct elfinfo *lib, const char *symname)
-{
-	Elf32_Sym *sym;
-
-	sym = find_symbol(lib, symname);
-	if (!sym)
-		return;
-
-	sym->st_name = 0;
-}
-
-static void __init patch_vdso(void *ehdr)
-{
-	struct elfinfo einfo;
-
-	einfo = (struct elfinfo) {
-		.hdr = ehdr,
-	};
-
-	einfo.dynsym = find_section(einfo.hdr, ".dynsym", &einfo.dynsymsize);
-	einfo.dynstr = find_section(einfo.hdr, ".dynstr", NULL);
-
-	/* If the virtual counter is absent or non-functional we don't
-	 * want programs to incur the slight additional overhead of
-	 * dispatching through the VDSO only to fall back to syscalls.
-	 */
-	if (!cntvct_ok) {
-		vdso_nullpatch_one(&einfo, "__vdso_gettimeofday");
-		vdso_nullpatch_one(&einfo, "__vdso_clock_gettime");
-	}
-}
-
 static int __init vdso_init(void)
 {
 	unsigned int text_pages;
@@ -214,17 +99,22 @@ static int __init vdso_init(void)
 
 	vdso_text_mapping.pages = vdso_text_pagelist;
 
-	vdso_total_pages = 1; /* for the data/vvar page */
+	vdso_total_pages = 2; /* for the data/vvar and vpriv pages */
 	vdso_total_pages += text_pages;
 
-	cntvct_ok = cntvct_functional();
-
-	patch_vdso(vdso_start);
+	vdso_data->cs_type_and_seq = ARM_CLOCK_NONE << 16 | 1;
 
 	return 0;
 }
 arch_initcall(vdso_init);
 
+static int install_vpriv(struct mm_struct *mm, unsigned long addr)
+{
+	return mmap_region(NULL, addr, PAGE_SIZE,
+			  VM_READ | VM_WRITE | VM_MAYREAD | VM_MAYWRITE,
+			   0, NULL) != addr ? -EINVAL : 0;
+}
+
 static int install_vvar(struct mm_struct *mm, unsigned long addr)
 {
 	struct vm_area_struct *vma;
@@ -232,8 +122,13 @@ static int install_vvar(struct mm_struct *mm, unsigned long addr)
 	vma = _install_special_mapping(mm, addr, PAGE_SIZE,
 				       VM_READ | VM_MAYREAD,
 				       &vdso_data_mapping);
+	if (IS_ERR(vma))
+		return PTR_ERR(vma);
 
-	return PTR_ERR_OR_ZERO(vma);
+	if (cache_is_vivt())
+		vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
+
+	return vma->vm_start != addr ? -EINVAL : 0;
 }
 
 /* assumes mmap_sem is write-locked */
@@ -247,18 +142,29 @@ void arm_install_vdso(struct mm_struct *mm, unsigned long addr)
 	if (vdso_text_pagelist == NULL)
 		return;
 
-	if (install_vvar(mm, addr))
+	if (install_vpriv(mm, addr)) {
+		pr_err("cannot map VPRIV at expected address!\n");
+		return;
+	}
+
+	/* Account for the private storage. */
+	addr += PAGE_SIZE;
+	if (install_vvar(mm, addr)) {
+		WARN(1, "cannot map VVAR at expected address!\n");
 		return;
+	}
 
-	/* Account for vvar page. */
+	/* Account for vvar and vpriv pages. */
 	addr += PAGE_SIZE;
-	len = (vdso_total_pages - 1) << PAGE_SHIFT;
+	len = (vdso_total_pages - 2) << PAGE_SHIFT;
 
 	vma = _install_special_mapping(mm, addr, len,
 		VM_READ | VM_EXEC | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC,
 		&vdso_text_mapping);
 
-	if (!IS_ERR(vma))
+	if (IS_ERR(vma) || vma->vm_start != addr)
+		WARN(1, "cannot map VDSO at expected address!\n");
+	else
 		mm->context.vdso = addr;
 }
 
@@ -274,15 +180,9 @@ static void vdso_write_end(struct vdso_data *vdata)
 	++vdso_data->seq_count;
 }
 
-static bool tk_is_cntvct(const struct timekeeper *tk)
+static const struct arch_clocksource_data *tk_get_cd(const struct timekeeper *tk)
 {
-	if (!IS_ENABLED(CONFIG_ARM_ARCH_TIMER))
-		return false;
-
-	if (!tk->tkr_mono.clock->archdata.vdso_direct)
-		return false;
-
-	return true;
+	return &tk->tkr_mono.clock->archdata;
 }
 
 /**
@@ -306,24 +206,39 @@ static bool tk_is_cntvct(const struct timekeeper *tk)
 void update_vsyscall(struct timekeeper *tk)
 {
 	struct timespec64 *wtm = &tk->wall_to_monotonic;
+	const struct arch_clocksource_data *cd = tk_get_cd(tk);
+	unsigned long flags;
 
-	if (!cntvct_ok) {
-		/* The entry points have been zeroed, so there is no
-		 * point in updating the data page.
-		 */
-		return;
-	}
+	flags = hard_cond_local_irq_save();
 
 	vdso_write_begin(vdso_data);
 
-	vdso_data->tk_is_cntvct			= tk_is_cntvct(tk);
+	if (cd->clock_type != (vdso_data->cs_type_and_seq >> 16)) {
+		u32 type = cd->clock_type;
+		u16 seq = vdso_data->cs_type_and_seq;
+
+		if (++seq == 0)
+			seq = 1;
+		vdso_data->cs_type_and_seq	= type << 16 | seq;
+
+		/*
+		 * vdso does not have printf, so, prepare the device name for
+		 * it.
+		 */
+		if (cd->clock_type >= ARM_CLOCK_USER_MMIO_BASE)
+			snprintf(vdso_data->mmio_dev_name,
+				sizeof(vdso_data->mmio_dev_name),
+				"/dev/ucs/%u",
+				cd->clock_type - ARM_CLOCK_USER_MMIO_BASE);
+	}
+
 	vdso_data->xtime_coarse_sec		= tk->xtime_sec;
 	vdso_data->xtime_coarse_nsec		= (u32)(tk->tkr_mono.xtime_nsec >>
 							tk->tkr_mono.shift);
 	vdso_data->wtm_clock_sec		= wtm->tv_sec;
 	vdso_data->wtm_clock_nsec		= wtm->tv_nsec;
 
-	if (vdso_data->tk_is_cntvct) {
+	if (cd->clock_type != ARM_CLOCK_NONE) {
 		vdso_data->cs_cycle_last	= tk->tkr_mono.cycle_last;
 		vdso_data->xtime_clock_sec	= tk->xtime_sec;
 		vdso_data->xtime_clock_snsec	= tk->tkr_mono.xtime_nsec;
@@ -334,6 +249,8 @@ void update_vsyscall(struct timekeeper *tk)
 
 	vdso_write_end(vdso_data);
 
+	hard_cond_local_irq_restore(flags);
+
 	flush_dcache_page(virt_to_page(vdso_data));
 }
 
@@ -343,3 +260,20 @@ void update_vsyscall_tz(void)
 	vdso_data->tz_dsttime		= sys_tz.tz_dsttime;
 	flush_dcache_page(virt_to_page(vdso_data));
 }
+
+void arch_clocksource_user_mmio_init(struct clocksource *cs, unsigned id)
+{
+	struct arch_clocksource_data *d = &cs->archdata;
+
+	d->clock_type = ARM_CLOCK_USER_MMIO_BASE + id;
+}
+
+void arch_clocksource_arch_timer_init(struct clocksource *cs)
+{
+	struct arch_clocksource_data *d = &cs->archdata;
+
+	if (!cs->archdata.vdso_direct)
+		d->clock_type = ARM_CLOCK_NONE;
+	else
+		d->clock_type = ARM_CLOCK_ARCH_TIMER;
+}
diff --git a/arch/arm/mach-imx/gpc.c b/arch/arm/mach-imx/gpc.c
index b5b557fe2c49..d31631ef6728 100644
--- a/arch/arm/mach-imx/gpc.c
+++ b/arch/arm/mach-imx/gpc.c
@@ -62,28 +62,38 @@ void imx_gpc_set_l2_mem_power_in_lpm(bool power_off)
 void imx_gpc_pre_suspend(bool arm_power_off)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1;
+	unsigned long flags;
 	int i;
 
 	/* Tell GPC to power off ARM core when suspend */
 	if (arm_power_off)
 		imx_gpc_set_arm_power_in_lpm(arm_power_off);
 
+	flags = hard_cond_local_irq_save();
+
 	for (i = 0; i < IMR_NUM; i++) {
 		gpc_saved_imrs[i] = readl_relaxed(reg_imr1 + i * 4);
 		writel_relaxed(~gpc_wake_irqs[i], reg_imr1 + i * 4);
 	}
+
+	hard_cond_local_irq_restore(flags);
 }
 
 void imx_gpc_post_resume(void)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1;
+	unsigned long flags;
 	int i;
 
 	/* Keep ARM core powered on for other low-power modes */
 	imx_gpc_set_arm_power_in_lpm(false);
 
+	flags = hard_cond_local_irq_save();
+
 	for (i = 0; i < IMR_NUM; i++)
 		writel_relaxed(gpc_saved_imrs[i], reg_imr1 + i * 4);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 static int imx_gpc_irq_set_wake(struct irq_data *d, unsigned int on)
@@ -105,22 +115,31 @@ static int imx_gpc_irq_set_wake(struct irq_data *d, unsigned int on)
 void imx_gpc_mask_all(void)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1;
+	unsigned long flags;
 	int i;
 
+	flags = hard_cond_local_irq_save();
+
 	for (i = 0; i < IMR_NUM; i++) {
 		gpc_saved_imrs[i] = readl_relaxed(reg_imr1 + i * 4);
 		writel_relaxed(~0, reg_imr1 + i * 4);
 	}
 
+	hard_cond_local_irq_restore(flags);
 }
 
 void imx_gpc_restore_all(void)
 {
 	void __iomem *reg_imr1 = gpc_base + GPC_IMR1;
+	unsigned long flags;
 	int i;
 
+	flags = hard_cond_local_irq_save();
+
 	for (i = 0; i < IMR_NUM; i++)
 		writel_relaxed(gpc_saved_imrs[i], reg_imr1 + i * 4);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 void imx_gpc_hwirq_unmask(unsigned int hwirq)
@@ -168,6 +187,7 @@ static struct irq_chip imx_gpc_chip = {
 #ifdef CONFIG_SMP
 	.irq_set_affinity	= irq_chip_set_affinity_parent,
 #endif
+	.flags			= IRQCHIP_PIPELINE_SAFE,
 };
 
 static int imx_gpc_domain_translate(struct irq_domain *d,
diff --git a/arch/arm/mach-omap2/Kconfig b/arch/arm/mach-omap2/Kconfig
index fdb6743760a2..cf6ad49657dd 100644
--- a/arch/arm/mach-omap2/Kconfig
+++ b/arch/arm/mach-omap2/Kconfig
@@ -97,6 +97,7 @@ config ARCH_OMAP2PLUS
 	select ARCH_HAS_HOLES_MEMORYMODEL
 	select ARCH_OMAP
 	select CLKSRC_MMIO
+	select CLKSRC_VDSO_MAPPED
 	select GENERIC_IRQ_CHIP
 	select GPIOLIB
 	select MACH_OMAP_GENERIC
diff --git a/arch/arm/mach-omap2/timer.c b/arch/arm/mach-omap2/timer.c
index 07bea84c5d6e..bc7d177759c3 100644
--- a/arch/arm/mach-omap2/timer.c
+++ b/arch/arm/mach-omap2/timer.c
@@ -87,7 +87,7 @@ static irqreturn_t omap2_gp_timer_interrupt(int irq, void *dev_id)
 
 	__omap_dm_timer_write_status(&clkev, OMAP_TIMER_INT_OVERFLOW);
 
-	evt->event_handler(evt);
+	clockevents_handle_event(evt);
 	return IRQ_HANDLED;
 }
 
@@ -148,7 +148,8 @@ static void omap_clkevt_unidle(struct clock_event_device *unused)
 
 static struct clock_event_device clockevent_gpt = {
 	.features		= CLOCK_EVT_FEAT_PERIODIC |
-				  CLOCK_EVT_FEAT_ONESHOT,
+				  CLOCK_EVT_FEAT_ONESHOT |
+				  CLOCK_EVT_FEAT_PIPELINE,
 	.rating			= 300,
 	.set_next_event		= omap2_gp_timer_set_next_event,
 	.set_state_shutdown	= omap2_gp_timer_shutdown,
@@ -412,17 +413,14 @@ static bool use_gptimer_clksrc __initdata;
 /*
  * clocksource
  */
-static u64 clocksource_read_cycles(struct clocksource *cs)
-{
-	return (u64)__omap_dm_timer_read_counter(&clksrc,
-						     OMAP_TIMER_NONPOSTED);
-}
 
-static struct clocksource clocksource_gpt = {
-	.rating		= 300,
-	.read		= clocksource_read_cycles,
-	.mask		= CLOCKSOURCE_MASK(32),
-	.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
+static struct clocksource_user_mmio clocksource_gpt = {
+	.mmio.clksrc = {
+		.rating		= 300,
+		.read		= clocksource_mmio_readl_up,
+		.mask		= CLOCKSOURCE_MASK(32),
+		.flags		= CLOCK_SOURCE_IS_CONTINUOUS,
+	},
 };
 
 static u64 notrace dmtimer_read_sched_clock(void)
@@ -504,21 +502,22 @@ static void __init omap2_gptimer_clocksource_init(int gptimer_id,
 						  const char *fck_source,
 						  const char *property)
 {
+	struct clocksource_mmio_regs mmr;
 	int res;
 
 	clksrc.id = gptimer_id;
 	clksrc.errata = omap_dm_timer_get_errata();
 
 	res = omap_dm_timer_init_one(&clksrc, fck_source, property,
-				     &clocksource_gpt.name,
+				     &clocksource_gpt.mmio.clksrc.name,
 				     OMAP_TIMER_NONPOSTED);
 
 	if (soc_is_am43xx()) {
-		clocksource_gpt.suspend = omap2_gptimer_clksrc_suspend;
-		clocksource_gpt.resume = omap2_gptimer_clksrc_resume;
+		clocksource_gpt.mmio.clksrc.suspend = omap2_gptimer_clksrc_suspend;
+		clocksource_gpt.mmio.clksrc.resume = omap2_gptimer_clksrc_resume;
 
 		clocksource_gpt_hwmod =
-			omap_hwmod_lookup(clocksource_gpt.name);
+			omap_hwmod_lookup(clocksource_gpt.mmio.clksrc.name);
 	}
 
 	BUG_ON(res);
@@ -528,12 +527,18 @@ static void __init omap2_gptimer_clocksource_init(int gptimer_id,
 				   OMAP_TIMER_NONPOSTED);
 	sched_clock_register(dmtimer_read_sched_clock, 32, clksrc.rate);
 
-	if (clocksource_register_hz(&clocksource_gpt, clksrc.rate))
+	mmr.reg_lower = clksrc.func_base + (OMAP_TIMER_COUNTER_REG & 0xff);
+	mmr.bits_lower = 32;
+	mmr.reg_upper = 0;
+	mmr.bits_upper = 0;
+	mmr.revmap = NULL;
+
+	if (clocksource_user_mmio_init(&clocksource_gpt, &mmr, clksrc.rate))
 		pr_err("Could not register clocksource %s\n",
-			clocksource_gpt.name);
+			clocksource_gpt.mmio.clksrc.name);
 	else
 		pr_info("OMAP clocksource: %s at %lu Hz\n",
-			clocksource_gpt.name, clksrc.rate);
+			clocksource_gpt.mmio.clksrc.name, clksrc.rate);
 }
 
 static void __init __omap_sync32k_timer_init(int clkev_nr, const char *clkev_src,
diff --git a/arch/arm/mm/Kconfig b/arch/arm/mm/Kconfig
index 0ab3a86b1f52..7676a7db9230 100644
--- a/arch/arm/mm/Kconfig
+++ b/arch/arm/mm/Kconfig
@@ -894,7 +894,7 @@ config KUSER_HELPERS
 
 config VDSO
 	bool "Enable VDSO for acceleration of some system calls"
-	depends on AEABI && MMU && CPU_V7
+	depends on AEABI && MMU
 	default y if ARM_ARCH_TIMER
 	select GENERIC_TIME_VSYSCALL
 	help
diff --git a/arch/arm/mm/alignment.c b/arch/arm/mm/alignment.c
index 788c5cf46de5..760d021fcf72 100644
--- a/arch/arm/mm/alignment.c
+++ b/arch/arm/mm/alignment.c
@@ -19,6 +19,7 @@
 #include <linux/init.h>
 #include <linux/sched/signal.h>
 #include <linux/uaccess.h>
+#include <linux/dovetail.h>
 
 #include <asm/cp15.h>
 #include <asm/system_info.h>
@@ -810,7 +811,9 @@ do_alignment(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	int fault;
 
 	if (interrupts_enabled(regs))
-		local_irq_enable();
+		hard_local_irq_enable();
+
+	oob_trap_notify(ARM_TRAP_ALIGNMENT, regs);
 
 	instrptr = instruction_pointer(regs);
 
@@ -989,7 +992,7 @@ do_alignment(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 		 * entry-common.S) and disable the alignment trap only if
 		 * there is no work pending for this thread.
 		 */
-		raw_local_irq_disable();
+		hard_local_irq_disable();
 		if (!(current_thread_info()->flags & _TIF_WORK_MASK))
 			set_cr(cr_no_alignment);
 	}
diff --git a/arch/arm/mm/cache-l2x0.c b/arch/arm/mm/cache-l2x0.c
index 12c26eb88afb..6a4ce04b2a00 100644
--- a/arch/arm/mm/cache-l2x0.c
+++ b/arch/arm/mm/cache-l2x0.c
@@ -38,7 +38,7 @@ struct l2c_init_data {
 
 static void __iomem *l2x0_base;
 static const struct l2c_init_data *l2x0_data;
-static DEFINE_RAW_SPINLOCK(l2x0_lock);
+static DEFINE_HARD_SPINLOCK(l2x0_lock);
 static u32 l2x0_way_mask;	/* Bitmask of active ways */
 static u32 l2x0_size;
 static unsigned long sync_reg_offset = L2X0_CACHE_SYNC;
@@ -48,6 +48,19 @@ struct l2x0_regs l2x0_saved_regs;
 static bool l2x0_bresp_disable;
 static bool l2x0_flz_disable;
 
+#ifdef CONFIG_IRQ_PIPELINE
+#define CACHE_RANGE_ATOMIC_MAX	512UL
+static int l2x0_wa = -1;
+static int __init l2x0_setup_wa(char *str)
+{
+	l2x0_wa = !!simple_strtol(str, NULL, 0);
+	return 0;
+}
+early_param("l2x0_write_allocate", l2x0_setup_wa);
+#else
+#define CACHE_RANGE_ATOMIC_MAX	4096UL
+#endif
+
 /*
  * Common code for all cache controllers.
  */
@@ -284,10 +297,10 @@ static void l2c220_op_way(void __iomem *base, unsigned reg)
 static unsigned long l2c220_op_pa_range(void __iomem *reg, unsigned long start,
 	unsigned long end, unsigned long flags)
 {
-	raw_spinlock_t *lock = &l2x0_lock;
+	typeof(l2x0_lock) *lock = &l2x0_lock;
 
 	while (start < end) {
-		unsigned long blk_end = start + min(end - start, 4096UL);
+		unsigned long blk_end = start + min(end - start, CACHE_RANGE_ATOMIC_MAX);
 
 		while (start < blk_end) {
 			l2c_wait_mask(reg, 1);
@@ -498,13 +511,13 @@ static void l2c310_inv_range_erratum(unsigned long start, unsigned long end)
 
 static void l2c310_flush_range_erratum(unsigned long start, unsigned long end)
 {
-	raw_spinlock_t *lock = &l2x0_lock;
+	typeof(l2x0_lock) *lock = &l2x0_lock;
 	unsigned long flags;
 	void __iomem *base = l2x0_base;
 
 	raw_spin_lock_irqsave(lock, flags);
 	while (start < end) {
-		unsigned long blk_end = start + min(end - start, 4096UL);
+		unsigned long blk_end = start + min(end - start, CACHE_RANGE_ATOMIC_MAX);
 
 		l2c_set_debug(base, 0x03);
 		while (start < blk_end) {
@@ -800,6 +813,24 @@ static int __init __l2c_init(const struct l2c_init_data *data,
 	if (aux_val & aux_mask)
 		pr_alert("L2C: platform provided aux values permit register corruption.\n");
 
+#ifdef CONFIG_IRQ_PIPELINE
+	if (!l2x0_wa) {
+		/*
+		 * Disable WA by setting bit 23 in the auxiliary
+		 * control register.
+		 */
+		aux_mask &= ~L220_AUX_CTRL_FWA_MASK;
+		aux_val &= ~L220_AUX_CTRL_FWA_MASK;
+		aux_val |= 1 << L220_AUX_CTRL_FWA_SHIFT;
+		pr_warn("%s: irq_pipeline: write-allocate disabled via command line\n",
+			data->type);
+	} else if ((cache_id & L2X0_CACHE_ID_PART_MASK) == L2X0_CACHE_ID_PART_L220 ||
+		   ((cache_id & L2X0_CACHE_ID_PART_MASK) == L2X0_CACHE_ID_PART_L310 &&
+		    (cache_id & L2X0_CACHE_ID_RTL_MASK) < L310_CACHE_ID_RTL_R3P2))
+		pr_alert("%s: irq_pipeline: write-allocate enabled, may induce high latency\n",
+			 data->type);
+#endif
+
 	old_aux = aux = readl_relaxed(l2x0_base + L2X0_AUX_CTRL);
 	aux &= aux_mask;
 	aux |= aux_val;
diff --git a/arch/arm/mm/context.c b/arch/arm/mm/context.c
index b7525b433f3e..0cf14bd0c265 100644
--- a/arch/arm/mm/context.c
+++ b/arch/arm/mm/context.c
@@ -39,7 +39,7 @@
 #define ASID_FIRST_VERSION	(1ULL << ASID_BITS)
 #define NUM_USER_ASIDS		ASID_FIRST_VERSION
 
-static DEFINE_RAW_SPINLOCK(cpu_asid_lock);
+static DEFINE_HARD_SPINLOCK(cpu_asid_lock);
 static atomic64_t asid_generation = ATOMIC64_INIT(ASID_FIRST_VERSION);
 static DECLARE_BITMAP(asid_map, NUM_USER_ASIDS);
 
@@ -237,9 +237,12 @@ static u64 new_context(struct mm_struct *mm, unsigned int cpu)
 void check_and_switch_context(struct mm_struct *mm, struct task_struct *tsk)
 {
 	unsigned long flags;
-	unsigned int cpu = smp_processor_id();
+	unsigned int cpu = raw_smp_processor_id();
+	bool need_flush;
 	u64 asid;
 
+	WARN_ON_ONCE(dovetail_debug() && !hard_irqs_disabled());
+
 	if (unlikely(mm->context.vmalloc_seq != init_mm.context.vmalloc_seq))
 		__check_vmalloc_seq(mm);
 
@@ -263,15 +266,16 @@ void check_and_switch_context(struct mm_struct *mm, struct task_struct *tsk)
 		atomic64_set(&mm->context.id, asid);
 	}
 
-	if (cpumask_test_and_clear_cpu(cpu, &tlb_flush_pending)) {
-		local_flush_bp_all();
-		local_flush_tlb_all();
-	}
-
+	need_flush = cpumask_test_and_clear_cpu(cpu, &tlb_flush_pending);
 	atomic64_set(&per_cpu(active_asids, cpu), asid);
 	cpumask_set_cpu(cpu, mm_cpumask(mm));
 	raw_spin_unlock_irqrestore(&cpu_asid_lock, flags);
 
+	if (need_flush) {
+		local_flush_bp_all();
+		local_flush_tlb_all();
+	}
+
 switch_mm_fastpath:
 	cpu_switch_mm(mm->pgd, mm);
 }
diff --git a/arch/arm/mm/fault.c b/arch/arm/mm/fault.c
index bd0f4821f7e1..27fc2ad3d65b 100644
--- a/arch/arm/mm/fault.c
+++ b/arch/arm/mm/fault.c
@@ -9,6 +9,7 @@
 #include <linux/signal.h>
 #include <linux/mm.h>
 #include <linux/hardirq.h>
+#include <linux/irq_pipeline.h>
 #include <linux/init.h>
 #include <linux/kprobes.h>
 #include <linux/uaccess.h>
@@ -22,11 +23,98 @@
 #include <asm/system_misc.h>
 #include <asm/system_info.h>
 #include <asm/tlbflush.h>
+#include <asm/dovetail.h>
+#define CREATE_TRACE_POINTS
+#include <asm/trace/exceptions.h>
 
 #include "fault.h"
 
 #ifdef CONFIG_MMU
 
+#ifdef CONFIG_DOVETAIL
+#define fault_entry(__exception, __regs)	__fault_entry(__exception, __regs)
+#else
+#define fault_entry(__exception, __regs)	__fault_entry(-1, __regs)
+#endif
+
+#ifdef CONFIG_IRQ_PIPELINE
+/*
+ * We need to synchronize the virtual interrupt state with the hard
+ * interrupt state we received on entry, then turn hardirqs back on to
+ * allow code which does not require strict serialization to be
+ * preempted by an out-of-band activity.
+ *
+ * TRACING: the entry code already told lockdep and tracers about the
+ * hard interrupt state on entry to fault handlers, so no need to
+ * reflect changes to that state via calls to trace_hardirqs_*
+ * helpers. From the main kernel's point of view, there is no change.
+ */
+static inline
+unsigned long __fault_entry(int exception, struct pt_regs *regs)
+{
+	unsigned long flags;
+	int nosync = 1;
+
+	trace_ARM_trap_entry(exception, regs);
+
+	oob_trap_notify(exception, regs);
+
+	flags = hard_local_irq_save();
+
+	if (hard_irqs_disabled_flags(flags))
+		nosync = test_and_set_stage_bit(STAGE_STALL_BIT,
+					this_inband_staged());
+	hard_local_irq_enable();
+
+	return irqs_merge_flags(flags, nosync);
+}
+
+static inline void fault_exit(int exception, struct pt_regs *regs,
+			unsigned long combo)
+{
+	unsigned long flags;
+	int nosync;
+
+	WARN_ON_ONCE(irq_pipeline_debug() && hard_irqs_disabled());
+
+	/*
+	 * '!nosync' here means that we had to turn on the stall bit
+	 * in fault_entry() to mirror the hard interrupt state,
+	 * because hard irqs were off but the stall bit was
+	 * clear. Conversely, nosync in fault_exit() means that the
+	 * stall bit state currently reflects the hard interrupt state
+	 * we received on fault_entry().
+	 *
+	 * No hard_local_irq_restore() below, ever, but
+	 * hard_local_irq_{enable|disable}() exclusively. See
+	 * restore_stage() for an explanation.
+	 */
+	flags = irqs_split_flags(combo, &nosync);
+	if (!nosync) {
+		hard_local_irq_disable();
+		clear_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+		if (!hard_irqs_disabled_flags(flags))
+			hard_local_irq_enable();
+	} else if (hard_irqs_disabled_flags(flags))
+		hard_local_irq_disable();
+
+	trace_ARM_trap_exit(exception, regs);
+}
+
+#else	/* !CONFIG_IRQ_PIPELINE */
+
+static inline
+unsigned long __fault_entry(int exception, struct pt_regs *regs)
+{
+	return 0;
+}
+
+static inline void fault_exit(int exception, struct pt_regs *regs,
+			unsigned long combo)
+{ }
+
+#endif	/* !CONFIG_IRQ_PIPELINE */
+
 /*
  * This is useful to dump out the page tables associated with
  * 'addr' in mm 'mm'.
@@ -95,6 +183,15 @@ void show_pte(const char *lvl, struct mm_struct *mm, unsigned long addr)
 	pr_cont("\n");
 }
 #else					/* CONFIG_MMU */
+unsigned long fault_entry(int exception, struct pt_regs *regs)
+{
+	return 0;
+}
+
+static inline void fault_exit(int exception, struct pt_regs *regs,
+			unsigned long combo)
+{ }
+
 void show_pte(const char *lvl, struct mm_struct *mm, unsigned long addr)
 { }
 #endif					/* CONFIG_MMU */
@@ -115,6 +212,7 @@ __do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr,
 	/*
 	 * No handler, we'll have to terminate things with extreme prejudice.
 	 */
+	irq_pipeline_oops();
 	bust_spinlocks(1);
 	pr_alert("8<--- cut here ---\n");
 	pr_alert("Unable to handle kernel %s at virtual address %08lx\n",
@@ -167,14 +265,22 @@ void do_bad_area(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 {
 	struct task_struct *tsk = current;
 	struct mm_struct *mm = tsk->active_mm;
+	unsigned long irqflags;
 
 	/*
 	 * If we are in kernel mode at this point, we
 	 * have no context to handle this fault with.
 	 */
-	if (user_mode(regs))
+	  if (user_mode(regs)) {
+		irqflags = fault_entry(ARM_TRAP_ACCESS, regs);
 		__do_user_fault(addr, fsr, SIGSEGV, SEGV_MAPERR, regs);
-	else
+		fault_exit(ARM_TRAP_ACCESS, regs, irqflags);
+	  } else
+		/*
+		 * irq_pipeline: kernel faults are either quickly
+		 * recoverable via fixup, or lethal. In both cases, we
+		 * can skip the interrupt state synchronization.
+		 */
 		__do_kernel_fault(mm, addr, fsr, regs);
 }
 
@@ -242,9 +348,12 @@ do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	int sig, code;
 	vm_fault_t fault;
 	unsigned int flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;
+	unsigned long irqflags;
+
+	irqflags = fault_entry(ARM_TRAP_ACCESS, regs);
 
 	if (kprobe_page_fault(regs, fsr))
-		return 0;
+		goto out;
 
 	tsk = current;
 	mm  = tsk->mm;
@@ -298,7 +407,7 @@ do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	if ((fault & VM_FAULT_RETRY) && fatal_signal_pending(current)) {
 		if (!user_mode(regs))
 			goto no_context;
-		return 0;
+		goto out;
 	}
 
 	/*
@@ -333,7 +442,7 @@ do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	 * Handle the "normal" case first - VM_FAULT_MAJOR
 	 */
 	if (likely(!(fault & (VM_FAULT_ERROR | VM_FAULT_BADMAP | VM_FAULT_BADACCESS))))
-		return 0;
+		goto out;
 
 	/*
 	 * If we are in kernel mode at this point, we
@@ -349,7 +458,7 @@ do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 		 * got oom-killed)
 		 */
 		pagefault_out_of_memory();
-		return 0;
+		goto out;
 	}
 
 	if (fault & VM_FAULT_SIGBUS) {
@@ -370,10 +479,13 @@ do_page_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 	}
 
 	__do_user_fault(addr, fsr, sig, code, regs);
-	return 0;
+	goto out;
 
 no_context:
 	__do_kernel_fault(mm, addr, fsr, regs);
+out:
+	fault_exit(ARM_TRAP_ACCESS, regs, irqflags);
+
 	return 0;
 }
 #else					/* CONFIG_MMU */
@@ -411,6 +523,8 @@ do_translation_fault(unsigned long addr, unsigned int fsr,
 	pud_t *pud, *pud_k;
 	pmd_t *pmd, *pmd_k;
 
+	WARN_ON_ONCE(irqs_pipelined() && !hard_irqs_disabled());
+
 	if (addr < TASK_SIZE)
 		return do_page_fault(addr, fsr, regs);
 
@@ -481,7 +595,11 @@ do_translation_fault(unsigned long addr, unsigned int fsr,
 static int
 do_sect_fault(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 {
+	unsigned long irqflags;
+
+	irqflags = fault_entry(ARM_TRAP_SECTION, regs);
 	do_bad_area(addr, fsr, regs);
+	fault_exit(ARM_TRAP_SECTION, regs, irqflags);
 	return 0;
 }
 #endif /* CONFIG_ARM_LPAE */
@@ -529,10 +647,12 @@ asmlinkage void
 do_DataAbort(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 {
 	const struct fsr_info *inf = fsr_info + fsr_fs(fsr);
+	unsigned long irqflags;
 
 	if (!inf->fn(addr, fsr & ~FSR_LNX_PF, regs))
 		return;
 
+	irqflags = fault_entry(ARM_TRAP_DABT, regs);
 	pr_alert("8<--- cut here ---\n");
 	pr_alert("Unhandled fault: %s (0x%03x) at 0x%08lx\n",
 		inf->name, fsr, addr);
@@ -540,6 +660,7 @@ do_DataAbort(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 
 	arm_notify_die("", regs, inf->sig, inf->code, (void __user *)addr,
 		       fsr, 0);
+	fault_exit(ARM_TRAP_DABT, regs, irqflags);
 }
 
 void __init
@@ -559,15 +680,18 @@ asmlinkage void
 do_PrefetchAbort(unsigned long addr, unsigned int ifsr, struct pt_regs *regs)
 {
 	const struct fsr_info *inf = ifsr_info + fsr_fs(ifsr);
+	unsigned long irqflags;
 
 	if (!inf->fn(addr, ifsr | FSR_LNX_PF, regs))
 		return;
 
+	irqflags = fault_entry(ARM_TRAP_PABT, regs);
 	pr_alert("Unhandled prefetch abort: %s (0x%03x) at 0x%08lx\n",
 		inf->name, ifsr, addr);
 
 	arm_notify_die("", regs, inf->sig, inf->code, (void __user *)addr,
 		       ifsr, 0);
+	fault_exit(ARM_TRAP_PABT, regs, irqflags);
 }
 
 /*
diff --git a/arch/arm/vdso/datapage.S b/arch/arm/vdso/datapage.S
index 9cd73b725d9f..9beb76db2ec3 100644
--- a/arch/arm/vdso/datapage.S
+++ b/arch/arm/vdso/datapage.S
@@ -5,6 +5,8 @@
 	.align 2
 .L_vdso_data_ptr:
 	.long	_start - . - VDSO_DATA_SIZE
+.L_vdso_priv_ptr:
+	.long	_start - . - VDSO_DATA_SIZE - VDSO_PRIV_SIZE
 
 ENTRY(__get_datapage)
 	.fnstart
@@ -14,3 +16,12 @@ ENTRY(__get_datapage)
 	bx	lr
 	.fnend
 ENDPROC(__get_datapage)
+
+ENTRY(__get_privpage)
+	.fnstart
+	adr	r0, .L_vdso_priv_ptr
+	ldr	r1, [r0]
+	add	r0, r0, r1
+	bx	lr
+	.fnend
+ENDPROC(__get_privpage)
diff --git a/arch/arm/vdso/vgettimeofday.c b/arch/arm/vdso/vgettimeofday.c
index d1fdbb12760a..61f0fbc09eb6 100644
--- a/arch/arm/vdso/vgettimeofday.c
+++ b/arch/arm/vdso/vgettimeofday.c
@@ -6,6 +6,13 @@
 #include <linux/compiler.h>
 #include <linux/hrtimer.h>
 #include <linux/time.h>
+#include <linux/io.h>
+#include <linux/fcntl.h>
+#include <linux/err.h>
+#include <linux/mman.h>
+#include <linux/compiler.h>
+#include <linux/ioctl.h>
+#include <linux/clocksource.h>
 #include <asm/barrier.h>
 #include <asm/bug.h>
 #include <asm/cp15.h>
@@ -19,6 +26,182 @@
 
 extern struct vdso_data *__get_datapage(void);
 
+struct clksrc_info;
+
+typedef u64 vdso_read_cycles_fn(const struct clksrc_info *info);
+
+struct clksrc_info {
+	vdso_read_cycles_fn *read_cycles;
+	struct clksrc_user_mmio_info mmio;
+};
+
+struct vdso_priv {
+	u32 current_cs_type_and_seq;
+	struct clksrc_info clksrc_info[ARM_CLOCK_USER_MMIO_BASE + CLKSRC_USER_MMIO_MAX];
+};
+extern struct vdso_priv *__get_privpage(void);
+
+#define syscall3(nr, a0, a1, a2)			\
+	_syscall3((u32)a0, (u32)a1, (u32)a2, nr)
+
+#define syscall2(nr, a0, a1) \
+	_syscall2((u32)a0, (u32)a1, nr)
+
+#define syscall1(nr, a0) \
+	syscall2(nr, a0, 0)
+
+#define sys_open(filename, flags) \
+	syscall2(__NR_open, filename, flags)
+
+#define sys_ioctl(fd, cmd, ptr)			\
+	syscall3(__NR_ioctl, fd, cmd, ptr)
+
+#define sys_close(fd) \
+	syscall1(__NR_close, fd)
+
+#define sys_clock_gettime(id, ts) \
+	syscall2(__NR_clock_gettime, id, ts)
+
+#define sys_gettimeofday(tv, tz) \
+	syscall2(__NR_gettimeofday, tv, tz)
+
+static notrace u64 read_none(const struct clksrc_info *info)
+{
+	return 0;
+}
+
+static notrace u64 read_arch_timer(const struct clksrc_info *info)
+{
+#ifdef CONFIG_ARM_ARCH_TIMER
+	isb();
+	return read_sysreg(CNTVCT);
+#else
+	return 0;
+#endif
+}
+
+static notrace u64 readl_mmio_up(const struct clksrc_info *vinfo)
+{
+	const struct clksrc_user_mmio_info *info = &vinfo->mmio;
+	return readl_relaxed(info->reg_lower);
+}
+
+static notrace u64 readl_mmio_down(const struct clksrc_info *vinfo)
+{
+	const struct clksrc_user_mmio_info *info = &vinfo->mmio;
+	return ~(u64)readl_relaxed(info->reg_lower) & info->mask_lower;
+}
+
+static notrace u64 readw_mmio_up(const struct clksrc_info *vinfo)
+{
+	const struct clksrc_user_mmio_info *info = &vinfo->mmio;
+	return readw_relaxed(info->reg_lower);
+}
+
+static notrace u64 readw_mmio_down(const struct clksrc_info *vinfo)
+{
+	const struct clksrc_user_mmio_info *info = &vinfo->mmio;
+	return ~(u64)readl_relaxed(info->reg_lower) & info->mask_lower;
+}
+
+static notrace u64 readl_dmmio_up(const struct clksrc_info *vinfo)
+{
+	const struct clksrc_user_mmio_info *info = &vinfo->mmio;
+	void __iomem *reg_lower, *reg_upper;
+	u32 upper, old_upper, lower;
+
+	reg_lower = info->reg_lower;
+	reg_upper = info->reg_upper;
+
+	upper = readl_relaxed(reg_upper);
+	do {
+		old_upper = upper;
+		lower = readl_relaxed(reg_lower);
+		upper = readl_relaxed(reg_upper);
+	} while (upper != old_upper);
+
+	return (((u64)upper) << info->bits_lower) | lower;
+}
+
+static notrace u64 readw_dmmio_up(const struct clksrc_info *vinfo)
+{
+	const struct clksrc_user_mmio_info *info = &vinfo->mmio;
+	void __iomem *reg_lower, *reg_upper;
+	u16 upper, old_upper, lower;
+
+	reg_lower = info->reg_lower;
+	reg_upper = info->reg_upper;
+
+	upper = readw_relaxed(reg_upper);
+	do {
+		old_upper = upper;
+		lower = readw_relaxed(reg_lower);
+		upper = readw_relaxed(reg_upper);
+	} while (upper != old_upper);
+
+	return (((u64)upper) << info->bits_lower) | lower;
+}
+
+static inline notrace u16 to_type(u32 type_and_seq)
+{
+	return type_and_seq >> 16;
+}
+
+static inline notrace u16 to_seq(u32 type_and_seq)
+{
+	return type_and_seq;
+}
+
+static inline notrace u32 to_type_and_seq(u16 type, u16 seq)
+{
+	return (u32)type << 16U | seq;
+}
+
+static inline notrace bool clock_accessible(struct vdso_priv *vpriv)
+{
+	return to_type(vpriv->current_cs_type_and_seq) != ARM_CLOCK_NONE;
+}
+
+static notrace u64 read_cycles(struct vdso_priv *vpriv)
+{
+	const struct clksrc_info *info;
+	unsigned cs;
+
+	cs = to_type(READ_ONCE(vpriv->current_cs_type_and_seq));
+	info = &vpriv->clksrc_info[cs];
+	return info->read_cycles(info);
+}
+
+static notrace __cold vdso_read_cycles_fn *get_nommio_read_cycles(unsigned type)
+{
+	switch (type) {
+	case ARM_CLOCK_ARCH_TIMER:
+		return &read_arch_timer;
+	default:
+		return &read_none;
+	}
+}
+
+static notrace __cold vdso_read_cycles_fn *get_mmio_read_cycles(unsigned type)
+{
+	switch (type) {
+	case CLKSRC_MMIO_L_UP:
+		return &readl_mmio_up;
+	case CLKSRC_MMIO_L_DOWN:
+		return &readl_mmio_down;
+	case CLKSRC_MMIO_W_UP:
+		return &readw_mmio_up;
+	case CLKSRC_MMIO_W_DOWN:
+		return &readw_mmio_down;
+	case CLKSRC_DMMIO_L_UP:
+		return &readl_dmmio_up;
+	case CLKSRC_DMMIO_W_UP:
+		return &readw_dmmio_up;
+	default:
+		return &read_none;
+	}
+}
+
 static notrace u32 __vdso_read_begin(const struct vdso_data *vdata)
 {
 	u32 seq;
@@ -31,7 +214,7 @@ static notrace u32 __vdso_read_begin(const struct vdso_data *vdata)
 	return seq;
 }
 
-static notrace u32 vdso_read_begin(const struct vdso_data *vdata)
+static notrace u32 _vdso_read_begin(const struct vdso_data *vdata)
 {
 	u32 seq;
 
@@ -47,30 +230,119 @@ static notrace int vdso_read_retry(const struct vdso_data *vdata, u32 start)
 	return vdata->seq_count != start;
 }
 
-static notrace long clock_gettime_fallback(clockid_t _clkid,
-					   struct timespec *_ts)
+static notrace long _syscall3(u32 a0, u32 a1, u32 a2, u32 nr)
 {
-	register struct timespec *ts asm("r1") = _ts;
-	register clockid_t clkid asm("r0") = _clkid;
+	register u32 r0 asm("r0") = a0;
+	register u32 r1 asm("r1") = a1;
+	register u32 r2 asm("r2") = a2;
 	register long ret asm ("r0");
-	register long nr asm("r7") = __NR_clock_gettime;
+	register long _nr asm("r7") = nr;
 
 	asm volatile(
 	"	swi #0\n"
 	: "=r" (ret)
-	: "r" (clkid), "r" (ts), "r" (nr)
+	: "r"(r0), "r"(r1), "r"(r2), "r"(_nr)
 	: "memory");
 
 	return ret;
 }
 
+static notrace long _syscall2(u32 a0, u32 a1, u32 nr)
+{
+	register u32 r0 asm("r0") = a0;
+	register u32 r1 asm("r1") = a1;
+	register long ret asm ("r0");
+	register long _nr asm("r7") = nr;
+
+	asm volatile(
+	"	swi #0\n"
+	: "=r" (ret)
+	: "r"(r0), "r"(r1), "r"(_nr)
+	: "memory");
+
+	return ret;
+}
+
+static notrace noinline __cold
+void vdso_map_clock(const struct vdso_data *vdata, struct vdso_priv *vpriv,
+		    u32 seq, u32 new_type_and_seq)
+{
+	vdso_read_cycles_fn *read_cycles;
+	u32 new_cs_seq, new_cs_type;
+	struct clksrc_info *info;
+	int fd, err;
+
+	new_cs_seq = to_seq(new_type_and_seq);
+	new_cs_type = to_type(new_type_and_seq);
+	info = &vpriv->clksrc_info[new_cs_type];
+
+	if (new_cs_type < ARM_CLOCK_USER_MMIO_BASE) {
+		read_cycles = get_nommio_read_cycles(new_cs_type);
+		goto done;
+	}
+
+	err = sys_open(vdata->mmio_dev_name, O_RDONLY);
+	if (err < 0)
+		goto fallback_to_syscall;
+	fd = err;
+
+	if (vdso_read_retry(vdata, seq)) {
+		_vdso_read_begin(vdata);
+		if (to_seq(vdata->cs_type_and_seq) != new_cs_seq) {
+			/*
+			 * mmio_dev_name no longer corresponds to
+			 * vdata->cs_type_and_seq
+			 */
+			sys_close(fd);
+			return;
+		}
+	}
+
+	err = sys_ioctl(fd, CLKSRC_USER_MMIO_MAP, &info->mmio);
+	sys_close(fd);
+	if (err < 0)
+		goto fallback_to_syscall;
+
+	read_cycles = get_mmio_read_cycles(info->mmio.type);
+  done:
+	info->read_cycles = read_cycles;
+	smp_wmb();
+	new_type_and_seq = to_type_and_seq(new_cs_type, new_cs_seq);
+	WRITE_ONCE(vpriv->current_cs_type_and_seq, new_type_and_seq);
+
+	return;
+
+  fallback_to_syscall:
+	new_cs_type = ARM_CLOCK_NONE;
+	info = &vpriv->clksrc_info[new_cs_type];
+	read_cycles = get_nommio_read_cycles(new_cs_type);
+	goto done;
+}
+
+static notrace u32 vdso_read_begin(const struct vdso_data *vdata,
+				   struct vdso_priv *vpriv)
+{
+	u32 seq, cs_type_and_seq;
+
+	for (;;) {
+		seq = _vdso_read_begin(vdata);
+
+		cs_type_and_seq = READ_ONCE(vpriv->current_cs_type_and_seq);
+		if (likely(to_seq(cs_type_and_seq) == to_seq(vdata->cs_type_and_seq)))
+			return seq;
+
+		vdso_map_clock(vdata, vpriv, seq, vdata->cs_type_and_seq);
+	}
+}
+
 static notrace int do_realtime_coarse(struct timespec *ts,
-				      struct vdso_data *vdata)
+				      struct vdso_data *vdata,
+				      struct vdso_priv *vpriv)
 {
 	u32 seq;
 
 	do {
-		seq = vdso_read_begin(vdata);
+		seq = vdso_read_begin(vdata, vpriv);
 
 		ts->tv_sec = vdata->xtime_coarse_sec;
 		ts->tv_nsec = vdata->xtime_coarse_nsec;
@@ -81,13 +353,14 @@ static notrace int do_realtime_coarse(struct timespec *ts,
 }
 
 static notrace int do_monotonic_coarse(struct timespec *ts,
-				       struct vdso_data *vdata)
+				       struct vdso_data *vdata,
+				       struct vdso_priv *vpriv)
 {
 	struct timespec tomono;
 	u32 seq;
 
 	do {
-		seq = vdso_read_begin(vdata);
+		seq = vdso_read_begin(vdata, vpriv);
 
 		ts->tv_sec = vdata->xtime_coarse_sec;
 		ts->tv_nsec = vdata->xtime_coarse_nsec;
@@ -103,16 +376,13 @@ static notrace int do_monotonic_coarse(struct timespec *ts,
 	return 0;
 }
 
-#ifdef CONFIG_ARM_ARCH_TIMER
-
-static notrace u64 get_ns(struct vdso_data *vdata)
+static notrace u64 get_ns(struct vdso_data *vdata, struct vdso_priv *vpriv)
 {
 	u64 cycle_delta;
 	u64 cycle_now;
 	u64 nsec;
 
-	isb();
-	cycle_now = read_sysreg(CNTVCT);
+	cycle_now = read_cycles(vpriv);
 
 	cycle_delta = (cycle_now - vdata->cs_cycle_last) & vdata->cs_mask;
 
@@ -122,19 +392,21 @@ static notrace u64 get_ns(struct vdso_data *vdata)
 	return nsec;
 }
 
-static notrace int do_realtime(struct timespec *ts, struct vdso_data *vdata)
+static notrace int do_realtime(struct timespec *ts,
+			       struct vdso_data *vdata,
+			       struct vdso_priv *vpriv)
 {
 	u64 nsecs;
 	u32 seq;
 
 	do {
-		seq = vdso_read_begin(vdata);
+		seq = vdso_read_begin(vdata, vpriv);
 
-		if (!vdata->tk_is_cntvct)
+		if (!clock_accessible(vpriv))
 			return -1;
 
 		ts->tv_sec = vdata->xtime_clock_sec;
-		nsecs = get_ns(vdata);
+		nsecs = get_ns(vdata, vpriv);
 
 	} while (vdso_read_retry(vdata, seq));
 
@@ -144,20 +416,22 @@ static notrace int do_realtime(struct timespec *ts, struct vdso_data *vdata)
 	return 0;
 }
 
-static notrace int do_monotonic(struct timespec *ts, struct vdso_data *vdata)
+static notrace int do_monotonic(struct timespec *ts,
+				struct vdso_data *vdata,
+				struct vdso_priv *vpriv)
 {
 	struct timespec tomono;
 	u64 nsecs;
 	u32 seq;
 
 	do {
-		seq = vdso_read_begin(vdata);
+		seq = vdso_read_begin(vdata, vpriv);
 
-		if (!vdata->tk_is_cntvct)
+		if (!clock_accessible(vpriv))
 			return -1;
 
 		ts->tv_sec = vdata->xtime_clock_sec;
-		nsecs = get_ns(vdata);
+		nsecs = get_ns(vdata, vpriv);
 
 		tomono.tv_sec = vdata->wtm_clock_sec;
 		tomono.tv_nsec = vdata->wtm_clock_nsec;
@@ -171,63 +445,34 @@ static notrace int do_monotonic(struct timespec *ts, struct vdso_data *vdata)
 	return 0;
 }
 
-#else /* CONFIG_ARM_ARCH_TIMER */
-
-static notrace int do_realtime(struct timespec *ts, struct vdso_data *vdata)
-{
-	return -1;
-}
-
-static notrace int do_monotonic(struct timespec *ts, struct vdso_data *vdata)
-{
-	return -1;
-}
-
-#endif /* CONFIG_ARM_ARCH_TIMER */
-
 notrace int __vdso_clock_gettime(clockid_t clkid, struct timespec *ts)
 {
 	struct vdso_data *vdata;
+	struct vdso_priv *vpriv;
 	int ret = -1;
 
 	vdata = __get_datapage();
+	vpriv = __get_privpage();
 
 	switch (clkid) {
 	case CLOCK_REALTIME_COARSE:
-		ret = do_realtime_coarse(ts, vdata);
+		ret = do_realtime_coarse(ts, vdata, vpriv);
 		break;
 	case CLOCK_MONOTONIC_COARSE:
-		ret = do_monotonic_coarse(ts, vdata);
+		ret = do_monotonic_coarse(ts, vdata, vpriv);
 		break;
 	case CLOCK_REALTIME:
-		ret = do_realtime(ts, vdata);
+		ret = do_realtime(ts, vdata, vpriv);
 		break;
 	case CLOCK_MONOTONIC:
-		ret = do_monotonic(ts, vdata);
+		ret = do_monotonic(ts, vdata, vpriv);
 		break;
 	default:
 		break;
 	}
 
 	if (ret)
-		ret = clock_gettime_fallback(clkid, ts);
-
-	return ret;
-}
-
-static notrace long gettimeofday_fallback(struct timeval *_tv,
-					  struct timezone *_tz)
-{
-	register struct timezone *tz asm("r1") = _tz;
-	register struct timeval *tv asm("r0") = _tv;
-	register long ret asm ("r0");
-	register long nr asm("r7") = __NR_gettimeofday;
-
-	asm volatile(
-	"	swi #0\n"
-	: "=r" (ret)
-	: "r" (tv), "r" (tz), "r" (nr)
-	: "memory");
+		ret = sys_clock_gettime(clkid, ts);
 
 	return ret;
 }
@@ -236,13 +481,15 @@ notrace int __vdso_gettimeofday(struct timeval *tv, struct timezone *tz)
 {
 	struct timespec ts;
 	struct vdso_data *vdata;
+	struct vdso_priv *vpriv;
 	int ret;
 
 	vdata = __get_datapage();
+	vpriv = __get_privpage();
 
-	ret = do_realtime(&ts, vdata);
+	ret = do_realtime(&ts, vdata, vpriv);
 	if (ret)
-		return gettimeofday_fallback(tv, tz);
+		return sys_gettimeofday(tv, tz);
 
 	if (tv) {
 		tv->tv_sec = ts.tv_sec;
diff --git a/arch/arm/vfp/entry.S b/arch/arm/vfp/entry.S
index 0186cf9da890..cc56142a4191 100644
--- a/arch/arm/vfp/entry.S
+++ b/arch/arm/vfp/entry.S
@@ -23,6 +23,7 @@
 @
 ENTRY(do_vfp)
 	inc_preempt_count r10, r4
+	disable_irq_if_pipelined
  	ldr	r4, .LCvfp
 	ldr	r11, [r10, #TI_CPU]	@ CPU number
 	add	r10, r10, #TI_VFPSTATE	@ r10 = workspace
@@ -30,6 +31,7 @@ ENTRY(do_vfp)
 ENDPROC(do_vfp)
 
 ENTRY(vfp_null_entry)
+	enable_irq_if_pipelined
 	dec_preempt_count_ti r10, r4
 	ret	lr
 ENDPROC(vfp_null_entry)
@@ -43,6 +45,7 @@ ENDPROC(vfp_null_entry)
 
 	__INIT
 ENTRY(vfp_testing_entry)
+	enable_irq_if_pipelined
 	dec_preempt_count_ti r10, r4
 	ldr	r0, VFP_arch_address
 	str	r0, [r0]		@ set to non-zero value
diff --git a/arch/arm/vfp/vfphw.S b/arch/arm/vfp/vfphw.S
index b2e560290860..1f07393c8907 100644
--- a/arch/arm/vfp/vfphw.S
+++ b/arch/arm/vfp/vfphw.S
@@ -174,6 +174,7 @@ vfp_hw_state_valid:
 					@ out before setting an FPEXC that
 					@ stops us reading stuff
 	VFPFMXR	FPEXC, r1		@ Restore FPEXC last
+	enable_irq_if_pipelined
 	sub	r2, r2, #4		@ Retry current instruction - if Thumb
 	str	r2, [sp, #S_PC]		@ mode it's two 16-bit instructions,
 					@ else it's one 32-bit instruction, so
@@ -203,6 +204,7 @@ skip:
 	@ Fall into hand on to next handler - appropriate coproc instr
 	@ not recognised by VFP
 
+	enable_irq_if_pipelined
 	DBGSTR	"not VFP"
 	dec_preempt_count_ti r10, r4
 	ret	lr
diff --git a/arch/arm/vfp/vfpmodule.c b/arch/arm/vfp/vfpmodule.c
index 8c9e7f9f0277..54acebb4cd4d 100644
--- a/arch/arm/vfp/vfpmodule.c
+++ b/arch/arm/vfp/vfpmodule.c
@@ -18,6 +18,7 @@
 #include <linux/uaccess.h>
 #include <linux/user.h>
 #include <linux/export.h>
+#include <linux/smp.h>
 
 #include <asm/cp15.h>
 #include <asm/cputype.h>
@@ -90,6 +91,7 @@ static void vfp_force_reload(unsigned int cpu, struct thread_info *thread)
 static void vfp_thread_flush(struct thread_info *thread)
 {
 	union vfp_state *vfp = &thread->vfpstate;
+	unsigned long flags;
 	unsigned int cpu;
 
 	/*
@@ -100,11 +102,11 @@ static void vfp_thread_flush(struct thread_info *thread)
 	 * Do this first to ensure that preemption won't overwrite our
 	 * state saving should access to the VFP be enabled at this point.
 	 */
-	cpu = get_cpu();
+	cpu = hard_get_cpu(flags);
 	if (vfp_current_hw_state[cpu] == vfp)
 		vfp_current_hw_state[cpu] = NULL;
 	fmxr(FPEXC, fmrx(FPEXC) & ~FPEXC_EN);
-	put_cpu();
+	hard_put_cpu(flags);
 
 	memset(vfp, 0, sizeof(union vfp_state));
 
@@ -119,11 +121,12 @@ static void vfp_thread_exit(struct thread_info *thread)
 {
 	/* release case: Per-thread VFP cleanup. */
 	union vfp_state *vfp = &thread->vfpstate;
-	unsigned int cpu = get_cpu();
+	unsigned long flags;
+	unsigned int cpu = hard_get_cpu(flags);
 
 	if (vfp_current_hw_state[cpu] == vfp)
 		vfp_current_hw_state[cpu] = NULL;
-	put_cpu();
+	hard_put_cpu(flags);
 }
 
 static void vfp_thread_copy(struct thread_info *thread)
@@ -159,6 +162,7 @@ static void vfp_thread_copy(struct thread_info *thread)
 static int vfp_notifier(struct notifier_block *self, unsigned long cmd, void *v)
 {
 	struct thread_info *thread = v;
+	unsigned long flags;
 	u32 fpexc;
 #ifdef CONFIG_SMP
 	unsigned int cpu;
@@ -166,6 +170,7 @@ static int vfp_notifier(struct notifier_block *self, unsigned long cmd, void *v)
 
 	switch (cmd) {
 	case THREAD_NOTIFY_SWITCH:
+		flags = hard_cond_local_irq_save();
 		fpexc = fmrx(FPEXC);
 
 #ifdef CONFIG_SMP
@@ -185,6 +190,7 @@ static int vfp_notifier(struct notifier_block *self, unsigned long cmd, void *v)
 		 * old state.
 		 */
 		fmxr(FPEXC, fpexc & ~FPEXC_EN);
+		hard_cond_local_irq_restore(flags);
 		break;
 
 	case THREAD_NOTIFY_FLUSH:
@@ -322,7 +328,7 @@ static u32 vfp_emulate_instruction(u32 inst, u32 fpscr, struct pt_regs *regs)
  */
 void VFP_bounce(u32 trigger, u32 fpexc, struct pt_regs *regs)
 {
-	u32 fpscr, orig_fpscr, fpsid, exceptions;
+	u32 fpscr, orig_fpscr, fpsid, exceptions, next_trigger = 0;
 
 	pr_debug("VFP: bounce: trigger %08x fpexc %08x\n", trigger, fpexc);
 
@@ -352,6 +358,7 @@ void VFP_bounce(u32 trigger, u32 fpexc, struct pt_regs *regs)
 		/*
 		 * Synchronous exception, emulate the trigger instruction
 		 */
+		hard_cond_local_irq_enable();
 		goto emulate;
 	}
 
@@ -364,7 +371,18 @@ void VFP_bounce(u32 trigger, u32 fpexc, struct pt_regs *regs)
 		trigger = fmrx(FPINST);
 		regs->ARM_pc -= 4;
 #endif
-	} else if (!(fpexc & FPEXC_DEX)) {
+		if (fpexc & FPEXC_FP2V) {
+			/*
+			 * The barrier() here prevents fpinst2 being read
+			 * before the condition above.
+			 */
+			barrier();
+			next_trigger = fmrx(FPINST2);
+		}
+	}
+	hard_cond_local_irq_enable();
+
+	if (!(fpexc & (FPEXC_EX | FPEXC_DEX))) {
 		/*
 		 * Illegal combination of bits. It can be caused by an
 		 * unallocated VFP instruction but with FPSCR.IXE set and not
@@ -404,18 +422,14 @@ void VFP_bounce(u32 trigger, u32 fpexc, struct pt_regs *regs)
 	if ((fpexc & (FPEXC_EX | FPEXC_FP2V)) != (FPEXC_EX | FPEXC_FP2V))
 		goto exit;
 
-	/*
-	 * The barrier() here prevents fpinst2 being read
-	 * before the condition above.
-	 */
-	barrier();
-	trigger = fmrx(FPINST2);
+	trigger = next_trigger;
 
  emulate:
 	exceptions = vfp_emulate_instruction(trigger, orig_fpscr, regs);
 	if (exceptions)
 		vfp_raise_exceptions(exceptions, trigger, orig_fpscr, regs);
  exit:
+	hard_cond_local_irq_enable();
 	preempt_enable();
 }
 
@@ -515,7 +529,8 @@ static inline void vfp_pm_init(void) { }
  */
 void vfp_sync_hwstate(struct thread_info *thread)
 {
-	unsigned int cpu = get_cpu();
+	unsigned long flags;
+	unsigned int cpu = hard_get_cpu(flags);
 
 	if (vfp_state_in_hw(cpu, thread)) {
 		u32 fpexc = fmrx(FPEXC);
@@ -528,17 +543,18 @@ void vfp_sync_hwstate(struct thread_info *thread)
 		fmxr(FPEXC, fpexc);
 	}
 
-	put_cpu();
+	hard_put_cpu(flags);
 }
 
 /* Ensure that the thread reloads the hardware VFP state on the next use. */
 void vfp_flush_hwstate(struct thread_info *thread)
 {
-	unsigned int cpu = get_cpu();
+	unsigned long flags;
+	unsigned int cpu = hard_get_cpu(flags);
 
 	vfp_force_reload(cpu, thread);
 
-	put_cpu();
+	hard_put_cpu(flags);
 }
 
 /*
diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 3f047afb982c..29a05a471ceb 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -132,6 +132,7 @@ config ARM64
 	select HAVE_ARCH_TRACEHOOK
 	select HAVE_ARCH_TRANSPARENT_HUGEPAGE
 	select HAVE_ARCH_VMAP_STACK
+	select HAVE_ARCH_EVL
 	select HAVE_ARM_SMCCC
 	select HAVE_ASM_MODVERSIONS
 	select HAVE_EBPF_JIT
@@ -151,6 +152,8 @@ config ARM64
 	select HAVE_FUNCTION_GRAPH_TRACER
 	select HAVE_GCC_PLUGINS
 	select HAVE_HW_BREAKPOINT if PERF_EVENTS
+	select HAVE_IRQ_PIPELINE
+	select HAVE_DOVETAIL
 	select HAVE_IRQ_TIME_ACCOUNTING
 	select HAVE_MEMBLOCK_NODE_MAP if NUMA
 	select HAVE_NMI
@@ -961,6 +964,8 @@ config SECCOMP
 	  and the task is only allowed to execute a few safe syscalls
 	  defined by each seccomp mode.
 
+source "kernel/Kconfig.dovetail"
+
 config PARAVIRT
 	bool "Enable paravirtualization code"
 	help
@@ -1576,6 +1581,8 @@ config STACKPROTECTOR_PER_TASK
 
 endmenu
 
+source "kernel/Kconfig.evl"
+
 menu "Boot options"
 
 config ARM64_ACPI_PARKING_PROTOCOL
diff --git a/arch/arm64/Makefile b/arch/arm64/Makefile
index 2c0238ce0551..20ead2d1f0bc 100644
--- a/arch/arm64/Makefile
+++ b/arch/arm64/Makefile
@@ -91,6 +91,10 @@ endif
 
 CHECKFLAGS	+= -D__aarch64__
 
+ifeq ($(CONFIG_EVL),y)
+KBUILD_CFLAGS += -Iarch/$(SRCARCH)/evl/include -Iinclude/evl
+endif
+
 ifeq ($(CONFIG_ARM64_MODULE_PLTS),y)
 KBUILD_LDS_MODULE	+= $(srctree)/arch/arm64/kernel/module.lds
 endif
diff --git a/arch/arm64/boot/dts/broadcom/Makefile b/arch/arm64/boot/dts/broadcom/Makefile
index d1d31ccad758..473da7c12853 100644
--- a/arch/arm64/boot/dts/broadcom/Makefile
+++ b/arch/arm64/boot/dts/broadcom/Makefile
@@ -2,6 +2,7 @@
 dtb-$(CONFIG_ARCH_BCM2835) += bcm2837-rpi-3-a-plus.dtb \
 			      bcm2837-rpi-3-b.dtb \
 			      bcm2837-rpi-3-b-plus.dtb \
+			      bcm2837-rpi-3-b-nobt.dtb \
 			      bcm2837-rpi-cm3-io3.dtb
 
 subdir-y	+= northstar2
diff --git a/arch/arm64/boot/dts/broadcom/bcm2837-rpi-3-b-nobt.dts b/arch/arm64/boot/dts/broadcom/bcm2837-rpi-3-b-nobt.dts
new file mode 100644
index 000000000000..43f9d0f665cb
--- /dev/null
+++ b/arch/arm64/boot/dts/broadcom/bcm2837-rpi-3-b-nobt.dts
@@ -0,0 +1,12 @@
+/dts-v1/;
+#include "bcm2837-rpi-3-b.dts"
+
+&uart0 {
+	status = "okay";
+	pinctrl-names = "default";
+	pinctrl-0 = <&uart0_gpio32>;
+};
+
+&uart1 {
+	status = "disabled";
+};
diff --git a/arch/arm64/include/asm/assembler.h b/arch/arm64/include/asm/assembler.h
index b8cf7c85ffa2..a0f962d95fe8 100644
--- a/arch/arm64/include/asm/assembler.h
+++ b/arch/arm64/include/asm/assembler.h
@@ -63,6 +63,12 @@
 	msr	daif, \flags
 	.endm
 
+	.macro	enable_irq_if_pipelined
+#ifdef CONFIG_IRQ_PIPELINE
+	msr	daifclr, #2
+#endif
+	.endm
+
 	.macro	enable_dbg
 	msr	daifclr, #8
 	.endm
diff --git a/arch/arm64/include/asm/daifflags.h b/arch/arm64/include/asm/daifflags.h
index 063c964af705..9379fb0d1caf 100644
--- a/arch/arm64/include/asm/daifflags.h
+++ b/arch/arm64/include/asm/daifflags.h
@@ -10,6 +10,12 @@
 #include <asm/arch_gicv3.h>
 #include <asm/cpufeature.h>
 
+/*
+ * irq_pipeline: DAIF masking is only used in contexts where hard
+ * interrupt masking applies, so no need to virtualize for the inband
+ * stage here (the pipeline core does assume this).
+ */
+
 #define DAIF_PROCCTX		0
 #define DAIF_PROCCTX_NOIRQ	PSR_I_BIT
 #define DAIF_ERRCTX		(PSR_I_BIT | PSR_A_BIT)
diff --git a/arch/arm64/include/asm/dovetail.h b/arch/arm64/include/asm/dovetail.h
new file mode 100644
index 000000000000..4802df0c347c
--- /dev/null
+++ b/arch/arm64/include/asm/dovetail.h
@@ -0,0 +1,29 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef _ASM_ARM64_DOVETAIL_H
+#define _ASM_ARM64_DOVETAIL_H
+
+#include <asm/fpsimd.h>
+
+/* ARM64 traps */
+#define ARM64_TRAP_ACCESS	0	/* Data or instruction access exception */
+#define ARM64_TRAP_ABRT		1	/* Memory/alignment abort */
+#define ARM64_TRAP_SEA		2	/* Synchronous external abort */
+#define ARM64_TRAP_DEBUG	3	/* Debug trap */
+#define ARM64_TRAP_UNDI		4	/* Undefined instruction */
+#define ARM64_TRAP_UNDSE	5	/* Undefined synchronous exception */
+#define ARM64_TRAP_FPE		6	/* FPSIMD exception */
+#define ARM64_TRAP_SVE		7	/* SVE access trap */
+
+static inline void arch_dovetail_switch_prepare(bool leave_inband)
+{ }
+
+static inline void arch_dovetail_switch_finish(bool enter_inband)
+{
+	fpsimd_restore_current_oob();
+}
+
+#endif /* _ASM_ARM64_DOVETAIL_H */
diff --git a/arch/arm64/include/asm/efi.h b/arch/arm64/include/asm/efi.h
index b54d3a86c444..0bdb392861ca 100644
--- a/arch/arm64/include/asm/efi.h
+++ b/arch/arm64/include/asm/efi.h
@@ -135,6 +135,10 @@ static inline void efifb_setup_from_dmi(struct screen_info *si, const char *opt)
 
 static inline void efi_set_pgd(struct mm_struct *mm)
 {
+	unsigned long flags;
+
+	protect_inband_mm(flags);
+
 	__switch_mm(mm);
 
 	if (system_uses_ttbr0_pan()) {
@@ -159,6 +163,8 @@ static inline void efi_set_pgd(struct mm_struct *mm)
 			update_saved_ttbr0(current, current->active_mm);
 		}
 	}
+
+	unprotect_inband_mm(flags);
 }
 
 void efi_virtmap_load(void);
diff --git a/arch/arm64/include/asm/evl/fptest.h b/arch/arm64/include/asm/evl/fptest.h
new file mode 100644
index 000000000000..a853b1206d23
--- /dev/null
+++ b/arch/arm64/include/asm/evl/fptest.h
@@ -0,0 +1,28 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_ARM64_ASM_FPTEST_H
+#define _EVL_ARM64_ASM_FPTEST_H
+
+#include <linux/cpufeature.h>
+#include <uapi/asm/evl/fptest.h>
+
+static inline bool evl_begin_fpu(void)
+{
+	return false;
+}
+
+static inline void evl_end_fpu(void) { }
+
+static inline u32 evl_detect_fpu(void)
+{
+	u32 features = 0;
+
+	if (system_supports_fpsimd())
+		return features |= evl_arm64_fpsimd;
+
+	if (system_supports_sve())
+		return features |= evl_arm64_sve;
+
+	return features;
+}
+
+#endif /* _EVL_ARM64_ASM_FPTEST_H */
diff --git a/arch/arm64/include/asm/evl/syscall.h b/arch/arm64/include/asm/evl/syscall.h
new file mode 100644
index 000000000000..52579d000951
--- /dev/null
+++ b/arch/arm64/include/asm/evl/syscall.h
@@ -0,0 +1,45 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_ARM64_ASM_SYSCALL_H
+#define _EVL_ARM64_ASM_SYSCALL_H
+
+#include <linux/uaccess.h>
+#include <asm/unistd.h>
+#include <asm/ptrace.h>
+#include <uapi/asm/evl/syscall.h>
+
+#define raw_put_user(src, dst)  __put_user(src, dst)
+#define raw_get_user(dst, src)  __get_user(dst, src)
+
+#define is_oob_syscall(__regs)	((__regs)->syscallno & __EVL_SYSCALL_BIT)
+#define oob_syscall_nr(__regs)	((__regs)->syscallno & ~__EVL_SYSCALL_BIT)
+
+#define oob_retval(__regs)	((__regs)->regs[0])
+#define oob_arg1(__regs)	((__regs)->regs[0])
+#define oob_arg2(__regs)	((__regs)->regs[1])
+#define oob_arg3(__regs)	((__regs)->regs[2])
+#define oob_arg4(__regs)	((__regs)->regs[3])
+#define oob_arg5(__regs)	((__regs)->regs[4])
+
+/*
+ * Fetch and test inband syscall number (valid only if
+ * !is_oob_syscall(__regs)).
+ */
+#define inband_syscall_nr(__regs, __nr)			\
+	({						\
+		*(__nr) = oob_syscall_nr(__regs);	\
+		!is_oob_syscall(__regs);		\
+	})
+
+static inline void
+set_oob_error(struct pt_regs *regs, int err)
+{
+	oob_retval(regs) = err;
+}
+
+static inline
+void set_oob_retval(struct pt_regs *regs, long ret)
+{
+	oob_retval(regs) = ret;
+}
+
+#endif /* !_EVL_ARM64_ASM_SYSCALL_H */
diff --git a/arch/arm64/include/asm/evl/thread.h b/arch/arm64/include/asm/evl/thread.h
new file mode 100644
index 000000000000..3939cdbd110e
--- /dev/null
+++ b/arch/arm64/include/asm/evl/thread.h
@@ -0,0 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_ARM64_ASM_THREAD_H
+#define _EVL_ARM64_ASM_THREAD_H
+
+static inline bool evl_is_breakpoint(int trapnr)
+{
+	return trapnr == ARM64_TRAP_DEBUG || trapnr == ARM64_TRAP_UNDI;
+}
+
+#endif /* !_EVL_ARM64_ASM_THREAD_H */
diff --git a/arch/arm64/include/asm/fpsimd.h b/arch/arm64/include/asm/fpsimd.h
index 59f10dd13f12..1f8faac0dacf 100644
--- a/arch/arm64/include/asm/fpsimd.h
+++ b/arch/arm64/include/asm/fpsimd.h
@@ -43,6 +43,7 @@ extern void fpsimd_flush_thread(void);
 extern void fpsimd_signal_preserve_current_state(void);
 extern void fpsimd_preserve_current_state(void);
 extern void fpsimd_restore_current_state(void);
+extern void fpsimd_restore_current_oob(void);
 extern void fpsimd_update_current_state(struct user_fpsimd_state const *state);
 
 extern void fpsimd_bind_task_to_cpu(void);
diff --git a/arch/arm64/include/asm/irq_pipeline.h b/arch/arm64/include/asm/irq_pipeline.h
new file mode 100644
index 000000000000..86b7f9521ad8
--- /dev/null
+++ b/arch/arm64/include/asm/irq_pipeline.h
@@ -0,0 +1,125 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef _ASM_ARM64_IRQ_PIPELINE_H
+#define _ASM_ARM64_IRQ_PIPELINE_H
+
+#include <asm-generic/irq_pipeline.h>
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+/*
+ * Out-of-band IPIs are directly mapped to SGI1-2, instead of
+ * multiplexed over SGI0 like regular in-band messages.
+ */
+#define OOB_IPI_BASE		2048
+#define OOB_NR_IPI		2
+#define TIMER_OOB_IPI		(OOB_IPI_BASE + NR_IPI)
+#define RESCHEDULE_OOB_IPI	(OOB_IPI_BASE + NR_IPI + 1)
+
+static inline notrace
+unsigned long arch_irqs_virtual_to_native_flags(int stalled)
+{
+	return (!!stalled) << IRQMASK_I_POS;
+}
+
+static inline notrace
+unsigned long arch_irqs_native_to_virtual_flags(unsigned long flags)
+{
+	return (!!hard_irqs_disabled_flags(flags)) << IRQMASK_i_POS;
+}
+
+static inline notrace unsigned long arch_local_irq_save(void)
+{
+	int stalled = inband_irq_save();
+	barrier();
+	return arch_irqs_virtual_to_native_flags(stalled);
+}
+
+static inline notrace void arch_local_irq_enable(void)
+{
+	barrier();
+	inband_irq_enable();
+}
+
+static inline notrace void arch_local_irq_disable(void)
+{
+	inband_irq_disable();
+	barrier();
+}
+
+static inline notrace unsigned long arch_local_save_flags(void)
+{
+	int stalled = inband_irqs_disabled();
+	barrier();
+	return arch_irqs_virtual_to_native_flags(stalled);
+}
+
+static inline int arch_irqs_disabled_flags(unsigned long flags)
+{
+	return native_irqs_disabled_flags(flags);
+}
+
+static inline notrace void arch_local_irq_restore(unsigned long flags)
+{
+	inband_irq_restore(arch_irqs_disabled_flags(flags));
+	barrier();
+}
+
+static inline
+void arch_save_timer_regs(struct pt_regs *dst,
+			  struct pt_regs *src, bool head_context)
+{
+	dst->pstate = src->pstate;
+	dst->pc = src->pc;
+	if (head_context)
+		dst->pstate |= IRQMASK_I_BIT;
+}
+
+static inline bool arch_steal_pipelined_tick(struct pt_regs *regs)
+{
+	return !!(regs->pstate & IRQMASK_I_BIT);
+}
+
+static inline int arch_enable_oob_stage(void)
+{
+	return 0;
+}
+
+#else  /* !CONFIG_IRQ_PIPELINE */
+
+static inline unsigned long arch_local_irq_save(void)
+{
+	return native_irq_save();
+}
+
+static inline void arch_local_irq_enable(void)
+{
+	native_irq_enable();
+}
+
+static inline void arch_local_irq_disable(void)
+{
+	native_irq_disable();
+}
+
+static inline unsigned long arch_local_save_flags(void)
+{
+	return native_save_flags();
+}
+
+static inline void arch_local_irq_restore(unsigned long flags)
+{
+	native_irq_restore(flags);
+}
+
+static inline int arch_irqs_disabled_flags(unsigned long flags)
+{
+	return native_irqs_disabled_flags(flags);
+}
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
+#endif /* _ASM_ARM64_IRQ_PIPELINE_H */
diff --git a/arch/arm64/include/asm/irqflags.h b/arch/arm64/include/asm/irqflags.h
index 1a59f0ed1ae3..5e4306e63cad 100644
--- a/arch/arm64/include/asm/irqflags.h
+++ b/arch/arm64/include/asm/irqflags.h
@@ -9,6 +9,10 @@
 #include <asm/ptrace.h>
 #include <asm/sysreg.h>
 
+#define IRQMASK_I_BIT	PSR_I_BIT
+#define IRQMASK_I_POS	7
+#define IRQMASK_i_POS	31
+
 /*
  * Aarch64 has flags for masking: Debug, Asynchronous (serror), Interrupts and
  * FIQ exceptions, in the 'daif' register. We mask and unmask them in 'dai'
@@ -25,7 +29,7 @@
 /*
  * CPU interrupt mask handling.
  */
-static inline void arch_local_irq_enable(void)
+static inline void native_irq_enable(void)
 {
 	if (system_has_prio_mask_debugging()) {
 		u32 pmr = read_sysreg_s(SYS_ICC_PMR_EL1);
@@ -34,7 +38,7 @@ static inline void arch_local_irq_enable(void)
 	}
 
 	asm volatile(ALTERNATIVE(
-		"msr	daifclr, #2		// arch_local_irq_enable\n"
+		"msr	daifclr, #2		// native_irq_enable\n"
 		"nop",
 		__msr_s(SYS_ICC_PMR_EL1, "%0")
 		"dsb	sy",
@@ -44,7 +48,7 @@ static inline void arch_local_irq_enable(void)
 		: "memory");
 }
 
-static inline void arch_local_irq_disable(void)
+static inline void native_irq_disable(void)
 {
 	if (system_has_prio_mask_debugging()) {
 		u32 pmr = read_sysreg_s(SYS_ICC_PMR_EL1);
@@ -53,7 +57,7 @@ static inline void arch_local_irq_disable(void)
 	}
 
 	asm volatile(ALTERNATIVE(
-		"msr	daifset, #2		// arch_local_irq_disable",
+		"msr	daifset, #2		// native_irq_disable",
 		__msr_s(SYS_ICC_PMR_EL1, "%0"),
 		ARM64_HAS_IRQ_PRIO_MASKING)
 		:
@@ -61,10 +65,17 @@ static inline void arch_local_irq_disable(void)
 		: "memory");
 }
 
+static inline void native_irq_sync(void)
+{
+	native_irq_enable();
+	isb();
+	native_irq_disable();
+}
+
 /*
  * Save the current interrupt enable state.
  */
-static inline unsigned long arch_local_save_flags(void)
+static inline unsigned long native_save_flags(void)
 {
 	unsigned long flags;
 
@@ -79,7 +90,7 @@ static inline unsigned long arch_local_save_flags(void)
 	return flags;
 }
 
-static inline int arch_irqs_disabled_flags(unsigned long flags)
+static inline int native_irqs_disabled_flags(unsigned long flags)
 {
 	int res;
 
@@ -94,18 +105,18 @@ static inline int arch_irqs_disabled_flags(unsigned long flags)
 	return res;
 }
 
-static inline unsigned long arch_local_irq_save(void)
+static inline unsigned long native_irq_save(void)
 {
 	unsigned long flags;
 
-	flags = arch_local_save_flags();
+	flags = native_save_flags();
 
 	/*
 	 * There are too many states with IRQs disabled, just keep the current
 	 * state if interrupts are already disabled/masked.
 	 */
-	if (!arch_irqs_disabled_flags(flags))
-		arch_local_irq_disable();
+	if (!native_irqs_disabled_flags(flags))
+		native_irq_disable();
 
 	return flags;
 }
@@ -113,7 +124,7 @@ static inline unsigned long arch_local_irq_save(void)
 /*
  * restore saved IRQ state
  */
-static inline void arch_local_irq_restore(unsigned long flags)
+static inline void native_irq_restore(unsigned long flags)
 {
 	asm volatile(ALTERNATIVE(
 			"msr	daif, %0\n"
@@ -126,4 +137,12 @@ static inline void arch_local_irq_restore(unsigned long flags)
 		: "memory");
 }
 
+static inline bool native_irqs_disabled(void)
+{
+	unsigned long flags = native_save_flags();
+	return native_irqs_disabled_flags(flags);
+}
+
+#include <asm/irq_pipeline.h>
+
 #endif /* __ASM_IRQFLAGS_H */
diff --git a/arch/arm64/include/asm/mmu_context.h b/arch/arm64/include/asm/mmu_context.h
index 3827ff4040a3..35c659fc9c1e 100644
--- a/arch/arm64/include/asm/mmu_context.h
+++ b/arch/arm64/include/asm/mmu_context.h
@@ -113,6 +113,9 @@ static inline void __cpu_set_tcr_t0sz(unsigned long t0sz)
 static inline void cpu_uninstall_idmap(void)
 {
 	struct mm_struct *mm = current->active_mm;
+	unsigned long flags;
+
+	flags = hard_cond_local_irq_save();
 
 	cpu_set_reserved_ttbr0();
 	local_flush_tlb_all();
@@ -120,15 +123,23 @@ static inline void cpu_uninstall_idmap(void)
 
 	if (mm != &init_mm && !system_uses_ttbr0_pan())
 		cpu_switch_mm(mm->pgd, mm);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 static inline void cpu_install_idmap(void)
 {
+	unsigned long flags;
+
+	flags = hard_cond_local_irq_save();
+
 	cpu_set_reserved_ttbr0();
 	local_flush_tlb_all();
 	cpu_set_idmap_tcr_t0sz();
 
 	cpu_switch_mm(lm_alias(idmap_pg_dir), &init_mm);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 /*
@@ -227,7 +238,7 @@ static inline void __switch_mm(struct mm_struct *next)
 }
 
 static inline void
-switch_mm(struct mm_struct *prev, struct mm_struct *next,
+do_switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	  struct task_struct *tsk)
 {
 	if (prev != next)
@@ -242,8 +253,26 @@ switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	update_saved_ttbr0(tsk, next);
 }
 
+static inline void
+switch_mm(struct mm_struct *prev, struct mm_struct *next,
+	  struct task_struct *tsk)
+{
+	unsigned long flags;
+
+	protect_inband_mm(flags);
+	do_switch_mm(prev, next, tsk);
+	unprotect_inband_mm(flags);
+}
+
 #define deactivate_mm(tsk,mm)	do { } while (0)
-#define activate_mm(prev,next)	switch_mm(prev, next, current)
+#define activate_mm(prev,next)	do_switch_mm(prev, next, current)
+
+static inline void
+switch_oob_mm(struct mm_struct *prev, struct mm_struct *next,
+	      struct task_struct *tsk)
+{
+	do_switch_mm(prev, next, tsk);
+}
 
 void verify_cpu_asid_bits(void);
 void post_ttbr_update_workaround(void);
diff --git a/arch/arm64/include/asm/smp.h b/arch/arm64/include/asm/smp.h
index a0c8a0b65259..7a75ddfc14d3 100644
--- a/arch/arm64/include/asm/smp.h
+++ b/arch/arm64/include/asm/smp.h
@@ -56,10 +56,15 @@ struct seq_file;
 extern void show_ipi_list(struct seq_file *p, int prec);
 
 /*
- * Called from C code, this handles an IPI.
+ * Called from C code, this handles an IPI (including pipelined ones).
  */
 extern void handle_IPI(int ipinr, struct pt_regs *regs);
 
+/*
+ * Handles IPIs for the in-band stage exclusively.
+ */
+void __handle_IPI(int ipinr, struct pt_regs *regs);
+
 /*
  * Discover the set of possible CPUs and determine their
  * SMP operations.
@@ -73,6 +78,8 @@ extern void set_smp_cross_call(void (*)(const struct cpumask *, unsigned int));
 
 extern void (*__smp_cross_call)(const struct cpumask *, unsigned int);
 
+void smp_cross_call(const struct cpumask *target, unsigned int ipinr);
+
 /*
  * Called from the secondary holding pen, this is the secondary CPU entry point.
  */
diff --git a/arch/arm64/include/asm/thread_info.h b/arch/arm64/include/asm/thread_info.h
index f0cec4160136..1da8cc3ca560 100644
--- a/arch/arm64/include/asm/thread_info.h
+++ b/arch/arm64/include/asm/thread_info.h
@@ -14,6 +14,7 @@
 
 struct task_struct;
 
+#include <dovetail/thread_info.h>
 #include <asm/memory.h>
 #include <asm/stack_pointer.h>
 #include <asm/types.h>
@@ -25,6 +26,7 @@ typedef unsigned long mm_segment_t;
  */
 struct thread_info {
 	unsigned long		flags;		/* low level flags */
+	unsigned long		local_flags;	/* local (synchronous) flags */
 	mm_segment_t		addr_limit;	/* address limit */
 #ifdef CONFIG_ARM64_SW_TTBR0_PAN
 	u64			ttbr0;		/* saved TTBR0_EL1 */
@@ -41,6 +43,7 @@ struct thread_info {
 #endif
 		} preempt;
 	};
+	struct oob_thread_state	oob_state;	/* co-kernel thread state */
 };
 
 #define thread_saved_pc(tsk)	\
@@ -55,6 +58,8 @@ void arch_setup_new_exec(void);
 
 void arch_release_task_struct(struct task_struct *tsk);
 
+#define ti_local_flags(__ti)	((__ti)->local_flags)
+
 #endif
 
 #define TIF_SIGPENDING		0	/* signal pending */
@@ -78,6 +83,7 @@ void arch_release_task_struct(struct task_struct *tsk);
 #define TIF_SVE_VL_INHERIT	24	/* Inherit sve_vl_onexec across exec */
 #define TIF_SSBD		25	/* Wants SSB mitigation */
 #define TIF_TAGGED_ADDR		26	/* Allow tagged user addresses */
+#define TIF_MAYDAY		27	/* Emergency trap pending */
 
 #define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)
 #define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
@@ -93,6 +99,7 @@ void arch_release_task_struct(struct task_struct *tsk);
 #define _TIF_FSCHECK		(1 << TIF_FSCHECK)
 #define _TIF_32BIT		(1 << TIF_32BIT)
 #define _TIF_SVE		(1 << TIF_SVE)
+#define _TIF_MAYDAY		(1 << TIF_MAYDAY)
 
 #define _TIF_WORK_MASK		(_TIF_NEED_RESCHED | _TIF_SIGPENDING | \
 				 _TIF_NOTIFY_RESUME | _TIF_FOREIGN_FPSTATE | \
@@ -109,4 +116,11 @@ void arch_release_task_struct(struct task_struct *tsk);
 	.addr_limit	= KERNEL_DS,					\
 }
 
+/*
+ * Local (synchronous) thread flags.
+ */
+#define _TLF_OOB		0x0001
+#define _TLF_DOVETAIL		0x0002
+#define _TLF_OFFSTAGE		0x0004
+
 #endif /* __ASM_THREAD_INFO_H */
diff --git a/arch/arm64/include/asm/uaccess.h b/arch/arm64/include/asm/uaccess.h
index 097d6bfac0b7..ee245097cb62 100644
--- a/arch/arm64/include/asm/uaccess.h
+++ b/arch/arm64/include/asm/uaccess.h
@@ -104,7 +104,7 @@ static inline void __uaccess_ttbr0_disable(void)
 {
 	unsigned long flags, ttbr;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	ttbr = read_sysreg(ttbr1_el1);
 	ttbr &= ~TTBR_ASID_MASK;
 	/* reserved_ttbr0 placed before swapper_pg_dir */
@@ -113,7 +113,7 @@ static inline void __uaccess_ttbr0_disable(void)
 	/* Set reserved ASID */
 	write_sysreg(ttbr, ttbr1_el1);
 	isb();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline void __uaccess_ttbr0_enable(void)
@@ -125,7 +125,7 @@ static inline void __uaccess_ttbr0_enable(void)
 	 * variable and the MSR. A context switch could trigger an ASID
 	 * roll-over and an update of 'ttbr0'.
 	 */
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	ttbr0 = READ_ONCE(current_thread_info()->ttbr0);
 
 	/* Restore active ASID */
@@ -138,7 +138,7 @@ static inline void __uaccess_ttbr0_enable(void)
 	/* Restore user page table */
 	write_sysreg(ttbr0, ttbr0_el1);
 	isb();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline bool uaccess_ttbr0_disable(void)
diff --git a/arch/arm64/include/dovetail/irq.h b/arch/arm64/include/dovetail/irq.h
new file mode 100644
index 000000000000..f214e2f6ee2b
--- /dev/null
+++ b/arch/arm64/include/dovetail/irq.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_DOVETAIL_IRQ_H
+#define _EVL_DOVETAIL_IRQ_H
+
+#ifdef CONFIG_EVL
+#include <asm-generic/evl/irq.h>
+#else
+#include_next <dovetail/irq.h>
+#endif
+
+#endif /* !_EVL_DOVETAIL_IRQ_H */
diff --git a/arch/arm64/include/dovetail/thread_info.h b/arch/arm64/include/dovetail/thread_info.h
new file mode 100644
index 000000000000..4253b13fe47f
--- /dev/null
+++ b/arch/arm64/include/dovetail/thread_info.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_DOVETAIL_THREAD_INFO_H
+#define _EVL_DOVETAIL_THREAD_INFO_H
+
+#include <asm-generic/evl/thread_info.h>
+
+#endif /* !_EVL_DOVETAIL_THREAD_INFO_H */
diff --git a/arch/arm64/include/uapi/asm/evl/fptest.h b/arch/arm64/include/uapi/asm/evl/fptest.h
new file mode 100644
index 000000000000..e083e952c2c7
--- /dev/null
+++ b/arch/arm64/include/uapi/asm/evl/fptest.h
@@ -0,0 +1,94 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>.
+ */
+#ifndef _EVL_ARM64_ASM_UAPI_FPTEST_H
+#define _EVL_ARM64_ASM_UAPI_FPTEST_H
+
+#include <linux/types.h>
+
+#define evl_arm64_fpsimd  0x1
+#define evl_arm64_sve     0x2
+
+/*
+ * CAUTION: keep this code strictly inlined in macros: we don't want
+ * GCC to apply any callee-saved logic to fpsimd registers in
+ * evl_set_fpregs() before evl_check_fpregs() can verify their
+ * contents, but we still want GCC to know about the registers we have
+ * clobbered.
+ */
+
+#define evl_set_fpregs(__features, __val)				\
+	do {								\
+		unsigned int __i;					\
+		__u64 __e[32];						\
+									\
+		if (__features & evl_arm64_fpsimd) {			\
+			for (__i = 0; __i < 32; __i++)			\
+				__e[__i] = (__val);			\
+			__asm__ __volatile__("ldp  d0, d1, [%0, #8 * 0] \n"	\
+					     "ldp  d2, d3, [%0, #8 * 2] \n"	\
+					     "ldp  d4, d5, [%0, #8 * 4]\n"	\
+					     "ldp  d6, d7, [%0, #8 * 6]\n"	\
+					     "ldp  d8, d9, [%0, #8 * 8]\n"	\
+					     "ldp  d10, d11, [%0, #8 * 10]\n"	\
+					     "ldp  d12, d13, [%0, #8 * 12]\n"	\
+					     "ldp  d14, d15, [%0, #8 * 14]\n"	\
+					     "ldp  d16, d17, [%0, #8 * 16]\n"	\
+					     "ldp  d18, d19, [%0, #8 * 18]\n"	\
+					     "ldp  d20, d21, [%0, #8 * 20]\n"	\
+					     "ldp  d22, d23, [%0, #8 * 22]\n"	\
+					     "ldp  d24, d25, [%0, #8 * 24]\n"	\
+					     "ldp  d26, d27, [%0, #8 * 26]\n"	\
+					     "ldp  d28, d29, [%0, #8 * 28]\n"	\
+					     "ldp  d30, d31, [%0, #8 * 30]\n"	\
+					     : /* No outputs. */	\
+					     : "r"(&__e[0])		\
+					     : "d0", "d1", "d2", "d3", "d4", "d5", "d6",	\
+					       "d7", "d8", "d9", "d10", "d11", "d12", "d13",	\
+					       "d14", "d15", "d16", "d17", "d18", "d19",	\
+					       "d20", "d21", "d22", "d23", "d24", "d25",	\
+					       "d26", "d27", "d28", "d29", "d30", "d31",	\
+					       "memory");		\
+		}							\
+	} while (0)
+
+#define evl_check_fpregs(__features, __val, __bad)			\
+	({								\
+		unsigned int __result = (__val), __i;			\
+		__u64 __e[32];						\
+									\
+		if (__features & evl_arm64_fpsimd) {			\
+			__asm__ __volatile__("stp  d0, d1, [%0, #8 * 0] \n"	\
+					     "stp  d2, d3, [%0, #8 * 2] \n"	\
+					     "stp  d4, d5, [%0, #8 * 4]\n"	\
+					     "stp  d6, d7, [%0, #8 * 6]\n"	\
+					     "stp  d8, d9, [%0, #8 * 8]\n"	\
+					     "stp  d10, d11, [%0, #8 * 10]\n"	\
+					     "stp  d12, d13, [%0, #8 * 12]\n"	\
+					     "stp  d14, d15, [%0, #8 * 14]\n"	\
+					     "stp  d16, d17, [%0, #8 * 16]\n"	\
+					     "stp  d18, d19, [%0, #8 * 18]\n"	\
+					     "stp  d20, d21, [%0, #8 * 20]\n"	\
+					     "stp  d22, d23, [%0, #8 * 22]\n"	\
+					     "stp  d24, d25, [%0, #8 * 24]\n"	\
+					     "stp  d26, d27, [%0, #8 * 26]\n"	\
+					     "stp  d28, d29, [%0, #8 * 28]\n"	\
+					     "stp  d30, d31, [%0, #8 * 30]\n"	\
+					     :  /* No outputs. */	\
+					     : "r"(&__e[0])		\
+					     : "memory");		\
+									\
+			for (__i = 0; __i < 32; __i++)			\
+				if (__e[__i] != __val) {		\
+					__result = __e[__i];		\
+					(__bad) = __i;			\
+					break;				\
+				}					\
+		}							\
+		__result;						\
+	})
+
+#endif /* !_EVL_ARM64_ASM_UAPI_FPTEST_H */
diff --git a/arch/arm64/include/uapi/asm/evl/syscall.h b/arch/arm64/include/uapi/asm/evl/syscall.h
new file mode 100644
index 000000000000..212ff2528aac
--- /dev/null
+++ b/arch/arm64/include/uapi/asm/evl/syscall.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _EVL_ARM64_ASM_UAPI_SYSCALL_H
+#define _EVL_ARM64_ASM_UAPI_SYSCALL_H
+
+#define __EVL_SYSCALL_BIT	0x10000000
+
+#endif /* !_EVL_ARM64_ASM_UAPI_SYSCALL_H */
diff --git a/arch/arm64/kernel/Makefile b/arch/arm64/kernel/Makefile
index 478491f07b4f..7028bca90cc2 100644
--- a/arch/arm64/kernel/Makefile
+++ b/arch/arm64/kernel/Makefile
@@ -51,6 +51,7 @@ obj-$(CONFIG_ACPI)			+= acpi.o
 obj-$(CONFIG_ACPI_NUMA)			+= acpi_numa.o
 obj-$(CONFIG_ARM64_ACPI_PARKING_PROTOCOL)	+= acpi_parking_protocol.o
 obj-$(CONFIG_PARAVIRT)			+= paravirt.o
+obj-$(CONFIG_IRQ_PIPELINE)		+= irq_pipeline.o
 obj-$(CONFIG_RANDOMIZE_BASE)		+= kaslr.o
 obj-$(CONFIG_HIBERNATION)		+= hibernate.o hibernate-asm.o
 obj-$(CONFIG_KEXEC_CORE)		+= machine_kexec.o relocate_kernel.o	\
diff --git a/arch/arm64/kernel/asm-offsets.c b/arch/arm64/kernel/asm-offsets.c
index 214685760e1c..65587e6657f5 100644
--- a/arch/arm64/kernel/asm-offsets.c
+++ b/arch/arm64/kernel/asm-offsets.c
@@ -29,6 +29,7 @@ int main(void)
   DEFINE(TSK_ACTIVE_MM,		offsetof(struct task_struct, active_mm));
   BLANK();
   DEFINE(TSK_TI_FLAGS,		offsetof(struct task_struct, thread_info.flags));
+  DEFINE(TSK_TI_LOCAL_FLAGS,	offsetof(struct task_struct, thread_info.local_flags));
   DEFINE(TSK_TI_PREEMPT,	offsetof(struct task_struct, thread_info.preempt_count));
   DEFINE(TSK_TI_ADDR_LIMIT,	offsetof(struct task_struct, thread_info.addr_limit));
 #ifdef CONFIG_ARM64_SW_TTBR0_PAN
diff --git a/arch/arm64/kernel/entry.S b/arch/arm64/kernel/entry.S
index cf3bd2976e57..0d61832e7578 100644
--- a/arch/arm64/kernel/entry.S
+++ b/arch/arm64/kernel/entry.S
@@ -384,6 +384,21 @@ alternative_insn eret, nop, ARM64_UNMAP_KERNEL_AT_EL0
 	.macro	irq_stack_entry
 	mov	x19, sp			// preserve the original sp
 
+#ifdef CONFIG_DOVETAIL
+	/*
+	 * When the pipeline is enabled, context switches over the irq
+	 * stack are allowed (for the co-kernel), and more interrupts
+	 * can be taken over sibling stack contexts. So we need a not so
+	 * subtle way of figuring out whether the irq stack was actually
+	 * exited, which cannot depend on the current task pointer.
+	 */
+	adr_this_cpu x25, irq_nesting, x26
+	ldr	w26, [x25]
+	cmp	w26, #0
+	add	w26, w26, #1
+	str	w26, [x25]
+	b.ne	9998f
+#else
 	/*
 	 * Compare sp with the base of the task stack.
 	 * If the top ~(THREAD_SIZE - 1) bits match, we are on a task stack,
@@ -393,6 +408,7 @@ alternative_insn eret, nop, ARM64_UNMAP_KERNEL_AT_EL0
 	eor	x25, x25, x19
 	and	x25, x25, #~(THREAD_SIZE - 1)
 	cbnz	x25, 9998f
+#endif
 
 	ldr_this_cpu x25, irq_stack_ptr, x26
 	mov	x26, #IRQ_STACK_SIZE
@@ -405,10 +421,17 @@ alternative_insn eret, nop, ARM64_UNMAP_KERNEL_AT_EL0
 
 	/*
 	 * x19 should be preserved between irq_stack_entry and
-	 * irq_stack_exit.
+	 * irq_stack_exit. IRQ_PIPELINE: caution, we have to
+	 * preserve w0.
 	 */
 	.macro	irq_stack_exit
 	mov	sp, x19
+#ifdef CONFIG_DOVETAIL
+	adr_this_cpu x1, irq_nesting, x2
+	ldr	w2, [x1]
+	add	w2, w2, #-1
+	str	w2, [x1]
+#endif
 	.endm
 
 /* GPRs used by entry code */
@@ -418,7 +441,11 @@ tsk	.req	x28		// current thread_info
  * Interrupt handling.
  */
 	.macro	irq_handler
+#ifdef CONFIG_IRQ_PIPELINE
+	ldr	x1, =handle_arch_irq_pipelined
+#else
 	ldr_l	x1, handle_arch_irq
+#endif
 	mov	x0, sp
 	irq_stack_entry
 	blr	x1
@@ -669,6 +696,10 @@ el1_irq:
 
 	irq_handler
 
+#ifdef CONFIG_IRQ_PIPELINE
+	cbz     w0, 66f
+#endif
+
 #ifdef CONFIG_PREEMPT
 	ldr	x24, [tsk, #TSK_TI_PREEMPT]	// get preempt count
 alternative_if ARM64_HAS_IRQ_PRIO_MASKING
@@ -684,6 +715,7 @@ alternative_else_nop_endif
 1:
 #endif
 
+66:
 #ifdef CONFIG_ARM64_PSEUDO_NMI
 	/*
 	 * When using IRQ priority masking, we can get spurious interrupts while
@@ -701,7 +733,7 @@ alternative_else_nop_endif
 	test_irqs_unmasked	res=x0, pmr=x20
 	cbnz	x0, 1f
 #endif
-	bl	trace_hardirqs_on
+	bl	trace_hardirqs_on_pipelined
 1:
 #endif
 
@@ -940,13 +972,24 @@ el0_irq_naked:
 1:
 #endif
 	irq_handler
-
+#ifdef CONFIG_IRQ_PIPELINE
+	cbz	w0, work_done_el0
+#endif
 #ifdef CONFIG_TRACE_IRQFLAGS
-	bl	trace_hardirqs_on
+	bl	trace_hardirqs_on_pipelined
 #endif
-	b	ret_to_user
+	disable_daif
+	b	ret_to_user_noirq
 ENDPROC(el0_irq)
 
+#ifdef CONFIG_IRQ_PIPELINE
+work_done_el0:
+#ifdef CONFIG_TRACE_IRQFLAGS
+	bl	trace_hardirqs_on_pipelined
+#endif
+	b	work_done
+#endif
+
 el1_error:
 	kernel_entry 1
 	mrs	x1, esr_el1
@@ -980,6 +1023,7 @@ work_pending:
 #ifdef CONFIG_TRACE_IRQFLAGS
 	bl	trace_hardirqs_on		// enabled while in userspace
 #endif
+work_done:
 	ldr	x1, [tsk, #TSK_TI_FLAGS]	// re-check for single-step
 	b	finish_ret_to_user
 /*
@@ -988,6 +1032,12 @@ work_pending:
 ret_to_user:
 	disable_daif
 	gic_prio_kentry_setup tmp=x3
+#ifdef CONFIG_IRQ_PIPELINE
+	ldr	x0, [tsk, #TSK_TI_LOCAL_FLAGS]
+	tst	x0, #_TLF_OOB
+	b.ne	work_done
+#endif
+ret_to_user_noirq:
 	ldr	x1, [tsk, #TSK_TI_FLAGS]
 	and	x2, x1, #_TIF_WORK_MASK
 	cbnz	x2, work_pending
@@ -1163,6 +1213,7 @@ NOKPROBE(cpu_switch_to)
  * This is how we return from a fork.
  */
 ENTRY(ret_from_fork)
+	enable_irq_if_pipelined
 	bl	schedule_tail
 	cbz	x19, 1f				// not a kernel thread
 	mov	x0, x20
diff --git a/arch/arm64/kernel/fpsimd.c b/arch/arm64/kernel/fpsimd.c
index 37d3912cfe06..d194bff98777 100644
--- a/arch/arm64/kernel/fpsimd.c
+++ b/arch/arm64/kernel/fpsimd.c
@@ -29,7 +29,7 @@
 #include <linux/stddef.h>
 #include <linux/sysctl.h>
 #include <linux/swab.h>
-
+#include <linux/dovetail.h>
 #include <asm/esr.h>
 #include <asm/fpsimd.h>
 #include <asm/cpufeature.h>
@@ -156,6 +156,42 @@ static void __get_cpu_fpsimd_context(void)
 	WARN_ON(busy);
 }
 
+static void __put_cpu_fpsimd_context(void)
+{
+	bool busy = __this_cpu_xchg(fpsimd_context_busy, false);
+
+	WARN_ON(!busy); /* No matching get_cpu_fpsimd_context()? */
+}
+
+#ifdef CONFIG_DOVETAIL
+
+#define get_cpu_fpsimd_context(__flags)			\
+	do {						\
+		(__flags) = hard_preempt_disable();	\
+		__get_cpu_fpsimd_context();		\
+	} while (0)
+
+#define put_cpu_fpsimd_context(__flags)		\
+	do {					\
+		__put_cpu_fpsimd_context();	\
+		hard_preempt_enable(__flags);	\
+	} while (0)
+
+void fpsimd_restore_current_oob(void)
+{
+	/*
+	 * Restore the fpsimd context for the current task as it
+	 * resumes from dovetail_context_switch(), which always happen
+	 * on the out-of-band stage. Skip this for kernel threads
+	 * which have no such context but always bear
+	 * TIF_FOREIGN_FPSTATE.
+	 */
+	if (current->mm)
+		fpsimd_restore_current_state();
+}
+
+#else
+
 /*
  * Claim ownership of the CPU FPSIMD context for use by the calling context.
  *
@@ -165,18 +201,12 @@ static void __get_cpu_fpsimd_context(void)
  * The double-underscore version must only be called if you know the task
  * can't be preempted.
  */
-static void get_cpu_fpsimd_context(void)
-{
-	preempt_disable();
-	__get_cpu_fpsimd_context();
-}
-
-static void __put_cpu_fpsimd_context(void)
-{
-	bool busy = __this_cpu_xchg(fpsimd_context_busy, false);
-
-	WARN_ON(!busy); /* No matching get_cpu_fpsimd_context()? */
-}
+#define get_cpu_fpsimd_context(__flags)			\
+	do {						\
+		preempt_disable();			\
+		__get_cpu_fpsimd_context();		\
+		(void)(__flags);			\
+	} while (0)
 
 /*
  * Release the CPU FPSIMD context.
@@ -185,11 +215,14 @@ static void __put_cpu_fpsimd_context(void)
  * previously called, with no call to put_cpu_fpsimd_context() in the
  * meantime.
  */
-static void put_cpu_fpsimd_context(void)
-{
-	__put_cpu_fpsimd_context();
-	preempt_enable();
-}
+#define put_cpu_fpsimd_context(__flags)			\
+	do {						\
+		__put_cpu_fpsimd_context();		\
+		preempt_enable();			\
+		(void)(__flags);			\
+	} while (0)
+
+#endif	/* !CONFIG_DOVETAIL */
 
 static bool have_cpu_fpsimd_context(void)
 {
@@ -269,7 +302,7 @@ static void sve_free(struct task_struct *task)
  */
 static void task_fpsimd_load(void)
 {
-	WARN_ON(!have_cpu_fpsimd_context());
+	WARN_ON(!hard_irqs_disabled() && !have_cpu_fpsimd_context());
 
 	if (system_supports_sve() && test_thread_flag(TIF_SVE))
 		sve_load_state(sve_pffr(&current->thread),
@@ -283,13 +316,13 @@ static void task_fpsimd_load(void)
  * Ensure FPSIMD/SVE storage in memory for the loaded context is up to
  * date with respect to the CPU registers.
  */
-static void fpsimd_save(void)
+static void __fpsimd_save(void)
 {
 	struct fpsimd_last_state_struct const *last =
 		this_cpu_ptr(&fpsimd_last_state);
 	/* set by fpsimd_bind_task_to_cpu() or fpsimd_bind_state_to_cpu() */
 
-	WARN_ON(!have_cpu_fpsimd_context());
+	WARN_ON(!hard_irqs_disabled() && !have_cpu_fpsimd_context());
 
 	if (!test_thread_flag(TIF_FOREIGN_FPSTATE)) {
 		if (system_supports_sve() && test_thread_flag(TIF_SVE)) {
@@ -311,6 +344,15 @@ static void fpsimd_save(void)
 	}
 }
 
+void fpsimd_save(void)
+{
+	unsigned long flags;
+
+	flags = hard_cond_local_irq_save();
+	__fpsimd_save();
+	hard_cond_local_irq_restore(flags);
+}
+
 /*
  * All vector length selection from userspace comes through here.
  * We're on a slow path, so some sanity-checks are included.
@@ -430,7 +472,7 @@ static void __fpsimd_to_sve(void *sst, struct user_fpsimd_state const *fst,
  * task->thread.uw.fpsimd_state must be up to date before calling this
  * function.
  */
-static void fpsimd_to_sve(struct task_struct *task)
+static void _fpsimd_to_sve(struct task_struct *task)
 {
 	unsigned int vq;
 	void *sst = task->thread.sve_state;
@@ -443,6 +485,15 @@ static void fpsimd_to_sve(struct task_struct *task)
 	__fpsimd_to_sve(sst, fst, vq);
 }
 
+static void fpsimd_to_sve(struct task_struct *task)
+{
+	unsigned long flags;
+
+	flags = hard_cond_local_irq_save();
+	_fpsimd_to_sve(task);
+	hard_cond_local_irq_restore(flags);
+}
+
 /*
  * Transfer the SVE state in task->thread.sve_state to
  * task->thread.uw.fpsimd_state.
@@ -461,15 +512,20 @@ static void sve_to_fpsimd(struct task_struct *task)
 	struct user_fpsimd_state *fst = &task->thread.uw.fpsimd_state;
 	unsigned int i;
 	__uint128_t const *p;
+	unsigned long flags;
 
 	if (!system_supports_sve())
 		return;
 
+	flags = hard_cond_local_irq_save();
+
 	vq = sve_vq_from_vl(task->thread.sve_vl);
 	for (i = 0; i < SVE_NUM_ZREGS; ++i) {
 		p = (__uint128_t const *)ZREG(sst, vq, i);
 		fst->vregs[i] = arm64_le128_to_cpu(*p);
 	}
+
+	hard_cond_local_irq_restore(flags);
 }
 
 #ifdef CONFIG_ARM64_SVE
@@ -570,6 +626,8 @@ void sve_sync_from_fpsimd_zeropad(struct task_struct *task)
 int sve_set_vector_length(struct task_struct *task,
 			  unsigned long vl, unsigned long flags)
 {
+	unsigned long irqflags = 0;
+
 	if (flags & ~(unsigned long)(PR_SVE_VL_INHERIT |
 				     PR_SVE_SET_VL_ONEXEC))
 		return -EINVAL;
@@ -607,9 +665,9 @@ int sve_set_vector_length(struct task_struct *task,
 	 * non-SVE thread.
 	 */
 	if (task == current) {
-		get_cpu_fpsimd_context();
+		get_cpu_fpsimd_context(irqflags);
 
-		fpsimd_save();
+		__fpsimd_save();
 	}
 
 	fpsimd_flush_task_state(task);
@@ -617,7 +675,7 @@ int sve_set_vector_length(struct task_struct *task,
 		sve_to_fpsimd(task);
 
 	if (task == current)
-		put_cpu_fpsimd_context();
+		put_cpu_fpsimd_context(irqflags);
 
 	/*
 	 * Force reallocation of task SVE state to the correct size
@@ -922,6 +980,10 @@ void fpsimd_release_task(struct task_struct *dead_task)
  */
 asmlinkage void do_sve_acc(unsigned int esr, struct pt_regs *regs)
 {
+	unsigned long flags;
+
+	oob_trap_notify(ARM64_TRAP_SVE, regs);
+
 	/* Even if we chose not to use SVE, the hardware could still trap: */
 	if (unlikely(!system_supports_sve()) || WARN_ON(is_compat_task())) {
 		force_signal_inject(SIGILL, ILL_ILLOPC, regs->pc);
@@ -930,9 +992,9 @@ asmlinkage void do_sve_acc(unsigned int esr, struct pt_regs *regs)
 
 	sve_alloc(current);
 
-	get_cpu_fpsimd_context();
+	get_cpu_fpsimd_context(flags);
 
-	fpsimd_save();
+	__fpsimd_save();
 
 	/* Force ret_to_user to reload the registers: */
 	fpsimd_flush_task_state(current);
@@ -941,7 +1003,7 @@ asmlinkage void do_sve_acc(unsigned int esr, struct pt_regs *regs)
 	if (test_and_set_thread_flag(TIF_SVE))
 		WARN_ON(1); /* SVE access shouldn't have trapped */
 
-	put_cpu_fpsimd_context();
+	put_cpu_fpsimd_context(flags);
 }
 
 /*
@@ -973,6 +1035,8 @@ asmlinkage void do_fpsimd_exc(unsigned int esr, struct pt_regs *regs)
 			si_code = FPE_FLTRES;
 	}
 
+	oob_trap_notify(ARM64_TRAP_FPE, regs);
+
 	send_sig_fault(SIGFPE, si_code,
 		       (void __user *)instruction_pointer(regs),
 		       current);
@@ -981,14 +1045,17 @@ asmlinkage void do_fpsimd_exc(unsigned int esr, struct pt_regs *regs)
 void fpsimd_thread_switch(struct task_struct *next)
 {
 	bool wrong_task, wrong_cpu;
+	unsigned long flags;
 
 	if (!system_supports_fpsimd())
 		return;
 
+	flags = hard_cond_local_irq_save();
+
 	__get_cpu_fpsimd_context();
 
 	/* Save unsaved fpsimd state, if any: */
-	fpsimd_save();
+	__fpsimd_save();
 
 	/*
 	 * Fix up TIF_FOREIGN_FPSTATE to correctly describe next's
@@ -1003,16 +1070,19 @@ void fpsimd_thread_switch(struct task_struct *next)
 			       wrong_task || wrong_cpu);
 
 	__put_cpu_fpsimd_context();
+
+	hard_cond_local_irq_restore(flags);
 }
 
 void fpsimd_flush_thread(void)
 {
 	int vl, supported_vl;
+	unsigned long flags;
 
 	if (!system_supports_fpsimd())
 		return;
 
-	get_cpu_fpsimd_context();
+	get_cpu_fpsimd_context(flags);
 
 	fpsimd_flush_task_state(current);
 	memset(&current->thread.uw.fpsimd_state, 0,
@@ -1053,7 +1123,7 @@ void fpsimd_flush_thread(void)
 			current->thread.sve_vl_onexec = 0;
 	}
 
-	put_cpu_fpsimd_context();
+	put_cpu_fpsimd_context(flags);
 }
 
 /*
@@ -1062,12 +1132,14 @@ void fpsimd_flush_thread(void)
  */
 void fpsimd_preserve_current_state(void)
 {
+	unsigned long flags;
+
 	if (!system_supports_fpsimd())
 		return;
 
-	get_cpu_fpsimd_context();
-	fpsimd_save();
-	put_cpu_fpsimd_context();
+	get_cpu_fpsimd_context(flags);
+	__fpsimd_save();
+	put_cpu_fpsimd_context(flags);
 }
 
 /*
@@ -1108,19 +1180,29 @@ void fpsimd_bind_task_to_cpu(void)
 	}
 }
 
-void fpsimd_bind_state_to_cpu(struct user_fpsimd_state *st, void *sve_state,
+static void __fpsimd_bind_state_to_cpu(struct user_fpsimd_state *st, void *sve_state,
 			      unsigned int sve_vl)
 {
 	struct fpsimd_last_state_struct *last =
 		this_cpu_ptr(&fpsimd_last_state);
 
-	WARN_ON(!in_softirq() && !irqs_disabled());
-
 	last->st = st;
 	last->sve_state = sve_state;
 	last->sve_vl = sve_vl;
 }
 
+void fpsimd_bind_state_to_cpu(struct user_fpsimd_state *st, void *sve_state,
+			      unsigned int sve_vl)
+{
+	unsigned long flags;
+
+	WARN_ON(!in_softirq() && !irqs_disabled());
+
+	flags = hard_cond_local_irq_save();
+	__fpsimd_bind_state_to_cpu(st, sve_state, sve_vl);
+	hard_cond_local_irq_restore(flags);
+}
+
 /*
  * Load the userland FPSIMD state of 'current' from memory, but only if the
  * FPSIMD state already held in the registers is /not/ the most recent FPSIMD
@@ -1128,17 +1210,19 @@ void fpsimd_bind_state_to_cpu(struct user_fpsimd_state *st, void *sve_state,
  */
 void fpsimd_restore_current_state(void)
 {
+	unsigned long flags;
+
 	if (!system_supports_fpsimd())
 		return;
 
-	get_cpu_fpsimd_context();
+	get_cpu_fpsimd_context(flags);
 
 	if (test_and_clear_thread_flag(TIF_FOREIGN_FPSTATE)) {
 		task_fpsimd_load();
 		fpsimd_bind_task_to_cpu();
 	}
 
-	put_cpu_fpsimd_context();
+	put_cpu_fpsimd_context(flags);
 }
 
 /*
@@ -1148,21 +1232,23 @@ void fpsimd_restore_current_state(void)
  */
 void fpsimd_update_current_state(struct user_fpsimd_state const *state)
 {
+	unsigned long flags;
+
 	if (!system_supports_fpsimd())
 		return;
 
-	get_cpu_fpsimd_context();
+	get_cpu_fpsimd_context(flags);
 
 	current->thread.uw.fpsimd_state = *state;
 	if (system_supports_sve() && test_thread_flag(TIF_SVE))
-		fpsimd_to_sve(current);
+		_fpsimd_to_sve(current);
 
 	task_fpsimd_load();
 	fpsimd_bind_task_to_cpu();
 
 	clear_thread_flag(TIF_FOREIGN_FPSTATE);
 
-	put_cpu_fpsimd_context();
+	put_cpu_fpsimd_context(flags);
 }
 
 /*
@@ -1203,9 +1289,9 @@ static void fpsimd_flush_cpu_state(void)
  */
 void fpsimd_save_and_flush_cpu_state(void)
 {
-	WARN_ON(preemptible());
+	WARN_ON(!hard_irqs_disabled() && preemptible());
 	__get_cpu_fpsimd_context();
-	fpsimd_save();
+	__fpsimd_save();
 	fpsimd_flush_cpu_state();
 	__put_cpu_fpsimd_context();
 }
@@ -1231,18 +1317,23 @@ void fpsimd_save_and_flush_cpu_state(void)
  */
 void kernel_neon_begin(void)
 {
+	unsigned long flags;
+
 	if (WARN_ON(!system_supports_fpsimd()))
 		return;
 
 	BUG_ON(!may_use_simd());
 
-	get_cpu_fpsimd_context();
+	get_cpu_fpsimd_context(flags);
 
 	/* Save unsaved fpsimd state, if any: */
-	fpsimd_save();
+	__fpsimd_save();
 
 	/* Invalidate any task state remaining in the fpsimd regs: */
 	fpsimd_flush_cpu_state();
+
+	if (dovetailing())
+		hard_cond_local_irq_restore(flags);
 }
 EXPORT_SYMBOL(kernel_neon_begin);
 
@@ -1257,10 +1348,12 @@ EXPORT_SYMBOL(kernel_neon_begin);
  */
 void kernel_neon_end(void)
 {
+	unsigned long flags = hard_local_save_flags();
+
 	if (!system_supports_fpsimd())
 		return;
 
-	put_cpu_fpsimd_context();
+	put_cpu_fpsimd_context(flags);
 }
 EXPORT_SYMBOL(kernel_neon_end);
 
@@ -1350,9 +1443,13 @@ void __efi_fpsimd_end(void)
 static int fpsimd_cpu_pm_notifier(struct notifier_block *self,
 				  unsigned long cmd, void *v)
 {
+	unsigned long flags;
+
 	switch (cmd) {
 	case CPU_PM_ENTER:
+		flags = hard_cond_local_irq_save();
 		fpsimd_save_and_flush_cpu_state();
+		hard_cond_local_irq_restore(flags);
 		break;
 	case CPU_PM_EXIT:
 		break;
diff --git a/arch/arm64/kernel/irq.c b/arch/arm64/kernel/irq.c
index 04a327ccf84d..f5cac9986b59 100644
--- a/arch/arm64/kernel/irq.c
+++ b/arch/arm64/kernel/irq.c
@@ -12,6 +12,7 @@
 
 #include <linux/kernel_stat.h>
 #include <linux/irq.h>
+#include <linux/irq_pipeline.h>
 #include <linux/memory.h>
 #include <linux/smp.h>
 #include <linux/init.h>
@@ -21,6 +22,7 @@
 #include <linux/vmalloc.h>
 #include <asm/daifflags.h>
 #include <asm/vmap_stack.h>
+#include <asm/exception.h>
 
 unsigned long irq_err_count;
 
@@ -36,6 +38,16 @@ int arch_show_interrupts(struct seq_file *p, int prec)
 	return 0;
 }
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+asmlinkage int __exception_irq_entry
+handle_arch_irq_pipelined(struct pt_regs *regs)
+{
+	return handle_irq_pipelined(regs);
+}
+
+#endif
+
 #ifdef CONFIG_VMAP_STACK
 static void init_irq_stacks(void)
 {
diff --git a/arch/arm64/kernel/irq_pipeline.c b/arch/arm64/kernel/irq_pipeline.c
new file mode 100644
index 000000000000..0c06922a5fad
--- /dev/null
+++ b/arch/arm64/kernel/irq_pipeline.c
@@ -0,0 +1,95 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/kernel.h>
+#include <linux/smp.h>
+#include <linux/irq.h>
+#include <linux/irq_pipeline.h>
+
+/* irq_nesting tracks the interrupt nesting level for a CPU. */
+DEFINE_PER_CPU(int, irq_nesting);
+
+#ifdef CONFIG_SMP
+
+static struct irq_domain *sipic_domain;
+
+static void sipic_irq_noop(struct irq_data *data) { }
+
+static unsigned int sipic_irq_noop_ret(struct irq_data *data)
+{
+	return 0;
+}
+
+static struct irq_chip sipic_chip = {
+	.name		= "SIPIC",
+	.irq_startup	= sipic_irq_noop_ret,
+	.irq_shutdown	= sipic_irq_noop,
+	.irq_enable	= sipic_irq_noop,
+	.irq_disable	= sipic_irq_noop,
+	.flags		= IRQCHIP_PIPELINE_SAFE | IRQCHIP_SKIP_SET_WAKE,
+};
+
+static int sipic_irq_map(struct irq_domain *d, unsigned int irq,
+			irq_hw_number_t hwirq)
+{
+	irq_set_percpu_devid(irq);
+	irq_set_chip_and_handler(irq, &sipic_chip, handle_synthetic_irq);
+
+	return 0;
+}
+
+static struct irq_domain_ops sipic_domain_ops = {
+	.map	= sipic_irq_map,
+};
+
+static void create_ipi_domain(void)
+{
+	/*
+	 * Create an IRQ domain for mapping all IPIs (in-band and
+	 * out-of-band), with fixed sirq numbers starting from
+	 * OOB_IPI_BASE. The sirqs obtained can be injected into the
+	 * pipeline upon IPI receipt like other interrupts.
+	 */
+	sipic_domain = irq_domain_add_simple(NULL, NR_IPI + OOB_NR_IPI,
+					     OOB_IPI_BASE,
+					     &sipic_domain_ops, NULL);
+}
+
+void irq_pipeline_send_remote(unsigned int ipi,
+			      const struct cpumask *cpumask)
+{
+	unsigned int ipinr = ipi - OOB_IPI_BASE;
+	smp_cross_call(cpumask, ipinr);
+}
+EXPORT_SYMBOL_GPL(irq_pipeline_send_remote);
+
+#endif	/* CONFIG_SMP */
+
+void __init arch_irq_pipeline_init(void)
+{
+#ifdef CONFIG_SMP
+	create_ipi_domain();
+#endif
+}
+
+void arch_do_IRQ_pipelined(struct irq_desc *desc)
+{
+	struct pt_regs *regs = raw_cpu_ptr(&irq_pipeline.tick_regs);
+	unsigned int irq = irq_desc_get_irq(desc);
+
+#ifdef CONFIG_SMP
+	/*
+	 * Check for IPIs, handing them over to the specific dispatch
+	 * code.
+	 */
+	if (irq >= OOB_IPI_BASE &&
+	    irq < OOB_IPI_BASE + NR_IPI + OOB_NR_IPI) {
+		__handle_IPI(irq - OOB_IPI_BASE, regs);
+		return;
+	}
+#endif
+
+	__handle_domain_irq(NULL, irq, false, regs);
+}
diff --git a/arch/arm64/kernel/process.c b/arch/arm64/kernel/process.c
index 71f788cd2b18..2a285dc3edd5 100644
--- a/arch/arm64/kernel/process.c
+++ b/arch/arm64/kernel/process.c
@@ -123,7 +123,7 @@ void arch_cpu_idle(void)
 	 */
 	trace_cpu_idle_rcuidle(1, smp_processor_id());
 	cpu_do_idle();
-	local_irq_enable();
+	local_irq_enable_full();
 	trace_cpu_idle_rcuidle(PWR_EVENT_EXIT, smp_processor_id());
 }
 
diff --git a/arch/arm64/kernel/ptrace.c b/arch/arm64/kernel/ptrace.c
index 21176d02e21a..46a82841a261 100644
--- a/arch/arm64/kernel/ptrace.c
+++ b/arch/arm64/kernel/ptrace.c
@@ -174,6 +174,8 @@ static void ptrace_hbptriggered(struct perf_event *bp,
 	struct arch_hw_breakpoint *bkpt = counter_arch_bp(bp);
 	const char *desc = "Hardware breakpoint trap (ptrace)";
 
+	oob_trap_notify(ARM64_TRAP_DEBUG, regs);
+
 #ifdef CONFIG_COMPAT
 	if (is_compat_task()) {
 		int si_errno = 0;
diff --git a/arch/arm64/kernel/signal.c b/arch/arm64/kernel/signal.c
index dd2cdc0d5be2..eb4f695858e6 100644
--- a/arch/arm64/kernel/signal.c
+++ b/arch/arm64/kernel/signal.c
@@ -11,6 +11,7 @@
 #include <linux/errno.h>
 #include <linux/kernel.h>
 #include <linux/signal.h>
+#include <linux/irq_pipeline.h>
 #include <linux/personality.h>
 #include <linux/freezer.h>
 #include <linux/stddef.h>
@@ -899,24 +900,34 @@ static void do_signal(struct pt_regs *regs)
 asmlinkage void do_notify_resume(struct pt_regs *regs,
 				 unsigned long thread_flags)
 {
+	WARN_ON_ONCE(irq_pipeline_debug() &&
+		(irqs_disabled() || running_oob()));
+
 	/*
 	 * The assembly code enters us with IRQs off, but it hasn't
 	 * informed the tracing code of that for efficiency reasons.
 	 * Update the trace code with the current status.
 	 */
-	trace_hardirqs_off();
+	if (!irqs_pipelined())
+		trace_hardirqs_off();
 
 	do {
+		if (irqs_pipelined())
+			local_irq_disable();
+
 		/* Check valid user FS if needed */
 		addr_limit_user_check();
 
 		if (thread_flags & _TIF_NEED_RESCHED) {
 			/* Unmask Debug and SError for the next task */
-			local_daif_restore(DAIF_PROCCTX_NOIRQ);
+			local_daif_restore(irqs_pipelined() ?
+					DAIF_PROCCTX : DAIF_PROCCTX_NOIRQ);
 
 			schedule();
 		} else {
 			local_daif_restore(DAIF_PROCCTX);
+			if (irqs_pipelined())
+				local_irq_enable();
 
 			if (thread_flags & _TIF_UPROBE)
 				uprobe_notify_resume(regs);
@@ -934,9 +945,17 @@ asmlinkage void do_notify_resume(struct pt_regs *regs,
 				fpsimd_restore_current_state();
 		}
 
+		/*
+		 * CAUTION: we may have restored the fpsimd state for
+		 * current with no other opportunity to check for
+		 * _TIF_FOREIGN_FPSTATE until we are back running on
+		 * el0, so we must not take any interrupt until then,
+		 * otherwise we may end up resuming with some OOB
+		 * thread's fpsimd state.
+		 */
 		local_daif_mask();
 		thread_flags = READ_ONCE(current_thread_info()->flags);
-	} while (thread_flags & _TIF_WORK_MASK);
+	} while (inband_irq_pending() || (thread_flags & _TIF_WORK_MASK));
 }
 
 unsigned long __ro_after_init signal_minsigstksz;
diff --git a/arch/arm64/kernel/smp.c b/arch/arm64/kernel/smp.c
index dc9fe879c279..1d4a59f0dcde 100644
--- a/arch/arm64/kernel/smp.c
+++ b/arch/arm64/kernel/smp.c
@@ -72,7 +72,7 @@ enum ipi_msg_type {
 	IPI_CPU_CRASH_STOP,
 	IPI_TIMER,
 	IPI_IRQ_WORK,
-	IPI_WAKEUP
+	IPI_WAKEUP,
 };
 
 #ifdef CONFIG_HOTPLUG_CPU
@@ -254,6 +254,7 @@ asmlinkage notrace void secondary_start_kernel(void)
 	complete(&cpu_running);
 
 	local_daif_restore(DAIF_PROCCTX);
+	local_irq_enable_full();
 
 	/*
 	 * OK, it's off to the idle thread for us
@@ -771,12 +772,68 @@ static const char *ipi_types[NR_IPI] __tracepoint_string = {
 	S(IPI_WAKEUP, "CPU wake-up interrupts"),
 };
 
-static void smp_cross_call(const struct cpumask *target, unsigned int ipinr)
+#ifdef CONFIG_IRQ_PIPELINE
+
+static DEFINE_PER_CPU(unsigned long, ipi_messages);
+
+static inline
+void send_IPI_message(const struct cpumask *target, unsigned int ipinr)
+{
+	unsigned int cpu, sgi;
+
+	if (ipinr < NR_IPI) {
+		/* regular in-band IPI (multiplexed over SGI0). */
+		trace_ipi_raise_rcuidle(target, ipi_types[ipinr]);
+		for_each_cpu(cpu, target)
+			set_bit(ipinr, &per_cpu(ipi_messages, cpu));
+		smp_mb();
+		sgi = 0;
+	} else	/* out-of-band IPI (SGI1-3). */
+		sgi = ipinr - NR_IPI + 1;
+
+	__smp_cross_call(target, sgi);
+}
+
+static inline
+void handle_IPI_pipelined(int sgi, struct pt_regs *regs)
+{
+	unsigned int ipinr, irq;
+	unsigned long *pmsg;
+
+	if (sgi) {		/* SGI1-3 */
+		irq = sgi + NR_IPI - 1 + OOB_IPI_BASE;
+		generic_pipeline_irq(irq, regs);
+		return;
+	}
+
+	/* In-band IPI (0..NR_IPI - 1) multiplexed over SGI0. */
+	pmsg = raw_cpu_ptr(&ipi_messages);
+	while (*pmsg) {
+		ipinr = ffs(*pmsg) - 1;
+		clear_bit(ipinr, pmsg);
+		irq = OOB_IPI_BASE + ipinr;
+		generic_pipeline_irq(irq, regs);
+	}
+}
+
+#else
+
+static inline
+void send_IPI_message(const struct cpumask *target, unsigned int ipinr)
 {
-	trace_ipi_raise(target, ipi_types[ipinr]);
 	__smp_cross_call(target, ipinr);
 }
 
+static inline void handle_IPI_pipelined(int ipinr, struct pt_regs *regs)
+{ }
+
+#endif /* CONFIG_IRQ_PIPELINE */
+
+void smp_cross_call(const struct cpumask *target, unsigned int ipinr)
+{
+	send_IPI_message(target, ipinr);
+}
+
 void show_ipi_list(struct seq_file *p, int prec)
 {
 	unsigned int cpu, i;
@@ -873,7 +930,7 @@ static void ipi_cpu_crash_stop(unsigned int cpu, struct pt_regs *regs)
 /*
  * Main handler for inter-processor interrupts
  */
-void handle_IPI(int ipinr, struct pt_regs *regs)
+void __handle_IPI(int ipinr, struct pt_regs *regs)
 {
 	unsigned int cpu = smp_processor_id();
 	struct pt_regs *old_regs = set_irq_regs(regs);
@@ -933,6 +990,18 @@ void handle_IPI(int ipinr, struct pt_regs *regs)
 		break;
 #endif
 
+#ifdef CONFIG_IRQ_PIPELINE
+	/*
+	 * In the unlikely event out-of-band IPIs have a in-band stage
+	 * handler.
+	 */
+	case NR_IPI ... NR_IPI + OOB_NR_IPI - 1:
+		irq_enter();
+		generic_handle_irq(OOB_IPI_BASE + ipinr);
+		irq_exit();
+		break;
+#endif
+
 	default:
 		pr_crit("CPU%u: Unknown IPI message 0x%x\n", cpu, ipinr);
 		break;
@@ -943,6 +1012,14 @@ void handle_IPI(int ipinr, struct pt_regs *regs)
 	set_irq_regs(old_regs);
 }
 
+void handle_IPI(int ipinr, struct pt_regs *regs)
+{
+	if (irqs_pipelined())
+		handle_IPI_pipelined(ipinr, regs);
+	else
+		__handle_IPI(ipinr, regs);
+}
+
 void smp_send_reschedule(int cpu)
 {
 	smp_cross_call(cpumask_of(cpu), IPI_RESCHEDULE);
diff --git a/arch/arm64/kernel/syscall.c b/arch/arm64/kernel/syscall.c
index 871c739f060a..15ce595fee11 100644
--- a/arch/arm64/kernel/syscall.c
+++ b/arch/arm64/kernel/syscall.c
@@ -93,13 +93,30 @@ static void cortex_a76_erratum_1463225_svc_handler(void) { }
 static void el0_svc_common(struct pt_regs *regs, int scno, int sc_nr,
 			   const syscall_fn_t syscall_table[])
 {
-	unsigned long flags = current_thread_info()->flags;
+	bool stalled = irqs_pipelined() && running_inband() && irqs_disabled();
+	struct thread_info *ti = current_thread_info();
+	unsigned long flags = ti->flags;
+	int ret;
 
 	regs->orig_x0 = regs->regs[0];
 	regs->syscallno = scno;
 
 	cortex_a76_erratum_1463225_svc_handler();
 	local_daif_restore(DAIF_PROCCTX);
+
+	if (stalled)
+		local_irq_enable();
+
+	ret = pipeline_syscall(ti, scno, regs);
+	if (ret) {
+		if (stalled)
+			local_irq_disable();
+		local_daif_mask();
+		if (ret > 0 || !has_syscall_work(flags))
+			trace_hardirqs_on();
+		return;
+	}
+
 	user_exit();
 
 	if (has_syscall_work(flags)) {
@@ -122,6 +139,8 @@ static void el0_svc_common(struct pt_regs *regs, int scno, int sc_nr,
 		local_daif_mask();
 		flags = current_thread_info()->flags;
 		if (!has_syscall_work(flags)) {
+			if (stalled)
+				local_irq_disable();
 			/*
 			 * We're off to userspace, where interrupts are
 			 * always enabled after we restore the flags from
diff --git a/arch/arm64/kernel/traps.c b/arch/arm64/kernel/traps.c
index 34739e80211b..23ad284404bf 100644
--- a/arch/arm64/kernel/traps.c
+++ b/arch/arm64/kernel/traps.c
@@ -169,7 +169,7 @@ static int __die(const char *str, int err, struct pt_regs *regs)
 	return ret;
 }
 
-static DEFINE_RAW_SPINLOCK(die_lock);
+static DEFINE_HARD_SPINLOCK(die_lock);
 
 /*
  * This function is protected against re-entrancy.
@@ -281,7 +281,7 @@ void arm64_skip_faulting_instruction(struct pt_regs *regs, unsigned long size)
 }
 
 static LIST_HEAD(undef_hook);
-static DEFINE_RAW_SPINLOCK(undef_lock);
+static DEFINE_HARD_SPINLOCK(undef_lock);
 
 void register_undef_hook(struct undef_hook *hook)
 {
@@ -395,6 +395,8 @@ void arm64_notify_segfault(unsigned long addr)
 
 asmlinkage void __exception do_undefinstr(struct pt_regs *regs)
 {
+	oob_trap_notify(ARM64_TRAP_UNDI, regs);
+
 	/* check for AArch32 breakpoint instructions */
 	if (!aarch32_break_handler(regs))
 		return;
@@ -797,6 +799,8 @@ asmlinkage void bad_el0_sync(struct pt_regs *regs, int reason, unsigned int esr)
 {
 	void __user *pc = (void __user *)instruction_pointer(regs);
 
+	oob_trap_notify(ARM64_TRAP_UNDSE, regs);
+
 	current->thread.fault_address = 0;
 	current->thread.fault_code = esr;
 
diff --git a/arch/arm64/mm/context.c b/arch/arm64/mm/context.c
index b5e329fde2dd..addb7d14e589 100644
--- a/arch/arm64/mm/context.c
+++ b/arch/arm64/mm/context.c
@@ -17,7 +17,7 @@
 #include <asm/tlbflush.h>
 
 static u32 asid_bits;
-static DEFINE_RAW_SPINLOCK(cpu_asid_lock);
+static DEFINE_HARD_SPINLOCK(cpu_asid_lock);
 
 static atomic64_t asid_generation;
 static unsigned long *asid_map;
@@ -184,6 +184,9 @@ void check_and_switch_context(struct mm_struct *mm, unsigned int cpu)
 {
 	unsigned long flags;
 	u64 asid, old_active_asid;
+	bool need_flush;
+
+	WARN_ON_ONCE(dovetail_debug() && !hard_irqs_disabled());
 
 	if (system_supports_cnp())
 		cpu_set_reserved_ttbr0();
@@ -219,12 +222,14 @@ void check_and_switch_context(struct mm_struct *mm, unsigned int cpu)
 		atomic64_set(&mm->context.id, asid);
 	}
 
-	if (cpumask_test_and_clear_cpu(cpu, &tlb_flush_pending))
-		local_flush_tlb_all();
+	need_flush = cpumask_test_and_clear_cpu(cpu, &tlb_flush_pending);
 
 	atomic64_set(&per_cpu(active_asids, cpu), asid);
 	raw_spin_unlock_irqrestore(&cpu_asid_lock, flags);
 
+	if (need_flush)
+		local_flush_tlb_all();
+
 switch_mm_fastpath:
 
 	arm64_apply_bp_hardening();
diff --git a/arch/arm64/mm/fault.c b/arch/arm64/mm/fault.c
index 9fc6db0bcbad..427936ce957a 100644
--- a/arch/arm64/mm/fault.c
+++ b/arch/arm64/mm/fault.c
@@ -13,6 +13,7 @@
 #include <linux/signal.h>
 #include <linux/mm.h>
 #include <linux/hardirq.h>
+#include <linux/irq_pipeline.h>
 #include <linux/init.h>
 #include <linux/kprobes.h>
 #include <linux/uaccess.h>
@@ -38,6 +39,7 @@
 #include <asm/pgtable.h>
 #include <asm/tlbflush.h>
 #include <asm/traps.h>
+#include <asm/dovetail.h>
 
 struct fault_info {
 	int	(*fn)(unsigned long addr, unsigned int esr,
@@ -60,6 +62,90 @@ static inline const struct fault_info *esr_to_debug_fault_info(unsigned int esr)
 	return debug_fault_info + DBG_ESR_EVT(esr);
 }
 
+#ifdef CONFIG_DOVETAIL
+#define fault_entry(__exception, __regs)	__fault_entry(__exception, __regs)
+#else
+/* Do not depend on trap id. definitions from asm/dovetail.h */
+#define fault_entry(__exception, __regs)	__fault_entry(-1, __regs)
+#endif
+
+#ifdef CONFIG_IRQ_PIPELINE
+/*
+ * We need to synchronize the virtual interrupt state with the hard
+ * interrupt state we received on entry, then turn hardirqs back on to
+ * allow code which does not require strict serialization to be
+ * preempted by an out-of-band activity.
+ *
+ * TRACING: the entry code already told lockdep and tracers about the
+ * hard interrupt state on entry to fault handlers, so no need to
+ * reflect changes to that state via calls to trace_hardirqs_*
+ * helpers. From the main kernel's point of view, there is no change.
+ */
+
+static inline
+unsigned long __fault_entry(unsigned int exception, struct pt_regs *regs)
+{
+	unsigned long flags;
+	int nosync = 1;
+
+	/*
+	 * Do not propagate SEA traps to the out-of-band handler in
+	 * NMI mode, there is nothing it could do about it.
+	 */
+	if (likely(exception != ARM64_TRAP_SEA || interrupts_enabled(regs)))
+		oob_trap_notify(exception, regs);
+
+	flags = hard_local_irq_save();
+
+	if (hard_irqs_disabled_flags(flags))
+		nosync = test_and_set_stage_bit(STAGE_STALL_BIT,
+					this_inband_staged());
+	hard_local_irq_enable();
+
+	return irqs_merge_flags(flags, nosync);
+}
+
+static inline void fault_exit(unsigned long combo)
+{
+	unsigned long flags;
+	int nosync;
+
+	WARN_ON_ONCE(irq_pipeline_debug() && hard_irqs_disabled());
+
+	/*
+	 * '!nosync' here means that we had to turn on the stall bit
+	 * in fault_entry() to mirror the hard interrupt state,
+	 * because hard irqs were off but the stall bit was
+	 * clear. Conversely, nosync in fault_exit() means that the
+	 * stall bit state currently reflects the hard interrupt state
+	 * we received on fault_entry().
+	 *
+	 * No hard_local_irq_restore() below, ever, but
+	 * hard_local_irq_{enable|disable}() exclusively. See
+	 * restore_stage() for an explanation.
+	 */
+	flags = irqs_split_flags(combo, &nosync);
+	if (!nosync) {
+		hard_local_irq_disable();
+		clear_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+		if (!hard_irqs_disabled_flags(flags))
+			hard_local_irq_enable();
+	} else if (hard_irqs_disabled_flags(flags))
+		hard_local_irq_disable();
+}
+
+#else	/* !CONFIG_IRQ_PIPELINE */
+
+static inline
+unsigned long __fault_entry(unsigned int exception, struct pt_regs *regs)
+{
+	return 0;
+}
+
+static inline void fault_exit(unsigned long x) { }
+
+#endif	/* !CONFIG_IRQ_PIPELINE */
+
 static void data_abort_decode(unsigned int esr)
 {
 	pr_alert("Data abort info:\n");
@@ -286,6 +372,8 @@ static bool __kprobes is_spurious_el1_translation_fault(unsigned long addr,
 static void die_kernel_fault(const char *msg, unsigned long addr,
 			     unsigned int esr, struct pt_regs *regs)
 {
+	irq_pipeline_oops();
+
 	bust_spinlocks(1);
 
 	pr_alert("Unable to handle kernel %s at virtual address %016lx\n", msg,
@@ -394,11 +482,19 @@ static void do_bad_area(unsigned long addr, unsigned int esr, struct pt_regs *re
 	 */
 	if (user_mode(regs)) {
 		const struct fault_info *inf = esr_to_fault_info(esr);
+		unsigned long irqflags;
 
+		irqflags = fault_entry(ARM64_TRAP_ACCESS, regs);
 		set_thread_esr(addr, esr);
 		arm64_force_sig_fault(inf->sig, inf->code, (void __user *)addr,
 				      inf->name);
+		fault_exit(irqflags);
 	} else {
+		/*
+		 * irq_pipeline: kernel faults are either quickly
+		 * recoverable via fixup, or lethal. In both cases, we
+		 * can skip the interrupt state synchronization.
+		 */
 		__do_kernel_fault(addr, esr, regs);
 	}
 }
@@ -454,11 +550,13 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 	const struct fault_info *inf;
 	struct mm_struct *mm = current->mm;
 	vm_fault_t fault, major = 0;
-	unsigned long vm_flags = VM_READ | VM_WRITE;
+	unsigned long vm_flags = VM_READ | VM_WRITE, irqflags;
 	unsigned int mm_flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;
 
+	irqflags = fault_entry(ARM64_TRAP_ACCESS, regs);
+
 	if (kprobe_page_fault(regs, esr))
-		return 0;
+		goto out;
 
 	/*
 	 * If we're in an interrupt or have no user context, we must not take
@@ -532,7 +630,7 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 		if (fatal_signal_pending(current)) {
 			if (!user_mode(regs))
 				goto no_context;
-			return 0;
+			goto out;
 		}
 
 		/*
@@ -568,7 +666,7 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 				      addr);
 		}
 
-		return 0;
+		goto out;
 	}
 
 	/*
@@ -585,7 +683,7 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 		 * oom-killed).
 		 */
 		pagefault_out_of_memory();
-		return 0;
+		goto out;
 	}
 
 	inf = esr_to_fault_info(esr);
@@ -616,18 +714,22 @@ static int __kprobes do_page_fault(unsigned long addr, unsigned int esr,
 				      (void __user *)addr,
 				      inf->name);
 	}
+out:
+	fault_exit(irqflags);
 
 	return 0;
 
 no_context:
 	__do_kernel_fault(addr, esr, regs);
-	return 0;
+	goto out;
 }
 
 static int __kprobes do_translation_fault(unsigned long addr,
 					  unsigned int esr,
 					  struct pt_regs *regs)
 {
+	/* irq_pipeline: hard irqs may be on upon el1_sync. */
+
 	if (is_ttbr0_addr(addr))
 		return do_page_fault(addr, esr, regs);
 
@@ -650,8 +752,11 @@ static int do_bad(unsigned long addr, unsigned int esr, struct pt_regs *regs)
 static int do_sea(unsigned long addr, unsigned int esr, struct pt_regs *regs)
 {
 	const struct fault_info *inf;
+	unsigned long irqflags;
 	void __user *siaddr;
 
+	irqflags = fault_entry(ARM64_TRAP_SEA, regs);
+
 	inf = esr_to_fault_info(esr);
 
 	/*
@@ -666,6 +771,8 @@ static int do_sea(unsigned long addr, unsigned int esr, struct pt_regs *regs)
 		siaddr  = (void __user *)addr;
 	arm64_notify_die(inf->name, regs, inf->sig, inf->code, siaddr, esr);
 
+	fault_exit(irqflags);
+
 	return 0;
 }
 
@@ -740,10 +847,13 @@ asmlinkage void __exception do_mem_abort(unsigned long addr, unsigned int esr,
 					 struct pt_regs *regs)
 {
 	const struct fault_info *inf = esr_to_fault_info(esr);
+	unsigned long irqflags;
 
 	if (!inf->fn(addr, esr, regs))
 		return;
 
+	irqflags = fault_entry(ARM64_TRAP_ABRT, regs);
+
 	if (!user_mode(regs)) {
 		pr_alert("Unhandled fault at 0x%016lx\n", addr);
 		mem_abort_decode(esr);
@@ -752,11 +862,17 @@ asmlinkage void __exception do_mem_abort(unsigned long addr, unsigned int esr,
 
 	arm64_notify_die(inf->name, regs,
 			 inf->sig, inf->code, (void __user *)addr, esr);
+
+	fault_exit(irqflags);
 }
 
 asmlinkage void __exception do_el0_irq_bp_hardening(void)
 {
-	/* PC has already been checked in entry.S */
+	/*
+	 * PC has already been checked in entry.S.
+	 * irq_pipeline: assume that branch predictor hardening
+	 * workarounds can safely run on any stage.
+	 */
 	arm64_apply_bp_hardening();
 }
 
@@ -781,14 +897,20 @@ asmlinkage void __exception do_sp_pc_abort(unsigned long addr,
 					   unsigned int esr,
 					   struct pt_regs *regs)
 {
+	unsigned long irqflags;
+
 	if (user_mode(regs)) {
 		if (!is_ttbr0_addr(instruction_pointer(regs)))
 			arm64_apply_bp_hardening();
 		local_daif_restore(DAIF_PROCCTX);
 	}
 
+	irqflags = fault_entry(ARM64_TRAP_ABRT, regs);
+
 	arm64_notify_die("SP/PC alignment exception", regs,
 			 SIGBUS, BUS_ADRALN, (void __user *)addr, esr);
+
+	fault_exit(irqflags);
 }
 
 int __init early_brk64(unsigned long addr, unsigned int esr,
@@ -905,6 +1027,7 @@ asmlinkage void __exception do_debug_exception(unsigned long addr_if_watchpoint,
 {
 	const struct fault_info *inf = esr_to_debug_fault_info(esr);
 	unsigned long pc = instruction_pointer(regs);
+	unsigned long irqflags;
 
 	if (cortex_a76_erratum_1463225_debug_handler(regs))
 		return;
@@ -914,11 +1037,15 @@ asmlinkage void __exception do_debug_exception(unsigned long addr_if_watchpoint,
 	if (user_mode(regs) && !is_ttbr0_addr(pc))
 		arm64_apply_bp_hardening();
 
+	irqflags = fault_entry(ARM64_TRAP_DEBUG, regs);
+
 	if (inf->fn(addr_if_watchpoint, esr, regs)) {
 		arm64_notify_die(inf->name, regs,
 				 inf->sig, inf->code, (void __user *)pc, esr);
 	}
 
+	fault_exit(irqflags);
+
 	debug_exception_exit(regs);
 }
 NOKPROBE_SYMBOL(do_debug_exception);
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index d6e1faa28c58..33e5352bcd4b 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -27,6 +27,9 @@ config X86_64
 	select ARCH_SUPPORTS_INT128
 	select ARCH_USE_CMPXCHG_LOCKREF
 	select HAVE_ARCH_SOFT_DIRTY
+	select HAVE_IRQ_PIPELINE
+	select HAVE_DOVETAIL
+	select HAVE_ARCH_EVL
 	select MODULES_USE_ELF_RELA
 	select NEED_DMA_MAP_STATE
 	select SWIOTLB
@@ -190,6 +193,7 @@ config X86
 	select HAVE_MOD_ARCH_SPECIFIC
 	select HAVE_MOVE_PMD
 	select HAVE_NMI
+	select HAVE_PERCPU_PREEMPT_COUNT
 	select HAVE_OPROFILE
 	select HAVE_OPTPROBES
 	select HAVE_PCSPKR_PLATFORM
@@ -861,6 +865,8 @@ config ACRN_GUEST
 
 endif #HYPERVISOR_GUEST
 
+source "kernel/Kconfig.evl"
+source "kernel/Kconfig.dovetail"
 source "arch/x86/Kconfig.cpu"
 
 config HPET_TIMER
diff --git a/arch/x86/Makefile b/arch/x86/Makefile
index 94df0868804b..c322dccef441 100644
--- a/arch/x86/Makefile
+++ b/arch/x86/Makefile
@@ -198,6 +198,10 @@ sha256_ni_instr :=$(call as-instr,sha256msg1 %xmm0$(comma)%xmm1,-DCONFIG_AS_SHA2
 KBUILD_AFLAGS += $(cfi) $(cfi-sigframe) $(cfi-sections) $(asinstr) $(avx_instr) $(avx2_instr) $(avx512_instr) $(sha1_ni_instr) $(sha256_ni_instr)
 KBUILD_CFLAGS += $(cfi) $(cfi-sigframe) $(cfi-sections) $(asinstr) $(avx_instr) $(avx2_instr) $(avx512_instr) $(sha1_ni_instr) $(sha256_ni_instr)
 
+ifeq ($(CONFIG_EVL),y)
+KBUILD_CFLAGS += -Iarch/$(SRCARCH)/evl/include -Iinclude/evl
+endif
+
 KBUILD_LDFLAGS := -m elf_$(UTS_MACHINE)
 
 #
diff --git a/arch/x86/entry/common.c b/arch/x86/entry/common.c
index 3f8e22615812..1fa9aed83746 100644
--- a/arch/x86/entry/common.c
+++ b/arch/x86/entry/common.c
@@ -17,6 +17,7 @@
 #include <linux/tracehook.h>
 #include <linux/audit.h>
 #include <linux/seccomp.h>
+#include <linux/unistd.h>
 #include <linux/signal.h>
 #include <linux/export.h>
 #include <linux/context_tracking.h>
@@ -41,6 +42,8 @@
 /* Called on entry from user mode with IRQs off. */
 __visible inline void enter_from_user_mode(void)
 {
+	if (irqs_pipelined() && (!running_inband() || irqs_disabled()))
+		return;
 	CT_WARN_ON(ct_state() != CONTEXT_USER);
 	user_exit_irqoff();
 }
@@ -48,6 +51,22 @@ __visible inline void enter_from_user_mode(void)
 static inline void enter_from_user_mode(void) {}
 #endif
 
+#ifdef CONFIG_IRQ_PIPELINE
+#define disable_local_irqs()	do {	\
+	hard_local_irq_disable();	\
+	trace_hardirqs_off();		\
+} while (0)
+#define enable_local_irqs()	do {	\
+	trace_hardirqs_on();		\
+	hard_local_irq_enable();	\
+} while (0)
+#define check_irqs_disabled()	hard_irqs_disabled()
+#else
+#define disable_local_irqs()	local_irq_disable()
+#define enable_local_irqs()	local_irq_enable()
+#define check_irqs_disabled()	irqs_disabled()
+#endif
+
 static void do_audit_syscall_entry(struct pt_regs *regs, u32 arch)
 {
 #ifdef CONFIG_X86_64
@@ -143,7 +162,7 @@ static void exit_to_usermode_loop(struct pt_regs *regs, u32 cached_flags)
 	 */
 	while (true) {
 		/* We have work to do. */
-		local_irq_enable();
+		enable_local_irqs();
 
 		if (cached_flags & _TIF_NEED_RESCHED)
 			schedule();
@@ -168,7 +187,7 @@ static void exit_to_usermode_loop(struct pt_regs *regs, u32 cached_flags)
 			fire_user_return_notifiers();
 
 		/* Disable IRQs and retry */
-		local_irq_disable();
+		disable_local_irqs();
 
 		cached_flags = READ_ONCE(current_thread_info()->flags);
 
@@ -183,6 +202,8 @@ __visible inline void prepare_exit_to_usermode(struct pt_regs *regs)
 	struct thread_info *ti = current_thread_info();
 	u32 cached_flags;
 
+	WARN_ON_ONCE(irq_pipeline_debug() && running_oob());
+
 	addr_limit_user_check();
 
 	lockdep_assert_irqs_disabled();
@@ -259,7 +280,7 @@ __visible inline void syscall_return_slowpath(struct pt_regs *regs)
 
 	if (IS_ENABLED(CONFIG_PROVE_LOCKING) &&
 	    WARN(irqs_disabled(), "syscall %ld left IRQs disabled", regs->orig_ax))
-		local_irq_enable();
+		enable_local_irqs();
 
 	rseq_syscall(regs);
 
@@ -267,10 +288,13 @@ __visible inline void syscall_return_slowpath(struct pt_regs *regs)
 	 * First do one-time work.  If these work items are enabled, we
 	 * want to run them exactly once per syscall exit with IRQs on.
 	 */
-	if (unlikely(cached_flags & SYSCALL_EXIT_WORK_FLAGS))
+
+	if (unlikely(cached_flags & SYSCALL_EXIT_WORK_FLAGS) &&
+		(!IS_ENABLED(CONFIG_IRQ_PIPELINE) ||
+			syscall_get_nr(current, regs) < NR_syscalls))
 		syscall_slow_exit_work(regs, cached_flags);
 
-	local_irq_disable();
+	disable_local_irqs();
 	prepare_exit_to_usermode(regs);
 }
 
@@ -278,10 +302,20 @@ __visible inline void syscall_return_slowpath(struct pt_regs *regs)
 __visible void do_syscall_64(unsigned long nr, struct pt_regs *regs)
 {
 	struct thread_info *ti;
+	int ret;
 
 	enter_from_user_mode();
-	local_irq_enable();
+	enable_local_irqs();
 	ti = current_thread_info();
+
+	ret = pipeline_syscall(ti, nr, regs);
+	if (ret > 0) {
+		disable_local_irqs();
+		return;
+	}
+	if (ret < 0)
+		goto done;
+
 	if (READ_ONCE(ti->flags) & _TIF_WORK_SYSCALL_ENTRY)
 		nr = syscall_trace_enter(regs);
 
@@ -296,12 +330,38 @@ __visible void do_syscall_64(unsigned long nr, struct pt_regs *regs)
 		regs->ax = x32_sys_call_table[nr](regs);
 #endif
 	}
-
+done:
 	syscall_return_slowpath(regs);
 }
 #endif
 
 #if defined(CONFIG_X86_32) || defined(CONFIG_IA32_EMULATION)
+
+#if defined(CONFIG_DOVETAIL) && defined(CONFIG_X86_64)
+static inline int pipeline_syscall32(struct thread_info *ti,
+				unsigned long nr, struct pt_regs *regs)
+{
+	struct pt_regs regs64 = *regs;
+	int ret;
+
+	regs64.di = (unsigned int)regs->bx;
+	regs64.si = (unsigned int)regs->cx;
+	regs64.r10 = (unsigned int)regs->si;
+	regs64.r8 = (unsigned int)regs->di;
+	regs64.r9 = (unsigned int)regs->bp;
+	ret = pipeline_syscall(ti, nr, &regs64);
+	regs->ax = (unsigned int)regs64.ax;
+
+	return ret;
+}
+#else
+static inline int pipeline_syscall32(struct thread_info *ti,
+				   unsigned long nr, struct pt_regs *regs)
+{
+	return 0;
+}
+#endif /* DOVETAIL && X86_64 */
+
 /*
  * Does a 32-bit syscall.  Called with IRQs on in CONTEXT_KERNEL.  Does
  * all entry and exit work and returns with IRQs off.  This function is
@@ -312,11 +372,20 @@ static __always_inline void do_syscall_32_irqs_on(struct pt_regs *regs)
 {
 	struct thread_info *ti = current_thread_info();
 	unsigned int nr = (unsigned int)regs->orig_ax;
+	int ret;
 
 #ifdef CONFIG_IA32_EMULATION
 	ti->status |= TS_COMPAT;
 #endif
 
+	ret = pipeline_syscall32(ti, nr, regs);
+	if (ret > 0) {
+		disable_local_irqs();
+		return;
+	}
+	if (ret < 0)
+		goto done;
+
 	if (READ_ONCE(ti->flags) & _TIF_WORK_SYSCALL_ENTRY) {
 		/*
 		 * Subtlety here: if ptrace pokes something larger than
@@ -345,6 +414,7 @@ static __always_inline void do_syscall_32_irqs_on(struct pt_regs *regs)
 #endif /* CONFIG_IA32_EMULATION */
 	}
 
+done:
 	syscall_return_slowpath(regs);
 }
 
@@ -352,7 +422,7 @@ static __always_inline void do_syscall_32_irqs_on(struct pt_regs *regs)
 __visible void do_int80_syscall_32(struct pt_regs *regs)
 {
 	enter_from_user_mode();
-	local_irq_enable();
+	enable_local_irqs();
 	do_syscall_32_irqs_on(regs);
 }
 
@@ -376,7 +446,7 @@ __visible long do_fast_syscall_32(struct pt_regs *regs)
 
 	enter_from_user_mode();
 
-	local_irq_enable();
+	enable_local_irqs();
 
 	/* Fetch EBP from where the vDSO stashed it. */
 	if (
@@ -394,7 +464,7 @@ __visible long do_fast_syscall_32(struct pt_regs *regs)
 		) {
 
 		/* User code screwed up. */
-		local_irq_disable();
+		disable_local_irqs();
 		regs->ax = -EFAULT;
 		prepare_exit_to_usermode(regs);
 		return 0;	/* Keep it simple: use IRET. */
diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index b7c3ea4cb19d..05cdb8cf2bcd 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -57,7 +57,7 @@ END(native_usergs_sysret64)
 #ifdef CONFIG_TRACE_IRQFLAGS
 	btl	$9, \flags		/* interrupts off? */
 	jnc	1f
-	TRACE_IRQS_ON
+	TRACE_IRQS_ON_PIPELINED
 1:
 #endif
 .endm
@@ -87,7 +87,7 @@ END(native_usergs_sysret64)
 
 .macro TRACE_IRQS_ON_DEBUG
 	call	debug_stack_set_zero
-	TRACE_IRQS_ON
+	TRACE_IRQS_ON_PIPELINED
 	call	debug_stack_reset
 .endm
 
@@ -332,6 +332,7 @@ END(__switch_to_asm)
  */
 ENTRY(ret_from_fork)
 	UNWIND_HINT_EMPTY
+	ENABLE_INTERRUPTS_IF_PIPELINED
 	movq	%rax, %rdi
 	call	schedule_tail			/* rdi: 'prev' task parameter */
 
@@ -405,6 +406,9 @@ END(spurious_entries_start)
  * Requires kernel GSBASE.
  *
  * The invariant is that, if irq_count != -1, then the IRQ stack is in use.
+ *
+ * irq_pipeline: caller must ensure that hard irqs are off upon
+ * ENTER/LEAVE_IRQ_STACK so that irq_count is always consistent.
  */
 .macro ENTER_IRQ_STACK regs=1 old_rsp save_ret=0
 	DEBUG_ENTRY_ASSERT_IRQS_OFF
@@ -575,8 +579,14 @@ ENTRY(interrupt_entry)
 
 1:
 	ENTER_IRQ_STACK old_rsp=%rdi save_ret=1
-	/* We entered an interrupt context - irqs are off: */
+	/*
+	 * We entered an interrupt context - irqs are off unless
+	 * pipelining is enabled, in which case we defer tracing until
+	 * sync_current_irq_stage() is called from the inband stage.
+	 */
+#ifndef CONFIG_IRQ_PIPELINE
 	TRACE_IRQS_OFF
+#endif
 
 	ret
 END(interrupt_entry)
@@ -604,7 +614,17 @@ common_interrupt:
 	addq	$-0x80, (%rsp)			/* Adjust vector to [-256, -1] range */
 	call	interrupt_entry
 	UNWIND_HINT_REGS indirect=1
+#ifdef CONFIG_IRQ_PIPELINE
+	call	handle_arch_irq_pipelined
+	testl	%eax, %eax
+	jnz	ret_from_intr
+	LEAVE_IRQ_STACK
+	testb	$3, CS(%rsp)
+	jz	retint_kernel_early
+	jmp	retint_user_early
+#else	
 	call	do_IRQ	/* rdi points to pt_regs */
+#endif	
 	/* 0(%rsp): old RSP */
 ret_from_intr:
 	DISABLE_INTERRUPTS(CLBR_ANY)
@@ -619,6 +639,7 @@ ret_from_intr:
 GLOBAL(retint_user)
 	mov	%rsp,%rdi
 	call	prepare_exit_to_usermode
+retint_user_early:
 	TRACE_IRQS_IRETQ
 
 GLOBAL(swapgs_restore_regs_and_return_to_usermode)
@@ -676,7 +697,8 @@ retint_kernel:
 #endif
 	/*
 	 * The iretq could re-enable interrupts:
-	 */
+	*/
+retint_kernel_early:
 	TRACE_IRQS_IRETQ
 
 GLOBAL(restore_regs_and_return_to_kernel)
@@ -794,7 +816,29 @@ _ASM_NOKPROBE(common_interrupt)
 
 /*
  * APIC interrupts.
- */
+*/
+#ifdef CONFIG_IRQ_PIPELINE
+.macro apicinterrupt2 num sym
+ENTRY(\sym)
+	UNWIND_HINT_IRET_REGS
+	pushq	$~(\num)
+.Lcommon_\sym:
+	call	interrupt_entry
+	UNWIND_HINT_REGS indirect=1
+	call	handle_arch_irq_pipelined /* rdi points to pt_regs */
+	testl	%eax, %eax
+	jnz	ret_from_intr
+	LEAVE_IRQ_STACK
+	testb	$3, CS(%rsp)
+	jz	retint_kernel_early
+	jmp	retint_user_early
+END(\sym)
+.endm
+.macro apicinterrupt3 num sym do_sym
+apicinterrupt2 \num \sym
+_ASM_NOKPROBE(\sym)
+.endm
+#else	
 .macro apicinterrupt3 num sym do_sym
 ENTRY(\sym)
 	UNWIND_HINT_IRET_REGS
@@ -807,7 +851,8 @@ ENTRY(\sym)
 END(\sym)
 _ASM_NOKPROBE(\sym)
 .endm
-
+#endif
+	
 /* Make sure APIC interrupt handlers end up in the irqentry section: */
 #define PUSH_SECTION_IRQENTRY	.pushsection .irqentry.text, "ax"
 #define POP_SECTION_IRQENTRY	.popsection
@@ -852,8 +897,15 @@ apicinterrupt THERMAL_APIC_VECTOR		thermal_interrupt		smp_thermal_interrupt
 apicinterrupt CALL_FUNCTION_SINGLE_VECTOR	call_function_single_interrupt	smp_call_function_single_interrupt
 apicinterrupt CALL_FUNCTION_VECTOR		call_function_interrupt		smp_call_function_interrupt
 apicinterrupt RESCHEDULE_VECTOR			reschedule_interrupt		smp_reschedule_interrupt
+#ifdef CONFIG_IRQ_PIPELINE
+apicinterrupt2 RESCHEDULE_OOB_VECTOR		reschedule_oob_interrupt
+#endif
 #endif
 
+#ifdef CONFIG_IRQ_PIPELINE
+apicinterrupt2 TIMER_OOB_VECTOR			timer_oob_interrupt
+#endif
+	
 apicinterrupt ERROR_APIC_VECTOR			error_interrupt			smp_error_interrupt
 apicinterrupt SPURIOUS_APIC_VECTOR		spurious_interrupt		smp_spurious_interrupt
 
@@ -1078,9 +1130,13 @@ EXPORT_SYMBOL(native_load_gs_index)
 ENTRY(do_softirq_own_stack)
 	pushq	%rbp
 	mov	%rsp, %rbp
+	DISABLE_INTERRUPTS_IF_PIPELINED
 	ENTER_IRQ_STACK regs=0 old_rsp=%r11
+	ENABLE_INTERRUPTS_IF_PIPELINED
 	call	__do_softirq
+	DISABLE_INTERRUPTS_IF_PIPELINED
 	LEAVE_IRQ_STACK regs=0
+	ENABLE_INTERRUPTS_IF_PIPELINED
 	leaveq
 	ret
 ENDPROC(do_softirq_own_stack)
@@ -1370,6 +1426,17 @@ ENTRY(error_exit)
 	UNWIND_HINT_REGS
 	DISABLE_INTERRUPTS(CLBR_ANY)
 	TRACE_IRQS_OFF
+#ifdef CONFIG_IRQ_PIPELINE
+	testl	$oob_preempt_mask, PER_CPU_VAR(__preempt_count)
+	jnz	1f
+	testl	$inband_stall_mask, PER_CPU_VAR(irq_pipeline + inband_stage_status)
+	jz	2f
+1:
+	testb	$3, CS(%rsp)
+	jz	retint_kernel_early
+	jmp	retint_user_early
+2:
+#endif
 	testb	$3, CS(%rsp)
 	jz	retint_kernel
 	jmp	retint_user
diff --git a/arch/x86/entry/thunk_64.S b/arch/x86/entry/thunk_64.S
index ea5c4167086c..30ba1139568a 100644
--- a/arch/x86/entry/thunk_64.S
+++ b/arch/x86/entry/thunk_64.S
@@ -39,6 +39,7 @@
 
 #ifdef CONFIG_TRACE_IRQFLAGS
 	THUNK trace_hardirqs_on_thunk,trace_hardirqs_on_caller,1
+	THUNK trace_hardirqs_on_pipelined_thunk,trace_hardirqs_on_pipelined,1
 	THUNK trace_hardirqs_off_thunk,trace_hardirqs_off_caller,1
 #endif
 
diff --git a/arch/x86/include/asm/apic.h b/arch/x86/include/asm/apic.h
index 2ebc17d9c72c..82a200da3733 100644
--- a/arch/x86/include/asm/apic.h
+++ b/arch/x86/include/asm/apic.h
@@ -443,7 +443,7 @@ static inline void apic_set_eoi_write(void (*eoi_write)(u32 reg, u32 v)) {}
 
 extern void apic_ack_irq(struct irq_data *data);
 
-static inline void ack_APIC_irq(void)
+static inline void __ack_APIC_irq(void)
 {
 	/*
 	 * ack_APIC_irq() actually gets compiled as a single instruction
@@ -452,6 +452,12 @@ static inline void ack_APIC_irq(void)
 	apic_eoi();
 }
 
+static inline void ack_APIC_irq(void)
+{
+	if (!irqs_pipelined())
+		__ack_APIC_irq();
+}
+
 static inline unsigned default_get_apic_id(unsigned long x)
 {
 	unsigned int ver = GET_APIC_VERSION(apic_read(APIC_LVR));
@@ -509,12 +515,12 @@ static inline bool apic_id_is_primary_thread(unsigned int id) { return false; }
 static inline void apic_smt_update(void) { }
 #endif
 
-extern void irq_enter(void);
-extern void irq_exit(void);
+extern void irq_enter_if_inband(void);
+extern void irq_exit_if_inband(void);
 
 static inline void entering_irq(void)
 {
-	irq_enter();
+	irq_enter_if_inband();
 	kvm_set_cpu_l1tf_flush_l1d();
 }
 
@@ -526,20 +532,20 @@ static inline void entering_ack_irq(void)
 
 static inline void ipi_entering_ack_irq(void)
 {
-	irq_enter();
+	irq_enter_if_inband();
 	ack_APIC_irq();
 	kvm_set_cpu_l1tf_flush_l1d();
 }
 
 static inline void exiting_irq(void)
 {
-	irq_exit();
+	irq_exit_if_inband();
 }
 
 static inline void exiting_ack_irq(void)
 {
 	ack_APIC_irq();
-	irq_exit();
+	irq_exit_if_inband();
 }
 
 extern void ioapic_zap_locks(void);
diff --git a/arch/x86/include/asm/dovetail.h b/arch/x86/include/asm/dovetail.h
new file mode 100644
index 000000000000..e996daa3992c
--- /dev/null
+++ b/arch/x86/include/asm/dovetail.h
@@ -0,0 +1,32 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum.
+ */
+#ifndef _ASM_X86_DOVETAIL_H
+#define _ASM_X86_DOVETAIL_H
+
+#ifndef __ASSEMBLY__
+
+#include <asm/fpu/api.h>
+
+static inline
+void arch_dovetail_switch_prepare(bool leave_inband)
+{
+	if (leave_inband)
+		fpu__suspend_inband();
+}
+
+static inline
+void arch_dovetail_switch_finish(bool enter_inband)
+{
+	if (enter_inband)
+		fpu__resume_inband();
+	else if (!(current->flags & PF_KTHREAD) &&
+		test_thread_flag(TIF_NEED_FPU_LOAD))
+		switch_fpu_return();
+}
+
+#endif
+
+#endif /* _ASM_X86_DOVETAIL_H */
diff --git a/arch/x86/include/asm/evl/fptest.h b/arch/x86/include/asm/evl/fptest.h
new file mode 100644
index 000000000000..ba9504980dd3
--- /dev/null
+++ b/arch/x86/include/asm/evl/fptest.h
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_X86_ASM_FPTEST_H
+#define _EVL_X86_ASM_FPTEST_H
+
+#include <asm/fpu/api.h>
+#include <uapi/asm/evl/fptest.h>
+
+static inline bool evl_begin_fpu(void)
+{
+	kernel_fpu_begin();
+	/*
+	 * We need a clean context for testing the sanity of the FPU
+	 * register stack across switches in evl_check_fpregs()
+	 * (fildl->fistpl), which kernel_fpu_begin() does not
+	 * guarantee us. Force this manually.
+	 */
+	asm volatile("fninit");
+
+	return true;
+}
+
+static inline void evl_end_fpu(void)
+{
+	kernel_fpu_end();
+}
+
+static inline u32 evl_detect_fpu(void)
+{
+	u32 features = 0;
+
+	/* We only test XMM2 and AVX switching when present. */
+
+	if (boot_cpu_has(X86_FEATURE_XMM2))
+		features |= evl_x86_xmm2;
+
+	if (boot_cpu_has(X86_FEATURE_AVX))
+		features |= evl_x86_avx;
+
+	return features;
+}
+
+#endif /* _EVL_X86_ASM_FPTEST_H */
diff --git a/arch/x86/include/asm/evl/syscall.h b/arch/x86/include/asm/evl/syscall.h
new file mode 100644
index 000000000000..e0b6652c7452
--- /dev/null
+++ b/arch/x86/include/asm/evl/syscall.h
@@ -0,0 +1,45 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_X86_ASM_SYSCALL_H
+#define _EVL_X86_ASM_SYSCALL_H
+
+#include <linux/uaccess.h>
+#include <asm/unistd.h>
+#include <asm/ptrace.h>
+#include <uapi/asm/evl/syscall.h>
+
+#define raw_put_user(src, dst)  __put_user(src, dst)
+#define raw_get_user(dst, src)  __get_user(dst, src)
+
+#define is_oob_syscall(__regs)	((__regs)->orig_ax & __EVL_SYSCALL_BIT)
+#define oob_syscall_nr(__regs)	((__regs)->orig_ax & ~__EVL_SYSCALL_BIT)
+
+#define oob_retval(__regs)	((__regs)->ax)
+#define oob_arg1(__regs)	((__regs)->di)
+#define oob_arg2(__regs)	((__regs)->si)
+#define oob_arg3(__regs)	((__regs)->dx)
+#define oob_arg4(__regs)	((__regs)->r10)
+#define oob_arg5(__regs)	((__regs)->r8)
+
+/*
+ * Fetch and test inband syscall number (valid only if
+ * !is_oob_syscall(__regs)).
+ */
+#define inband_syscall_nr(__regs, __nr)			\
+	({						\
+		*(__nr) = oob_syscall_nr(__regs);	\
+		!is_oob_syscall(__regs);		\
+	})
+
+static inline void
+set_oob_error(struct pt_regs *regs, int err)
+{
+	oob_retval(regs) = err;
+}
+
+static inline
+void set_oob_retval(struct pt_regs *regs, long ret)
+{
+	oob_retval(regs) = ret;
+}
+
+#endif /* !_EVL_X86_ASM_SYSCALL_H */
diff --git a/arch/x86/include/asm/evl/thread.h b/arch/x86/include/asm/evl/thread.h
new file mode 100644
index 000000000000..50c07d74f94e
--- /dev/null
+++ b/arch/x86/include/asm/evl/thread.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_X86_ASM_THREAD_H
+#define _EVL_X86_ASM_THREAD_H
+
+#include <asm/traps.h>
+
+static inline bool evl_is_breakpoint(int trapnr)
+{
+	return trapnr == X86_TRAP_DB || trapnr == X86_TRAP_BP;
+}
+
+#endif /* !_EVL_X86_ASM_THREAD_H */
diff --git a/arch/x86/include/asm/fpu/api.h b/arch/x86/include/asm/fpu/api.h
index b774c52e5411..b33731917a0e 100644
--- a/arch/x86/include/asm/fpu/api.h
+++ b/arch/x86/include/asm/fpu/api.h
@@ -30,16 +30,25 @@ extern void fpregs_mark_activate(void);
  * fpu->state and set TIF_NEED_FPU_LOAD leaving CPU's FPU registers in
  * a random state.
  */
-static inline void fpregs_lock(void)
+static inline unsigned long fpregs_lock(void)
 {
-	preempt_disable();
-	local_bh_disable();
+	if (IS_ENABLED(CONFIG_IRQ_PIPELINE)) {
+		return hard_preempt_disable();
+	} else {
+		preempt_disable();
+		local_bh_disable();
+		return 0;
+	}
 }
 
-static inline void fpregs_unlock(void)
+static inline void fpregs_unlock(unsigned long flags)
 {
-	local_bh_enable();
-	preempt_enable();
+	if (IS_ENABLED(CONFIG_IRQ_PIPELINE)) {
+		hard_preempt_enable(flags);
+	} else {
+		local_bh_enable();
+		preempt_enable();
+	}
 }
 
 #ifdef CONFIG_X86_DEBUG_FPU
@@ -53,6 +62,10 @@ static inline void fpregs_assert_state_consistent(void) { }
  */
 extern void switch_fpu_return(void);
 
+/* For Dovetail context switching. */
+void fpu__suspend_inband(void);
+void fpu__resume_inband(void);
+
 /*
  * Query the presence of one or more xfeatures. Works on any legacy CPU as well.
  *
diff --git a/arch/x86/include/asm/fpu/internal.h b/arch/x86/include/asm/fpu/internal.h
index 4c95c365058a..7c0d75228f81 100644
--- a/arch/x86/include/asm/fpu/internal.h
+++ b/arch/x86/include/asm/fpu/internal.h
@@ -15,6 +15,7 @@
 #include <linux/sched.h>
 #include <linux/slab.h>
 #include <linux/mm.h>
+#include <linux/dovetail.h>
 
 #include <asm/user.h>
 #include <asm/fpu/api.h>
@@ -547,6 +548,32 @@ static inline void __fpregs_load_activate(void)
 	clear_thread_flag(TIF_NEED_FPU_LOAD);
 }
 
+#ifdef CONFIG_DOVETAIL
+
+static inline void oob_fpu_set_preempt(struct fpu *fpu)
+{
+	fpu->preempted = 1;
+}
+
+static inline void oob_fpu_clear_preempt(struct fpu *fpu)
+{
+	fpu->preempted = 0;
+}
+
+static inline bool oob_fpu_preempted(struct fpu *old_fpu)
+{
+	return old_fpu->preempted;
+}
+
+#else
+
+static inline bool oob_fpu_preempted(struct fpu *old_fpu)
+{
+	return false;
+}
+
+#endif	/* !CONFIG_DOVETAIL */
+
 /*
  * FPU state switching for scheduling.
  *
@@ -571,7 +598,9 @@ static inline void __fpregs_load_activate(void)
  */
 static inline void switch_fpu_prepare(struct fpu *old_fpu, int cpu)
 {
-	if (static_cpu_has(X86_FEATURE_FPU) && !(current->flags & PF_KTHREAD)) {
+	if (static_cpu_has(X86_FEATURE_FPU) &&
+		!(current->flags & PF_KTHREAD) &&
+		!oob_fpu_preempted(old_fpu)) {
 		if (!copy_fpregs_to_fpstate(old_fpu))
 			old_fpu->last_cpu = -1;
 		else
diff --git a/arch/x86/include/asm/fpu/types.h b/arch/x86/include/asm/fpu/types.h
index f098f6cab94b..a95c861a38cc 100644
--- a/arch/x86/include/asm/fpu/types.h
+++ b/arch/x86/include/asm/fpu/types.h
@@ -293,6 +293,18 @@ struct fpu {
 	 */
 	unsigned int			last_cpu;
 
+#ifdef CONFIG_DOVETAIL
+	/*
+	 * @preempted:
+	 *
+	 * When Dovetail is enabled, this flag is set for the inband
+	 * task context saved when entering a kernel_fpu_begin/end()
+	 * section before the latter got preempted by an out-of-band
+	 * task.
+	 */
+	unsigned char			preempted : 1;
+#endif
+
 	/*
 	 * @avx512_timestamp:
 	 *
diff --git a/arch/x86/include/asm/hw_irq.h b/arch/x86/include/asm/hw_irq.h
index 4154bc5f6a4e..beae9ae335ac 100644
--- a/arch/x86/include/asm/hw_irq.h
+++ b/arch/x86/include/asm/hw_irq.h
@@ -50,6 +50,11 @@ extern asmlinkage void deferred_error_interrupt(void);
 extern asmlinkage void call_function_interrupt(void);
 extern asmlinkage void call_function_single_interrupt(void);
 
+#ifdef CONFIG_IRQ_PIPELINE
+extern asmlinkage void reschedule_oob_interrupt(void);
+extern asmlinkage void timer_oob_interrupt(void);
+#endif
+
 #ifdef	CONFIG_X86_LOCAL_APIC
 struct irq_data;
 struct pci_dev;
diff --git a/arch/x86/include/asm/i8259.h b/arch/x86/include/asm/i8259.h
index 89789e8c80f6..facf1bc68de6 100644
--- a/arch/x86/include/asm/i8259.h
+++ b/arch/x86/include/asm/i8259.h
@@ -26,7 +26,7 @@ extern unsigned int cached_irq_mask;
 #define SLAVE_ICW4_DEFAULT	0x01
 #define PIC_ICW4_AEOI		2
 
-extern raw_spinlock_t i8259A_lock;
+extern hard_spinlock_t i8259A_lock;
 
 /* the PIC may need a careful delay on some platforms, hence specific calls */
 static inline unsigned char inb_pic(unsigned int port)
diff --git a/arch/x86/include/asm/irq_pipeline.h b/arch/x86/include/asm/irq_pipeline.h
new file mode 100644
index 000000000000..163bd20dda51
--- /dev/null
+++ b/arch/x86/include/asm/irq_pipeline.h
@@ -0,0 +1,149 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef _ASM_X86_IRQ_PIPELINE_H
+#define _ASM_X86_IRQ_PIPELINE_H
+
+#include <asm-generic/irq_pipeline.h>
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+#include <asm/ptrace.h>
+
+#define FIRST_SYSTEM_IRQ	NR_IRQS
+#define TIMER_OOB_IPI		apicm_vector_irq(TIMER_OOB_VECTOR)
+#define RESCHEDULE_OOB_IPI	apicm_vector_irq(RESCHEDULE_OOB_VECTOR)
+#define apicm_irq_vector(__irq) ((__irq) - FIRST_SYSTEM_IRQ + FIRST_SYSTEM_VECTOR)
+#define apicm_vector_irq(__vec) ((__vec) - FIRST_SYSTEM_VECTOR + FIRST_SYSTEM_IRQ)
+
+#define X86_EFLAGS_SS_BIT	31
+
+static inline notrace
+unsigned long arch_irqs_virtual_to_native_flags(int stalled)
+{
+	return (!stalled) << X86_EFLAGS_IF_BIT;
+}
+
+static inline notrace
+unsigned long arch_irqs_native_to_virtual_flags(unsigned long flags)
+{
+	return hard_irqs_disabled_flags(flags) << X86_EFLAGS_SS_BIT;
+}
+
+#ifndef CONFIG_PARAVIRT_XXL
+
+static inline notrace unsigned long arch_local_irq_save(void)
+{
+	int stalled = inband_irq_save();
+	barrier();
+	return arch_irqs_virtual_to_native_flags(stalled);
+}
+
+static inline notrace void arch_local_irq_enable(void)
+{
+	barrier();
+	inband_irq_enable();
+}
+
+static inline notrace void arch_local_irq_disable(void)
+{
+	inband_irq_disable();
+	barrier();
+}
+
+static inline notrace unsigned long arch_local_save_flags(void)
+{
+	int stalled = inband_irqs_disabled();
+	barrier();
+	return arch_irqs_virtual_to_native_flags(stalled);
+}
+
+static inline notrace void arch_local_irq_restore(unsigned long flags)
+{
+	inband_irq_restore(native_irqs_disabled_flags(flags));
+	barrier();
+}
+
+#endif /* !CONFIG_PARAVIRT_XXL */
+
+static inline
+void arch_save_timer_regs(struct pt_regs *dst,
+			  struct pt_regs *src, bool oob_context)
+{
+	dst->flags = src->flags;
+	dst->cs = src->cs;
+	dst->ip = src->ip;
+	dst->bp = src->bp;
+	dst->ss = src->ss;
+	dst->sp = src->sp;
+	if (oob_context)
+		dst->flags &= ~X86_EFLAGS_IF;
+}
+
+static inline bool arch_steal_pipelined_tick(struct pt_regs *regs)
+{
+	return !(regs->flags & X86_EFLAGS_IF);
+}
+
+static inline int arch_enable_oob_stage(void)
+{
+	return 0;
+}
+
+unsigned long pipelined_fault_entry(int trapnr, struct pt_regs *regs);
+
+void pipelined_fault_exit(unsigned long combo);
+
+void handle_arch_irq(struct pt_regs *regs);
+
+#else /* !CONFIG_IRQ_PIPELINE */
+
+struct pt_regs;
+
+#ifndef CONFIG_PARAVIRT_XXL
+
+static inline notrace unsigned long arch_local_save_flags(void)
+{
+	return native_save_fl();
+}
+
+static inline notrace void arch_local_irq_restore(unsigned long flags)
+{
+	native_restore_fl(flags);
+}
+
+static inline notrace void arch_local_irq_disable(void)
+{
+	native_irq_disable();
+}
+
+static inline notrace void arch_local_irq_enable(void)
+{
+	native_irq_enable();
+}
+
+/*
+ * For spinlocks, etc:
+ */
+static inline notrace unsigned long arch_local_irq_save(void)
+{
+	unsigned long flags = arch_local_save_flags();
+	arch_local_irq_disable();
+	return flags;
+}
+
+#endif /* !CONFIG_PARAVIRT_XXL */
+
+static inline
+unsigned long pipelined_fault_entry(int trapnr, struct pt_regs *regs)
+{
+	return 0;
+}
+
+static inline void pipelined_fault_exit(unsigned long combo) { }
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
+#endif /* _ASM_X86_IRQ_PIPELINE_H */
diff --git a/arch/x86/include/asm/irq_vectors.h b/arch/x86/include/asm/irq_vectors.h
index 889f8b1b5b7f..1e51dc4850a6 100644
--- a/arch/x86/include/asm/irq_vectors.h
+++ b/arch/x86/include/asm/irq_vectors.h
@@ -106,10 +106,19 @@
 
 #define LOCAL_TIMER_VECTOR		0xec
 
+#ifdef CONFIG_IRQ_PIPELINE
+#define TIMER_OOB_VECTOR		0xeb
+#define RESCHEDULE_OOB_VECTOR		0xea
+#define FIRST_SYSTEM_APIC_VECTOR	RESCHEDULE_OOB_VECTOR
+#define NR_APIC_VECTORS	        	(NR_VECTORS - FIRST_SYSTEM_VECTOR)
+#else
+#define FIRST_SYSTEM_APIC_VECTOR	LOCAL_TIMER_VECTOR
+#endif
+
 #define NR_VECTORS			 256
 
 #ifdef CONFIG_X86_LOCAL_APIC
-#define FIRST_SYSTEM_VECTOR		LOCAL_TIMER_VECTOR
+#define FIRST_SYSTEM_VECTOR		FIRST_SYSTEM_APIC_VECTOR
 #else
 #define FIRST_SYSTEM_VECTOR		NR_VECTORS
 #endif
diff --git a/arch/x86/include/asm/irqflags.h b/arch/x86/include/asm/irqflags.h
index 8a0e56e1dcc9..9471ceaea11e 100644
--- a/arch/x86/include/asm/irqflags.h
+++ b/arch/x86/include/asm/irqflags.h
@@ -35,6 +35,11 @@ extern inline unsigned long native_save_fl(void)
 	return flags;
 }
 
+static inline unsigned long native_save_flags(void)
+{
+	return native_save_fl();
+}
+
 extern inline void native_restore_fl(unsigned long flags);
 extern inline void native_restore_fl(unsigned long flags)
 {
@@ -54,6 +59,38 @@ static inline void native_irq_enable(void)
 	asm volatile("sti": : :"memory");
 }
 
+static inline void native_irq_sync(void)
+{
+	asm volatile("sti ; nop ; cli": : :"memory");
+}
+
+static inline unsigned long native_irq_save(void)
+{
+	unsigned long flags;
+
+	flags = native_save_flags();
+
+	native_irq_disable();
+
+	return flags;
+}
+
+static inline void native_irq_restore(unsigned long flags)
+{
+	return native_restore_fl(flags);
+}
+
+static inline int native_irqs_disabled_flags(unsigned long flags)
+{
+	return !(flags & X86_EFLAGS_IF);
+}
+
+static inline bool native_irqs_disabled(void)
+{
+	unsigned long flags = native_save_flags();
+	return native_irqs_disabled_flags(flags);
+}
+
 static inline __cpuidle void native_safe_halt(void)
 {
 	mds_idle_clear_cpu_buffers();
@@ -73,26 +110,7 @@ static inline __cpuidle void native_halt(void)
 #else
 #ifndef __ASSEMBLY__
 #include <linux/types.h>
-
-static inline notrace unsigned long arch_local_save_flags(void)
-{
-	return native_save_fl();
-}
-
-static inline notrace void arch_local_irq_restore(unsigned long flags)
-{
-	native_restore_fl(flags);
-}
-
-static inline notrace void arch_local_irq_disable(void)
-{
-	native_irq_disable();
-}
-
-static inline notrace void arch_local_irq_enable(void)
-{
-	native_irq_enable();
-}
+#include <asm/irq_pipeline.h>
 
 /*
  * Used in the idle loop; sti takes one instruction cycle
@@ -112,15 +130,6 @@ static inline __cpuidle void halt(void)
 	native_halt();
 }
 
-/*
- * For spinlocks, etc:
- */
-static inline notrace unsigned long arch_local_irq_save(void)
-{
-	unsigned long flags = arch_local_save_flags();
-	arch_local_irq_disable();
-	return flags;
-}
 #else
 
 #define ENABLE_INTERRUPTS(x)	sti
@@ -161,7 +170,7 @@ static inline notrace unsigned long arch_local_irq_save(void)
 #ifndef __ASSEMBLY__
 static inline int arch_irqs_disabled_flags(unsigned long flags)
 {
-	return !(flags & X86_EFLAGS_IF);
+	return native_irqs_disabled_flags(flags);
 }
 
 static inline int arch_irqs_disabled(void)
@@ -176,8 +185,14 @@ static inline int arch_irqs_disabled(void)
 #ifdef CONFIG_TRACE_IRQFLAGS
 #  define TRACE_IRQS_ON		call trace_hardirqs_on_thunk;
 #  define TRACE_IRQS_OFF	call trace_hardirqs_off_thunk;
+#ifdef CONFIG_IRQ_PIPELINE
+#  define TRACE_IRQS_ON_PIPELINED	call trace_hardirqs_on_pipelined_thunk;
+#else
+#  define TRACE_IRQS_ON_PIPELINED	TRACE_IRQS_ON
+#endif
 #else
 #  define TRACE_IRQS_ON
+#  define TRACE_IRQS_ON_PIPELINED
 #  define TRACE_IRQS_OFF
 #endif
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
@@ -204,6 +219,13 @@ static inline int arch_irqs_disabled(void)
 #  define LOCKDEP_SYS_EXIT
 #  define LOCKDEP_SYS_EXIT_IRQ
 #endif
+#ifdef CONFIG_IRQ_PIPELINE
+#define ENABLE_INTERRUPTS_IF_PIPELINED	ENABLE_INTERRUPTS(CLBR_ANY)
+#define DISABLE_INTERRUPTS_IF_PIPELINED	DISABLE_INTERRUPTS(CLBR_ANY)
+#else
+#define ENABLE_INTERRUPTS_IF_PIPELINED
+#define DISABLE_INTERRUPTS_IF_PIPELINED
+#endif
 #endif /* __ASSEMBLY__ */
 
 #endif
diff --git a/arch/x86/include/asm/mmu_context.h b/arch/x86/include/asm/mmu_context.h
index 16ae821483c8..32c3c7607ac3 100644
--- a/arch/x86/include/asm/mmu_context.h
+++ b/arch/x86/include/asm/mmu_context.h
@@ -214,6 +214,13 @@ extern void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,
 			       struct task_struct *tsk);
 #define switch_mm_irqs_off switch_mm_irqs_off
 
+static inline void
+switch_oob_mm(struct mm_struct *prev, struct mm_struct *next,
+	      struct task_struct *tsk)
+{
+	switch_mm_irqs_off(prev, next, tsk);
+}
+
 #define activate_mm(prev, next)			\
 do {						\
 	paravirt_activate_mm((prev), (next));	\
@@ -377,10 +384,13 @@ typedef struct {
 static inline temp_mm_state_t use_temporary_mm(struct mm_struct *mm)
 {
 	temp_mm_state_t temp_state;
+	unsigned long flags;
 
 	lockdep_assert_irqs_disabled();
 	temp_state.mm = this_cpu_read(cpu_tlbstate.loaded_mm);
+	protect_inband_mm(flags);
 	switch_mm_irqs_off(NULL, mm, current);
+	unprotect_inband_mm(flags);
 
 	/*
 	 * If breakpoints are enabled, disable them while the temporary mm is
@@ -401,8 +411,12 @@ static inline temp_mm_state_t use_temporary_mm(struct mm_struct *mm)
 
 static inline void unuse_temporary_mm(temp_mm_state_t prev_state)
 {
+	unsigned long flags;
+
 	lockdep_assert_irqs_disabled();
+	protect_inband_mm(flags);
 	switch_mm_irqs_off(NULL, prev_state.mm, current);
+	unprotect_inband_mm(flags);
 
 	/*
 	 * Restore the breakpoints if they were disabled before the temporary mm
diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
index 0bc530c4eb13..159c3b001c54 100644
--- a/arch/x86/include/asm/pgtable.h
+++ b/arch/x86/include/asm/pgtable.h
@@ -136,6 +136,7 @@ static inline u32 read_pkru(void)
 static inline void write_pkru(u32 pkru)
 {
 	struct pkru_state *pk;
+	unsigned long flags;
 
 	if (!boot_cpu_has(X86_FEATURE_OSPKE))
 		return;
@@ -147,11 +148,11 @@ static inline void write_pkru(u32 pkru)
 	 * written to the CPU. The FPU restore on return to userland would
 	 * otherwise load the previous value again.
 	 */
-	fpregs_lock();
+	flags = fpregs_lock();
 	if (pk)
 		pk->pkru = pkru;
 	__write_pkru(pkru);
-	fpregs_unlock();
+	fpregs_unlock(flags);
 }
 
 static inline int pte_young(pte_t pte)
diff --git a/arch/x86/include/asm/processor.h b/arch/x86/include/asm/processor.h
index 6e0a3b43d027..3d80ebf398d0 100644
--- a/arch/x86/include/asm/processor.h
+++ b/arch/x86/include/asm/processor.h
@@ -514,6 +514,13 @@ static inline void arch_thread_struct_whitelist(unsigned long *offset,
  * have to worry about atomic accesses.
  */
 #define TS_COMPAT		0x0002	/* 32bit syscall active (64BIT)*/
+#define TS_OOB			0x0004	/* Thread is running out-of-band */
+#define TS_DOVETAIL		0x0008  /* Dovetail notifier enabled */
+#define TS_OFFSTAGE		0x0010	/* Thread is in-flight to OOB context */
+
+#define _TLF_OOB		TS_OOB
+#define _TLF_DOVETAIL		TS_DOVETAIL
+#define _TLF_OFFSTAGE		TS_OFFSTAGE
 
 /*
  * Set IOPL bits in EFLAGS from given mask
diff --git a/arch/x86/include/asm/thread_info.h b/arch/x86/include/asm/thread_info.h
index f9453536f9bb..40590cdb4b78 100644
--- a/arch/x86/include/asm/thread_info.h
+++ b/arch/x86/include/asm/thread_info.h
@@ -52,10 +52,12 @@
 struct task_struct;
 #include <asm/cpufeature.h>
 #include <linux/atomic.h>
+#include <dovetail/thread_info.h>
 
 struct thread_info {
 	unsigned long		flags;		/* low level flags */
 	u32			status;		/* thread synchronous flags */
+	struct oob_thread_state	oob_state;	/* co-kernel thread state */
 };
 
 #define INIT_THREAD_INFO(tsk)			\
@@ -63,6 +65,8 @@ struct thread_info {
 	.flags		= 0,			\
 }
 
+#define ti_local_flags(__ti)	((__ti)->status)
+
 #else /* !__ASSEMBLY__ */
 
 #include <asm/asm-offsets.h>
@@ -98,6 +102,7 @@ struct thread_info {
 #define TIF_IO_BITMAP		22	/* uses I/O bitmap */
 #define TIF_FORCED_TF		24	/* true if TF in eflags artificially */
 #define TIF_BLOCKSTEP		25	/* set when we want DEBUGCTLMSR_BTF */
+#define TIF_MAYDAY		26	/* emergency trap pending */
 #define TIF_LAZY_MMU_UPDATES	27	/* task is updating the mmu lazily */
 #define TIF_SYSCALL_TRACEPOINT	28	/* syscall tracepoint instrumentation */
 #define TIF_ADDR32		29	/* 32-bit address space on 64 bits */
@@ -126,6 +131,7 @@ struct thread_info {
 #define _TIF_POLLING_NRFLAG	(1 << TIF_POLLING_NRFLAG)
 #define _TIF_IO_BITMAP		(1 << TIF_IO_BITMAP)
 #define _TIF_FORCED_TF		(1 << TIF_FORCED_TF)
+#define _TIF_MAYDAY		(1 << TIF_MAYDAY)
 #define _TIF_BLOCKSTEP		(1 << TIF_BLOCKSTEP)
 #define _TIF_LAZY_MMU_UPDATES	(1 << TIF_LAZY_MMU_UPDATES)
 #define _TIF_SYSCALL_TRACEPOINT	(1 << TIF_SYSCALL_TRACEPOINT)
diff --git a/arch/x86/include/asm/tlbflush.h b/arch/x86/include/asm/tlbflush.h
index 6f66d841262d..c7e774476dec 100644
--- a/arch/x86/include/asm/tlbflush.h
+++ b/arch/x86/include/asm/tlbflush.h
@@ -284,7 +284,10 @@ static inline void cr4_init_shadow(void)
 
 static inline void __cr4_set(unsigned long cr4)
 {
-	lockdep_assert_irqs_disabled();
+	if (irqs_pipelined())
+		check_hard_irqs_disabled();
+	else
+		lockdep_assert_irqs_disabled();
 	this_cpu_write(cpu_tlbstate.cr4, cr4);
 	__write_cr4(cr4);
 }
@@ -292,21 +295,25 @@ static inline void __cr4_set(unsigned long cr4)
 /* Set in this cpu's CR4. */
 static inline void cr4_set_bits_irqsoff(unsigned long mask)
 {
-	unsigned long cr4;
+	unsigned long cr4, flags;
 
+	flags = hard_local_irq_save();
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
 	if ((cr4 | mask) != cr4)
 		__cr4_set(cr4 | mask);
+	hard_local_irq_restore(flags);
 }
 
 /* Clear in this cpu's CR4. */
 static inline void cr4_clear_bits_irqsoff(unsigned long mask)
 {
-	unsigned long cr4;
+	unsigned long cr4, flags;
 
+	flags = hard_local_irq_save();
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
 	if ((cr4 & ~mask) != cr4)
 		__cr4_set(cr4 & ~mask);
+	hard_local_irq_restore(flags);
 }
 
 /* Set in this cpu's CR4. */
@@ -314,9 +321,9 @@ static inline void cr4_set_bits(unsigned long mask)
 {
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	cr4_set_bits_irqsoff(mask);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /* Clear in this cpu's CR4. */
@@ -324,17 +331,19 @@ static inline void cr4_clear_bits(unsigned long mask)
 {
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	cr4_clear_bits_irqsoff(mask);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline void cr4_toggle_bits_irqsoff(unsigned long mask)
 {
-	unsigned long cr4;
+	unsigned long cr4, flags;
 
+	flags = hard_local_irq_save();
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
 	__cr4_set(cr4 ^ mask);
+	hard_local_irq_restore(flags);
 }
 
 /* Read the CR4 shadow. */
@@ -401,6 +410,8 @@ static inline void invalidate_user_asid(u16 asid)
  */
 static inline void __native_flush_tlb(void)
 {
+	unsigned long flags;
+
 	/*
 	 * Preemption or interrupts must be disabled to protect the access
 	 * to the per CPU variable and to prevent being preempted between
@@ -408,10 +419,14 @@ static inline void __native_flush_tlb(void)
 	 */
 	WARN_ON_ONCE(preemptible());
 
+	flags = hard_cond_local_irq_save();
+
 	invalidate_user_asid(this_cpu_read(cpu_tlbstate.loaded_mm_asid));
 
 	/* If current->mm == NULL then the read_cr3() "borrows" an mm */
 	native_write_cr3(__native_read_cr3());
+
+	hard_cond_local_irq_restore(flags);
 }
 
 /*
@@ -437,7 +452,7 @@ static inline void __native_flush_tlb_global(void)
 	 * from interrupts. (Use the raw variant because this code can
 	 * be called from deep inside debugging code.)
 	 */
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	cr4 = this_cpu_read(cpu_tlbstate.cr4);
 	/* toggle PGE */
@@ -445,7 +460,7 @@ static inline void __native_flush_tlb_global(void)
 	/* write old PGE again and flush TLBs */
 	native_write_cr4(cr4);
 
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /*
diff --git a/arch/x86/include/asm/uaccess.h b/arch/x86/include/asm/uaccess.h
index 61d93f062a36..8ae74e0bcf00 100644
--- a/arch/x86/include/asm/uaccess.h
+++ b/arch/x86/include/asm/uaccess.h
@@ -68,7 +68,7 @@ static inline bool __chk_range_not_ok(unsigned long addr, unsigned long size, un
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
 static inline bool pagefault_disabled(void);
 # define WARN_ON_IN_IRQ()	\
-	WARN_ON_ONCE(!in_task() && !pagefault_disabled())
+	WARN_ON_ONCE(running_inband() && !in_task() && !pagefault_disabled())
 #else
 # define WARN_ON_IN_IRQ()
 #endif
diff --git a/arch/x86/include/dovetail/irq.h b/arch/x86/include/dovetail/irq.h
new file mode 100644
index 000000000000..f214e2f6ee2b
--- /dev/null
+++ b/arch/x86/include/dovetail/irq.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_DOVETAIL_IRQ_H
+#define _EVL_DOVETAIL_IRQ_H
+
+#ifdef CONFIG_EVL
+#include <asm-generic/evl/irq.h>
+#else
+#include_next <dovetail/irq.h>
+#endif
+
+#endif /* !_EVL_DOVETAIL_IRQ_H */
diff --git a/arch/x86/include/dovetail/thread_info.h b/arch/x86/include/dovetail/thread_info.h
new file mode 100644
index 000000000000..4253b13fe47f
--- /dev/null
+++ b/arch/x86/include/dovetail/thread_info.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _EVL_DOVETAIL_THREAD_INFO_H
+#define _EVL_DOVETAIL_THREAD_INFO_H
+
+#include <asm-generic/evl/thread_info.h>
+
+#endif /* !_EVL_DOVETAIL_THREAD_INFO_H */
diff --git a/arch/x86/include/uapi/asm/evl/fptest.h b/arch/x86/include/uapi/asm/evl/fptest.h
new file mode 100644
index 000000000000..b8ace9fcaeb0
--- /dev/null
+++ b/arch/x86/include/uapi/asm/evl/fptest.h
@@ -0,0 +1,122 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>.
+ */
+#ifndef _EVL_X86_ASM_UAPI_FPTEST_H
+#define _EVL_X86_ASM_UAPI_FPTEST_H
+
+#include <linux/types.h>
+
+#define evl_x86_xmm2  0x1
+#define evl_x86_avx   0x2
+
+#define evl_set_fpregs(__features, __val)				\
+	do {								\
+		__u64 __vec[4] = { __val, 0, __val, 0 };		\
+		__u32 __ival = (__val);					\
+		unsigned int i;						\
+									\
+		for (i = 0; i < 8; i++)					\
+			__asm__ __volatile__("fildl %0":		\
+					/* no output */ :"m"(__ival));	\
+		if (__features & evl_x86_avx) {				\
+		__asm__ __volatile__(					\
+			"vmovupd %0,%%ymm0;"				\
+			"vmovupd %0,%%ymm1;"				\
+			"vmovupd %0,%%ymm2;"				\
+			"vmovupd %0,%%ymm3;"				\
+			"vmovupd %0,%%ymm4;"				\
+			"vmovupd %0,%%ymm5;"				\
+			"vmovupd %0,%%ymm6;"				\
+			"vmovupd %0,%%ymm7;"				\
+			: : "m"(__vec[0]), "m"(__vec[1]),		\
+			  "m"(__vec[2]), "m"(__vec[3]));		\
+		} else if (__features & evl_x86_xmm2) {			\
+		__asm__ __volatile__(					\
+			"movupd %0,%%xmm0;"				\
+			"movupd %0,%%xmm1;"				\
+			"movupd %0,%%xmm2;"				\
+			"movupd %0,%%xmm3;"				\
+			"movupd %0,%%xmm4;"				\
+			"movupd %0,%%xmm5;"				\
+			"movupd %0,%%xmm6;"				\
+			"movupd %0,%%xmm7;"				\
+			: : "m"(__vec[0]), "m"(__vec[1]),		\
+			  "m"(__vec[2]), "m"(__vec[3]));		\
+		}							\
+	} while (0)
+
+#define evl_check_fpregs(__features, __val, __bad)			\
+	({								\
+		unsigned int i, __result = __val;			\
+		__u64 __vec[8][4];					\
+		__u32 __e[8];						\
+									\
+		for (i = 0; i < 8; i++)					\
+			__asm__ __volatile__("fistpl %0":		\
+					"=m" (__e[7 - i]));		\
+		if (__features & evl_x86_avx) {				\
+			__asm__ __volatile__(				\
+				"vmovupd %%ymm0,%0;"			\
+				"vmovupd %%ymm1,%1;"			\
+				"vmovupd %%ymm2,%2;"			\
+				"vmovupd %%ymm3,%3;"			\
+				"vmovupd %%ymm4,%4;"			\
+				"vmovupd %%ymm5,%5;"			\
+				"vmovupd %%ymm6,%6;"			\
+				"vmovupd %%ymm7,%7;"			\
+				: "=m" (__vec[0][0]), "=m" (__vec[1][0]), \
+				  "=m" (__vec[2][0]), "=m" (__vec[3][0]), \
+				  "=m" (__vec[4][0]), "=m" (__vec[5][0]), \
+				  "=m" (__vec[6][0]), "=m" (__vec[7][0])); \
+		} else if (__features & evl_x86_xmm2) {			\
+			__asm__ __volatile__(				\
+				"movupd %%xmm0,%0;"			\
+				"movupd %%xmm1,%1;"			\
+				"movupd %%xmm2,%2;"			\
+				"movupd %%xmm3,%3;"			\
+				"movupd %%xmm4,%4;"			\
+				"movupd %%xmm5,%5;"			\
+				"movupd %%xmm6,%6;"			\
+				"movupd %%xmm7,%7;"			\
+				: "=m" (__vec[0][0]), "=m" (__vec[1][0]), \
+				  "=m" (__vec[2][0]), "=m" (__vec[3][0]), \
+				  "=m" (__vec[4][0]), "=m" (__vec[5][0]), \
+				  "=m" (__vec[6][0]), "=m" (__vec[7][0])); \
+		}							\
+		for (i = 0, __bad = -1; i < 8; i++) {			\
+			if (__e[i] != __val) {				\
+				__result = __e[i];			\
+				__bad = i;				\
+				break;					\
+			}						\
+		}							\
+		if (__bad >= 0)						\
+			;						\
+		else if (__features & evl_x86_avx) {			\
+			for (i = 0; i < 8; i++) {			\
+				if (__vec[i][0] != __val) {		\
+					__result = __vec[i][0];		\
+					__bad = i + 8;			\
+					break;				\
+				}					\
+				if (__vec[i][2] != __val) {		\
+					__result = __vec[i][2];		\
+					__bad = i + 8;			\
+					break;				\
+				}					\
+			}						\
+		} else if (__features & evl_x86_xmm2) {			\
+			for (i = 0; i < 8; i++)				\
+				if (__vec[i][0] != __val) {		\
+					__result = __vec[i][0];		\
+					__bad = i + 8;			\
+					break;				\
+				}					\
+		}							\
+		__result;						\
+	})
+
+#endif /* !_EVL_X86_ASM_UAPI_FPTEST_H */
diff --git a/arch/x86/include/uapi/asm/evl/syscall.h b/arch/x86/include/uapi/asm/evl/syscall.h
new file mode 100644
index 000000000000..f3464ae53572
--- /dev/null
+++ b/arch/x86/include/uapi/asm/evl/syscall.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _EVL_X86_ASM_UAPI_SYSCALL_H
+#define _EVL_X86_ASM_UAPI_SYSCALL_H
+
+#define __EVL_SYSCALL_BIT	0x10000000
+
+#endif /* !_EVL_X86_ASM_UAPI_SYSCALL_H */
diff --git a/arch/x86/kernel/Makefile b/arch/x86/kernel/Makefile
index 3578ad248bc9..b4539cf53605 100644
--- a/arch/x86/kernel/Makefile
+++ b/arch/x86/kernel/Makefile
@@ -118,6 +118,7 @@ obj-$(CONFIG_PARAVIRT_CLOCK)	+= pvclock.o
 obj-$(CONFIG_X86_PMEM_LEGACY_DEVICE) += pmem.o
 
 obj-$(CONFIG_JAILHOUSE_GUEST)	+= jailhouse.o
+obj-$(CONFIG_IRQ_PIPELINE)	+= irq_pipeline.o
 
 obj-$(CONFIG_EISA)		+= eisa.o
 obj-$(CONFIG_PCSPKR_PLATFORM)	+= pcspeaker.o
diff --git a/arch/x86/kernel/apic/apic.c b/arch/x86/kernel/apic/apic.c
index 2b0faf86da1b..e4411af83d7c 100644
--- a/arch/x86/kernel/apic/apic.c
+++ b/arch/x86/kernel/apic/apic.c
@@ -31,6 +31,7 @@
 #include <linux/i8253.h>
 #include <linux/dmar.h>
 #include <linux/init.h>
+#include <linux/irq.h>
 #include <linux/cpu.h>
 #include <linux/dmi.h>
 #include <linux/smp.h>
@@ -271,10 +272,10 @@ void native_apic_icr_write(u32 low, u32 id)
 {
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	apic_write(APIC_ICR2, SET_APIC_DEST_FIELD(id));
 	apic_write(APIC_ICR, low);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 u64 native_apic_icr_read(void)
@@ -330,6 +331,9 @@ int lapic_get_maxlvt(void)
 static void __setup_APIC_LVTT(unsigned int clocks, int oneshot, int irqen)
 {
 	unsigned int lvtt_value, tmp_value;
+	unsigned long flags;
+
+	flags = hard_cond_local_irq_save();
 
 	lvtt_value = LOCAL_TIMER_VECTOR;
 	if (!oneshot)
@@ -354,6 +358,7 @@ static void __setup_APIC_LVTT(unsigned int clocks, int oneshot, int irqen)
 		asm volatile("mfence" : : : "memory");
 
 		printk_once(KERN_DEBUG "TSC deadline timer enabled\n");
+		hard_cond_local_irq_restore(flags);
 		return;
 	}
 
@@ -367,6 +372,8 @@ static void __setup_APIC_LVTT(unsigned int clocks, int oneshot, int irqen)
 
 	if (!oneshot)
 		apic_write(APIC_TMICT, clocks / APIC_DIVISOR);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 /*
@@ -472,25 +479,31 @@ static int lapic_next_event(unsigned long delta,
 static int lapic_next_deadline(unsigned long delta,
 			       struct clock_event_device *evt)
 {
+	unsigned long flags;
 	u64 tsc;
 
+	flags = hard_local_irq_save();
 	tsc = rdtsc();
 	wrmsrl(MSR_IA32_TSC_DEADLINE, tsc + (((u64) delta) * TSC_DIVISOR));
+	hard_local_irq_restore(flags);
 	return 0;
 }
 
 static int lapic_timer_shutdown(struct clock_event_device *evt)
 {
+	unsigned long flags;
 	unsigned int v;
 
 	/* Lapic used as dummy for broadcast ? */
 	if (evt->features & CLOCK_EVT_FEAT_DUMMY)
 		return 0;
 
+	flags = hard_local_irq_save();
 	v = apic_read(APIC_LVTT);
 	v |= (APIC_LVT_MASKED | LOCAL_TIMER_VECTOR);
 	apic_write(APIC_LVTT, v);
 	apic_write(APIC_TMICT, 0);
+	hard_local_irq_restore(flags);
 	return 0;
 }
 
@@ -525,6 +538,32 @@ static void lapic_timer_broadcast(const struct cpumask *mask)
 #endif
 }
 
+static DEFINE_PER_CPU(struct clock_event_device, lapic_events);
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+#define LAPIC_TIMER_IRQ  apicm_vector_irq(LOCAL_TIMER_VECTOR)
+
+static irqreturn_t lapic_oob_handler(int irq, void *dev_id)
+{
+	struct clock_event_device *evt = this_cpu_ptr(&lapic_events);
+
+	trace_local_timer_entry(LOCAL_TIMER_VECTOR);
+	clockevents_handle_event(evt);
+	trace_local_timer_exit(LOCAL_TIMER_VECTOR);
+
+	return IRQ_HANDLED;
+}
+
+static struct irqaction lapic_oob_action = {
+	.handler = lapic_oob_handler,
+	.name = "Out-of-band LAPIC timer interrupt",
+	.flags = IRQF_TIMER | IRQF_PERCPU,
+};
+
+#else
+#define LAPIC_TIMER_IRQ  -1
+#endif
 
 /*
  * The local apic timer can be used for any function which is CPU local.
@@ -532,8 +571,8 @@ static void lapic_timer_broadcast(const struct cpumask *mask)
 static struct clock_event_device lapic_clockevent = {
 	.name				= "lapic",
 	.features			= CLOCK_EVT_FEAT_PERIODIC |
-					  CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_C3STOP
-					  | CLOCK_EVT_FEAT_DUMMY,
+					  CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_C3STOP  |
+					  CLOCK_EVT_FEAT_PIPELINE | CLOCK_EVT_FEAT_DUMMY,
 	.shift				= 32,
 	.set_state_shutdown		= lapic_timer_shutdown,
 	.set_state_periodic		= lapic_timer_set_periodic,
@@ -542,9 +581,8 @@ static struct clock_event_device lapic_clockevent = {
 	.set_next_event			= lapic_next_event,
 	.broadcast			= lapic_timer_broadcast,
 	.rating				= 100,
-	.irq				= -1,
+	.irq				= LAPIC_TIMER_IRQ,
 };
-static DEFINE_PER_CPU(struct clock_event_device, lapic_events);
 
 #define DEADLINE_MODEL_MATCH_FUNC(model, func)	\
 	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_ANY, (unsigned long)&func }
@@ -1068,6 +1106,9 @@ void __init setup_boot_APIC_clock(void)
 	/* Setup the lapic or request the broadcast */
 	setup_APIC_timer();
 	amd_e400_c1e_apic_setup();
+#ifdef CONFIG_IRQ_PIPELINE
+	setup_percpu_irq(LAPIC_TIMER_IRQ, &lapic_oob_action);
+#endif
 }
 
 void setup_secondary_APIC_clock(void)
@@ -1541,7 +1582,7 @@ static bool apic_check_and_ack(union apic_ir *irr, union apic_ir *isr)
 		 * per set bit.
 		 */
 		for_each_set_bit(bit, isr->map, APIC_IR_BITS)
-			ack_APIC_irq();
+			__ack_APIC_irq();
 		return true;
 	}
 
@@ -2176,7 +2217,7 @@ __visible void __irq_entry smp_spurious_interrupt(struct pt_regs *regs)
 	if (v & (1 << (vector & 0x1f))) {
 		pr_info("Spurious interrupt (vector 0x%02x) on CPU#%d. Acked\n",
 			vector, smp_processor_id());
-		ack_APIC_irq();
+		__ack_APIC_irq();
 	} else {
 		pr_info("Spurious interrupt (vector 0x%02x) on CPU#%d. Not pending!\n",
 			vector, smp_processor_id());
@@ -2210,7 +2251,7 @@ __visible void __irq_entry smp_error_interrupt(struct pt_regs *regs)
 	if (lapic_get_maxlvt() > 3)	/* Due to the Pentium erratum 3AP. */
 		apic_write(APIC_ESR, 0);
 	v = apic_read(APIC_ESR);
-	ack_APIC_irq();
+	__ack_APIC_irq();
 	atomic_inc(&irq_err_count);
 
 	apic_printk(APIC_DEBUG, KERN_DEBUG "APIC error on CPU%d: %02x",
diff --git a/arch/x86/kernel/apic/apic_flat_64.c b/arch/x86/kernel/apic/apic_flat_64.c
index 7862b152a052..d3762181070f 100644
--- a/arch/x86/kernel/apic/apic_flat_64.c
+++ b/arch/x86/kernel/apic/apic_flat_64.c
@@ -52,9 +52,9 @@ static void _flat_send_IPI_mask(unsigned long mask, int vector)
 {
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	__default_send_IPI_dest_field(mask, vector, apic->dest_logical);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static void flat_send_IPI_mask(const struct cpumask *cpumask, int vector)
diff --git a/arch/x86/kernel/apic/apic_numachip.c b/arch/x86/kernel/apic/apic_numachip.c
index cdf45b4700f2..040ec0bd868e 100644
--- a/arch/x86/kernel/apic/apic_numachip.c
+++ b/arch/x86/kernel/apic/apic_numachip.c
@@ -103,10 +103,10 @@ static void numachip_send_IPI_one(int cpu, int vector)
 	if (!((apicid ^ local_apicid) >> NUMACHIP_LAPIC_BITS)) {
 		unsigned long flags;
 
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		__default_send_IPI_dest_field(apicid, vector,
 			APIC_DEST_PHYSICAL);
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		preempt_enable();
 		return;
 	}
diff --git a/arch/x86/kernel/apic/io_apic.c b/arch/x86/kernel/apic/io_apic.c
index d6af97fd170a..3c1a4cc5b238 100644
--- a/arch/x86/kernel/apic/io_apic.c
+++ b/arch/x86/kernel/apic/io_apic.c
@@ -78,7 +78,7 @@
 #define for_each_irq_pin(entry, head) \
 	list_for_each_entry(entry, &head, list)
 
-static DEFINE_RAW_SPINLOCK(ioapic_lock);
+static DEFINE_HARD_SPINLOCK(ioapic_lock);
 static DEFINE_MUTEX(ioapic_mutex);
 static unsigned int ioapic_dynirq_base;
 static int ioapic_initialized;
@@ -1637,7 +1637,7 @@ static int __init timer_irq_works(void)
 		return 1;
 
 	local_save_flags(flags);
-	local_irq_enable();
+	local_irq_enable_full();
 
 	if (boot_cpu_has(X86_FEATURE_TSC))
 		delay_with_tsc();
@@ -1645,6 +1645,8 @@ static int __init timer_irq_works(void)
 		delay_without_tsc();
 
 	local_irq_restore(flags);
+	if (raw_irqs_disabled_flags(flags))
+		hard_local_irq_disable();
 
 	/*
 	 * Expect a few ticks at least, to be sure some possible
@@ -1828,7 +1830,7 @@ static void ioapic_ack_level(struct irq_data *irq_data)
 	 * We must acknowledge the irq before we move it or the acknowledge will
 	 * not propagate properly.
 	 */
-	ack_APIC_irq();
+	__ack_APIC_irq();
 
 	/*
 	 * Tail end of clearing remote IRR bit (either by delivering the EOI
@@ -1948,7 +1950,7 @@ static struct irq_chip ioapic_chip __read_mostly = {
 	.irq_set_affinity	= ioapic_set_affinity,
 	.irq_retrigger		= irq_chip_retrigger_hierarchy,
 	.irq_get_irqchip_state	= ioapic_irq_get_chip_state,
-	.flags			= IRQCHIP_SKIP_SET_WAKE,
+	.flags			= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct irq_chip ioapic_ir_chip __read_mostly = {
@@ -1961,7 +1963,7 @@ static struct irq_chip ioapic_ir_chip __read_mostly = {
 	.irq_set_affinity	= ioapic_set_affinity,
 	.irq_retrigger		= irq_chip_retrigger_hierarchy,
 	.irq_get_irqchip_state	= ioapic_irq_get_chip_state,
-	.flags			= IRQCHIP_SKIP_SET_WAKE,
+	.flags			= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 static inline void init_IO_APIC_traps(void)
@@ -2008,7 +2010,7 @@ static void unmask_lapic_irq(struct irq_data *data)
 
 static void ack_lapic_irq(struct irq_data *data)
 {
-	ack_APIC_irq();
+	__ack_APIC_irq();
 }
 
 static struct irq_chip lapic_chip __read_mostly = {
@@ -2016,6 +2018,7 @@ static struct irq_chip lapic_chip __read_mostly = {
 	.irq_mask	= mask_lapic_irq,
 	.irq_unmask	= unmask_lapic_irq,
 	.irq_ack	= ack_lapic_irq,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static void lapic_register_intr(int irq)
@@ -2133,7 +2136,7 @@ static inline void __init check_timer(void)
 	if (!global_clock_event)
 		return;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	/*
 	 * get/set the timer IRQ vector:
@@ -2201,7 +2204,7 @@ static inline void __init check_timer(void)
 			goto out;
 		}
 		panic_if_irq_remap("timer doesn't work through Interrupt-remapped IO-APIC");
-		local_irq_disable();
+		hard_local_irq_disable();
 		clear_IO_APIC_pin(apic1, pin1);
 		if (!no_pin1)
 			apic_printk(APIC_QUIET, KERN_ERR "..MP-BIOS bug: "
@@ -2225,7 +2228,7 @@ static inline void __init check_timer(void)
 		/*
 		 * Cleanup, just in case ...
 		 */
-		local_irq_disable();
+		hard_local_irq_disable();
 		legacy_pic->mask(0);
 		clear_IO_APIC_pin(apic2, pin2);
 		apic_printk(APIC_QUIET, KERN_INFO "....... failed.\n");
@@ -2242,7 +2245,7 @@ static inline void __init check_timer(void)
 		apic_printk(APIC_QUIET, KERN_INFO "..... works.\n");
 		goto out;
 	}
-	local_irq_disable();
+	hard_local_irq_disable();
 	legacy_pic->mask(0);
 	apic_write(APIC_LVT0, APIC_LVT_MASKED | APIC_DM_FIXED | cfg->vector);
 	apic_printk(APIC_QUIET, KERN_INFO "..... failed.\n");
@@ -2260,7 +2263,7 @@ static inline void __init check_timer(void)
 		apic_printk(APIC_QUIET, KERN_INFO "..... works.\n");
 		goto out;
 	}
-	local_irq_disable();
+	hard_local_irq_disable();
 	apic_printk(APIC_QUIET, KERN_INFO "..... failed :(.\n");
 	if (apic_is_x2apic_enabled())
 		apic_printk(APIC_QUIET, KERN_INFO
@@ -2269,7 +2272,7 @@ static inline void __init check_timer(void)
 	panic("IO-APIC + timer doesn't work!  Boot with apic=debug and send a "
 		"report.  Then try booting with the 'noapic' option.\n");
 out:
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /*
@@ -3010,13 +3013,13 @@ int mp_irqdomain_alloc(struct irq_domain *domain, unsigned int virq,
 	cfg = irqd_cfg(irq_data);
 	add_pin_to_irq_node(data, ioapic_alloc_attr_node(info), ioapic, pin);
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	if (info->ioapic_entry)
 		mp_setup_entry(cfg, data, info->ioapic_entry);
 	mp_register_handler(virq, data->trigger);
 	if (virq < nr_legacy_irqs())
 		legacy_pic->mask(virq);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	apic_printk(APIC_VERBOSE, KERN_DEBUG
 		    "IOAPIC[%d]: Set routing entry (%d-%d -> 0x%x -> IRQ %d Mode:%i Active:%i Dest:%d)\n",
diff --git a/arch/x86/kernel/apic/ipi.c b/arch/x86/kernel/apic/ipi.c
index 6ca0f91372fd..d501cb4a9678 100644
--- a/arch/x86/kernel/apic/ipi.c
+++ b/arch/x86/kernel/apic/ipi.c
@@ -116,8 +116,10 @@ void __default_send_IPI_shortcut(unsigned int shortcut, int vector)
 	 * cli/sti.  Otherwise we use an even cheaper single atomic write
 	 * to the APIC.
 	 */
+	unsigned long flags;
 	unsigned int cfg;
 
+	flags = hard_cond_local_irq_save();
 	/*
 	 * Wait for idle.
 	 */
@@ -136,6 +138,8 @@ void __default_send_IPI_shortcut(unsigned int shortcut, int vector)
 	 * Send the IPI. The write to APIC_ICR fires this off.
 	 */
 	native_apic_mem_write(APIC_ICR, cfg);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 /*
@@ -144,8 +148,10 @@ void __default_send_IPI_shortcut(unsigned int shortcut, int vector)
  */
 void __default_send_IPI_dest_field(unsigned int mask, int vector, unsigned int dest)
 {
+	unsigned long flags;
 	unsigned long cfg;
 
+	flags = hard_cond_local_irq_save();
 	/*
 	 * Wait for idle.
 	 */
@@ -169,16 +175,18 @@ void __default_send_IPI_dest_field(unsigned int mask, int vector, unsigned int d
 	 * Send the IPI. The write to APIC_ICR fires this off.
 	 */
 	native_apic_mem_write(APIC_ICR, cfg);
+
+	hard_cond_local_irq_restore(flags);
 }
 
 void default_send_IPI_single_phys(int cpu, int vector)
 {
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	__default_send_IPI_dest_field(per_cpu(x86_cpu_to_apicid, cpu),
 				      vector, APIC_DEST_PHYSICAL);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 void default_send_IPI_mask_sequence_phys(const struct cpumask *mask, int vector)
@@ -191,12 +199,12 @@ void default_send_IPI_mask_sequence_phys(const struct cpumask *mask, int vector)
 	 * to an arbitrary mask, so I do a unicast to each CPU instead.
 	 * - mbligh
 	 */
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	for_each_cpu(query_cpu, mask) {
 		__default_send_IPI_dest_field(per_cpu(x86_cpu_to_apicid,
 				query_cpu), vector, APIC_DEST_PHYSICAL);
 	}
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 void default_send_IPI_mask_allbutself_phys(const struct cpumask *mask,
@@ -208,14 +216,14 @@ void default_send_IPI_mask_allbutself_phys(const struct cpumask *mask,
 
 	/* See Hack comment above */
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	for_each_cpu(query_cpu, mask) {
 		if (query_cpu == this_cpu)
 			continue;
 		__default_send_IPI_dest_field(per_cpu(x86_cpu_to_apicid,
 				 query_cpu), vector, APIC_DEST_PHYSICAL);
 	}
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /*
@@ -255,12 +263,12 @@ void default_send_IPI_mask_sequence_logical(const struct cpumask *mask,
 	 * should be modified to do 1 message per cluster ID - mbligh
 	 */
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	for_each_cpu(query_cpu, mask)
 		__default_send_IPI_dest_field(
 			early_per_cpu(x86_cpu_to_logical_apicid, query_cpu),
 			vector, apic->dest_logical);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 void default_send_IPI_mask_allbutself_logical(const struct cpumask *mask,
@@ -272,7 +280,7 @@ void default_send_IPI_mask_allbutself_logical(const struct cpumask *mask,
 
 	/* See Hack comment above */
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	for_each_cpu(query_cpu, mask) {
 		if (query_cpu == this_cpu)
 			continue;
@@ -280,7 +288,7 @@ void default_send_IPI_mask_allbutself_logical(const struct cpumask *mask,
 			early_per_cpu(x86_cpu_to_logical_apicid, query_cpu),
 			vector, apic->dest_logical);
 		}
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /*
@@ -294,10 +302,10 @@ void default_send_IPI_mask_logical(const struct cpumask *cpumask, int vector)
 	if (!mask)
 		return;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	WARN_ON(mask & ~cpumask_bits(cpu_online_mask)[0]);
 	__default_send_IPI_dest_field(mask, vector, apic->dest_logical);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /* must come after the send_IPI functions above for inlining */
diff --git a/arch/x86/kernel/apic/msi.c b/arch/x86/kernel/apic/msi.c
index 7f7533462474..997040f37a69 100644
--- a/arch/x86/kernel/apic/msi.c
+++ b/arch/x86/kernel/apic/msi.c
@@ -58,7 +58,7 @@ static struct irq_chip pci_msi_controller = {
 	.irq_ack		= irq_chip_ack_parent,
 	.irq_retrigger		= irq_chip_retrigger_hierarchy,
 	.irq_compose_msi_msg	= irq_msi_compose_msg,
-	.flags			= IRQCHIP_SKIP_SET_WAKE,
+	.flags			= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 int native_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
@@ -156,7 +156,7 @@ static struct irq_chip pci_msi_ir_controller = {
 	.irq_ack		= irq_chip_ack_parent,
 	.irq_retrigger		= irq_chip_retrigger_hierarchy,
 	.irq_set_vcpu_affinity	= irq_chip_set_vcpu_affinity_parent,
-	.flags			= IRQCHIP_SKIP_SET_WAKE,
+	.flags			= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct msi_domain_info pci_msi_ir_domain_info = {
@@ -198,7 +198,7 @@ static struct irq_chip dmar_msi_controller = {
 	.irq_retrigger		= irq_chip_retrigger_hierarchy,
 	.irq_compose_msi_msg	= irq_msi_compose_msg,
 	.irq_write_msi_msg	= dmar_msi_write_msg,
-	.flags			= IRQCHIP_SKIP_SET_WAKE,
+	.flags			= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 static irq_hw_number_t dmar_msi_get_hwirq(struct msi_domain_info *info,
@@ -295,7 +295,7 @@ static struct irq_chip hpet_msi_controller __ro_after_init = {
 	.irq_retrigger = irq_chip_retrigger_hierarchy,
 	.irq_compose_msi_msg = irq_msi_compose_msg,
 	.irq_write_msi_msg = hpet_msi_write_msg,
-	.flags = IRQCHIP_SKIP_SET_WAKE,
+	.flags = IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 static irq_hw_number_t hpet_msi_get_hwirq(struct msi_domain_info *info,
diff --git a/arch/x86/kernel/apic/vector.c b/arch/x86/kernel/apic/vector.c
index 2c5676b0a6e7..2af0ebd4222b 100644
--- a/arch/x86/kernel/apic/vector.c
+++ b/arch/x86/kernel/apic/vector.c
@@ -39,7 +39,7 @@ struct apic_chip_data {
 
 struct irq_domain *x86_vector_domain;
 EXPORT_SYMBOL_GPL(x86_vector_domain);
-static DEFINE_RAW_SPINLOCK(vector_lock);
+static DEFINE_HARD_SPINLOCK(vector_lock);
 static cpumask_var_t vector_searchmask;
 static struct irq_chip lapic_controller;
 static struct irq_matrix *vector_matrix;
@@ -727,6 +727,10 @@ static struct irq_desc *__setup_vector_irq(int vector)
 {
 	int isairq = vector - ISA_IRQ_VECTOR(0);
 
+	/* Copy the cleanup vector if irqs are pipelined. */
+	if (IS_ENABLED(CONFIG_SMP) &&
+		vector == IRQ_MOVE_CLEANUP_VECTOR)
+		return irq_to_desc(IRQ_MOVE_CLEANUP_VECTOR); /* 1:1 mapping */
 	/* Check whether the irq is in the legacy space */
 	if (isairq < 0 || isairq >= nr_legacy_irqs())
 		return VECTOR_UNUSED;
@@ -761,9 +765,11 @@ void lapic_online(void)
 
 void lapic_offline(void)
 {
-	lock_vector_lock();
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&vector_lock, flags);
 	irq_matrix_offline(vector_matrix);
-	unlock_vector_lock();
+	raw_spin_unlock_irqrestore(&vector_lock, flags);
 }
 
 static int apic_set_affinity(struct irq_data *irqd,
@@ -772,6 +778,8 @@ static int apic_set_affinity(struct irq_data *irqd,
 	struct apic_chip_data *apicd = apic_chip_data(irqd);
 	int err;
 
+	WARN_ON_ONCE(irqs_pipelined() && !hard_irqs_disabled());
+
 	/*
 	 * Core code can call here for inactive interrupts. For inactive
 	 * interrupts which use managed or reservation mode there is no
@@ -813,7 +821,7 @@ static int apic_retrigger_irq(struct irq_data *irqd)
 void apic_ack_irq(struct irq_data *irqd)
 {
 	irq_move_irq(irqd);
-	ack_APIC_irq();
+	__ack_APIC_irq();
 }
 
 void apic_ack_edge(struct irq_data *irqd)
@@ -858,10 +866,11 @@ asmlinkage __visible void __irq_entry smp_irq_move_cleanup_interrupt(void)
 	struct hlist_head *clhead = this_cpu_ptr(&cleanup_list);
 	struct apic_chip_data *apicd;
 	struct hlist_node *tmp;
+	unsigned long flags;
 
 	entering_ack_irq();
 	/* Prevent vectors vanishing under us */
-	raw_spin_lock(&vector_lock);
+	raw_spin_lock_irqsave(&vector_lock, flags);
 
 	hlist_for_each_entry_safe(apicd, tmp, clhead, clist) {
 		unsigned int irr, vector = apicd->prev_vector;
@@ -883,15 +892,16 @@ asmlinkage __visible void __irq_entry smp_irq_move_cleanup_interrupt(void)
 		free_moved_vector(apicd);
 	}
 
-	raw_spin_unlock(&vector_lock);
+	raw_spin_unlock_irqrestore(&vector_lock, flags);
 	exiting_irq();
 }
 
 static void __send_cleanup_vector(struct apic_chip_data *apicd)
 {
+	unsigned long flags;
 	unsigned int cpu;
 
-	raw_spin_lock(&vector_lock);
+	raw_spin_lock_irqsave(&vector_lock, flags);
 	apicd->move_in_progress = 0;
 	cpu = apicd->prev_cpu;
 	if (cpu_online(cpu)) {
@@ -900,7 +910,7 @@ static void __send_cleanup_vector(struct apic_chip_data *apicd)
 	} else {
 		apicd->prev_vector = 0;
 	}
-	raw_spin_unlock(&vector_lock);
+	raw_spin_unlock_irqrestore(&vector_lock, flags);
 }
 
 void send_cleanup_vector(struct irq_cfg *cfg)
@@ -938,6 +948,8 @@ void irq_force_complete_move(struct irq_desc *desc)
 	struct irq_data *irqd;
 	unsigned int vector;
 
+	WARN_ON_ONCE(irqs_pipelined() && !hard_irqs_disabled());
+
 	/*
 	 * The function is called for all descriptors regardless of which
 	 * irqdomain they belong to. For example if an IRQ is provided by
@@ -1028,9 +1040,10 @@ void irq_force_complete_move(struct irq_desc *desc)
 int lapic_can_unplug_cpu(void)
 {
 	unsigned int rsvd, avl, tomove, cpu = smp_processor_id();
+	unsigned long flags;
 	int ret = 0;
 
-	raw_spin_lock(&vector_lock);
+	raw_spin_lock_irqsave(&vector_lock, flags);
 	tomove = irq_matrix_allocated(vector_matrix);
 	avl = irq_matrix_available(vector_matrix, true);
 	if (avl < tomove) {
@@ -1045,7 +1058,7 @@ int lapic_can_unplug_cpu(void)
 			rsvd, avl);
 	}
 out:
-	raw_spin_unlock(&vector_lock);
+	raw_spin_unlock_irqrestore(&vector_lock, flags);
 	return ret;
 }
 #endif /* HOTPLUG_CPU */
diff --git a/arch/x86/kernel/apic/x2apic_cluster.c b/arch/x86/kernel/apic/x2apic_cluster.c
index b0889c48a2ac..0e1126a7320c 100644
--- a/arch/x86/kernel/apic/x2apic_cluster.c
+++ b/arch/x86/kernel/apic/x2apic_cluster.c
@@ -42,7 +42,7 @@ __x2apic_send_IPI_mask(const struct cpumask *mask, int vector, int apic_dest)
 	u32 dest;
 
 	x2apic_wrmsr_fence();
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	tmpmsk = this_cpu_cpumask_var_ptr(ipi_mask);
 	cpumask_copy(tmpmsk, mask);
@@ -66,7 +66,7 @@ __x2apic_send_IPI_mask(const struct cpumask *mask, int vector, int apic_dest)
 		cpumask_andnot(tmpmsk, tmpmsk, &cmsk->mask);
 	}
 
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static void x2apic_send_IPI_mask(const struct cpumask *mask, int vector)
diff --git a/arch/x86/kernel/apic/x2apic_phys.c b/arch/x86/kernel/apic/x2apic_phys.c
index bc9693841353..2d6c4e33ba33 100644
--- a/arch/x86/kernel/apic/x2apic_phys.c
+++ b/arch/x86/kernel/apic/x2apic_phys.c
@@ -50,7 +50,7 @@ __x2apic_send_IPI_mask(const struct cpumask *mask, int vector, int apic_dest)
 
 	x2apic_wrmsr_fence();
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	this_cpu = smp_processor_id();
 	for_each_cpu(query_cpu, mask) {
@@ -59,7 +59,7 @@ __x2apic_send_IPI_mask(const struct cpumask *mask, int vector, int apic_dest)
 		__x2apic_send_IPI_dest(per_cpu(x86_cpu_to_apicid, query_cpu),
 				       vector, APIC_DEST_PHYSICAL);
 	}
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static void x2apic_send_IPI_mask(const struct cpumask *mask, int vector)
diff --git a/arch/x86/kernel/asm-offsets.c b/arch/x86/kernel/asm-offsets.c
index 5c7ee3df4d0b..6528c28224e5 100644
--- a/arch/x86/kernel/asm-offsets.c
+++ b/arch/x86/kernel/asm-offsets.c
@@ -12,6 +12,7 @@
 #include <linux/hardirq.h>
 #include <linux/suspend.h>
 #include <linux/kbuild.h>
+#include <linux/irqstage.h>
 #include <asm/processor.h>
 #include <asm/thread_info.h>
 #include <asm/sigframe.h>
@@ -38,8 +39,16 @@ static void __used common(void)
 #endif
 
 	BLANK();
+	OFFSET(TASK_TI_status, task_struct, thread_info.status);
 	OFFSET(TASK_addr_limit, task_struct, thread.addr_limit);
 
+#ifdef CONFIG_IRQ_PIPELINE
+	BLANK();
+	DEFINE(oob_preempt_mask, STAGE_MASK);
+	DEFINE(inband_stall_mask, BIT(STAGE_STALL_BIT));
+	OFFSET(inband_stage_status, irq_pipeline_data, stages[0].status);
+#endif
+
 	BLANK();
 	OFFSET(crypto_tfm_ctx_offset, crypto_tfm, __crt_ctx);
 
diff --git a/arch/x86/kernel/cpu/mce/core.c b/arch/x86/kernel/cpu/mce/core.c
index 743370ee4983..7e145855e92f 100644
--- a/arch/x86/kernel/cpu/mce/core.c
+++ b/arch/x86/kernel/cpu/mce/core.c
@@ -1345,11 +1345,11 @@ void do_machine_check(struct pt_regs *regs, long error_code)
 	/* Fault was in user mode and we need to take some action */
 	if ((m.cs & 3) == 3) {
 		ist_begin_non_atomic(regs);
-		local_irq_enable();
+		hard_local_irq_enable();
 
 		if (kill_it || do_memory_failure(&m))
 			force_sig(SIGBUS);
-		local_irq_disable();
+		hard_local_irq_disable();
 		ist_end_non_atomic();
 	} else {
 		if (!fixup_exception(regs, X86_TRAP_MC, error_code, 0))
diff --git a/arch/x86/kernel/cpu/mtrr/generic.c b/arch/x86/kernel/cpu/mtrr/generic.c
index aa5c064a6a22..7f656c9e98ec 100644
--- a/arch/x86/kernel/cpu/mtrr/generic.c
+++ b/arch/x86/kernel/cpu/mtrr/generic.c
@@ -450,13 +450,13 @@ void __init mtrr_bp_pat_init(void)
 {
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	prepare_set();
 
 	pat_init();
 
 	post_set();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /* Grab all of the MTRR state for this CPU into *state */
@@ -797,7 +797,7 @@ static void generic_set_all(void)
 	unsigned long mask, count;
 	unsigned long flags;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	prepare_set();
 
 	/* Actually set the state */
@@ -807,7 +807,7 @@ static void generic_set_all(void)
 	pat_init();
 
 	post_set();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	/* Use the atomic bitops to update the global mask */
 	for (count = 0; count < sizeof(mask) * 8; ++count) {
@@ -836,7 +836,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 
 	vr = &mtrr_state.var_ranges[reg];
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	prepare_set();
 
 	if (size == 0) {
@@ -857,7 +857,7 @@ static void generic_set_mtrr(unsigned int reg, unsigned long base,
 	}
 
 	post_set();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 int generic_validate_add_page(unsigned long base, unsigned long size,
diff --git a/arch/x86/kernel/dumpstack.c b/arch/x86/kernel/dumpstack.c
index e07424e19274..223791c55ed5 100644
--- a/arch/x86/kernel/dumpstack.c
+++ b/arch/x86/kernel/dumpstack.c
@@ -7,6 +7,7 @@
 #include <linux/uaccess.h>
 #include <linux/utsname.h>
 #include <linux/hardirq.h>
+#include <linux/irq_pipeline.h>
 #include <linux/kdebug.h>
 #include <linux/module.h>
 #include <linux/ptrace.h>
@@ -369,6 +370,8 @@ int __die(const char *str, struct pt_regs *regs, long err)
 {
 	const char *pr = "";
 
+	irq_pipeline_oops();
+
 	/* Save the regs of the first oops for the executive summary later. */
 	if (!die_counter)
 		exec_summary_regs = *regs;
@@ -377,13 +380,14 @@ int __die(const char *str, struct pt_regs *regs, long err)
 		pr = IS_ENABLED(CONFIG_PREEMPT_RT) ? " PREEMPT_RT" : " PREEMPT";
 
 	printk(KERN_DEFAULT
-	       "%s: %04lx [#%d]%s%s%s%s%s\n", str, err & 0xffff, ++die_counter,
+	       "%s: %04lx [#%d]%s%s%s%s%s%s\n", str, err & 0xffff, ++die_counter,
 	       pr,
 	       IS_ENABLED(CONFIG_SMP)     ? " SMP"             : "",
 	       debug_pagealloc_enabled()  ? " DEBUG_PAGEALLOC" : "",
 	       IS_ENABLED(CONFIG_KASAN)   ? " KASAN"           : "",
 	       IS_ENABLED(CONFIG_PAGE_TABLE_ISOLATION) ?
-	       (boot_cpu_has(X86_FEATURE_PTI) ? " PTI" : " NOPTI") : "");
+	       (boot_cpu_has(X86_FEATURE_PTI) ? " PTI" : " NOPTI") : "",
+	       irqs_pipelined()           ? " IRQ_PIPELINE"    : "");
 
 	show_regs(regs);
 	print_modules();
diff --git a/arch/x86/kernel/fpu/core.c b/arch/x86/kernel/fpu/core.c
index 12c70840980e..51b7261dc32c 100644
--- a/arch/x86/kernel/fpu/core.c
+++ b/arch/x86/kernel/fpu/core.c
@@ -15,6 +15,7 @@
 
 #include <linux/hardirq.h>
 #include <linux/pkeys.h>
+#include <linux/cpuhotplug.h>
 
 #define CREATE_TRACE_POINTS
 #include <asm/trace/fpu.h>
@@ -76,19 +77,24 @@ static bool interrupted_user_mode(void)
  */
 bool irq_fpu_usable(void)
 {
-	return !in_interrupt() ||
-		interrupted_user_mode() ||
-		interrupted_kernel_fpu_idle();
+	return running_inband() &&
+		(!in_interrupt() ||
+			interrupted_user_mode() ||
+			interrupted_kernel_fpu_idle());
 }
 EXPORT_SYMBOL(irq_fpu_usable);
 
 void kernel_fpu_begin(void)
 {
+	unsigned long flags;
+
 	preempt_disable();
 
 	WARN_ON_FPU(!irq_fpu_usable());
 	WARN_ON_FPU(this_cpu_read(in_kernel_fpu));
 
+	flags = hard_cond_local_irq_save();
+
 	this_cpu_write(in_kernel_fpu, true);
 
 	if (!(current->flags & PF_KTHREAD) &&
@@ -100,7 +106,10 @@ void kernel_fpu_begin(void)
 		 */
 		copy_fpregs_to_fpstate(&current->thread.fpu);
 	}
+
 	__cpu_invalidate_fpregs_state();
+
+	hard_cond_local_irq_restore(flags);
 }
 EXPORT_SYMBOL_GPL(kernel_fpu_begin);
 
@@ -120,9 +129,11 @@ EXPORT_SYMBOL_GPL(kernel_fpu_end);
  */
 void fpu__save(struct fpu *fpu)
 {
+	unsigned long flags;
+
 	WARN_ON_FPU(fpu != &current->thread.fpu);
 
-	fpregs_lock();
+	flags = fpregs_lock();
 	trace_x86_fpu_before_save(fpu);
 
 	if (!test_thread_flag(TIF_NEED_FPU_LOAD)) {
@@ -132,7 +143,7 @@ void fpu__save(struct fpu *fpu)
 	}
 
 	trace_x86_fpu_after_save(fpu);
-	fpregs_unlock();
+	fpregs_unlock(flags);
 }
 
 /*
@@ -168,6 +179,7 @@ int fpu__copy(struct task_struct *dst, struct task_struct *src)
 {
 	struct fpu *dst_fpu = &dst->thread.fpu;
 	struct fpu *src_fpu = &src->thread.fpu;
+	unsigned long flags;
 
 	dst_fpu->last_cpu = -1;
 
@@ -190,14 +202,14 @@ int fpu__copy(struct task_struct *dst, struct task_struct *src)
 	 * ( The function 'fails' in the FNSAVE case, which destroys
 	 *   register contents so we have to load them back. )
 	 */
-	fpregs_lock();
+	flags = fpregs_lock();
 	if (test_thread_flag(TIF_NEED_FPU_LOAD))
 		memcpy(&dst_fpu->state, &src_fpu->state, fpu_kernel_xstate_size);
 
 	else if (!copy_fpregs_to_fpstate(dst_fpu))
 		copy_kernel_to_fpregs(&dst_fpu->state);
 
-	fpregs_unlock();
+	fpregs_unlock(flags);
 
 	set_tsk_thread_flag(dst, TIF_NEED_FPU_LOAD);
 
@@ -275,7 +287,9 @@ void fpu__prepare_write(struct fpu *fpu)
  */
 void fpu__drop(struct fpu *fpu)
 {
-	preempt_disable();
+	unsigned long flags;
+
+	flags = hard_preempt_disable();
 
 	if (fpu == &current->thread.fpu) {
 		/* Ignore delayed exceptions from user space */
@@ -287,7 +301,7 @@ void fpu__drop(struct fpu *fpu)
 
 	trace_x86_fpu_dropped(fpu);
 
-	preempt_enable();
+	hard_preempt_enable(flags);
 }
 
 /*
@@ -296,7 +310,9 @@ void fpu__drop(struct fpu *fpu)
  */
 static inline void copy_init_fpstate_to_fpregs(void)
 {
-	fpregs_lock();
+	unsigned long flags;
+
+	flags = fpregs_lock();
 
 	if (use_xsave())
 		copy_kernel_to_xregs(&init_fpstate.xsave, -1);
@@ -309,7 +325,7 @@ static inline void copy_init_fpstate_to_fpregs(void)
 		copy_init_pkru_to_fpregs();
 
 	fpregs_mark_activate();
-	fpregs_unlock();
+	fpregs_unlock(flags);
 }
 
 /*
@@ -320,16 +336,24 @@ static inline void copy_init_fpstate_to_fpregs(void)
  */
 void fpu__clear(struct fpu *fpu)
 {
+	unsigned long flags;
+
 	WARN_ON_FPU(fpu != &current->thread.fpu); /* Almost certainly an anomaly */
 
 	fpu__drop(fpu);
 
 	/*
-	 * Make sure fpstate is cleared and initialized.
+	 * Make sure fpstate is cleared and initialized. When the
+	 * pipeline is enabled, make sure to prevent out-of-band code
+	 * from preempting while the fpstate is under construction.
 	 */
+	flags = hard_cond_local_irq_save();
+
 	fpu__initialize(fpu);
 	if (static_cpu_has(X86_FEATURE_FPU))
 		copy_init_fpstate_to_fpregs();
+
+	hard_cond_local_irq_restore(flags);
 }
 
 /*
@@ -337,10 +361,14 @@ void fpu__clear(struct fpu *fpu)
  */
 void switch_fpu_return(void)
 {
+	unsigned long flags;
+
 	if (!static_cpu_has(X86_FEATURE_FPU))
 		return;
 
+	flags = hard_cond_local_irq_save();
 	__fpregs_load_activate();
+	hard_cond_local_irq_restore(flags);
 }
 EXPORT_SYMBOL_GPL(switch_fpu_return);
 
@@ -440,3 +468,70 @@ int fpu__exception_code(struct fpu *fpu, int trap_nr)
 	 */
 	return 0;
 }
+
+#ifdef CONFIG_DOVETAIL
+
+/*
+ * Holds the in-kernel fpu state when preempted by a task running on
+ * the out-of-band stage.
+ */
+static DEFINE_PER_CPU(struct fpu *, in_kernel_fpstate);
+
+static int fpu__init_kernel_fpstate(unsigned int cpu)
+{
+	struct fpu *fpu;
+
+	fpu = kzalloc(sizeof(*fpu) + fpu_kernel_xstate_size, GFP_KERNEL);
+	if (fpu == NULL)
+		return -ENOMEM;
+
+	this_cpu_write(in_kernel_fpstate, fpu);
+	fpstate_init(&fpu->state);
+
+	return 0;
+}
+
+static int fpu__drop_kernel_fpstate(unsigned int cpu)
+{
+	struct fpu *fpu = this_cpu_read(in_kernel_fpstate);
+
+	kfree(fpu);
+
+	return 0;
+}
+
+void fpu__suspend_inband(void)
+{
+	struct fpu *kfpu = this_cpu_read(in_kernel_fpstate);
+	struct task_struct *tsk = current;
+
+	if (kernel_fpu_disabled()) {
+		copy_fpregs_to_fpstate(kfpu);
+		__cpu_invalidate_fpregs_state();
+		oob_fpu_set_preempt(&tsk->thread.fpu);
+	}
+}
+
+void fpu__resume_inband(void)
+{
+	struct fpu *kfpu = this_cpu_read(in_kernel_fpstate);
+	struct task_struct *tsk = current;
+
+	if (oob_fpu_preempted(&tsk->thread.fpu)) {
+		copy_kernel_to_fpregs(&kfpu->state);
+		__cpu_invalidate_fpregs_state();
+		oob_fpu_clear_preempt(&tsk->thread.fpu);
+	} else if (!(tsk->flags & PF_KTHREAD) &&
+		test_thread_flag(TIF_NEED_FPU_LOAD))
+		switch_fpu_return();
+}
+
+static void __init fpu__init_dovetail(void)
+{
+	cpuhp_setup_state(CPUHP_AP_ONLINE_DYN,
+			"platform/x86/dovetail:online",
+			fpu__init_kernel_fpstate, fpu__drop_kernel_fpstate);
+}
+core_initcall(fpu__init_dovetail);
+
+#endif
diff --git a/arch/x86/kernel/fpu/signal.c b/arch/x86/kernel/fpu/signal.c
index 0071b794ed19..528f88eee96f 100644
--- a/arch/x86/kernel/fpu/signal.c
+++ b/arch/x86/kernel/fpu/signal.c
@@ -61,11 +61,12 @@ static inline int save_fsave_header(struct task_struct *tsk, void __user *buf)
 		struct xregs_state *xsave = &tsk->thread.fpu.state.xsave;
 		struct user_i387_ia32_struct env;
 		struct _fpstate_32 __user *fp = buf;
+		unsigned long flags;
 
-		fpregs_lock();
+		flags = fpregs_lock();
 		if (!test_thread_flag(TIF_NEED_FPU_LOAD))
 			copy_fxregs_to_kernel(&tsk->thread.fpu);
-		fpregs_unlock();
+		fpregs_unlock(flags);
 
 		convert_from_fxsr(&env, tsk);
 
@@ -165,6 +166,7 @@ int copy_fpstate_to_sigframe(void __user *buf, void __user *buf_fx, int size)
 {
 	struct task_struct *tsk = current;
 	int ia32_fxstate = (buf != buf_fx);
+	unsigned long flags;
 	int ret;
 
 	ia32_fxstate &= (IS_ENABLED(CONFIG_X86_32) ||
@@ -185,14 +187,14 @@ int copy_fpstate_to_sigframe(void __user *buf, void __user *buf_fx, int size)
 	 * userland's stack frame which will likely succeed. If it does not,
 	 * resolve the fault in the user memory and try again.
 	 */
-	fpregs_lock();
+	flags = fpregs_lock();
 	if (test_thread_flag(TIF_NEED_FPU_LOAD))
 		__fpregs_load_activate();
 
 	pagefault_disable();
 	ret = copy_fpregs_to_sigframe(buf_fx);
 	pagefault_enable();
-	fpregs_unlock();
+	fpregs_unlock(flags);
 
 	if (ret) {
 		if (!fault_in_pages_writeable(buf_fx, fpu_user_xstate_size))
@@ -277,6 +279,7 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 	struct task_struct *tsk = current;
 	struct fpu *fpu = &tsk->thread.fpu;
 	struct user_i387_ia32_struct env;
+	unsigned long flags;
 	u64 xfeatures = 0;
 	int fx_only = 0;
 	int ret = 0;
@@ -343,16 +346,16 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 		 * going through the kernel buffer with the enabled pagefault
 		 * handler.
 		 */
-		fpregs_lock();
+		flags = fpregs_lock();
 		pagefault_disable();
 		ret = copy_user_to_fpregs_zeroing(buf_fx, xfeatures, fx_only);
 		pagefault_enable();
 		if (!ret) {
 			fpregs_mark_activate();
-			fpregs_unlock();
+			fpregs_unlock(flags);
 			return 0;
 		}
-		fpregs_unlock();
+		fpregs_unlock(flags);
 	}
 
 
@@ -372,7 +375,7 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 
 		sanitize_restored_xstate(&fpu->state, envp, xfeatures, fx_only);
 
-		fpregs_lock();
+		flags = fpregs_lock();
 		if (unlikely(init_bv))
 			copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
 		ret = copy_kernel_to_xregs_err(&fpu->state.xsave, xfeatures);
@@ -386,7 +389,7 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 
 		sanitize_restored_xstate(&fpu->state, envp, xfeatures, fx_only);
 
-		fpregs_lock();
+		flags = fpregs_lock();
 		if (use_xsave()) {
 			u64 init_bv = xfeatures_mask & ~XFEATURE_MASK_FPSSE;
 			copy_kernel_to_xregs(&init_fpstate.xsave, init_bv);
@@ -398,12 +401,12 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 		if (ret)
 			goto err_out;
 
-		fpregs_lock();
+		flags = fpregs_lock();
 		ret = copy_kernel_to_fregs_err(&fpu->state.fsave);
 	}
 	if (!ret)
 		fpregs_mark_activate();
-	fpregs_unlock();
+	fpregs_unlock(flags);
 
 err_out:
 	if (ret)
diff --git a/arch/x86/kernel/hpet.c b/arch/x86/kernel/hpet.c
index c6f791bc481e..aa0ec1ed1a72 100644
--- a/arch/x86/kernel/hpet.c
+++ b/arch/x86/kernel/hpet.c
@@ -405,7 +405,7 @@ static void hpet_init_clockevent(struct hpet_channel *hc, unsigned int rating)
 	evt->set_next_event	= hpet_clkevt_set_next_event;
 	evt->set_state_shutdown	= hpet_clkevt_set_state_shutdown;
 
-	evt->features = CLOCK_EVT_FEAT_ONESHOT;
+	evt->features = CLOCK_EVT_FEAT_ONESHOT|CLOCK_EVT_FEAT_PIPELINE;
 	if (hc->boot_cfg & HPET_TN_PERIODIC) {
 		evt->features		|= CLOCK_EVT_FEAT_PERIODIC;
 		evt->set_state_periodic	= hpet_clkevt_set_state_periodic;
@@ -518,7 +518,7 @@ static irqreturn_t hpet_msi_interrupt_handler(int irq, void *data)
 		return IRQ_HANDLED;
 	}
 
-	evt->event_handler(evt);
+	clockevents_handle_event(evt);
 	return IRQ_HANDLED;
 }
 
diff --git a/arch/x86/kernel/i8259.c b/arch/x86/kernel/i8259.c
index 519649ddf100..a2d8a2589d23 100644
--- a/arch/x86/kernel/i8259.c
+++ b/arch/x86/kernel/i8259.c
@@ -33,7 +33,7 @@
 static void init_8259A(int auto_eoi);
 
 static int i8259A_auto_eoi;
-DEFINE_RAW_SPINLOCK(i8259A_lock);
+DEFINE_HARD_SPINLOCK(i8259A_lock);
 
 /*
  * 8259A PIC functions to handle ISA devices:
@@ -227,6 +227,7 @@ struct irq_chip i8259A_chip = {
 	.irq_disable	= disable_8259A_irq,
 	.irq_unmask	= enable_8259A_irq,
 	.irq_mask_ack	= mask_and_ack_8259A,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static char irq_trigger[2];
diff --git a/arch/x86/kernel/idt.c b/arch/x86/kernel/idt.c
index 87ef69a72c52..7158c35785e5 100644
--- a/arch/x86/kernel/idt.c
+++ b/arch/x86/kernel/idt.c
@@ -114,6 +114,9 @@ static const __initconst struct idt_data apic_idts[] = {
 	INTG(CALL_FUNCTION_SINGLE_VECTOR, call_function_single_interrupt),
 	INTG(IRQ_MOVE_CLEANUP_VECTOR,	irq_move_cleanup_interrupt),
 	INTG(REBOOT_VECTOR,		reboot_interrupt),
+#ifdef CONFIG_IRQ_PIPELINE
+	INTG(RESCHEDULE_OOB_VECTOR,	reschedule_oob_interrupt),
+#endif
 #endif
 
 #ifdef CONFIG_X86_THERMAL_VECTOR
@@ -145,6 +148,9 @@ static const __initconst struct idt_data apic_idts[] = {
 	INTG(SPURIOUS_APIC_VECTOR,	spurious_interrupt),
 	INTG(ERROR_APIC_VECTOR,		error_interrupt),
 #endif
+#ifdef CONFIG_IRQ_PIPELINE
+	INTG(TIMER_OOB_VECTOR,		timer_oob_interrupt),
+#endif
 };
 
 #ifdef CONFIG_X86_64
diff --git a/arch/x86/kernel/irq.c b/arch/x86/kernel/irq.c
index 21efee32e2b1..41a29f9ce801 100644
--- a/arch/x86/kernel/irq.c
+++ b/arch/x86/kernel/irq.c
@@ -4,6 +4,7 @@
  */
 #include <linux/cpu.h>
 #include <linux/interrupt.h>
+#include <linux/irq_pipeline.h>
 #include <linux/kernel_stat.h>
 #include <linux/of.h>
 #include <linux/seq_file.h>
@@ -49,7 +50,7 @@ void ack_bad_irq(unsigned int irq)
 	 * completely.
 	 * But only ack when the APIC is enabled -AK
 	 */
-	ack_APIC_irq();
+	__ack_APIC_irq();
 }
 
 #define irq_stats(x)		(&per_cpu(irq_stat, x))
diff --git a/arch/x86/kernel/irq_pipeline.c b/arch/x86/kernel/irq_pipeline.c
new file mode 100644
index 000000000000..452a28698949
--- /dev/null
+++ b/arch/x86/kernel/irq_pipeline.c
@@ -0,0 +1,276 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/kernel.h>
+#include <linux/smp.h>
+#include <linux/irq.h>
+#include <linux/irq_pipeline.h>
+#include <asm/irqdomain.h>
+#include <asm/apic.h>
+#include <asm/traps.h>
+#include <asm/irq_work.h>
+#include <asm/mshyperv.h>
+
+static struct irq_domain *sipic_domain;
+
+static void sipic_irq_noop(struct irq_data *data) { }
+
+static unsigned int sipic_irq_noop_ret(struct irq_data *data)
+{
+	return 0;
+}
+
+static struct irq_chip sipic_chip = {
+	.name		= "SIPIC",
+	.irq_startup	= sipic_irq_noop_ret,
+	.irq_shutdown	= sipic_irq_noop,
+	.irq_enable	= sipic_irq_noop,
+	.irq_disable	= sipic_irq_noop,
+	.flags		= IRQCHIP_PIPELINE_SAFE | IRQCHIP_SKIP_SET_WAKE,
+};
+
+void handle_apic_irq(struct irq_desc *desc)
+{
+	unsigned int irq = irq_desc_get_irq(desc);
+	struct pt_regs *regs = get_irq_regs(); /* from generic_pipeline_irq() */
+
+	if (WARN_ON_ONCE(irq_pipeline_debug() && !on_pipeline_entry()))
+		return;
+
+	switch (apicm_irq_vector(irq)) {
+	case SPURIOUS_APIC_VECTOR:
+	case ERROR_APIC_VECTOR:
+		/*
+		 * No ack for error events, which should never
+		 * happen. If they do, the situation is messy, leave
+		 * the decision to acknowledge or not to the in-band
+		 * handler.
+		 */
+		break;
+	case THERMAL_APIC_VECTOR:
+		/*
+		 * MCE events are non-maskable, their in-band handlers
+		 * have to be OOB-compatible by construction, so we
+		 * can run them immediately.
+		 */
+		smp_thermal_interrupt(regs);
+		__ack_APIC_irq();
+		return;
+	case THRESHOLD_APIC_VECTOR:
+		smp_threshold_interrupt(regs);
+		__ack_APIC_irq();
+		return;
+	default:
+		__ack_APIC_irq();
+	}
+
+	handle_oob_irq(desc);
+}
+
+void irq_pipeline_send_remote(unsigned int ipi,
+			      const struct cpumask *cpumask)
+{
+	apic->send_IPI_mask_allbutself(cpumask,	apicm_irq_vector(ipi));
+}
+EXPORT_SYMBOL_GPL(irq_pipeline_send_remote);
+
+void uv_bau_message_interrupt(struct pt_regs *regs);
+
+static void do_apic_irq(unsigned int irq, struct pt_regs *regs)
+{
+	int vector = apicm_irq_vector(irq);
+
+	switch (vector) {
+	case SPURIOUS_APIC_VECTOR:
+		smp_spurious_interrupt(regs);
+		break;
+	case ERROR_APIC_VECTOR:
+		smp_error_interrupt(regs);
+		break;
+#ifdef CONFIG_SMP
+	case RESCHEDULE_VECTOR:
+		smp_reschedule_interrupt(regs);
+		break;
+	case CALL_FUNCTION_VECTOR:
+		smp_call_function_interrupt(regs);
+		break;
+	case CALL_FUNCTION_SINGLE_VECTOR:
+		smp_call_function_single_interrupt(regs);
+		break;
+	case REBOOT_VECTOR:
+		smp_reboot_interrupt();
+		break;
+#endif
+	case X86_PLATFORM_IPI_VECTOR:
+		smp_x86_platform_ipi(regs);
+		break;
+	case IRQ_WORK_VECTOR:
+		smp_irq_work_interrupt(regs);
+		break;
+#ifdef CONFIG_X86_UV
+	case UV_BAU_MESSAGE:
+		uv_bau_message_interrupt(regs);
+		break;
+#endif
+#ifdef CONFIG_X86_MCE_AMD
+	case DEFERRED_ERROR_VECTOR:
+		smp_deferred_error_interrupt(regs);
+		break;
+#endif
+#ifdef CONFIG_HAVE_KVM
+	case POSTED_INTR_VECTOR:
+		smp_kvm_posted_intr_ipi(regs);
+		break;
+	case POSTED_INTR_WAKEUP_VECTOR:
+		smp_kvm_posted_intr_wakeup_ipi(regs);
+		break;
+	case POSTED_INTR_NESTED_VECTOR:
+		smp_kvm_posted_intr_nested_ipi(regs);
+		break;
+#endif
+#ifdef CONFIG_HYPERV
+	case HYPERVISOR_CALLBACK_VECTOR:
+		hyperv_vector_handler(regs);
+		break;
+	case HYPERV_REENLIGHTENMENT_VECTOR:
+		hyperv_reenlightenment_intr(regs);
+		break;
+	case HYPERV_STIMER0_VECTOR:
+		hv_stimer0_vector_handler(regs);
+		break;
+#endif
+	case LOCAL_TIMER_VECTOR:
+		smp_apic_timer_interrupt(regs);
+		break;
+	case THERMAL_APIC_VECTOR:
+	case THRESHOLD_APIC_VECTOR:
+		/*
+		 * MCE have been dealt with immediatly on entry to the
+		 * pipeline (see handle_apic_irq()).
+		 */
+		break;
+	default:
+		printk_once(KERN_ERR "irq_pipeline: unexpected event"
+			" on vector #%.2x (irq=%u)", vector, irq);
+	}
+}
+
+void arch_do_IRQ_pipelined(struct irq_desc *desc)
+{
+	struct pt_regs *regs = raw_cpu_ptr(&irq_pipeline.tick_regs);
+	struct pt_regs *old_regs = set_irq_regs(regs);
+	unsigned int irq = irq_desc_get_irq(desc);
+
+	if (desc->irq_data.domain == sipic_domain) {
+		do_apic_irq(irq, regs);
+		return;
+	}
+
+	entering_irq();
+	generic_handle_irq_desc(desc);
+	exiting_irq();
+
+	set_irq_regs(old_regs);
+}
+
+void handle_arch_irq(struct pt_regs *regs)
+{
+	unsigned int irq, vector = ~regs->orig_ax;
+	struct irq_desc *desc;
+
+	if (vector >= FIRST_SYSTEM_VECTOR)
+		irq = apicm_vector_irq(vector);
+	else {
+		desc = __this_cpu_read(vector_irq[vector]);
+		if (unlikely(desc == NULL)) {
+			pr_err("IRQ pipeline: unhandled vector %#.2x\n", vector);
+			return;
+		}
+		irq = irq_desc_get_irq(desc);
+	}
+
+	generic_pipeline_irq(irq, regs);
+}
+
+__visible unsigned int __irq_entry
+handle_arch_irq_pipelined(struct pt_regs *regs)
+{
+	return handle_irq_pipelined(regs);
+}
+
+static int sipic_irq_map(struct irq_domain *d, unsigned int irq,
+			irq_hw_number_t hwirq)
+{
+	irq_set_percpu_devid(irq);
+	irq_set_chip_and_handler(irq, &sipic_chip, handle_apic_irq);
+
+	return 0;
+}
+
+static struct irq_domain_ops sipic_domain_ops = {
+	.map	= sipic_irq_map,
+};
+
+static void create_x86_apic_domain(void)
+{
+	sipic_domain = irq_domain_add_simple(NULL, NR_APIC_VECTORS,
+					     FIRST_SYSTEM_IRQ,
+					     &sipic_domain_ops, NULL);
+}
+
+#ifdef CONFIG_SMP
+
+void handle_irq_move_cleanup(struct irq_desc *desc)
+{
+	if (on_pipeline_entry()) {
+		/* First there on receipt from hardware. */
+		__ack_APIC_irq();
+		handle_oob_irq(desc);
+	} else /* Next there on inband delivery. */
+		smp_irq_move_cleanup_interrupt();
+}
+
+static void smp_setup(void)
+{
+	int irq;
+
+	/*
+	 * The IRQ cleanup event must be pipelined to the inband
+	 * stage, so we need a valid IRQ descriptor for it. Since we
+	 * still are in the early boot stage on CPU0, we ask for a 1:1
+	 * mapping between the vector number and IRQ number, to make
+	 * things easier for us later on.
+	 */
+	irq = irq_alloc_desc_at(IRQ_MOVE_CLEANUP_VECTOR, 0);
+	WARN_ON(IRQ_MOVE_CLEANUP_VECTOR != irq);
+	/*
+	 * Set up the vector_irq[] mapping array for the boot CPU,
+	 * other CPUs will copy this entry when their APIC is going
+	 * online (see lapic_online()).
+	 */
+	per_cpu(vector_irq, 0)[irq] = irq_to_desc(irq);
+
+	irq_set_chip_and_handler(irq, &dummy_irq_chip,
+				handle_irq_move_cleanup);
+}
+
+#else
+
+static void smp_setup(void) { }
+
+#endif
+
+void __init arch_irq_pipeline_init(void)
+{
+	/*
+	 * Create an IRQ domain for mapping APIC system interrupts
+	 * (in-band and out-of-band), with fixed sirq numbers starting
+	 * from FIRST_SYSTEM_IRQ. Upon receipt of a system interrupt,
+	 * the corresponding sirq is injected into the pipeline.
+	 */
+	create_x86_apic_domain();
+
+	smp_setup();
+}
diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
index 5e94c4354d4e..14a8c7b52eb6 100644
--- a/arch/x86/kernel/process.c
+++ b/arch/x86/kernel/process.c
@@ -116,8 +116,17 @@ void exit_thread(struct task_struct *tsk)
 	if (bp) {
 		struct tss_struct *tss = &per_cpu(cpu_tss_rw, get_cpu());
 
-		t->io_bitmap_ptr = NULL;
+		/*
+		 * irq_pipeline: the oob stage may preempt. Make sure
+		 * TIF_IO_BITMAP always denotes a valid I/O bitmap
+		 * when set, by clearing it _before_ the I/O bitmap
+		 * pointer. No cache coherence issue ahead as CPU
+		 * migration is currently locked for the in-band
+		 * stage, and we can't migrate to another CPU over the
+		 * oob stage.
+		 */
 		clear_thread_flag(TIF_IO_BITMAP);
+		t->io_bitmap_ptr = NULL;
 		/*
 		 * Careful, clear this in the TSS too:
 		 */
@@ -482,9 +491,9 @@ void speculation_ctrl_update(unsigned long tif)
 	unsigned long flags;
 
 	/* Forced update. Make sure all relevant TIF flags are different */
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	__speculation_ctrl_update(~tif, tif);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /* Called from seccomp/prctl update */
@@ -578,6 +587,8 @@ void __cpuidle default_idle(void)
 {
 	trace_cpu_idle_rcuidle(1, smp_processor_id());
 	safe_halt();
+	if (irqs_pipelined())
+		local_irq_enable();
 	trace_cpu_idle_rcuidle(PWR_EVENT_EXIT, smp_processor_id());
 }
 #if defined(CONFIG_APM_MODULE) || defined(CONFIG_HALTPOLL_CPUIDLE_MODULE)
@@ -597,7 +608,7 @@ bool xen_set_default_idle(void)
 
 void stop_this_cpu(void *dummy)
 {
-	local_irq_disable();
+	hard_local_irq_disable();
 	/*
 	 * Remove this CPU:
 	 */
@@ -692,13 +703,15 @@ static __cpuidle void mwait_idle(void)
 		}
 
 		__monitor((void *)&current_thread_info()->flags, 0, 0);
-		if (!need_resched())
+		if (!need_resched()) {
 			__sti_mwait(0, 0);
-		else
-			local_irq_enable();
+			if (irqs_pipelined())
+				local_irq_enable();
+		} else
+			local_irq_enable_full();
 		trace_cpu_idle_rcuidle(PWR_EVENT_EXIT, smp_processor_id());
 	} else {
-		local_irq_enable();
+		local_irq_enable_full();
 	}
 	__current_clr_polling();
 }
diff --git a/arch/x86/kernel/process_64.c b/arch/x86/kernel/process_64.c
index af64519b2695..dd7b4941eb42 100644
--- a/arch/x86/kernel/process_64.c
+++ b/arch/x86/kernel/process_64.c
@@ -512,6 +512,8 @@ __switch_to(struct task_struct *prev_p, struct task_struct *next_p)
 	WARN_ON_ONCE(IS_ENABLED(CONFIG_DEBUG_ENTRY) &&
 		     this_cpu_read(irq_count) != -1);
 
+	WARN_ON_ONCE(dovetail_debug() && !hard_irqs_disabled());
+
 	if (!test_thread_flag(TIF_NEED_FPU_LOAD))
 		switch_fpu_prepare(prev_fpu, cpu);
 
@@ -702,6 +704,7 @@ static long prctl_map_vdso(const struct vdso_image *image, unsigned long addr)
 
 long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2)
 {
+	unsigned long flags;
 	int ret = 0;
 
 	switch (option) {
@@ -709,7 +712,7 @@ long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2)
 		if (unlikely(arg2 >= TASK_SIZE_MAX))
 			return -EPERM;
 
-		preempt_disable();
+		flags = hard_preempt_disable();
 		/*
 		 * ARCH_SET_GS has always overwritten the index
 		 * and the base. Zero is the most sensible value
@@ -730,7 +733,7 @@ long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2)
 			task->thread.gsindex = 0;
 			x86_gsbase_write_task(task, arg2);
 		}
-		preempt_enable();
+		hard_preempt_enable(flags);
 		break;
 	}
 	case ARCH_SET_FS: {
@@ -741,7 +744,7 @@ long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2)
 		if (unlikely(arg2 >= TASK_SIZE_MAX))
 			return -EPERM;
 
-		preempt_disable();
+		flags = hard_preempt_disable();
 		/*
 		 * Set the selector to 0 for the same reason
 		 * as %gs above.
@@ -759,7 +762,7 @@ long do_arch_prctl_64(struct task_struct *task, int option, unsigned long arg2)
 			task->thread.fsindex = 0;
 			x86_fsbase_write_task(task, arg2);
 		}
-		preempt_enable();
+		hard_preempt_enable(flags);
 		break;
 	}
 	case ARCH_GET_FS: {
diff --git a/arch/x86/kernel/smp.c b/arch/x86/kernel/smp.c
index b8d4e9c3c070..5a75d586e5cb 100644
--- a/arch/x86/kernel/smp.c
+++ b/arch/x86/kernel/smp.c
@@ -213,10 +213,10 @@ static void native_stop_other_cpus(int wait)
 			udelay(1);
 	}
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	disable_local_APIC();
 	mcheck_cpu_clear(this_cpu_ptr(&cpu_info));
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 /*
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 69881b2d446c..6dd327510268 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -253,7 +253,7 @@ static void notrace start_secondary(void *unused)
 	x86_platform.nmi_init();
 
 	/* enable local interrupts */
-	local_irq_enable();
+	local_irq_enable_full();
 
 	/* to prevent fake stack check failure in clock setup */
 	boot_init_stack_canary();
@@ -1128,7 +1128,6 @@ int native_cpu_up(unsigned int cpu, struct task_struct *tidle)
 {
 	int apicid = apic->cpu_present_to_apicid(cpu);
 	int cpu0_nmi_registered = 0;
-	unsigned long flags;
 	int err, ret = 0;
 
 	lockdep_assert_irqs_enabled();
@@ -1179,9 +1178,9 @@ int native_cpu_up(unsigned int cpu, struct task_struct *tidle)
 	 * Check TSC synchronization with the AP (keep irqs disabled
 	 * while doing so):
 	 */
-	local_irq_save(flags);
+	local_irq_disable_full();
 	check_tsc_sync_source(cpu);
-	local_irq_restore(flags);
+	local_irq_enable_full();
 
 	while (!cpu_online(cpu)) {
 		cpu_relax();
@@ -1635,7 +1634,7 @@ void play_dead_common(void)
 	/*
 	 * With physical CPU hotplug, we should halt the cpu
 	 */
-	local_irq_disable();
+	local_irq_disable_full();
 }
 
 static bool wakeup_cpu0(void)
diff --git a/arch/x86/kernel/time.c b/arch/x86/kernel/time.c
index 7ce29cee9f9e..1326d5dbe967 100644
--- a/arch/x86/kernel/time.c
+++ b/arch/x86/kernel/time.c
@@ -58,7 +58,7 @@ EXPORT_SYMBOL(profile_pc);
  */
 static irqreturn_t timer_interrupt(int irq, void *dev_id)
 {
-	global_clock_event->event_handler(global_clock_event);
+	clockevents_handle_event(global_clock_event);
 	return IRQ_HANDLED;
 }
 
diff --git a/arch/x86/kernel/traps.c b/arch/x86/kernel/traps.c
index 4bb0f8447112..77e1fbc14a01 100644
--- a/arch/x86/kernel/traps.c
+++ b/arch/x86/kernel/traps.c
@@ -14,6 +14,7 @@
 
 #include <linux/context_tracking.h>
 #include <linux/interrupt.h>
+#include <linux/irq_pipeline.h>
 #include <linux/kallsyms.h>
 #include <linux/spinlock.h>
 #include <linux/kprobes.h>
@@ -74,16 +75,66 @@
 
 DECLARE_BITMAP(system_vectors, NR_VECTORS);
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+unsigned long pipelined_fault_entry(int trapnr, struct pt_regs *regs)
+{
+	unsigned long flags;
+	int nosync = 1;
+
+	/*
+	 * NOTE: having entered the IST context when the companion
+	 * core is notified that an exception has been taken from
+	 * out-of-band context is not an issue. At best that core
+	 * could plan for a deferred switch to inband mode, which by
+	 * definition cannot involve immediate schedule().
+	 */
+	oob_trap_notify(trapnr, regs);
+
+	flags = hard_local_irq_save();
+
+	if (hard_irqs_disabled_flags(flags)) {
+		nosync = test_and_set_stage_bit(STAGE_STALL_BIT,
+					this_inband_staged());
+		trace_hardirqs_off();
+	}
+	if (oob_stage_present())
+		hard_local_irq_enable();
+
+	return irqs_merge_flags(flags, nosync);
+}
+
+void pipelined_fault_exit(unsigned long combo)
+{
+	unsigned long flags;
+	int nosync;
+
+	WARN_ON_ONCE(irq_pipeline_debug() &&
+		oob_stage_present() && hard_irqs_disabled());
+
+	flags = irqs_split_flags(combo, &nosync);
+	if (!nosync) {
+		hard_local_irq_disable();
+		trace_hardirqs_on();
+		clear_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+		if (!hard_irqs_disabled_flags(flags))
+			hard_local_irq_enable();
+	} else if (hard_irqs_disabled_flags(flags))
+		hard_local_irq_disable();
+}
+
+#endif	/* CONFIG_IRQ_PIPELINE */
+
 static inline void cond_local_irq_enable(struct pt_regs *regs)
 {
 	if (regs->flags & X86_EFLAGS_IF)
-		local_irq_enable();
+		local_irq_enable_full();
 }
 
 static inline void cond_local_irq_disable(struct pt_regs *regs)
 {
 	if (regs->flags & X86_EFLAGS_IF)
-		local_irq_disable();
+		hard_local_irq_disable();
 }
 
 /*
@@ -263,6 +314,8 @@ NOKPROBE_SYMBOL(do_trap);
 static void do_error_trap(struct pt_regs *regs, long error_code, char *str,
 	unsigned long trapnr, int signr, int sicode, void __user *addr)
 {
+	unsigned long flags;
+
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 
 	/*
@@ -272,11 +325,15 @@ static void do_error_trap(struct pt_regs *regs, long error_code, char *str,
 	if (!user_mode(regs) && fixup_bug(regs, trapnr))
 		return;
 
+	flags = pipelined_fault_entry(trapnr, regs);
+
 	if (notify_die(DIE_TRAP, str, regs, error_code, trapnr, signr) !=
 			NOTIFY_STOP) {
 		cond_local_irq_enable(regs);
 		do_trap(trapnr, signr, str, regs, error_code, sicode, addr);
 	}
+
+	pipelined_fault_exit(flags);
 }
 
 #define IP ((void __user *)uprobe_get_trap_addr(regs))
@@ -431,6 +488,9 @@ dotraplinkage void do_double_fault(struct pt_regs *regs, long error_code, unsign
 dotraplinkage void do_bounds(struct pt_regs *regs, long error_code)
 {
 	const struct mpx_bndcsr *bndcsr;
+	unsigned long flags;
+
+	flags = pipelined_fault_entry(X86_TRAP_BR, regs);
 
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 	if (notify_die(DIE_TRAP, "bounds", regs, error_code,
@@ -501,7 +561,7 @@ dotraplinkage void do_bounds(struct pt_regs *regs, long error_code)
 		die("bounds", regs, error_code);
 	}
 
-	return;
+	goto out;
 
 exit_trap:
 	/*
@@ -512,6 +572,8 @@ dotraplinkage void do_bounds(struct pt_regs *regs, long error_code)
 	 * time..
 	 */
 	do_trap(X86_TRAP_BR, SIGSEGV, "bounds", regs, error_code, 0, NULL);
+out:
+	pipelined_fault_exit(flags);
 }
 
 dotraplinkage void
@@ -519,25 +581,28 @@ do_general_protection(struct pt_regs *regs, long error_code)
 {
 	const char *desc = "general protection fault";
 	struct task_struct *tsk;
+	unsigned long flags;
+
+	flags = pipelined_fault_entry(X86_TRAP_GP, regs);
 
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 	cond_local_irq_enable(regs);
 
 	if (static_cpu_has(X86_FEATURE_UMIP)) {
 		if (user_mode(regs) && fixup_umip_exception(regs))
-			return;
+			goto out;
 	}
 
 	if (v8086_mode(regs)) {
-		local_irq_enable();
+		hard_local_irq_enable();
 		handle_vm86_fault((struct kernel_vm86_regs *) regs, error_code);
-		return;
+		goto out;
 	}
 
 	tsk = current;
 	if (!user_mode(regs)) {
 		if (fixup_exception(regs, X86_TRAP_GP, error_code, 0))
-			return;
+			goto out;
 
 		tsk->thread.error_code = error_code;
 		tsk->thread.trap_nr = X86_TRAP_GP;
@@ -549,12 +614,12 @@ do_general_protection(struct pt_regs *regs, long error_code)
 		 */
 		if (!preemptible() && kprobe_running() &&
 		    kprobe_fault_handler(regs, X86_TRAP_GP))
-			return;
+			goto out;
 
 		if (notify_die(DIE_GPF, desc, regs, error_code,
 			       X86_TRAP_GP, SIGSEGV) != NOTIFY_STOP)
 			die(desc, regs, error_code);
-		return;
+		goto out;
 	}
 
 	tsk->thread.error_code = error_code;
@@ -563,11 +628,15 @@ do_general_protection(struct pt_regs *regs, long error_code)
 	show_signal(tsk, SIGSEGV, "", desc, regs, error_code);
 
 	force_sig(SIGSEGV);
+out:
+	pipelined_fault_exit(flags);
 }
 NOKPROBE_SYMBOL(do_general_protection);
 
 dotraplinkage void notrace do_int3(struct pt_regs *regs, long error_code)
 {
+	unsigned long flags;
+
 #ifdef CONFIG_DYNAMIC_FTRACE
 	/*
 	 * ftrace must be first, everything else may cause a recursive crash.
@@ -600,13 +669,17 @@ dotraplinkage void notrace do_int3(struct pt_regs *regs, long error_code)
 		goto exit;
 #endif
 
+	flags = pipelined_fault_entry(X86_TRAP_BP, regs);
+
 	if (notify_die(DIE_INT3, "int3", regs, error_code, X86_TRAP_BP,
 			SIGTRAP) == NOTIFY_STOP)
-		goto exit;
+		goto exit_fault;
 
 	cond_local_irq_enable(regs);
 	do_trap(X86_TRAP_BP, SIGTRAP, "int3", regs, error_code, 0, NULL);
 	cond_local_irq_disable(regs);
+exit_fault:
+	pipelined_fault_exit(flags);
 
 exit:
 	ist_exit(regs);
@@ -709,8 +782,8 @@ static bool is_sysenter_singlestep(struct pt_regs *regs)
 dotraplinkage void do_debug(struct pt_regs *regs, long error_code)
 {
 	struct task_struct *tsk = current;
+	unsigned long dr6, flags;
 	int user_icebp = 0;
-	unsigned long dr6;
 	int si_code;
 
 	ist_enter(regs);
@@ -743,7 +816,7 @@ dotraplinkage void do_debug(struct pt_regs *regs, long error_code)
 		     is_sysenter_singlestep(regs))) {
 		dr6 &= ~DR_STEP;
 		if (!dr6)
-			goto exit;
+			goto out;
 		/*
 		 * else we might have gotten a single-step trap and hit a
 		 * watchpoint at the same time, in which case we should fall
@@ -764,9 +837,11 @@ dotraplinkage void do_debug(struct pt_regs *regs, long error_code)
 
 #ifdef CONFIG_KPROBES
 	if (kprobe_debug_handler(regs))
-		goto exit;
+		goto out;
 #endif
 
+	flags = pipelined_fault_entry(X86_TRAP_DB, regs);
+
 	if (notify_die(DIE_DEBUG, "debug", regs, (long)&dr6, error_code,
 							SIGTRAP) == NOTIFY_STOP)
 		goto exit;
@@ -806,6 +881,8 @@ dotraplinkage void do_debug(struct pt_regs *regs, long error_code)
 	debug_stack_usage_dec();
 
 exit:
+	pipelined_fault_exit(flags);
+out:
 	ist_exit(regs);
 }
 NOKPROBE_SYMBOL(do_debug);
@@ -819,15 +896,18 @@ static void math_error(struct pt_regs *regs, int error_code, int trapnr)
 {
 	struct task_struct *task = current;
 	struct fpu *fpu = &task->thread.fpu;
+	unsigned long flags;
 	int si_code;
 	char *str = (trapnr == X86_TRAP_MF) ? "fpu exception" :
 						"simd exception";
 
+	flags = pipelined_fault_entry(trapnr, regs);
+
 	cond_local_irq_enable(regs);
 
 	if (!user_mode(regs)) {
 		if (fixup_exception(regs, trapnr, error_code, 0))
-			return;
+			goto out;
 
 		task->thread.error_code = error_code;
 		task->thread.trap_nr = trapnr;
@@ -835,7 +915,7 @@ static void math_error(struct pt_regs *regs, int error_code, int trapnr)
 		if (notify_die(DIE_TRAP, str, regs, error_code,
 					trapnr, SIGFPE) != NOTIFY_STOP)
 			die(str, regs, error_code);
-		return;
+		goto out;
 	}
 
 	/*
@@ -849,10 +929,12 @@ static void math_error(struct pt_regs *regs, int error_code, int trapnr)
 	si_code = fpu__exception_code(fpu, trapnr);
 	/* Retry when we get spurious exceptions: */
 	if (!si_code)
-		return;
+		goto out;
 
 	force_sig_fault(SIGFPE, si_code,
 			(void __user *)uprobe_get_trap_addr(regs));
+out:
+	pipelined_fault_exit(flags);
 }
 
 dotraplinkage void do_coprocessor_error(struct pt_regs *regs, long error_code)
@@ -877,7 +959,7 @@ do_spurious_interrupt_bug(struct pt_regs *regs, long error_code)
 dotraplinkage void
 do_device_not_available(struct pt_regs *regs, long error_code)
 {
-	unsigned long cr0 = read_cr0();
+	unsigned long cr0 = read_cr0(), flags __maybe_unused;
 
 	RCU_LOCKDEP_WARN(!rcu_is_watching(), "entry code didn't wake RCU");
 
@@ -885,10 +967,14 @@ do_device_not_available(struct pt_regs *regs, long error_code)
 	if (!boot_cpu_has(X86_FEATURE_FPU) && (cr0 & X86_CR0_EM)) {
 		struct math_emu_info info = { };
 
+		flags = pipelined_fault_entry(X86_TRAP_NM, regs);
+
 		cond_local_irq_enable(regs);
 
 		info.regs = regs;
 		math_emulate(&info);
+
+		pipelined_fault_exit(flags);
 		return;
 	}
 #endif
diff --git a/arch/x86/kernel/tsc.c b/arch/x86/kernel/tsc.c
index 7e322e2daaf5..07ee274ba8a9 100644
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@ -124,8 +124,11 @@ static void __set_cyc2ns_scale(unsigned long khz, int cpu, unsigned long long ts
 {
 	unsigned long long ns_now;
 	struct cyc2ns_data data;
+	unsigned long flags;
 	struct cyc2ns *c2n;
 
+	flags = hard_cond_local_irq_save();
+
 	ns_now = cycles_2_ns(tsc_now);
 
 	/*
@@ -156,6 +159,8 @@ static void __set_cyc2ns_scale(unsigned long khz, int cpu, unsigned long long ts
 	c2n->data[0] = data;
 	raw_write_seqcount_latch(&c2n->seq);
 	c2n->data[1] = data;
+
+	hard_cond_local_irq_restore(flags);
 }
 
 static void set_cyc2ns_scale(unsigned long khz, int cpu, unsigned long long tsc_now)
@@ -752,11 +757,11 @@ static unsigned long pit_hpet_ptimer_calibrate_cpu(void)
 		 * calibration, which will take at least 50ms, and
 		 * read the end value.
 		 */
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		tsc1 = tsc_read_refs(&ref1, hpet);
 		tsc_pit_khz = pit_calibrate_tsc(latch, ms, loopmin);
 		tsc2 = tsc_read_refs(&ref2, hpet);
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 
 		/* Pick the lowest PIT TSC calibration so far */
 		tsc_pit_min = min(tsc_pit_min, tsc_pit_khz);
@@ -865,9 +870,9 @@ unsigned long native_calibrate_cpu_early(void)
 	if (!fast_calibrate)
 		fast_calibrate = cpu_khz_from_msr();
 	if (!fast_calibrate) {
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		fast_calibrate = quick_pit_calibrate();
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 	}
 	return fast_calibrate;
 }
@@ -935,7 +940,7 @@ void tsc_restore_sched_clock_state(void)
 	if (!sched_clock_stable())
 		return;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	/*
 	 * We're coming out of suspend, there's no concurrency yet; don't
@@ -953,7 +958,7 @@ void tsc_restore_sched_clock_state(void)
 		per_cpu(cyc2ns.data[1].cyc2ns_offset, cpu) = offset;
 	}
 
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 #ifdef CONFIG_CPU_FREQ
diff --git a/arch/x86/kernel/tsc_sync.c b/arch/x86/kernel/tsc_sync.c
index ec534f978867..91e9d0f04f56 100644
--- a/arch/x86/kernel/tsc_sync.c
+++ b/arch/x86/kernel/tsc_sync.c
@@ -327,6 +327,8 @@ void check_tsc_sync_source(int cpu)
 		atomic_set(&test_runs, 1);
 	else
 		atomic_set(&test_runs, 3);
+
+	hard_cond_local_irq_disable();
 retry:
 	/*
 	 * Wait for the target to start or to skip the test:
@@ -408,6 +410,8 @@ void check_tsc_sync_target(void)
 	if (unsynchronized_tsc())
 		return;
 
+	hard_cond_local_irq_disable();
+
 	/*
 	 * Store, verify and sanitize the TSC adjust register. If
 	 * successful skip the test.
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index ff395f812719..99795b3573b0 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -8411,7 +8411,9 @@ static int complete_emulated_mmio(struct kvm_vcpu *vcpu)
 /* Swap (qemu) user FPU context for the guest FPU context. */
 static void kvm_load_guest_fpu(struct kvm_vcpu *vcpu)
 {
-	fpregs_lock();
+	unsigned long flags;
+
+	flags = fpregs_lock();
 
 	copy_fpregs_to_fpstate(vcpu->arch.user_fpu);
 	/* PKRU is separately restored in kvm_x86_ops->run.  */
@@ -8419,7 +8421,7 @@ static void kvm_load_guest_fpu(struct kvm_vcpu *vcpu)
 				~XFEATURE_MASK_PKRU);
 
 	fpregs_mark_activate();
-	fpregs_unlock();
+	fpregs_unlock(flags);
 
 	trace_kvm_fpu(1);
 }
@@ -8427,13 +8429,15 @@ static void kvm_load_guest_fpu(struct kvm_vcpu *vcpu)
 /* When vcpu_run ends, restore user space FPU context. */
 static void kvm_put_guest_fpu(struct kvm_vcpu *vcpu)
 {
-	fpregs_lock();
+	unsigned long flags;
+
+	flags = fpregs_lock();
 
 	copy_fpregs_to_fpstate(vcpu->arch.guest_fpu);
 	copy_kernel_to_fpregs(&vcpu->arch.user_fpu->state);
 
 	fpregs_mark_activate();
-	fpregs_unlock();
+	fpregs_unlock(flags);
 
 	++vcpu->stat.fpu_reload;
 	trace_kvm_fpu(0);
diff --git a/arch/x86/lib/usercopy.c b/arch/x86/lib/usercopy.c
index 3f435d7fca5e..1cdb806bd689 100644
--- a/arch/x86/lib/usercopy.c
+++ b/arch/x86/lib/usercopy.c
@@ -18,7 +18,7 @@ copy_from_user_nmi(void *to, const void __user *from, unsigned long n)
 {
 	unsigned long ret;
 
-	if (__range_not_ok(from, n, TASK_SIZE))
+	if (running_oob() || __range_not_ok(from, n, TASK_SIZE))
 		return n;
 
 	if (!nmi_uaccess_okay())
diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
index 9ceacd1156db..0b086a92c0e0 100644
--- a/arch/x86/mm/fault.c
+++ b/arch/x86/mm/fault.c
@@ -15,6 +15,7 @@
 #include <linux/hugetlb.h>		/* hstate_index_to_shift	*/
 #include <linux/prefetch.h>		/* prefetchw			*/
 #include <linux/context_tracking.h>	/* exception_enter(), ...	*/
+#include <linux/irq_pipeline.h>		/* pipelined_fault_entry(), ...	*/
 #include <linux/uaccess.h>		/* faulthandler_disabled()	*/
 #include <linux/efi.h>			/* efi_recover_from_page_fault()*/
 #include <linux/mm_types.h>
@@ -708,7 +709,7 @@ no_context(struct pt_regs *regs, unsigned long error_code,
 	   unsigned long address, int signal, int si_code)
 {
 	struct task_struct *tsk = current;
-	unsigned long flags;
+	unsigned long flags, entry_flags = 0;
 	int sig;
 
 	if (user_mode(regs)) {
@@ -727,7 +728,7 @@ no_context(struct pt_regs *regs, unsigned long error_code,
 		 * the below recursive fault logic only apply to a faults from
 		 * task context.
 		 */
-		if (in_interrupt())
+		if (running_inband() && in_interrupt())
 			return;
 
 		/*
@@ -737,10 +738,19 @@ no_context(struct pt_regs *regs, unsigned long error_code,
 		 * faulting through the emulate_vsyscall() logic.
 		 */
 		if (current->thread.sig_on_uaccess_err && signal) {
+			/*
+			 * If !user_mode(regs), we did not notify the
+			 * pipeline about this fault, do this now
+			 * before we (re-enter inband code.
+			 */
+			entry_flags = pipelined_fault_entry(X86_TRAP_PF, regs);
+
 			set_signal_archinfo(address, error_code);
 
 			/* XXX: hwpoison faults will set the wrong code. */
 			force_sig_fault(signal, si_code, (void __user *)address);
+
+			pipelined_fault_exit(entry_flags);
 		}
 
 		/*
@@ -797,6 +807,14 @@ no_context(struct pt_regs *regs, unsigned long error_code,
 	if (is_errata93(regs, address))
 		return;
 
+	/*
+	 * The odds we can survive to this PF over an out-of-band
+	 * context are pretty high, but if a companion core is
+	 * present, we want to let it know so it might try desperate
+	 * fixups as well.
+	 */
+	entry_flags = pipelined_fault_entry(X86_TRAP_PF, regs);
+
 	/*
 	 * Buggy firmware could access regions which might page fault, try to
 	 * recover from such faults.
@@ -824,6 +842,9 @@ no_context(struct pt_regs *regs, unsigned long error_code,
 	printk(KERN_DEFAULT "CR2: %016lx\n", address);
 
 	oops_end(flags, regs, sig);
+
+	if (!user_mode(regs))
+		pipelined_fault_exit(entry_flags);
 }
 
 /*
@@ -873,7 +894,7 @@ __bad_area_nosemaphore(struct pt_regs *regs, unsigned long error_code,
 		/*
 		 * It's possible to have interrupts off here:
 		 */
-		local_irq_enable();
+		local_irq_enable_full();
 
 		/*
 		 * Valid to do another page fault here because this one came
@@ -1335,11 +1356,11 @@ void do_user_addr_fault(struct pt_regs *regs,
 	 * potential system fault or CPU buglet:
 	 */
 	if (user_mode(regs)) {
-		local_irq_enable();
+		local_irq_enable_full();
 		flags |= FAULT_FLAG_USER;
 	} else {
 		if (regs->flags & X86_EFLAGS_IF)
-			local_irq_enable();
+			local_irq_enable_full();
 	}
 
 	perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, 1, regs, address);
@@ -1494,6 +1515,8 @@ static noinline void
 __do_page_fault(struct pt_regs *regs, unsigned long hw_error_code,
 		unsigned long address)
 {
+	unsigned long flags;
+
 	prefetchw(&current->mm->mmap_sem);
 
 	if (unlikely(kmmio_fault(regs, address)))
@@ -1502,8 +1525,11 @@ __do_page_fault(struct pt_regs *regs, unsigned long hw_error_code,
 	/* Was the fault on kernel-controlled part of the address space? */
 	if (unlikely(fault_in_kernel_space(address)))
 		do_kern_addr_fault(regs, hw_error_code, address);
-	else
+	else {
+		flags = pipelined_fault_entry(X86_TRAP_PF, regs);
 		do_user_addr_fault(regs, hw_error_code, address);
+		pipelined_fault_exit(flags);
+	}
 }
 NOKPROBE_SYMBOL(__do_page_fault);
 
@@ -1531,3 +1557,41 @@ do_page_fault(struct pt_regs *regs, unsigned long error_code, unsigned long addr
 	exception_exit(prev_state);
 }
 NOKPROBE_SYMBOL(do_page_fault);
+
+#ifdef CONFIG_DOVETAIL
+
+void arch_advertise_page_mapping(unsigned long start, unsigned long end)
+{
+	unsigned long next, addr = start;
+	pgd_t *pgd, *pgd_ref;
+	struct page *page;
+
+	/*
+	 * APEI may create temporary mappings in interrupt context -
+	 * nothing we can and need to propagate globally.
+	 */
+	if (in_interrupt())
+		return;
+
+	if (!(start >= VMALLOC_START && start < VMALLOC_END))
+		return;
+
+	do {
+		next = pgd_addr_end(addr, end);
+		pgd_ref = pgd_offset_k(addr);
+		if (pgd_none(*pgd_ref))
+			continue;
+		spin_lock(&pgd_lock);
+		list_for_each_entry(page, &pgd_list, lru) {
+			pgd = page_address(page) + pgd_index(addr);
+			if (pgd_none(*pgd))
+				set_pgd(pgd, *pgd_ref);
+		}
+		spin_unlock(&pgd_lock);
+		addr = next;
+	} while (addr != end);
+
+	arch_flush_lazy_mmu_mode();
+}
+
+#endif
diff --git a/arch/x86/mm/tlb.c b/arch/x86/mm/tlb.c
index e6a9edc5baaf..af56ddfe366b 100644
--- a/arch/x86/mm/tlb.c
+++ b/arch/x86/mm/tlb.c
@@ -154,10 +154,12 @@ EXPORT_SYMBOL_GPL(leave_mm);
 void switch_mm(struct mm_struct *prev, struct mm_struct *next,
 	       struct task_struct *tsk)
 {
-	unsigned long flags;
+	unsigned long flags, _flags;
 
 	local_irq_save(flags);
+	protect_inband_mm(_flags);
 	switch_mm_irqs_off(prev, next, tsk);
+	unprotect_inband_mm(_flags);
 	local_irq_restore(flags);
 }
 
@@ -293,7 +295,9 @@ void switch_mm_irqs_off(struct mm_struct *prev, struct mm_struct *next,
 	 */
 
 	/* We don't want flush_tlb_func_* to run concurrently with us. */
-	if (IS_ENABLED(CONFIG_PROVE_LOCKING))
+	if (IS_ENABLED(CONFIG_DOVETAIL))
+		WARN_ON_ONCE(!hard_irqs_disabled());
+	else if (IS_ENABLED(CONFIG_PROVE_LOCKING))
 		WARN_ON_ONCE(!irqs_disabled());
 
 	/*
@@ -531,15 +535,23 @@ static void flush_tlb_func_common(const struct flush_tlb_info *f,
 	 *                   wants us to catch up to.
 	 */
 	struct mm_struct *loaded_mm = this_cpu_read(cpu_tlbstate.loaded_mm);
-	u32 loaded_mm_asid = this_cpu_read(cpu_tlbstate.loaded_mm_asid);
-	u64 mm_tlb_gen = atomic64_read(&loaded_mm->context.tlb_gen);
-	u64 local_tlb_gen = this_cpu_read(cpu_tlbstate.ctxs[loaded_mm_asid].tlb_gen);
+	u64 mm_tlb_gen, local_tlb_gen;
+	u32 loaded_mm_asid;
+	unsigned long flags;
 
 	/* This code cannot presently handle being reentered. */
 	VM_WARN_ON(!irqs_disabled());
 
-	if (unlikely(loaded_mm == &init_mm))
+	protect_inband_mm(flags);
+
+	loaded_mm_asid = this_cpu_read(cpu_tlbstate.loaded_mm_asid);
+	mm_tlb_gen = atomic64_read(&loaded_mm->context.tlb_gen);
+	local_tlb_gen = this_cpu_read(cpu_tlbstate.ctxs[loaded_mm_asid].tlb_gen);
+
+	if (unlikely(loaded_mm == &init_mm)) {
+		unprotect_inband_mm(flags);
 		return;
+	}
 
 	VM_WARN_ON(this_cpu_read(cpu_tlbstate.ctxs[loaded_mm_asid].ctx_id) !=
 		   loaded_mm->context.ctx_id);
@@ -555,6 +567,7 @@ static void flush_tlb_func_common(const struct flush_tlb_info *f,
 		 * IPIs to lazy TLB mode CPUs.
 		 */
 		switch_mm_irqs_off(NULL, &init_mm, NULL);
+		unprotect_inband_mm(flags);
 		return;
 	}
 
@@ -565,6 +578,7 @@ static void flush_tlb_func_common(const struct flush_tlb_info *f,
 		 * be handled can catch us all the way up, leaving no work for
 		 * the second flush.
 		 */
+		unprotect_inband_mm(flags);
 		trace_tlb_flush(reason, 0);
 		return;
 	}
@@ -572,6 +586,8 @@ static void flush_tlb_func_common(const struct flush_tlb_info *f,
 	WARN_ON_ONCE(local_tlb_gen > mm_tlb_gen);
 	WARN_ON_ONCE(f->new_tlb_gen > mm_tlb_gen);
 
+	unprotect_inband_mm(flags);
+
 	/*
 	 * If we get to this point, we know that our TLB is out of date.
 	 * This does not strictly imply that we need to flush (it's
diff --git a/arch/x86/xen/Kconfig b/arch/x86/xen/Kconfig
index ba5a41828e9d..20514f255127 100644
--- a/arch/x86/xen/Kconfig
+++ b/arch/x86/xen/Kconfig
@@ -5,7 +5,7 @@
 
 config XEN
 	bool "Xen guest support"
-	depends on PARAVIRT
+	depends on PARAVIRT && !IRQ_PIPELINE
 	select PARAVIRT_CLOCK
 	select X86_HV_CALLBACK_VECTOR
 	depends on X86_64 || (X86_32 && X86_PAE)
diff --git a/drivers/Kconfig b/drivers/Kconfig
index 8befa53f43be..21faa643e7d2 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -30,6 +30,8 @@ source "drivers/block/Kconfig"
 
 source "drivers/nvme/Kconfig"
 
+source "drivers/evl/Kconfig"
+
 source "drivers/misc/Kconfig"
 
 source "drivers/ide/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index aaef17cc6512..64ccf511ccce 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -156,6 +156,8 @@ obj-$(CONFIG_REMOTEPROC)	+= remoteproc/
 obj-$(CONFIG_RPMSG)		+= rpmsg/
 obj-$(CONFIG_SOUNDWIRE)		+= soundwire/
 
+obj-$(CONFIG_EVL)		+= evl/
+
 # Virtualization drivers
 obj-$(CONFIG_VIRT_DRIVERS)	+= virt/
 obj-$(CONFIG_HYPERV)		+= hv/
diff --git a/drivers/base/regmap/internal.h b/drivers/base/regmap/internal.h
index 3d80c4b43f72..d8cfa86b47b0 100644
--- a/drivers/base/regmap/internal.h
+++ b/drivers/base/regmap/internal.h
@@ -50,7 +50,10 @@ struct regmap {
 	union {
 		struct mutex mutex;
 		struct {
-			spinlock_t spinlock;
+			union {
+				spinlock_t spinlock;
+				hard_spinlock_t oob_lock;
+			};
 			unsigned long spinlock_flags;
 		};
 	};
diff --git a/drivers/base/regmap/regmap-irq.c b/drivers/base/regmap/regmap-irq.c
index 3d64c9331a82..0d1e6ccb5bbe 100644
--- a/drivers/base/regmap/regmap-irq.c
+++ b/drivers/base/regmap/regmap-irq.c
@@ -324,6 +324,7 @@ static const struct irq_chip regmap_irq_chip = {
 	.irq_enable		= regmap_irq_enable,
 	.irq_set_type		= regmap_irq_set_type,
 	.irq_set_wake		= regmap_irq_set_wake,
+	.flags			= IRQCHIP_PIPELINE_SAFE,
 };
 
 static inline int read_sub_irq_data(struct regmap_irq_chip_data *data,
diff --git a/drivers/base/regmap/regmap.c b/drivers/base/regmap/regmap.c
index 19f57ccfbe1d..93dff94539b8 100644
--- a/drivers/base/regmap/regmap.c
+++ b/drivers/base/regmap/regmap.c
@@ -14,6 +14,7 @@
 #include <linux/of.h>
 #include <linux/rbtree.h>
 #include <linux/sched.h>
+#include <linux/dovetail.h>
 #include <linux/delay.h>
 #include <linux/log2.h>
 #include <linux/hwspinlock.h>
@@ -519,6 +520,23 @@ __releases(&map->spinlock)
 	spin_unlock_irqrestore(&map->spinlock, map->spinlock_flags);
 }
 
+static void regmap_lock_oob(void *__map)
+__acquires(&map->oob_lock)
+{
+	struct regmap *map = __map;
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&map->oob_lock, flags);
+	map->spinlock_flags = flags;
+}
+
+static void regmap_unlock_oob(void *__map)
+__releases(&map->oob_lock)
+{
+	struct regmap *map = __map;
+	raw_spin_unlock_irqrestore(&map->oob_lock, map->spinlock_flags);
+}
+
 static void dev_get_regmap_release(struct device *dev, void *res)
 {
 	/*
@@ -741,17 +759,28 @@ struct regmap *__regmap_init(struct device *dev,
 	} else {
 		if ((bus && bus->fast_io) ||
 		    config->fast_io) {
-			spin_lock_init(&map->spinlock);
-			map->lock = regmap_lock_spinlock;
-			map->unlock = regmap_unlock_spinlock;
-			lockdep_set_class_and_name(&map->spinlock,
-						   lock_key, lock_name);
-		} else {
+			if (dovetailing() && config->oob_io) {
+				raw_spin_lock_init(&map->oob_lock);
+				map->lock = regmap_lock_oob;
+				map->unlock = regmap_unlock_oob;
+				lockdep_set_class_and_name(&map->oob_lock,
+							lock_key, lock_name);
+			} else {
+				spin_lock_init(&map->spinlock);
+				map->lock = regmap_lock_spinlock;
+				map->unlock = regmap_unlock_spinlock;
+				lockdep_set_class_and_name(&map->spinlock,
+							lock_key, lock_name);
+			}
+		} else if (!config->oob_io) {
 			mutex_init(&map->mutex);
 			map->lock = regmap_lock_mutex;
 			map->unlock = regmap_unlock_mutex;
 			lockdep_set_class_and_name(&map->mutex,
 						   lock_key, lock_name);
+		} else {
+			ret = -ENXIO;
+			goto err_name;
 		}
 		map->lock_arg = map;
 	}
diff --git a/drivers/clocksource/Kconfig b/drivers/clocksource/Kconfig
index f35a53ce8988..a03d410dcb99 100644
--- a/drivers/clocksource/Kconfig
+++ b/drivers/clocksource/Kconfig
@@ -31,6 +31,11 @@ config CLKBLD_I8253
 config CLKSRC_MMIO
 	bool
 
+config CLKSRC_VDSO_MAPPED
+        select CLKSRC_MMIO
+	select VDSO
+	bool
+
 config BCM2835_TIMER
 	bool "BCM2835 timer driver" if COMPILE_TEST
 	select CLKSRC_MMIO
@@ -57,6 +62,7 @@ config DIGICOLOR_TIMER
 
 config DW_APB_TIMER
 	bool "DW APB timer driver" if COMPILE_TEST
+	select CLKSRC_VDSO_MAPPED
 	help
 	  Enables the support for the dw_apb timer.
 
@@ -388,6 +394,7 @@ config SUN50I_ERRATUM_UNKNOWN1
 config ARM_GLOBAL_TIMER
 	bool "Support for the ARM global timer" if COMPILE_TEST
 	select TIMER_OF if OF
+	select CLKSRC_VDSO_MAPPED
 	depends on ARM
 	help
 	  This options enables support for the ARM global timer unit
@@ -612,7 +619,7 @@ config H8300_TPU
 config CLKSRC_IMX_GPT
 	bool "Clocksource using i.MX GPT" if COMPILE_TEST
 	depends on (ARM || ARM64) && CLKDEV_LOOKUP
-	select CLKSRC_MMIO
+	select CLKSRC_VDSO_MAPPED
 
 config CLKSRC_IMX_TPM
 	bool "Clocksource using i.MX TPM" if COMPILE_TEST
@@ -633,7 +640,7 @@ config CLKSRC_ST_LPC
 	bool "Low power clocksource found in the LPC" if COMPILE_TEST
 	select TIMER_OF if OF
 	depends on HAS_IOMEM
-	select CLKSRC_MMIO
+	select CLKSRC_VDSO_MAPPED
 	help
 	  Enable this option to use the Low Power controller timer
 	  as clocksource.
diff --git a/drivers/clocksource/arm_arch_timer.c b/drivers/clocksource/arm_arch_timer.c
index 9a5464c625b4..756fbd2c4294 100644
--- a/drivers/clocksource/arm_arch_timer.c
+++ b/drivers/clocksource/arm_arch_timer.c
@@ -21,6 +21,7 @@
 #include <linux/of_address.h>
 #include <linux/io.h>
 #include <linux/slab.h>
+#include <linux/dovetail.h>
 #include <linux/sched/clock.h>
 #include <linux/sched_clock.h>
 #include <linux/acpi.h>
@@ -629,7 +630,7 @@ static __always_inline irqreturn_t timer_handler(const int access,
 	if (ctrl & ARCH_TIMER_CTRL_IT_STAT) {
 		ctrl |= ARCH_TIMER_CTRL_IT_MASK;
 		arch_timer_reg_write(access, ARCH_TIMER_REG_CTRL, ctrl, evt);
-		evt->event_handler(evt);
+		clockevents_handle_event(evt);
 		return IRQ_HANDLED;
 	}
 
@@ -738,7 +739,7 @@ static int arch_timer_set_next_event_phys_mem(unsigned long evt,
 static void __arch_timer_setup(unsigned type,
 			       struct clock_event_device *clk)
 {
-	clk->features = CLOCK_EVT_FEAT_ONESHOT;
+	clk->features = CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_PIPELINE;
 
 	if (type == ARCH_TIMER_TYPE_CP15) {
 		typeof(clk->set_next_event) sne;
@@ -840,6 +841,9 @@ static void arch_counter_set_user_access(void)
 	else
 		cntkctl |= ARCH_TIMER_USR_VCT_ACCESS_EN;
 
+	if (dovetailing())
+		cntkctl |= ARCH_TIMER_USR_PT_ACCESS_EN;
+
 	arch_timer_set_cntkctl(cntkctl);
 }
 
@@ -873,6 +877,7 @@ static int arch_timer_starting_cpu(unsigned int cpu)
 	enable_percpu_irq(arch_timer_ppi[arch_timer_uses_ppi], flags);
 
 	if (arch_timer_has_nonsecure_ppi()) {
+		clk->irq = arch_timer_ppi[ARCH_TIMER_PHYS_NONSECURE_PPI];
 		flags = check_ppi_trigger(arch_timer_ppi[ARCH_TIMER_PHYS_NONSECURE_PPI]);
 		enable_percpu_irq(arch_timer_ppi[ARCH_TIMER_PHYS_NONSECURE_PPI],
 				  flags);
@@ -957,6 +962,10 @@ struct arch_timer_kvm_info *arch_timer_get_kvm_info(void)
 	return &arch_timer_kvm_info;
 }
 
+void __weak arch_clocksource_arch_timer_init(struct clocksource *cs)
+{
+}
+
 static void __init arch_counter_register(unsigned type)
 {
 	u64 start_count;
@@ -980,6 +989,8 @@ static void __init arch_counter_register(unsigned type)
 
 		arch_timer_read_counter = rd;
 		clocksource_counter.archdata.vdso_direct = vdso_default;
+
+		arch_clocksource_arch_timer_init(&clocksource_counter);
 	} else {
 		arch_timer_read_counter = arch_counter_get_cntvct_mem;
 	}
diff --git a/drivers/clocksource/arm_global_timer.c b/drivers/clocksource/arm_global_timer.c
index 88b2d38a7a61..3273fc6b567e 100644
--- a/drivers/clocksource/arm_global_timer.c
+++ b/drivers/clocksource/arm_global_timer.c
@@ -153,11 +153,11 @@ static irqreturn_t gt_clockevent_interrupt(int irq, void *dev_id)
 	 *	the Global Timer flag _after_ having incremented
 	 *	the Comparator register	value to a higher value.
 	 */
-	if (clockevent_state_oneshot(evt))
+	if (clockevent_is_oob(evt) || clockevent_state_oneshot(evt))
 		gt_compare_set(ULONG_MAX, 0);
 
 	writel_relaxed(GT_INT_STATUS_EVENT_FLAG, gt_base + GT_INT_STATUS);
-	evt->event_handler(evt);
+	clockevents_handle_event(evt);
 
 	return IRQ_HANDLED;
 }
@@ -168,7 +168,7 @@ static int gt_starting_cpu(unsigned int cpu)
 
 	clk->name = "arm_global_timer";
 	clk->features = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT |
-		CLOCK_EVT_FEAT_PERCPU;
+		CLOCK_EVT_FEAT_PERCPU | CLOCK_EVT_FEAT_PIPELINE;
 	clk->set_state_shutdown = gt_clockevent_shutdown;
 	clk->set_state_periodic = gt_clockevent_set_periodic;
 	clk->set_state_oneshot = gt_clockevent_shutdown;
@@ -192,11 +192,6 @@ static int gt_dying_cpu(unsigned int cpu)
 	return 0;
 }
 
-static u64 gt_clocksource_read(struct clocksource *cs)
-{
-	return gt_counter_read();
-}
-
 static void gt_resume(struct clocksource *cs)
 {
 	unsigned long ctrl;
@@ -207,13 +202,15 @@ static void gt_resume(struct clocksource *cs)
 		writel(GT_CONTROL_TIMER_ENABLE, gt_base + GT_CONTROL);
 }
 
-static struct clocksource gt_clocksource = {
-	.name	= "arm_global_timer",
-	.rating	= 300,
-	.read	= gt_clocksource_read,
-	.mask	= CLOCKSOURCE_MASK(64),
-	.flags	= CLOCK_SOURCE_IS_CONTINUOUS,
-	.resume = gt_resume,
+static struct clocksource_user_mmio gt_clocksource = {
+	.mmio.clksrc = {
+		.name	= "arm_global_timer",
+		.rating	= 300,
+		.read	= clocksource_dual_mmio_readl_up,
+		.mask	= CLOCKSOURCE_MASK(64),
+		.flags	= CLOCK_SOURCE_IS_CONTINUOUS,
+		.resume = gt_resume,
+	},
 };
 
 #ifdef CONFIG_CLKSRC_ARM_GLOBAL_TIMER_SCHED_CLOCK
@@ -240,6 +237,8 @@ static void __init gt_delay_timer_init(void)
 
 static int __init gt_clocksource_init(void)
 {
+	struct clocksource_mmio_regs mmr;
+
 	writel(0, gt_base + GT_CONTROL);
 	writel(0, gt_base + GT_COUNTER0);
 	writel(0, gt_base + GT_COUNTER1);
@@ -249,7 +248,13 @@ static int __init gt_clocksource_init(void)
 #ifdef CONFIG_CLKSRC_ARM_GLOBAL_TIMER_SCHED_CLOCK
 	sched_clock_register(gt_sched_clock_read, 64, gt_clk_rate);
 #endif
-	return clocksource_register_hz(&gt_clocksource, gt_clk_rate);
+	mmr.reg_upper = gt_base + GT_COUNTER1;
+	mmr.reg_lower = gt_base + GT_COUNTER0;
+	mmr.bits_upper = 32;
+	mmr.bits_lower = 32;
+	mmr.revmap = NULL;
+
+	return clocksource_user_mmio_init(&gt_clocksource, &mmr, gt_clk_rate);
 }
 
 static int __init global_timer_of_register(struct device_node *np)
@@ -299,8 +304,8 @@ static int __init global_timer_of_register(struct device_node *np)
 		goto out_clk;
 	}
 
-	err = request_percpu_irq(gt_ppi, gt_clockevent_interrupt,
-				 "gt", gt_evt);
+	err = __request_percpu_irq(gt_ppi, gt_clockevent_interrupt,
+				   IRQF_TIMER, "gt", gt_evt);
 	if (err) {
 		pr_warn("global-timer: can't register interrupt %d (%d)\n",
 			gt_ppi, err);
diff --git a/drivers/clocksource/bcm2835_timer.c b/drivers/clocksource/bcm2835_timer.c
index 2b196cbfadb6..6387f2ce98ea 100644
--- a/drivers/clocksource/bcm2835_timer.c
+++ b/drivers/clocksource/bcm2835_timer.c
@@ -54,13 +54,11 @@ static int bcm2835_time_set_next_event(unsigned long event,
 static irqreturn_t bcm2835_time_interrupt(int irq, void *dev_id)
 {
 	struct bcm2835_timer *timer = dev_id;
-	void (*event_handler)(struct clock_event_device *);
+
 	if (readl_relaxed(timer->control) & timer->match_mask) {
 		writel_relaxed(timer->match_mask, timer->control);
 
-		event_handler = READ_ONCE(timer->evt.event_handler);
-		if (event_handler)
-			event_handler(&timer->evt);
+		clockevents_handle_event(&timer->evt);
 		return IRQ_HANDLED;
 	} else {
 		return IRQ_NONE;
@@ -110,9 +108,10 @@ static int __init bcm2835_timer_init(struct device_node *node)
 	timer->match_mask = BIT(DEFAULT_TIMER);
 	timer->evt.name = node->name;
 	timer->evt.rating = 300;
-	timer->evt.features = CLOCK_EVT_FEAT_ONESHOT;
+	timer->evt.features = CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_PIPELINE;
 	timer->evt.set_next_event = bcm2835_time_set_next_event;
 	timer->evt.cpumask = cpumask_of(0);
+	timer->evt.irq = irq;
 	timer->act.name = node->name;
 	timer->act.flags = IRQF_TIMER | IRQF_SHARED;
 	timer->act.dev_id = timer;
diff --git a/drivers/clocksource/clksrc_st_lpc.c b/drivers/clocksource/clksrc_st_lpc.c
index 419a886876e4..b30b814d271f 100644
--- a/drivers/clocksource/clksrc_st_lpc.c
+++ b/drivers/clocksource/clksrc_st_lpc.c
@@ -51,7 +51,7 @@ static int __init st_clksrc_init(void)
 
 	sched_clock_register(st_clksrc_sched_clock_read, 32, rate);
 
-	ret = clocksource_mmio_init(ddata.base + LPC_LPT_LSB_OFF,
+	ret = clocksource_user_single_mmio_init(ddata.base + LPC_LPT_LSB_OFF,
 				    "clksrc-st-lpc", rate, 300, 32,
 				    clocksource_mmio_readl_up);
 	if (ret) {
diff --git a/drivers/clocksource/dw_apb_timer.c b/drivers/clocksource/dw_apb_timer.c
index 654766538f93..8bb7c43f6112 100644
--- a/drivers/clocksource/dw_apb_timer.c
+++ b/drivers/clocksource/dw_apb_timer.c
@@ -43,7 +43,7 @@ ced_to_dw_apb_ced(struct clock_event_device *evt)
 static inline struct dw_apb_clocksource *
 clocksource_to_dw_apb_clocksource(struct clocksource *cs)
 {
-	return container_of(cs, struct dw_apb_clocksource, cs);
+	return container_of(cs, struct dw_apb_clocksource, ummio.mmio.clksrc);
 }
 
 static inline u32 apbt_readl(struct dw_apb_timer *timer, unsigned long offs)
@@ -347,18 +347,6 @@ void dw_apb_clocksource_start(struct dw_apb_clocksource *dw_cs)
 	dw_apb_clocksource_read(dw_cs);
 }
 
-static u64 __apbt_read_clocksource(struct clocksource *cs)
-{
-	u32 current_count;
-	struct dw_apb_clocksource *dw_cs =
-		clocksource_to_dw_apb_clocksource(cs);
-
-	current_count = apbt_readl_relaxed(&dw_cs->timer,
-					APBTMR_N_CURRENT_VALUE);
-
-	return (u64)~current_count;
-}
-
 static void apbt_restart_clocksource(struct clocksource *cs)
 {
 	struct dw_apb_clocksource *dw_cs =
@@ -380,7 +368,7 @@ static void apbt_restart_clocksource(struct clocksource *cs)
  * dw_apb_clocksource_register() as the next step.
  */
 struct dw_apb_clocksource *
-dw_apb_clocksource_init(unsigned rating, const char *name, void __iomem *base,
+__init dw_apb_clocksource_init(unsigned rating, const char *name, void __iomem *base,
 			unsigned long freq)
 {
 	struct dw_apb_clocksource *dw_cs = kzalloc(sizeof(*dw_cs), GFP_KERNEL);
@@ -390,12 +378,12 @@ dw_apb_clocksource_init(unsigned rating, const char *name, void __iomem *base,
 
 	dw_cs->timer.base = base;
 	dw_cs->timer.freq = freq;
-	dw_cs->cs.name = name;
-	dw_cs->cs.rating = rating;
-	dw_cs->cs.read = __apbt_read_clocksource;
-	dw_cs->cs.mask = CLOCKSOURCE_MASK(32);
-	dw_cs->cs.flags = CLOCK_SOURCE_IS_CONTINUOUS;
-	dw_cs->cs.resume = apbt_restart_clocksource;
+	dw_cs->ummio.mmio.clksrc.name = name;
+	dw_cs->ummio.mmio.clksrc.rating = rating;
+	dw_cs->ummio.mmio.clksrc.read = clocksource_mmio_readl_down;
+	dw_cs->ummio.mmio.clksrc.mask = CLOCKSOURCE_MASK(32);
+	dw_cs->ummio.mmio.clksrc.flags = CLOCK_SOURCE_IS_CONTINUOUS;
+	dw_cs->ummio.mmio.clksrc.resume = apbt_restart_clocksource;
 
 	return dw_cs;
 }
@@ -405,9 +393,17 @@ dw_apb_clocksource_init(unsigned rating, const char *name, void __iomem *base,
  *
  * @dw_cs:	The clocksource to register.
  */
-void dw_apb_clocksource_register(struct dw_apb_clocksource *dw_cs)
+void __init dw_apb_clocksource_register(struct dw_apb_clocksource *dw_cs)
 {
-	clocksource_register_hz(&dw_cs->cs, dw_cs->timer.freq);
+	struct clocksource_mmio_regs mmr;
+
+	mmr.reg_lower = dw_cs->timer.base + APBTMR_N_CURRENT_VALUE;
+	mmr.bits_lower = 32;
+	mmr.reg_upper = 0;
+	mmr.bits_upper = 0;
+	mmr.revmap = NULL;
+
+	clocksource_user_mmio_init(&dw_cs->ummio, &mmr, dw_cs->timer.freq);
 }
 
 /**
diff --git a/drivers/clocksource/mmio.c b/drivers/clocksource/mmio.c
index 9de751531831..188cde1bbb46 100644
--- a/drivers/clocksource/mmio.c
+++ b/drivers/clocksource/mmio.c
@@ -6,12 +6,31 @@
 #include <linux/errno.h>
 #include <linux/init.h>
 #include <linux/slab.h>
+#include <linux/spinlock.h>
+#include <linux/uaccess.h>
+#include <linux/miscdevice.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+#include <linux/fs.h>
+#include <linux/mm.h>
+#include <linux/mman.h>
+#include <linux/device.h>
 
-struct clocksource_mmio {
-	void __iomem *reg;
-	struct clocksource clksrc;
+struct clocksource_user_mapping {
+	struct mm_struct *mm;
+	struct clocksource_user_mmio *ucs;
+	void *regs;
+	struct hlist_node link;
+	atomic_t refs;
 };
 
+static struct class *user_mmio_class;
+static dev_t user_mmio_devt;
+
+static DEFINE_SPINLOCK(user_clksrcs_lock);
+static unsigned int user_clksrcs_count;
+static LIST_HEAD(user_clksrcs);
+
 static inline struct clocksource_mmio *to_mmio_clksrc(struct clocksource *c)
 {
 	return container_of(c, struct clocksource_mmio, clksrc);
@@ -37,6 +56,53 @@ u64 clocksource_mmio_readw_down(struct clocksource *c)
 	return ~(u64)readw_relaxed(to_mmio_clksrc(c)->reg) & c->mask;
 }
 
+static inline struct clocksource_user_mmio *
+to_mmio_ucs(struct clocksource *c)
+{
+	return container_of(c, struct clocksource_user_mmio, mmio.clksrc);
+}
+
+u64 clocksource_dual_mmio_readl_up(struct clocksource *c)
+{
+	struct clocksource_user_mmio *ucs = to_mmio_ucs(c);
+	u32 upper, old_upper, lower;
+
+	upper = readl_relaxed(ucs->reg_upper);
+	do {
+		old_upper = upper;
+		lower = readl_relaxed(ucs->mmio.reg);
+		upper = readl_relaxed(ucs->reg_upper);
+	} while (upper != old_upper);
+
+	return (((u64)upper) << ucs->bits_lower) | lower;
+}
+
+u64 clocksource_dual_mmio_readw_up(struct clocksource *c)
+{
+	struct clocksource_user_mmio *ucs = to_mmio_ucs(c);
+	u16 upper, old_upper, lower;
+
+	upper = readw_relaxed(ucs->reg_upper);
+	do {
+		old_upper = upper;
+		lower = readw_relaxed(ucs->mmio.reg);
+		upper = readw_relaxed(ucs->reg_upper);
+	} while (upper != old_upper);
+
+	return (((u64)upper) << ucs->bits_lower) | lower;
+}
+
+static void mmio_base_init(const char *name,int rating, unsigned int bits,
+			   u64 (*read)(struct clocksource *),
+			   struct clocksource *cs)
+{
+	cs->name = name;
+	cs->rating = rating;
+	cs->read = read;
+	cs->mask = CLOCKSOURCE_MASK(bits);
+	cs->flags = CLOCK_SOURCE_IS_CONTINUOUS;
+}
+
 /**
  * clocksource_mmio_init - Initialize a simple mmio based clocksource
  * @base:	Virtual address of the clock readout register
@@ -51,6 +117,7 @@ int __init clocksource_mmio_init(void __iomem *base, const char *name,
 	u64 (*read)(struct clocksource *))
 {
 	struct clocksource_mmio *cs;
+	int err;
 
 	if (bits > 64 || bits < 16)
 		return -EINVAL;
@@ -60,11 +127,432 @@ int __init clocksource_mmio_init(void __iomem *base, const char *name,
 		return -ENOMEM;
 
 	cs->reg = base;
-	cs->clksrc.name = name;
-	cs->clksrc.rating = rating;
-	cs->clksrc.read = read;
-	cs->clksrc.mask = CLOCKSOURCE_MASK(bits);
-	cs->clksrc.flags = CLOCK_SOURCE_IS_CONTINUOUS;
+	mmio_base_init(name, rating, bits, read, &cs->clksrc);
+
+	err = clocksource_register_hz(&cs->clksrc, hz);
+	if (err < 0) {
+		kfree(cs);
+		return err;
+	}
+
+	return err;
+}
+
+static void clksrc_vmopen(struct vm_area_struct *vma)
+{
+	struct clocksource_user_mapping *mapping, *clone;
+	struct clocksource_user_mmio *ucs;
+	unsigned long h_key;
+
+	mapping = vma->vm_private_data;
+
+	if (mapping->mm == vma->vm_mm) {
+		atomic_inc(&mapping->refs);
+	} else if (mapping->mm) {
+		/*
+		 * We must be duplicating the original mm upon fork(),
+		 * clone the parent ucs mapping struct then rehash it
+		 * on the child mm key. If we cannot get memory for
+		 * this, mitigate the issue for users by preventing a
+		 * stale parent mm from being matched later on by a
+		 * process which reused its mm_struct (h_key is based
+		 * on this struct address).
+		 */
+		clone = kmalloc(sizeof(*mapping), GFP_KERNEL);
+		if (clone == NULL) {
+			pr_alert("out-of-memory for UCS mapping!\n");
+			atomic_inc(&mapping->refs);
+			mapping->mm = NULL;
+			return;
+		}
+		ucs = mapping->ucs;
+		clone->mm = vma->vm_mm;
+		clone->ucs = ucs;
+		clone->regs = mapping->regs;
+		atomic_set(&clone->refs, 1);
+		vma->vm_private_data = clone;
+		h_key = (unsigned long)vma->vm_mm / sizeof(*vma->vm_mm);
+		spin_lock(&ucs->lock);
+		hash_add(ucs->mappings, &clone->link, h_key);
+		spin_unlock(&ucs->lock);
+	}
+}
+
+static void clksrc_vmclose(struct vm_area_struct *vma)
+{
+	struct clocksource_user_mapping *mapping;
+
+	mapping = vma->vm_private_data;
+
+	if (atomic_dec_and_test(&mapping->refs)) {
+		spin_lock(&mapping->ucs->lock);
+		hash_del(&mapping->link);
+		spin_unlock(&mapping->ucs->lock);
+		kfree(mapping);
+	}
+}
+
+static const struct vm_operations_struct clksrc_vmops = {
+	.open = clksrc_vmopen,
+	.close = clksrc_vmclose,
+};
+
+static int mmio_ucs_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	unsigned long addr, upper_pfn, lower_pfn;
+	struct clocksource_user_mapping *mapping, *tmp;
+	struct clocksource_user_mmio *ucs;
+	unsigned int bits_upper;
+	unsigned long h_key;
+	pgprot_t prot;
+	size_t pages;
+	int err;
+
+	pages = (vma->vm_end - vma->vm_start) >> PAGE_SHIFT;
+	if (pages > 2)
+		return -EINVAL;
+
+	vma->vm_private_data = NULL;
+
+	ucs = file->private_data;
+	upper_pfn = ucs->phys_upper >> PAGE_SHIFT;
+	lower_pfn = ucs->phys_lower >> PAGE_SHIFT;
+	bits_upper = fls(ucs->mmio.clksrc.mask) - ucs->bits_lower;
+	if (pages == 2 && (!bits_upper || upper_pfn == lower_pfn))
+		return -EINVAL;
+
+	mapping = kmalloc(sizeof(*mapping), GFP_KERNEL);
+	if (!mapping)
+		return -ENOSPC;
+
+	mapping->mm = vma->vm_mm;
+	mapping->ucs = ucs;
+	mapping->regs = (void *)vma->vm_start;
+	atomic_set(&mapping->refs, 1);
+
+	vma->vm_private_data = mapping;
+	vma->vm_ops = &clksrc_vmops;
+	prot = pgprot_noncached(vma->vm_page_prot);
+	addr = vma->vm_start;
+
+	err = remap_pfn_range(vma, addr, lower_pfn, PAGE_SIZE, prot);
+	if (err < 0)
+		goto fail;
+
+	if (pages > 1) {
+		addr += PAGE_SIZE;
+		err = remap_pfn_range(vma, addr, upper_pfn, PAGE_SIZE, prot);
+		if (err < 0)
+			goto fail;
+	}
+
+	h_key = (unsigned long)vma->vm_mm / sizeof(*vma->vm_mm);
+
+	spin_lock(&ucs->lock);
+	hash_for_each_possible(ucs->mappings, tmp, link, h_key) {
+		if (tmp->mm == vma->vm_mm) {
+			spin_unlock(&ucs->lock);
+			err = -EBUSY;
+			goto fail;
+		}
+	}
+	hash_add(ucs->mappings, &mapping->link, h_key);
+	spin_unlock(&ucs->lock);
+
+	return 0;
+fail:
+	kfree(mapping);
+
+	return err;
+}
+
+static long
+mmio_ucs_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
+{
+	struct clocksource_user_mapping *mapping;
+	struct clksrc_user_mmio_info __user *u;
+	struct clksrc_user_mmio_info info;
+	struct clocksource_user_mmio *ucs;
+	unsigned long upper_pfn, lower_pfn;
+	unsigned int bits_upper;
+	void __user *map_base;
+	unsigned long h_key;
+	size_t size;
+
+	u = (struct clksrc_user_mmio_info __user *)arg;
+
+	switch (cmd) {
+	case CLKSRC_USER_MMIO_MAP:
+		break;
+	default:
+		return -ENOTTY;
+	}
+
+	h_key = (unsigned long)current->mm / sizeof(*current->mm);
+
+	ucs = file->private_data;
+	upper_pfn = ucs->phys_upper >> PAGE_SHIFT;
+	lower_pfn = ucs->phys_lower >> PAGE_SHIFT;
+	bits_upper = fls(ucs->mmio.clksrc.mask) - ucs->bits_lower;
+	size = PAGE_SIZE;
+	if (bits_upper && upper_pfn != lower_pfn)
+		size += PAGE_SIZE;
+
+	do {
+		spin_lock(&ucs->lock);
+		hash_for_each_possible(ucs->mappings, mapping, link, h_key) {
+			if (mapping->mm == current->mm) {
+				spin_unlock(&ucs->lock);
+				map_base = mapping->regs;
+				goto found;
+			}
+		}
+		spin_unlock(&ucs->lock);
+
+		map_base = (void *)
+			vm_mmap(file, 0, size, PROT_READ, MAP_SHARED, 0);
+	} while (IS_ERR(map_base) && PTR_ERR(map_base) == -EBUSY);
+
+	if (IS_ERR(map_base))
+		return PTR_ERR(map_base);
+
+found:
+	info.type = ucs->type;
+	info.reg_lower = map_base + offset_in_page(ucs->phys_lower);
+	info.mask_lower = ucs->mmio.clksrc.mask;
+	info.bits_lower = ucs->bits_lower;
+	info.reg_upper = NULL;
+	if (ucs->phys_upper)
+		info.reg_upper = map_base + (size - PAGE_SIZE)
+			+ offset_in_page(ucs->phys_upper);
+	info.mask_upper = ucs->mask_upper;
+
+	return copy_to_user(u, &info, sizeof(*u));
+}
+
+static int mmio_ucs_open(struct inode *inode, struct file *file)
+{
+	struct clocksource_user_mmio *ucs;
+
+	if (file->f_mode & FMODE_WRITE)
+		return -EINVAL;
+
+	ucs = container_of(inode->i_cdev, typeof(*ucs), cdev);
+	file->private_data = ucs;
+
+	return 0;
+}
+
+static const struct file_operations mmio_ucs_fops = {
+	.owner		= THIS_MODULE,
+	.unlocked_ioctl = mmio_ucs_ioctl,
+	.open		= mmio_ucs_open,
+	.mmap		= mmio_ucs_mmap,
+
+};
+
+static int __init
+ucs_create_cdev(struct class *class, struct clocksource_user_mmio *ucs)
+{
+	int err;
+
+	ucs->dev = device_create(class, NULL,
+				MKDEV(MAJOR(user_mmio_devt), ucs->id),
+				ucs, "ucs/%d", ucs->id);
+	if (IS_ERR(ucs->dev))
+		return PTR_ERR(ucs->dev);
+
+	spin_lock_init(&ucs->lock);
+	hash_init(ucs->mappings);
+
+	cdev_init(&ucs->cdev, &mmio_ucs_fops);
+	ucs->cdev.kobj.parent = &ucs->dev->kobj;
+
+	err = cdev_add(&ucs->cdev, ucs->dev->devt, 1);
+	if (err < 0)
+		goto err_device_destroy;
+
+	return 0;
+
+err_device_destroy:
+	device_destroy(class, MKDEV(MAJOR(user_mmio_devt), ucs->id));
+	return err;
+}
+
+static unsigned long default_revmap(void *virt)
+{
+	struct vm_struct *vm;
+
+	vm = find_vm_area(virt);
+	if (!vm)
+		return 0;
+
+	return vm->phys_addr + (virt - vm->addr);
+}
+
+void __weak
+arch_clocksource_user_mmio_init(struct clocksource *cs, unsigned id) { }
+
+int __init clocksource_user_mmio_init(struct clocksource_user_mmio *ucs,
+				      const struct clocksource_mmio_regs *regs,
+				      unsigned long hz)
+{
+	static u64 (*user_types[CLKSRC_MMIO_TYPE_NR])(struct clocksource *) = {
+		[CLKSRC_MMIO_L_UP] = clocksource_mmio_readl_up,
+		[CLKSRC_MMIO_L_DOWN] = clocksource_mmio_readl_down,
+		[CLKSRC_DMMIO_L_UP] = clocksource_dual_mmio_readl_up,
+		[CLKSRC_MMIO_W_UP] = clocksource_mmio_readw_up,
+		[CLKSRC_MMIO_W_DOWN] = clocksource_mmio_readw_down,
+		[CLKSRC_DMMIO_W_UP] = clocksource_dual_mmio_readw_up,
+	};
+	const char *name = ucs->mmio.clksrc.name;
+	unsigned long phys_upper = 0, phys_lower;
+	enum clksrc_user_mmio_type type;
+	unsigned long (*revmap)(void *);
+	int err;
+
+	if (regs->bits_lower > 32 || regs->bits_lower < 16 ||
+	    regs->bits_upper > 32)
+		return -EINVAL;
+
+	for (type = 0; type < ARRAY_SIZE(user_types); type++)
+		if (ucs->mmio.clksrc.read == user_types[type])
+			break;
+
+	if (type == ARRAY_SIZE(user_types))
+		return -EINVAL;
+
+	if (!(ucs->mmio.clksrc.flags & CLOCK_SOURCE_IS_CONTINUOUS))
+		return -EINVAL;
+
+	revmap = regs->revmap;
+	if (!revmap)
+		revmap = default_revmap;
+
+	phys_lower = revmap(regs->reg_lower);
+	if (!phys_lower)
+		return -EINVAL;
+
+	if (regs->bits_upper) {
+		phys_upper = revmap(regs->reg_upper);
+		if (!phys_upper)
+			return -EINVAL;
+	}
+
+	ucs->mmio.reg = regs->reg_lower;
+	ucs->type = type;
+	ucs->bits_lower = regs->bits_lower;
+	ucs->reg_upper = regs->reg_upper;
+	ucs->mask_lower = CLOCKSOURCE_MASK(regs->bits_lower);
+	ucs->mask_upper = CLOCKSOURCE_MASK(regs->bits_upper);
+	ucs->phys_lower = phys_lower;
+	ucs->phys_upper = phys_upper;
+	spin_lock_init(&ucs->lock);
+
+	err = clocksource_register_hz(&ucs->mmio.clksrc, hz);
+	if (err < 0)
+		return err;
+
+	spin_lock(&user_clksrcs_lock);
+
+	ucs->id = user_clksrcs_count++;
+	if (ucs->id < CLKSRC_USER_MMIO_MAX)
+		list_add_tail(&ucs->link, &user_clksrcs);
+
+	spin_unlock(&user_clksrcs_lock);
+
+	if (ucs->id >= CLKSRC_USER_MMIO_MAX) {
+		pr_warn("%s: Too many clocksources\n", name);
+		err = -EAGAIN;
+		goto fail;
+	}
+
+	arch_clocksource_user_mmio_init(&ucs->mmio.clksrc, ucs->id);
+
+	if (user_mmio_class) {
+		err = ucs_create_cdev(user_mmio_class, ucs);
+		if (err < 0) {
+			pr_warn("%s: Failed to add character device\n", name);
+			goto fail;
+		}
+	}
+
+	return 0;
+
+fail:
+	clocksource_unregister(&ucs->mmio.clksrc);
+
+	return err;
+}
+
+int __init clocksource_user_single_mmio_init(
+	void __iomem *base, const char *name,
+	unsigned long hz, int rating, unsigned int bits,
+	u64 (*read)(struct clocksource *))
+{
+	struct clocksource_user_mmio *ucs;
+	struct clocksource_mmio_regs regs;
+	int ret;
+
+	ucs = kzalloc(sizeof(*ucs), GFP_KERNEL);
+	if (!ucs)
+		return -ENOMEM;
+
+	mmio_base_init(name, rating, bits, read, &ucs->mmio.clksrc);
+	regs.reg_lower = base;
+	regs.reg_upper = NULL;
+	regs.bits_lower = bits;
+	regs.bits_upper = 0;
+	regs.revmap = NULL;
+
+	ret = clocksource_user_mmio_init(ucs, &regs, hz);
+	if (ret)
+		kfree(ucs);
+
+	return ret;
+}
+
+static int __init mmio_clksrc_chr_dev_init(void)
+{
+	struct clocksource_user_mmio *ucs;
+	struct class *class;
+	int err;
+
+	class = class_create(THIS_MODULE, "mmio_ucs");
+	if (IS_ERR(class)) {
+		pr_err("couldn't create user mmio clocksources class\n");
+		return PTR_ERR(class);
+	}
+
+	err = alloc_chrdev_region(&user_mmio_devt, 0, CLKSRC_USER_MMIO_MAX,
+				  "mmio_ucs");
+	if (err < 0) {
+		pr_err("failed to allocate user mmio clocksources character devivces region\n");
+		goto err_class_destroy;
+	}
+
+	/*
+	 * Calling list_for_each_entry is safe here: clocksources are always
+	 * added to the list tail, never removed.
+	 */
+	spin_lock(&user_clksrcs_lock);
+	list_for_each_entry(ucs, &user_clksrcs, link) {
+		spin_unlock(&user_clksrcs_lock);
+
+		err = ucs_create_cdev(class, ucs);
+		if (err < 0)
+			pr_err("%s: Failed to add character device\n",
+			       ucs->mmio.clksrc.name);
+
+		spin_lock(&user_clksrcs_lock);
+	}
+	user_mmio_class = class;
+	spin_unlock(&user_clksrcs_lock);
+
+	return 0;
 
-	return clocksource_register_hz(&cs->clksrc, hz);
+err_class_destroy:
+	class_destroy(class);
+	return err;
 }
+device_initcall(mmio_clksrc_chr_dev_init);
diff --git a/drivers/clocksource/timer-imx-gpt.c b/drivers/clocksource/timer-imx-gpt.c
index 706c0d0ff56c..dfb789f58f22 100644
--- a/drivers/clocksource/timer-imx-gpt.c
+++ b/drivers/clocksource/timer-imx-gpt.c
@@ -164,8 +164,8 @@ static int __init mxc_clocksource_init(struct imx_timer *imxtm)
 	sched_clock_reg = reg;
 
 	sched_clock_register(mxc_read_sched_clock, 32, c);
-	return clocksource_mmio_init(reg, "mxc_timer1", c, 200, 32,
-			clocksource_mmio_readl_up);
+	return clocksource_user_single_mmio_init(reg, "mxc_timer1", c, 200, 32,
+					 clocksource_mmio_readl_up);
 }
 
 /* clock event */
@@ -265,7 +265,7 @@ static irqreturn_t mxc_timer_interrupt(int irq, void *dev_id)
 
 	imxtm->gpt->gpt_irq_acknowledge(imxtm);
 
-	ced->event_handler(ced);
+	clockevents_handle_event(ced);
 
 	return IRQ_HANDLED;
 }
@@ -276,7 +276,7 @@ static int __init mxc_clockevent_init(struct imx_timer *imxtm)
 	struct irqaction *act = &imxtm->act;
 
 	ced->name = "mxc_timer1";
-	ced->features = CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_DYNIRQ;
+	ced->features = CLOCK_EVT_FEAT_ONESHOT | CLOCK_EVT_FEAT_DYNIRQ | CLOCK_EVT_FEAT_PIPELINE;
 	ced->set_state_shutdown = mxc_shutdown;
 	ced->set_state_oneshot = mxc_set_oneshot;
 	ced->tick_resume = mxc_shutdown;
diff --git a/drivers/cpuidle/cpuidle.c b/drivers/cpuidle/cpuidle.c
index 0895b988fa92..90e198b81f38 100644
--- a/drivers/cpuidle/cpuidle.c
+++ b/drivers/cpuidle/cpuidle.c
@@ -17,6 +17,7 @@
 #include <linux/pm_qos.h>
 #include <linux/cpu.h>
 #include <linux/cpuidle.h>
+#include <linux/irq_pipeline.h>
 #include <linux/ktime.h>
 #include <linux/hrtimer.h>
 #include <linux/module.h>
@@ -203,6 +204,21 @@ int cpuidle_enter_state(struct cpuidle_device *dev, struct cpuidle_driver *drv,
 	bool broadcast = !!(target_state->flags & CPUIDLE_FLAG_TIMER_STOP);
 	ktime_t time_start, time_end;
 
+	/*
+	 * A co-kernel running on the oob stage of the IRQ pipeline
+	 * may deny switching to a deeper C-state. If so, call the
+	 * default idle routine instead. If the co-kernel cannot bear
+	 * with the latency induced by the default idling operation,
+	 * then CPUIDLE is not usable and should be disabled at build
+	 * time. The inband stage is stalled on entry,
+	 * irq_cpuidle_enter() additionally returns with hard irqs
+	 * off.
+	 */
+	if (!irq_cpuidle_enter(dev, target_state)) {
+		default_idle_call();
+		return -EBUSY;
+	}
+
 	/*
 	 * Tell the time framework to switch to a broadcast timer because our
 	 * local timer will be shut down.  If a local timer is used from another
@@ -227,6 +243,7 @@ int cpuidle_enter_state(struct cpuidle_device *dev, struct cpuidle_driver *drv,
 
 	stop_critical_timings();
 	entered_state = target_state->enter(dev, drv, index);
+	hard_cond_local_irq_enable();
 	start_critical_timings();
 
 	sched_clock_idle_wakeup_event();
diff --git a/drivers/cpuidle/poll_state.c b/drivers/cpuidle/poll_state.c
index c8fa5f41dfc4..71b6d9d3ca2e 100644
--- a/drivers/cpuidle/poll_state.c
+++ b/drivers/cpuidle/poll_state.c
@@ -17,7 +17,7 @@ static int __cpuidle poll_idle(struct cpuidle_device *dev,
 
 	dev->poll_time_limit = false;
 
-	local_irq_enable();
+	local_irq_enable_full();
 	if (!current_set_polling_and_test()) {
 		unsigned int loop_count = 0;
 		u64 limit;
diff --git a/drivers/evl/Kconfig b/drivers/evl/Kconfig
new file mode 100644
index 000000000000..b80e4635695a
--- /dev/null
+++ b/drivers/evl/Kconfig
@@ -0,0 +1,13 @@
+menu "Out-of-band device drivers"
+
+config EVL_LATMUS
+	bool "Latency calibration and measurement"
+	depends on EVL
+	default y
+
+config EVL_HECTIC
+	bool "OOB context switching validator"
+	depends on EVL
+	default y
+
+endmenu
diff --git a/drivers/evl/Makefile b/drivers/evl/Makefile
new file mode 100644
index 000000000000..06d35e90ed27
--- /dev/null
+++ b/drivers/evl/Makefile
@@ -0,0 +1,2 @@
+obj-$(CONFIG_EVL_LATMUS)	+= latmus.o
+obj-$(CONFIG_EVL_HECTIC)	+= hectic.o
diff --git a/drivers/evl/hectic.c b/drivers/evl/hectic.c
new file mode 100644
index 000000000000..f7449faac495
--- /dev/null
+++ b/drivers/evl/hectic.c
@@ -0,0 +1,698 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt's switchtest driver, https://xenomai.org/
+ * Copyright (C) 2010 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>.
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/vmalloc.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
+#include <linux/semaphore.h>
+#include <linux/irq_work.h>
+#include <evl/thread.h>
+#include <evl/flag.h>
+#include <evl/file.h>
+#include <asm/evl/fptest.h>
+#include <uapi/evl/devices/hectic.h>
+
+#define HECTIC_KTHREAD      0x20000
+
+struct rtswitch_context;
+
+struct rtswitch_task {
+	struct hectic_task_index base;
+	struct evl_flag rt_synch;
+	struct semaphore nrt_synch;
+	struct evl_kthread kthread; /* For kernel-space real-time tasks. */
+	unsigned int last_switch;
+	struct rtswitch_context *ctx;
+};
+
+struct rtswitch_context {
+	struct rtswitch_task *tasks;
+	unsigned int tasks_count;
+	unsigned int next_index;
+	struct semaphore lock;
+	unsigned int cpu;
+	unsigned int switches_count;
+
+	unsigned long pause_us;
+	unsigned int next_task;
+	struct evl_timer wake_up_delay;
+
+	bool failed;
+	struct hectic_error error;
+
+	struct rtswitch_task *utask;
+	struct irq_work wake_utask;
+	struct evl_file efile;
+};
+
+static u32 fp_features;
+
+#define trace_fpu_breakage(__ctx)				\
+	do {							\
+		trace_evl_fpu_corrupt((__ctx)->error.fp_val);	\
+		trace_evl_trigger("hectic");			\
+	} while (0)
+
+static void handle_fpu_error(struct rtswitch_context *ctx,
+			     unsigned int fp_in, unsigned int fp_out,
+			     int bad_reg)
+{
+	struct rtswitch_task *cur = &ctx->tasks[ctx->error.last_switch.to];
+	unsigned int i;
+
+	printk(EVL_ERR "fpreg%d trashed: in=%u, out=%u\n",
+	       bad_reg, fp_in, fp_out);
+
+	ctx->failed = true;
+	ctx->error.fp_val = fp_out;
+	trace_fpu_breakage(ctx);
+
+	if ((cur->base.flags & HECTIC_OOB_WAIT) == HECTIC_OOB_WAIT)
+		for (i = 0; i < ctx->tasks_count; i++) {
+			struct rtswitch_task *task = &ctx->tasks[i];
+
+			/* Find the first non kernel-space task. */
+			if ((task->base.flags & HECTIC_KTHREAD))
+				continue;
+
+			/* Unblock it. */
+			switch(task->base.flags & HECTIC_OOB_WAIT) {
+			case HECTIC_INBAND_WAIT:
+				ctx->utask = task;
+				irq_work_queue(&ctx->wake_utask);
+				break;
+
+			case HECTIC_OOB_WAIT:
+				evl_raise_flag(&task->rt_synch);
+				break;
+			}
+
+			evl_hold_thread(&cur->kthread.thread, T_SUSP);
+		}
+}
+
+static int rtswitch_pend_rt(struct rtswitch_context *ctx,
+			    unsigned int idx)
+{
+	struct rtswitch_task *task;
+	int rc;
+
+	if (idx > ctx->tasks_count)
+		return -EINVAL;
+
+	task = &ctx->tasks[idx];
+	task->base.flags |= HECTIC_OOB_WAIT;
+
+	rc = evl_wait_flag(&task->rt_synch);
+	if (rc < 0)
+		return rc;
+
+	if (ctx->failed)
+		return 1;
+
+	return 0;
+}
+
+static void timed_wake_up(struct evl_timer *timer) /* hard irqs off */
+{
+	struct rtswitch_context *ctx;
+	struct rtswitch_task *task;
+
+	ctx = container_of(timer, struct rtswitch_context, wake_up_delay);
+	task = &ctx->tasks[ctx->next_task];
+
+	switch (task->base.flags & HECTIC_OOB_WAIT) {
+	case HECTIC_INBAND_WAIT:
+		ctx->utask = task;
+		irq_work_queue(&ctx->wake_utask);
+		break;
+
+	case HECTIC_OOB_WAIT:
+		evl_raise_flag(&task->rt_synch);
+	}
+}
+
+static int rtswitch_to_rt(struct rtswitch_context *ctx,
+			  unsigned int from_idx,
+			  unsigned int to_idx)
+{
+	struct rtswitch_task *from, *to;
+	int rc;
+
+	if (from_idx > ctx->tasks_count || to_idx > ctx->tasks_count)
+		return -EINVAL;
+
+	/* to == from is a special case which means
+	   "return to the previous task". */
+	if (to_idx == from_idx)
+		to_idx = ctx->error.last_switch.from;
+
+	from = &ctx->tasks[from_idx];
+	to = &ctx->tasks[to_idx];
+
+	from->base.flags |= HECTIC_OOB_WAIT;
+	from->last_switch = ++ctx->switches_count;
+	ctx->error.last_switch.from = from_idx;
+	ctx->error.last_switch.to = to_idx;
+	barrier();
+
+	if (ctx->pause_us) {
+		ctx->next_task = to_idx;
+		barrier();
+		evl_start_timer(&ctx->wake_up_delay,
+				evl_abs_timeout(&ctx->wake_up_delay,
+						ctx->pause_us * 1000),
+				EVL_INFINITE);
+		evl_disable_preempt();
+	} else
+		switch (to->base.flags & HECTIC_OOB_WAIT) {
+		case HECTIC_INBAND_WAIT:
+			ctx->utask = to;
+			barrier();
+			irq_work_queue(&ctx->wake_utask);
+			evl_disable_preempt();
+			break;
+
+		case HECTIC_OOB_WAIT:
+			evl_disable_preempt();
+			evl_raise_flag(&to->rt_synch);
+			break;
+
+		default:
+			return -EINVAL;
+		}
+
+	rc = evl_wait_flag(&from->rt_synch);
+	evl_enable_preempt();
+
+	if (rc < 0)
+		return rc;
+
+	if (ctx->failed)
+		return 1;
+
+	return 0;
+}
+
+static int rtswitch_pend_nrt(struct rtswitch_context *ctx,
+			     unsigned int idx)
+{
+	struct rtswitch_task *task;
+
+	if (idx > ctx->tasks_count)
+		return -EINVAL;
+
+	task = &ctx->tasks[idx];
+
+	task->base.flags &= ~HECTIC_OOB_WAIT;
+
+	if (down_interruptible(&task->nrt_synch))
+		return -EINTR;
+
+	if (ctx->failed)
+		return 1;
+
+	return 0;
+}
+
+static int rtswitch_to_nrt(struct rtswitch_context *ctx,
+			   unsigned int from_idx,
+			   unsigned int to_idx)
+{
+	struct rtswitch_task *from, *to;
+	unsigned int expected, fp_val;
+	bool fp_check;
+	int bad_reg;
+
+	if (from_idx > ctx->tasks_count || to_idx > ctx->tasks_count)
+		return -EINVAL;
+
+	/* to == from is a special case which means
+	   "return to the previous task". */
+	if (to_idx == from_idx)
+		to_idx = ctx->error.last_switch.from;
+
+	from = &ctx->tasks[from_idx];
+	to = &ctx->tasks[to_idx];
+
+	fp_check = ctx->switches_count == from->last_switch + 1
+		&& ctx->error.last_switch.from == to_idx
+		&& ctx->error.last_switch.to == from_idx;
+
+	from->base.flags &= ~HECTIC_OOB_WAIT;
+	from->last_switch = ++ctx->switches_count;
+	ctx->error.last_switch.from = from_idx;
+	ctx->error.last_switch.to = to_idx;
+	barrier();
+
+	if (ctx->pause_us) {
+		ctx->next_task = to_idx;
+		barrier();
+		evl_start_timer(&ctx->wake_up_delay,
+				evl_abs_timeout(&ctx->wake_up_delay,
+						ctx->pause_us * 1000),
+				EVL_INFINITE);
+	} else
+		switch (to->base.flags & HECTIC_OOB_WAIT) {
+		case HECTIC_INBAND_WAIT:
+		switch_to_nrt:
+			up(&to->nrt_synch);
+			break;
+
+		case HECTIC_OOB_WAIT:
+
+			if (!fp_check || !evl_begin_fpu())
+				goto signal_nofp;
+
+			expected = from_idx + 500 +
+				(ctx->switches_count % 4000000) * 1000;
+
+			evl_set_fpregs(fp_features, expected);
+			evl_raise_flag(&to->rt_synch);
+			fp_val = evl_check_fpregs(fp_features, expected, bad_reg);
+			evl_end_fpu();
+
+			if (down_interruptible(&from->nrt_synch))
+				return -EINTR;
+			if (ctx->failed)
+				return 1;
+			if (fp_val != expected) {
+				handle_fpu_error(ctx, expected, fp_val, bad_reg);
+				return 1;
+			}
+
+			from->base.flags &= ~HECTIC_OOB_WAIT;
+			from->last_switch = ++ctx->switches_count;
+			ctx->error.last_switch.from = from_idx;
+			ctx->error.last_switch.to = to_idx;
+			if ((to->base.flags & HECTIC_OOB_WAIT) == HECTIC_INBAND_WAIT)
+				goto switch_to_nrt;
+			expected = from_idx + 500 +
+				(ctx->switches_count % 4000000) * 1000;
+			barrier();
+
+			evl_begin_fpu();
+			evl_set_fpregs(fp_features, expected);
+			evl_raise_flag(&to->rt_synch);
+			fp_val = evl_check_fpregs(fp_features, expected, bad_reg);
+			evl_end_fpu();
+
+			if (down_interruptible(&from->nrt_synch))
+				return -EINTR;
+			if (ctx->failed)
+				return 1;
+			if (fp_val != expected) {
+				handle_fpu_error(ctx, expected, fp_val, bad_reg);
+				return 1;
+			}
+
+			from->base.flags &= ~HECTIC_OOB_WAIT;
+			from->last_switch = ++ctx->switches_count;
+			ctx->error.last_switch.from = from_idx;
+			ctx->error.last_switch.to = to_idx;
+			barrier();
+			if ((to->base.flags & HECTIC_OOB_WAIT) == HECTIC_INBAND_WAIT)
+				goto switch_to_nrt;
+
+		signal_nofp:
+			evl_raise_flag(&to->rt_synch);
+			break;
+
+		default:
+			return -EINVAL;
+		}
+
+	if (down_interruptible(&from->nrt_synch))
+		return -EINTR;
+
+	if (ctx->failed)
+		return 1;
+
+	return 0;
+}
+
+static int rtswitch_set_tasks_count(struct rtswitch_context *ctx, unsigned int count)
+{
+	struct rtswitch_task *tasks;
+
+	if (ctx->tasks_count == count)
+		return 0;
+
+	tasks = vmalloc(count * sizeof(*tasks));
+
+	if (!tasks)
+		return -ENOMEM;
+
+	down(&ctx->lock);
+
+	if (ctx->tasks)
+		vfree(ctx->tasks);
+
+	ctx->tasks = tasks;
+	ctx->tasks_count = count;
+	ctx->next_index = 0;
+
+	up(&ctx->lock);
+
+	return 0;
+}
+
+static int rtswitch_register_task(struct rtswitch_context *ctx,
+				struct hectic_task_index *arg,
+				int flags)
+{
+	struct rtswitch_task *t;
+
+	down(&ctx->lock);
+
+	if (ctx->next_index == ctx->tasks_count) {
+		up(&ctx->lock);
+		return -EBUSY;
+	}
+
+	arg->index = ctx->next_index;
+	t = &ctx->tasks[arg->index];
+	ctx->next_index++;
+	t->base.index = arg->index;
+	t->base.flags = (arg->flags & HECTIC_OOB_WAIT)|flags;
+	t->last_switch = 0;
+	sema_init(&t->nrt_synch, 0);
+	evl_init_flag(&t->rt_synch);
+
+	up(&ctx->lock);
+
+	return 0;
+}
+
+static void rtswitch_kthread(struct evl_kthread *kthread)
+{
+	struct rtswitch_context *ctx;
+	struct rtswitch_task *task;
+	unsigned int to, i = 0;
+
+	task = container_of(kthread, struct rtswitch_task, kthread);
+	ctx = task->ctx;
+
+	to = task->base.index;
+
+	rtswitch_pend_rt(ctx, task->base.index);
+
+	while (!evl_kthread_should_stop()) {
+		switch(i % 3) {
+		case 0:
+			/* to == from means "return to last task" */
+			rtswitch_to_rt(ctx, task->base.index, task->base.index);
+			break;
+		case 1:
+			if (++to == task->base.index)
+				++to;
+			if (to > ctx->tasks_count - 1)
+				to = 0;
+			if (to == task->base.index)
+				++to;
+
+			/* Fall through. */
+		case 2:
+			rtswitch_to_rt(ctx, task->base.index, to);
+		}
+		if (++i == 4000000)
+			i = 0;
+	}
+}
+
+static int rtswitch_create_kthread(struct rtswitch_context *ctx,
+				   struct hectic_task_index *ptask)
+{
+	struct rtswitch_task *task;
+	int err;
+
+	err = rtswitch_register_task(ctx, ptask, HECTIC_KTHREAD);
+	if (err)
+		return err;
+
+	task = &ctx->tasks[ptask->index];
+	task->ctx = ctx;
+	err = evl_run_kthread_on_cpu(&task->kthread, ctx->cpu,
+				     rtswitch_kthread, 1,
+				     "rtk%d@%u:%d",
+				     ptask->index, ctx->cpu,
+				     task_pid_nr(current));
+	/*
+	 * On error, clear the flag bits in order to avoid calling
+	 * evl_cancel_kthread() for an invalid thread in
+	 * hectic_release().
+	 */
+	if (err)
+		task->base.flags = 0;
+
+	return err;
+}
+
+static void rtswitch_utask_waker(struct irq_work *work)
+{
+	struct rtswitch_context *ctx;
+	ctx = container_of(work, struct rtswitch_context, wake_utask);
+	up(&ctx->utask->nrt_synch);
+}
+
+static long hectic_ioctl(struct file *filp, unsigned int cmd,
+			 unsigned long arg)
+{
+	struct rtswitch_context *ctx = filp->private_data;
+	struct hectic_switch_req fromto, __user *u_fromto;
+	struct hectic_task_index task, __user *u_task;
+	struct hectic_error __user *u_lerr;
+	__u32 count;
+	int err;
+
+	switch (cmd) {
+	case EVL_HECIOC_SET_TASKS_COUNT:
+		return rtswitch_set_tasks_count(ctx, arg);
+
+	case EVL_HECIOC_SET_CPU:
+		if (arg > num_online_cpus() - 1)
+			return -EINVAL;
+
+		ctx->cpu = arg;
+		return 0;
+
+	case EVL_HECIOC_SET_PAUSE:
+		ctx->pause_us = arg;
+		return 0;
+
+	case EVL_HECIOC_REGISTER_UTASK:
+		u_task = (typeof(u_task))arg;
+		err = copy_from_user(&task, u_task, sizeof(task));
+		if (err)
+			return -EFAULT;
+
+		err = rtswitch_register_task(ctx, &task, 0);
+		if (!err && copy_to_user(u_task, &task, sizeof(task)))
+			err = -EFAULT;
+
+		return err;
+
+	case EVL_HECIOC_CREATE_KTASK:
+		u_task = (typeof(u_task))arg;
+		err = copy_from_user(&task, u_task, sizeof(task));
+		if (err)
+			return -EFAULT;
+
+		err = rtswitch_create_kthread(ctx, &task);
+		if (!err && copy_to_user(u_task, &task, sizeof(task)))
+			err = -EFAULT;
+
+		return err;
+
+	case EVL_HECIOC_PEND:
+		u_task = (typeof(u_task))arg;
+		err = copy_from_user(&task, u_task, sizeof(task));
+		if (err)
+			return -EFAULT;
+
+		return rtswitch_pend_nrt(ctx, task.index);
+
+	case EVL_HECIOC_SWITCH_TO:
+		u_fromto = (typeof(u_fromto))arg;
+		err = copy_from_user(&fromto, u_fromto, sizeof(fromto));
+		if (err)
+			return -EFAULT;
+
+		return rtswitch_to_nrt(ctx, fromto.from, fromto.to);
+
+	case EVL_HECIOC_GET_SWITCHES_COUNT:
+		count = ctx->switches_count;
+		return copy_to_user((__u32 *)arg, &count, sizeof(count)) ?
+			-EFAULT : 0;
+
+	case EVL_HECIOC_GET_LAST_ERROR:
+		trace_fpu_breakage(ctx);
+		u_lerr = (typeof(u_lerr))arg;
+		return copy_to_user(u_lerr, &ctx->error, sizeof(ctx->error)) ?
+			-EFAULT : 0;
+	default:
+		return -ENOTTY;
+	}
+}
+
+static long hectic_oob_ioctl(struct file *filp, unsigned int cmd,
+			     unsigned long arg)
+{
+	struct rtswitch_context *ctx = filp->private_data;
+	struct hectic_switch_req fromto, __user *u_fromto;
+	struct hectic_task_index task, __user *u_task;
+	struct hectic_error __user *u_lerr;
+	int err;
+
+	switch (cmd) {
+	case EVL_HECIOC_PEND:
+		u_task = (typeof(u_task))arg;
+		err = raw_copy_from_user(&task, u_task, sizeof(task));
+		return err ? -EFAULT :
+			rtswitch_pend_rt(ctx, task.index);
+
+	case EVL_HECIOC_SWITCH_TO:
+		u_fromto = (typeof(u_fromto))arg;
+		err = raw_copy_from_user(&fromto, u_fromto, sizeof(fromto));
+		return err ? -EFAULT :
+			rtswitch_to_rt(ctx, fromto.from, fromto.to);
+
+	case EVL_HECIOC_GET_LAST_ERROR:
+		trace_fpu_breakage(ctx);
+		u_lerr = (typeof(u_lerr))arg;
+		return raw_copy_to_user(u_lerr, &ctx->error, sizeof(ctx->error)) ?
+			-EFAULT : 0;
+
+	default:
+		return -ENOTTY;
+	}
+}
+
+static int hectic_open(struct inode *inode, struct file *filp)
+{
+	struct rtswitch_context *ctx;
+	int ret;
+
+	ctx = kmalloc(sizeof(*ctx), GFP_KERNEL);
+	if (ctx == NULL)
+		return -ENOMEM;
+
+	ret = evl_open_file(&ctx->efile, filp);
+	if (ret) {
+		kfree(ctx);
+		return ret;
+	}
+
+	ctx->tasks = NULL;
+	ctx->tasks_count = ctx->next_index = ctx->cpu = ctx->switches_count = 0;
+	sema_init(&ctx->lock, 1);
+	ctx->failed = false;
+	ctx->error.last_switch.from = ctx->error.last_switch.to = -1;
+	ctx->pause_us = 0;
+
+	init_irq_work(&ctx->wake_utask, rtswitch_utask_waker);
+	evl_init_timer(&ctx->wake_up_delay, timed_wake_up);
+
+	filp->private_data = ctx;
+
+	return 0;
+}
+
+static int hectic_release(struct inode *inode, struct file *filp)
+{
+	struct rtswitch_context *ctx = filp->private_data;
+	unsigned int i;
+
+	evl_destroy_timer(&ctx->wake_up_delay);
+
+	if (ctx->tasks) {
+		set_cpus_allowed_ptr(current, cpumask_of(ctx->cpu));
+
+		for (i = 0; i < ctx->next_index; i++) {
+			struct rtswitch_task *task = &ctx->tasks[i];
+
+			if (task->base.flags & HECTIC_KTHREAD)
+				evl_cancel_kthread(&task->kthread);
+
+			evl_destroy_flag(&task->rt_synch);
+		}
+		vfree(ctx->tasks);
+	}
+
+	evl_release_file(&ctx->efile);
+	kfree(ctx);
+
+	return 0;
+}
+
+static struct class hectic_class = {
+	.name = "hectic",
+	.owner = THIS_MODULE,
+};
+
+static const struct file_operations hectic_fops = {
+	.open		= hectic_open,
+	.release	= hectic_release,
+	.unlocked_ioctl	= hectic_ioctl,
+	.oob_ioctl	= hectic_oob_ioctl,
+};
+
+static dev_t hectic_devt;
+
+static struct cdev hectic_cdev;
+
+static int __init hectic_init(void)
+{
+	struct device *dev;
+	int ret;
+
+	fp_features = evl_detect_fpu();
+
+	ret = class_register(&hectic_class);
+	if (ret)
+		return ret;
+
+	ret = alloc_chrdev_region(&hectic_devt, 0, 1, "hectic");
+	if (ret)
+		goto fail_region;
+
+	cdev_init(&hectic_cdev, &hectic_fops);
+	ret = cdev_add(&hectic_cdev, hectic_devt, 1);
+	if (ret)
+		goto fail_add;
+
+	dev = device_create(&hectic_class, NULL, hectic_devt, NULL, "hectic");
+	if (IS_ERR(dev)) {
+		ret = PTR_ERR(dev);
+		goto fail_dev;
+	}
+
+	return 0;
+
+fail_dev:
+	cdev_del(&hectic_cdev);
+fail_add:
+	unregister_chrdev_region(hectic_devt, 1);
+fail_region:
+	class_unregister(&hectic_class);
+
+	return ret;
+}
+module_init(hectic_init);
+
+static void __exit hectic_exit(void)
+{
+	device_destroy(&hectic_class, MKDEV(MAJOR(hectic_devt), 0));
+	cdev_del(&hectic_cdev);
+	class_unregister(&hectic_class);
+}
+module_exit(hectic_exit);
+
+MODULE_LICENSE("GPL");
diff --git a/drivers/evl/latmus.c b/drivers/evl/latmus.c
new file mode 100644
index 000000000000..286fc3b830ac
--- /dev/null
+++ b/drivers/evl/latmus.c
@@ -0,0 +1,1074 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt's autotune driver, https://xenomai.org/
+ * Copyright (C) 2014, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/sort.h>
+#include <linux/cdev.h>
+#include <linux/fs.h>
+#include <linux/fcntl.h>
+#include <linux/uaccess.h>
+#include <evl/file.h>
+#include <evl/flag.h>
+#include <evl/clock.h>
+#include <evl/thread.h>
+#include <evl/xbuf.h>
+#include <uapi/evl/devices/latmus.h>
+#include <trace/events/evl.h>
+
+#define TUNER_SAMPLING_TIME	500000000UL
+#define TUNER_WARMUP_STEPS	10
+#define TUNER_RESULT_STEPS	40
+
+#define progress(__runner, __fmt, __args...)				\
+	do {								\
+		if ((__runner)->verbosity > 1)				\
+			printk(EVL_INFO "latmus(%s) " __fmt "\n",	\
+			       (__runner)->name, ##__args);		\
+	} while (0)
+
+struct tuning_score {
+	int pmean;
+	int stddev;
+	int minlat;
+	unsigned int step;
+	unsigned int gravity;
+};
+
+struct runner_state {
+	ktime_t ideal;
+	int min_lat;
+	int max_lat;
+	int allmax_lat;
+	int prev_mean;
+	int prev_sqs;
+	int cur_sqs;
+	int sum;
+	unsigned int overruns;
+	unsigned int cur_samples;
+	unsigned int max_samples;
+};
+
+struct latmus_runner {
+	const char *name;
+	unsigned int (*get_gravity)(struct latmus_runner *runner);
+	void (*set_gravity)(struct latmus_runner *runner, unsigned int gravity);
+	unsigned int (*adjust_gravity)(struct latmus_runner *runner, int adjust);
+	int (*start)(struct latmus_runner *runner, ktime_t start_time);
+	void (*destroy)(struct latmus_runner *runner);
+	int (*add_sample)(struct latmus_runner *runner, ktime_t timestamp);
+	int (*run)(struct latmus_runner *runner, struct latmus_result *result);
+	void (*cleanup)(struct latmus_runner *runner);
+	struct runner_state state;
+	struct evl_flag done;
+	int status;
+	int verbosity;
+	ktime_t period;
+	union {
+		struct {
+			struct tuning_score scores[TUNER_RESULT_STEPS];
+			int nscores;
+		};
+		struct {
+			unsigned int warmup_samples;
+			unsigned int warmup_limit;
+			int xfd;
+			struct evl_xbuf *xbuf;
+			u32 hcells;
+			s32 *histogram;
+		};
+	};
+};
+
+struct irq_runner {
+	struct evl_timer timer;
+	struct latmus_runner runner;
+};
+
+struct kthread_runner {
+	struct evl_kthread kthread;
+	struct evl_flag barrier;
+	ktime_t start_time;
+	struct latmus_runner runner;
+};
+
+struct uthread_runner {
+	struct evl_timer timer;
+	struct evl_flag pulse;
+	struct latmus_runner runner;
+};
+
+struct latmus_state {
+	struct evl_file efile;
+	struct latmus_runner *runner;
+};
+
+static inline void init_runner_base(struct latmus_runner *runner)
+{
+	evl_init_flag(&runner->done);
+	runner->status = 0;
+}
+
+static inline void destroy_runner_base(struct latmus_runner *runner)
+{
+	evl_destroy_flag(&runner->done);
+	if (runner->cleanup)
+		runner->cleanup(runner);
+}
+
+static inline void done_sampling(struct latmus_runner *runner,
+				 int status)
+{
+	runner->status = status;
+	evl_raise_flag(&runner->done);
+}
+
+static void send_measurement(struct latmus_runner *runner)
+{
+	struct runner_state *state = &runner->state;
+	struct latmus_measurement meas;
+
+	meas.min_lat = state->min_lat;
+	meas.max_lat = state->max_lat;
+	meas.sum_lat = state->sum;
+	meas.overruns = state->overruns;
+	meas.samples = state->cur_samples;
+	evl_write_xbuf(runner->xbuf, &meas, sizeof(meas), O_NONBLOCK);
+
+	/* Reset counters for next round. */
+	state->min_lat = INT_MAX;
+	state->max_lat = INT_MIN;
+	state->sum = 0;
+	state->overruns = 0;
+	state->cur_samples = 0;
+}
+
+static int add_measurement_sample(struct latmus_runner *runner,
+				  ktime_t timestamp)
+{
+	struct runner_state *state = &runner->state;
+	ktime_t period = runner->period;
+	int delta, cell;
+
+	/* Skip samples in warmup time. */
+	if (runner->warmup_samples < runner->warmup_limit) {
+		runner->warmup_samples++;
+		state->ideal = ktime_add(state->ideal, period);
+		return 0;
+	}
+
+	delta = (int)ktime_to_ns(ktime_sub(timestamp, state->ideal));
+	if (delta < state->min_lat)
+		state->min_lat = delta;
+	if (delta > state->max_lat)
+		state->max_lat = delta;
+	if (delta > state->allmax_lat) {
+		state->allmax_lat = delta;
+		trace_evl_latspot(delta);
+		trace_evl_trigger("latmus");
+	}
+
+	if (runner->histogram) {
+		cell = (delta < 0 ? -delta : delta) / 1000; /* us */
+		if (cell >= runner->hcells)
+			cell = runner->hcells - 1;
+		runner->histogram[cell]++;
+	}
+
+	state->sum += delta;
+	state->ideal = ktime_add(state->ideal, period);
+
+	while (delta > 0 &&
+		(unsigned int)delta > ktime_to_ns(period)) { /* period > 0 */
+		state->overruns++;
+		state->ideal = ktime_add(state->ideal, period);
+		delta -= ktime_to_ns(period);
+	}
+
+	if (++state->cur_samples >= state->max_samples)
+		send_measurement(runner);
+
+	return 0;	/* Always keep going. */
+}
+
+static int add_tuning_sample(struct latmus_runner *runner,
+			     ktime_t timestamp)
+{
+	struct runner_state *state = &runner->state;
+	int n, delta, cur_mean;
+
+	delta = (int)ktime_to_ns(ktime_sub(timestamp, state->ideal));
+	if (delta < state->min_lat)
+		state->min_lat = delta;
+	if (delta > state->max_lat)
+		state->max_lat = delta;
+	if (delta < 0)
+		delta = 0;
+
+	state->sum += delta;
+	state->ideal = ktime_add(state->ideal, runner->period);
+	n = ++state->cur_samples;
+
+	/* TAOCP (Vol 2), single-pass computation of variance. */
+	if (n == 1)
+		state->prev_mean = delta;
+	else {
+		cur_mean = state->prev_mean + (delta - state->prev_mean) / n;
+                state->cur_sqs = state->prev_sqs + (delta - state->prev_mean)
+			* (delta - cur_mean);
+                state->prev_mean = cur_mean;
+                state->prev_sqs = state->cur_sqs;
+	}
+
+	if (n >= state->max_samples) {
+		done_sampling(runner, 0);
+		return 1;	/* Finished. */
+	}
+
+	return 0;	/* Keep going. */
+}
+
+static void latmus_irq_handler(struct evl_timer *timer) /* hard irqs off */
+{
+	struct irq_runner *irq_runner;
+	ktime_t now;
+
+	irq_runner = container_of(timer, struct irq_runner, timer);
+	now = evl_read_clock(&evl_mono_clock);
+	if (irq_runner->runner.add_sample(&irq_runner->runner, now))
+		evl_stop_timer(timer);
+}
+
+static void destroy_irq_runner(struct latmus_runner *runner)
+{
+	struct irq_runner *irq_runner;
+
+	irq_runner = container_of(runner, struct irq_runner, runner);
+	evl_destroy_timer(&irq_runner->timer);
+	destroy_runner_base(runner);
+	kfree(irq_runner);
+}
+
+static unsigned int get_irq_gravity(struct latmus_runner *runner)
+{
+	return evl_mono_clock.gravity.irq;
+}
+
+static void set_irq_gravity(struct latmus_runner *runner, unsigned int gravity)
+{
+	evl_mono_clock.gravity.irq = gravity;
+}
+
+static unsigned int adjust_irq_gravity(struct latmus_runner *runner, int adjust)
+{
+	return evl_mono_clock.gravity.irq += adjust;
+}
+
+static int start_irq_runner(struct latmus_runner *runner,
+			    ktime_t start_time)
+{
+	struct irq_runner *irq_runner;
+
+	irq_runner = container_of(runner, struct irq_runner, runner);
+
+	evl_start_timer(&irq_runner->timer, start_time, runner->period);
+
+	return 0;
+}
+
+static struct latmus_runner *create_irq_runner(int cpu)
+{
+	struct irq_runner *irq_runner;
+
+	irq_runner = kzalloc(sizeof(*irq_runner), GFP_KERNEL);
+	if (irq_runner == NULL)
+		return NULL;
+
+	irq_runner->runner = (struct latmus_runner){
+		.name = "irqhand",
+		.destroy = destroy_irq_runner,
+		.get_gravity = get_irq_gravity,
+		.set_gravity = set_irq_gravity,
+		.adjust_gravity = adjust_irq_gravity,
+		.start = start_irq_runner,
+	};
+
+	init_runner_base(&irq_runner->runner);
+	evl_init_timer_on_cpu(&irq_runner->timer, cpu, latmus_irq_handler);
+
+	return &irq_runner->runner;
+}
+
+void kthread_handler(struct evl_kthread *kthread)
+{
+	struct kthread_runner *k_runner;
+	ktime_t now;
+	int ret = 0;
+
+	k_runner = container_of(kthread, struct kthread_runner, kthread);
+
+	for (;;) {
+		if (evl_kthread_should_stop())
+			break;
+
+		ret = evl_wait_flag(&k_runner->barrier);
+		if (ret)
+			break;
+
+		ret = evl_set_thread_period(&evl_mono_clock,
+					k_runner->start_time,
+					k_runner->runner.period);
+		if (ret)
+			break;
+
+		for (;;) {
+			ret = evl_wait_thread_period(NULL);
+			if (ret && ret != -ETIMEDOUT)
+				goto out;
+
+			now = evl_read_clock(&evl_mono_clock);
+			if (k_runner->runner.add_sample(&k_runner->runner, now)) {
+				evl_set_thread_period(NULL, 0, 0);
+				break;
+			}
+		}
+	}
+out:
+	done_sampling(&k_runner->runner, ret);
+	evl_cancel_kthread(&k_runner->kthread);
+}
+
+static void destroy_kthread_runner(struct latmus_runner *runner)
+{
+	struct kthread_runner *k_runner;
+
+	k_runner = container_of(runner, struct kthread_runner, runner);
+	evl_cancel_kthread(&k_runner->kthread);
+	evl_destroy_flag(&k_runner->barrier);
+	destroy_runner_base(runner);
+	kfree(k_runner);
+}
+
+static unsigned int get_kthread_gravity(struct latmus_runner *runner)
+{
+	return evl_mono_clock.gravity.kernel;
+}
+
+static void
+set_kthread_gravity(struct latmus_runner *runner, unsigned int gravity)
+{
+	evl_mono_clock.gravity.kernel = gravity;
+}
+
+static unsigned int
+adjust_kthread_gravity(struct latmus_runner *runner, int adjust)
+{
+	return evl_mono_clock.gravity.kernel += adjust;
+}
+
+static int start_kthread_runner(struct latmus_runner *runner,
+				ktime_t start_time)
+{
+	struct kthread_runner *k_runner;
+
+	k_runner = container_of(runner, struct kthread_runner, runner);
+
+	k_runner->start_time = start_time;
+	evl_raise_flag(&k_runner->barrier);
+
+	return 0;
+}
+
+static struct latmus_runner *
+create_kthread_runner(int priority, int cpu)
+{
+	struct kthread_runner *k_runner;
+	int ret;
+
+	k_runner = kzalloc(sizeof(*k_runner), GFP_KERNEL);
+	if (k_runner == NULL)
+		return NULL;
+
+	k_runner->runner = (struct latmus_runner){
+		.name = "kthread",
+		.destroy = destroy_kthread_runner,
+		.get_gravity = get_kthread_gravity,
+		.set_gravity = set_kthread_gravity,
+		.adjust_gravity = adjust_kthread_gravity,
+		.start = start_kthread_runner,
+	};
+
+	init_runner_base(&k_runner->runner);
+	evl_init_flag(&k_runner->barrier);
+
+	ret = evl_run_kthread_on_cpu(&k_runner->kthread, cpu,
+				     kthread_handler,
+				     priority, "latmus-klat:%d",
+				     task_pid_nr(current));
+	if (ret) {
+		kfree(k_runner);
+		return ERR_PTR(ret);
+	}
+
+	return &k_runner->runner;
+}
+
+static void latmus_pulse_handler(struct evl_timer *timer)
+{
+	struct uthread_runner *u_runner;
+
+	u_runner = container_of(timer, struct uthread_runner, timer);
+	evl_raise_flag(&u_runner->pulse);
+}
+
+static void destroy_uthread_runner(struct latmus_runner *runner)
+{
+	struct uthread_runner *u_runner;
+
+	u_runner = container_of(runner, struct uthread_runner, runner);
+	evl_destroy_timer(&u_runner->timer);
+	evl_destroy_flag(&u_runner->pulse);
+	destroy_runner_base(runner);
+	kfree(u_runner);
+}
+
+static unsigned int get_uthread_gravity(struct latmus_runner *runner)
+{
+	return evl_mono_clock.gravity.user;
+}
+
+static void set_uthread_gravity(struct latmus_runner *runner,
+				unsigned int gravity)
+{
+	evl_mono_clock.gravity.user = gravity;
+}
+
+static unsigned int
+adjust_uthread_gravity(struct latmus_runner *runner, int adjust)
+{
+	return evl_mono_clock.gravity.user += adjust;
+}
+
+static int start_uthread_runner(struct latmus_runner *runner,
+				ktime_t start_time)
+{
+	struct uthread_runner *u_runner;
+
+	u_runner = container_of(runner, struct uthread_runner, runner);
+
+	evl_start_timer(&u_runner->timer, start_time, runner->period);
+
+	return 0;
+}
+
+static int add_uthread_sample(struct latmus_runner *runner,
+			      ktime_t user_timestamp)
+{
+	struct uthread_runner *u_runner;
+	int ret;
+
+	u_runner = container_of(runner, struct uthread_runner, runner);
+
+	if (user_timestamp &&
+	    u_runner->runner.add_sample(runner, user_timestamp)) {
+		evl_stop_timer(&u_runner->timer);
+		/* Tell the caller to park until next round. */
+		ret = -EPIPE;
+	} else
+		ret = evl_wait_flag(&u_runner->pulse);
+
+	return ret;
+}
+
+static struct latmus_runner *create_uthread_runner(int cpu)
+{
+	struct uthread_runner *u_runner;
+
+	u_runner = kzalloc(sizeof(*u_runner), GFP_KERNEL);
+	if (u_runner == NULL)
+		return NULL;
+
+	u_runner->runner = (struct latmus_runner){
+		.name = "uthread",
+		.destroy = destroy_uthread_runner,
+		.get_gravity = get_uthread_gravity,
+		.set_gravity = set_uthread_gravity,
+		.adjust_gravity = adjust_uthread_gravity,
+		.start = start_uthread_runner,
+	};
+
+	init_runner_base(&u_runner->runner);
+	evl_init_timer_on_cpu(&u_runner->timer, cpu, latmus_pulse_handler);
+	evl_set_timer_gravity(&u_runner->timer, EVL_TIMER_UGRAVITY);
+	evl_init_flag(&u_runner->pulse);
+
+	return &u_runner->runner;
+}
+
+static inline void build_score(struct latmus_runner *runner, int step)
+{
+	struct runner_state *state = &runner->state;
+	unsigned int variance, n;
+
+	n = state->cur_samples;
+	runner->scores[step].pmean = state->sum / n;
+	variance = n > 1 ? state->cur_sqs / (n - 1) : 0;
+	runner->scores[step].stddev = int_sqrt(variance);
+	runner->scores[step].minlat = state->min_lat;
+	runner->scores[step].gravity = runner->get_gravity(runner);
+	runner->scores[step].step = step;
+	runner->nscores++;
+}
+
+static int cmp_score_mean(const void *c, const void *r)
+{
+	const struct tuning_score *sc = c, *sr = r;
+	return sc->pmean - sr->pmean;
+}
+
+static int cmp_score_stddev(const void *c, const void *r)
+{
+	const struct tuning_score *sc = c, *sr = r;
+	return sc->stddev - sr->stddev;
+}
+
+static int cmp_score_minlat(const void *c, const void *r)
+{
+	const struct tuning_score *sc = c, *sr = r;
+	return sc->minlat - sr->minlat;
+}
+
+static int cmp_score_gravity(const void *c, const void *r)
+{
+	const struct tuning_score *sc = c, *sr = r;
+	return sc->gravity - sr->gravity;
+}
+
+static int filter_mean(struct latmus_runner *runner)
+{
+	sort(runner->scores, runner->nscores,
+	     sizeof(struct tuning_score),
+	     cmp_score_mean, NULL);
+
+	/* Top half of the best pondered means. */
+
+	return (runner->nscores + 1) / 2;
+}
+
+static int filter_stddev(struct latmus_runner *runner)
+{
+	sort(runner->scores, runner->nscores,
+	     sizeof(struct tuning_score),
+	     cmp_score_stddev, NULL);
+
+	/* Top half of the best standard deviations. */
+
+	return (runner->nscores + 1) / 2;
+}
+
+static int filter_minlat(struct latmus_runner *runner)
+{
+	sort(runner->scores, runner->nscores,
+	     sizeof(struct tuning_score),
+	     cmp_score_minlat, NULL);
+
+	/* Top half of the minimum latencies. */
+
+	return (runner->nscores + 1) / 2;
+}
+
+static int filter_gravity(struct latmus_runner *runner)
+{
+	sort(runner->scores, runner->nscores,
+	     sizeof(struct tuning_score),
+	     cmp_score_gravity, NULL);
+
+	/* Smallest gravity required among the shortest latencies. */
+
+	return runner->nscores;
+}
+
+static void dump_scores(struct latmus_runner *runner)
+{
+	int n;
+
+	if (runner->verbosity < 2)
+		return;
+
+	for (n = 0; n < runner->nscores; n++)
+		printk(EVL_INFO
+		       ".. S%.2d pmean=%d stddev=%d minlat=%d gravity=%u\n",
+		       runner->scores[n].step,
+		       runner->scores[n].pmean,
+		       runner->scores[n].stddev,
+		       runner->scores[n].minlat,
+		       runner->scores[n].gravity);
+}
+
+static inline void filter_score(struct latmus_runner *runner,
+				int (*filter)(struct latmus_runner *runner))
+{
+	runner->nscores = filter(runner);
+	dump_scores(runner);
+}
+
+static int measure_continously(struct latmus_runner *runner)
+{
+	struct runner_state *state = &runner->state;
+	ktime_t period = runner->period;
+	struct evl_file *sfilp;
+	struct evl_xbuf *xbuf;
+	int ret;
+
+	/*
+	 * Get a reference on the cross-buffer we should use to send
+	 * interval results to userland. This may delay the disposal
+	 * of such element when the last in-band file reference is
+	 * dropped until we are done with OOB operations
+	 * (evl_put_xbuf).
+	 */
+	xbuf = evl_get_xbuf(runner->xfd, &sfilp);
+	if (xbuf == NULL)
+		return -EBADF;	/* muhh? */
+
+	state->max_samples = ONE_BILLION / (int)ktime_to_ns(period);
+	runner->add_sample = add_measurement_sample;
+	runner->xbuf = xbuf;
+	state->min_lat = INT_MAX;
+	state->max_lat = INT_MIN;
+	state->allmax_lat = INT_MIN;
+	state->sum = 0;
+	state->overruns = 0;
+	state->cur_samples = 0;
+	state->ideal = ktime_add(evl_read_clock(&evl_mono_clock), period);
+
+	ret = runner->start(runner, state->ideal);
+	if (ret)
+		goto out;
+
+	ret = evl_wait_flag(&runner->done) ?: runner->status;
+out:
+	evl_put_xbuf(sfilp);
+
+	return ret;
+}
+
+static int tune_gravity(struct latmus_runner *runner)
+{
+	struct runner_state *state = &runner->state;
+	int ret, step, gravity_limit, adjust;
+	ktime_t period = runner->period;
+	unsigned int orig_gravity;
+
+	state->max_samples = TUNER_SAMPLING_TIME / (int)ktime_to_ns(period);
+	orig_gravity = runner->get_gravity(runner);
+	runner->add_sample = add_tuning_sample;
+	runner->set_gravity(runner, 0);
+	runner->nscores = 0;
+	adjust = 500; /* Gravity adjustment step */
+	gravity_limit = 0;
+	progress(runner, "warming up...");
+
+	for (step = 0; step < TUNER_WARMUP_STEPS + TUNER_RESULT_STEPS; step++) {
+		state->ideal = ktime_add_ns(evl_read_clock(&evl_mono_clock),
+			    ktime_to_ns(period) * TUNER_WARMUP_STEPS);
+		state->min_lat = INT_MAX;
+		state->max_lat = INT_MIN;
+		state->prev_mean = 0;
+		state->prev_sqs = 0;
+		state->cur_sqs = 0;
+		state->sum = 0;
+		state->cur_samples = 0;
+
+		ret = runner->start(runner, state->ideal);
+		if (ret)
+			goto fail;
+
+		/* Runner stops when posting. */
+		ret = evl_wait_flag(&runner->done);
+		if (ret)
+			goto fail;
+
+		ret = runner->status;
+		if (ret)
+			goto fail;
+
+		if (step < TUNER_WARMUP_STEPS) {
+			if (state->min_lat > gravity_limit) {
+				gravity_limit = state->min_lat;
+				progress(runner, "gravity limit set to %u ns (%d)",
+					 gravity_limit, state->min_lat);
+			}
+			continue;
+		}
+
+		if (state->min_lat < 0) {
+			if (runner->get_gravity(runner) < -state->min_lat) {
+				printk(EVL_WARNING
+				       "latmus(%s) failed with early shot (%d ns)\n",
+				       runner->name,
+				       -(runner->get_gravity(runner) + state->min_lat));
+				ret = -EAGAIN;
+				goto fail;
+			}
+			break;
+		}
+
+		if (((step - TUNER_WARMUP_STEPS) % 5) == 0)
+			progress(runner, "calibrating... (slice %d)",
+				 (step - TUNER_WARMUP_STEPS) / 5 + 1);
+
+		build_score(runner, step - TUNER_WARMUP_STEPS);
+
+		/*
+		 * Anticipating by more than the minimum latency
+		 * detected at warmup would make no sense: cap the
+		 * gravity we may try.
+		 */
+		if (runner->adjust_gravity(runner, adjust) > gravity_limit) {
+			progress(runner, "beyond gravity limit at %u ns",
+				 runner->get_gravity(runner));
+			break;
+		}
+	}
+
+	progress(runner, "calibration scores");
+	dump_scores(runner);
+	progress(runner, "pondered mean filter");
+	filter_score(runner, filter_mean);
+	progress(runner, "standard deviation filter");
+	filter_score(runner, filter_stddev);
+	progress(runner, "minimum latency filter");
+	filter_score(runner, filter_minlat);
+	progress(runner, "gravity filter");
+	filter_score(runner, filter_gravity);
+	runner->set_gravity(runner, runner->scores[0].gravity);
+
+	return 0;
+fail:
+	runner->set_gravity(runner, orig_gravity);
+
+	return ret;
+}
+
+static int setup_tuning(struct latmus_runner *runner,
+			struct latmus_setup *setup)
+{
+	runner->verbosity = setup->u.tune.verbosity;
+	runner->period = setup->period;
+
+	return 0;
+}
+
+static int run_tuning(struct latmus_runner *runner,
+		      struct latmus_result *result)
+{
+	__u32 gravity;
+	int ret;
+
+	ret = tune_gravity(runner);
+	if (ret)
+		return ret;
+
+	gravity = runner->get_gravity(runner);
+
+	if (raw_copy_to_user(result->data, &gravity, sizeof(gravity)))
+		return -EFAULT;
+
+	return 0;
+}
+
+static int setup_measurement(struct latmus_runner *runner,
+			     struct latmus_setup *setup)
+{
+	runner->period = setup->period;
+	runner->warmup_limit = ONE_BILLION / (int)ktime_to_ns(setup->period); /* 1s warmup */
+	runner->xfd = setup->u.measure.xfd;
+	runner->histogram = NULL;
+	runner->hcells = setup->u.measure.hcells;
+	if (runner->hcells == 0)
+		return 0;
+
+	if (runner->hcells > 1000) /* LART */
+		return -EINVAL;
+
+	runner->histogram = kzalloc(runner->hcells * sizeof(s32),
+				    GFP_KERNEL);
+
+	return runner->histogram ? 0 : -ENOMEM;
+}
+
+static int run_measurement(struct latmus_runner *runner,
+			   struct latmus_result *result)
+{
+	struct runner_state *state = &runner->state;
+	struct latmus_measurement_result mr;
+	struct latmus_measurement last;
+	size_t len;
+	int ret;
+
+	if (result->len != sizeof(mr))
+		return -EINVAL;
+
+	if (raw_copy_from_user(&mr, result->data, sizeof(mr)))
+		return -EFAULT;
+
+	ret = measure_continously(runner);
+	if (ret != -EINTR)
+		return ret;
+
+	/*
+	 * Copy the last bulk of consolidated measurements and the
+	 * histogram distribution data back to userland.
+	 */
+	last.min_lat = state->min_lat;
+	last.max_lat = state->max_lat;
+	last.sum_lat = state->sum;
+	last.overruns = state->overruns;
+	last.samples = state->cur_samples;
+	if (raw_copy_to_user(mr.last, &last, sizeof(last)))
+		return -EFAULT;
+
+	if (runner->histogram) {
+		len = runner->hcells * sizeof(s32);
+		if (len > mr.len)
+			len = result->len;
+		if (len > 0 &&
+		    raw_copy_to_user(mr.histogram, runner->histogram, len))
+			return -EFAULT;
+	}
+
+	return 0;
+}
+
+static void cleanup_measurement(struct latmus_runner *runner)
+{
+	if (runner->histogram)
+		kfree(runner->histogram);
+}
+
+static long latmus_ioctl(struct file *filp, unsigned int cmd,
+			 unsigned long arg)
+{
+	struct latmus_state *ls = filp->private_data;
+	int (*setup)(struct latmus_runner *runner,
+		     struct latmus_setup *setup_data);
+	int (*run)(struct latmus_runner *runner,
+		   struct latmus_result *result);
+	void (*cleanup)(struct latmus_runner *runner);
+	struct latmus_setup setup_data;
+	struct latmus_runner *runner;
+	int ret;
+
+	switch (cmd) {
+	case EVL_LATIOC_RESET:
+		evl_reset_clock_gravity(&evl_mono_clock);
+		return 0;
+	case EVL_LATIOC_TUNE:
+		setup = setup_tuning;
+		run = run_tuning;
+		cleanup = NULL;
+		break;
+	case EVL_LATIOC_MEASURE:
+		setup = setup_measurement;
+		run = run_measurement;
+		cleanup = cleanup_measurement;
+		break;
+	default:
+		return -ENOTTY;
+	}
+
+	if (copy_from_user(&setup_data, (struct latmus_setup __user *)arg,
+			   sizeof(setup_data)))
+		return -EFAULT;
+
+	if (setup_data.period <= 0 ||
+	    setup_data.period > ONE_BILLION)
+		return -EINVAL;
+
+	if (setup_data.priority < 1 ||
+	    setup_data.priority > EVL_FIFO_MAX_PRIO)
+		return -EINVAL;
+
+	if (setup_data.cpu >= num_possible_cpus() ||
+		!is_evl_cpu(setup_data.cpu))
+		return -EINVAL;
+
+	/* Clear previous runner. */
+	runner = ls->runner;
+	if (runner) {
+		runner->destroy(runner);
+		ls->runner = NULL;
+	}
+
+	switch (setup_data.type) {
+	case EVL_LAT_IRQ:
+		runner = create_irq_runner(setup_data.cpu);
+		break;
+	case EVL_LAT_KERN:
+		runner = create_kthread_runner(setup_data.priority,
+					       setup_data.cpu);
+		break;
+	case EVL_LAT_USER:
+		runner = create_uthread_runner(setup_data.cpu);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	if (IS_ERR(runner))
+		return PTR_ERR(runner);
+
+	ret = setup(runner, &setup_data);
+	if (ret) {
+		runner->destroy(runner);
+		return ret;
+	}
+
+	runner->run = run;
+	runner->cleanup = cleanup;
+	ls->runner = runner;
+
+	return 0;
+}
+
+static long latmus_oob_ioctl(struct file *filp, unsigned int cmd,
+			     unsigned long arg)
+{
+	struct latmus_state *ls = filp->private_data;
+	struct latmus_runner *runner;
+	struct latmus_result result;
+	__u64 timestamp;
+	int ret;
+
+	runner = ls->runner;
+	if (runner == NULL)
+		return -EAGAIN;
+
+	switch (cmd) {
+	case EVL_LATIOC_RUN:
+		ret = raw_copy_from_user(&result,
+				 (struct latmus_result __user *)arg,
+				 sizeof(result));
+		if (ret)
+			return -EFAULT;
+		ret = runner->run(runner, &result);
+		break;
+	case EVL_LATIOC_PULSE:
+		if (runner->start != start_uthread_runner)
+			return -EINVAL;
+		ret = raw_copy_from_user(&timestamp, (__u64 __user *)arg,
+					 sizeof(timestamp));
+		if (ret)
+			return -EFAULT;
+		ret = add_uthread_sample(runner, ns_to_ktime(timestamp));
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static int latmus_open(struct inode *inode, struct file *filp)
+{
+	struct latmus_state *ls;
+	int ret;
+
+	ls = kzalloc(sizeof(*ls), GFP_KERNEL);
+	if (ls == NULL)
+		return -ENOMEM;
+
+	ret = evl_open_file(&ls->efile, filp);
+	if (ret)
+		kfree(ls);
+
+	filp->private_data = ls;
+
+	return ret;
+}
+
+static int latmus_release(struct inode *inode, struct file *filp)
+{
+	struct latmus_state *ls = filp->private_data;
+	struct latmus_runner *runner;
+
+	runner = ls->runner;
+	if (runner)
+		runner->destroy(runner);
+
+	evl_release_file(&ls->efile);
+	kfree(ls);
+
+	return 0;
+}
+
+static struct class latmus_class = {
+	.name = "latmus",
+	.owner = THIS_MODULE,
+};
+
+static const struct file_operations latmus_fops = {
+	.open		= latmus_open,
+	.release	= latmus_release,
+	.unlocked_ioctl	= latmus_ioctl,
+	.oob_ioctl	= latmus_oob_ioctl,
+};
+
+static dev_t latmus_devt;
+
+static struct cdev latmus_cdev;
+
+static int __init latmus_init(void)
+{
+	struct device *dev;
+	int ret;
+
+	ret = class_register(&latmus_class);
+	if (ret)
+		return ret;
+
+	ret = alloc_chrdev_region(&latmus_devt, 0, 1, "latmus");
+	if (ret)
+		goto fail_region;
+
+	cdev_init(&latmus_cdev, &latmus_fops);
+	ret = cdev_add(&latmus_cdev, latmus_devt, 1);
+	if (ret)
+		goto fail_add;
+
+	dev = device_create(&latmus_class, NULL, latmus_devt, NULL, "latmus");
+	if (IS_ERR(dev)) {
+		ret = PTR_ERR(dev);
+		goto fail_dev;
+	}
+
+	return 0;
+
+fail_dev:
+	cdev_del(&latmus_cdev);
+fail_add:
+	unregister_chrdev_region(latmus_devt, 1);
+fail_region:
+	class_unregister(&latmus_class);
+
+	return ret;
+}
+module_init(latmus_init);
+
+static void __exit latmus_exit(void)
+{
+	device_destroy(&latmus_class, MKDEV(MAJOR(latmus_devt), 0));
+	cdev_del(&latmus_cdev);
+	class_unregister(&latmus_class);
+}
+module_exit(latmus_exit);
+
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpio/gpio-mxc.c b/drivers/gpio/gpio-mxc.c
index 7907a8755866..323da64b4153 100644
--- a/drivers/gpio/gpio-mxc.c
+++ b/drivers/gpio/gpio-mxc.c
@@ -359,7 +359,7 @@ static int mxc_gpio_init_gc(struct mxc_gpio_port *port, int irq_base)
 	ct->chip.irq_unmask = irq_gc_mask_set_bit;
 	ct->chip.irq_set_type = gpio_set_irq_type;
 	ct->chip.irq_set_wake = gpio_set_wake_irq;
-	ct->chip.flags = IRQCHIP_MASK_ON_SUSPEND;
+	ct->chip.flags = IRQCHIP_MASK_ON_SUSPEND | IRQCHIP_PIPELINE_SAFE;
 	ct->regs.ack = GPIO_ISR;
 	ct->regs.mask = GPIO_IMR;
 
diff --git a/drivers/gpio/gpio-omap.c b/drivers/gpio/gpio-omap.c
index d0f27084a942..d9859ce4db50 100644
--- a/drivers/gpio/gpio-omap.c
+++ b/drivers/gpio/gpio-omap.c
@@ -54,7 +54,7 @@ struct gpio_bank {
 	u32 saved_datain;
 	u32 level_mask;
 	u32 toggle_mask;
-	raw_spinlock_t lock;
+	hard_spinlock_t lock;
 	raw_spinlock_t wa_lock;
 	struct gpio_chip chip;
 	struct clk *dbck;
@@ -1374,7 +1374,7 @@ static int omap_gpio_probe(struct platform_device *pdev)
 	irqc->irq_bus_lock = omap_gpio_irq_bus_lock,
 	irqc->irq_bus_sync_unlock = gpio_irq_bus_sync_unlock,
 	irqc->name = dev_name(&pdev->dev);
-	irqc->flags = IRQCHIP_MASK_ON_SUSPEND;
+	irqc->flags = IRQCHIP_MASK_ON_SUSPEND | IRQCHIP_PIPELINE_SAFE;
 	irqc->parent_device = dev;
 
 	bank->irq = platform_get_irq(pdev, 0);
diff --git a/drivers/gpio/gpio-pl061.c b/drivers/gpio/gpio-pl061.c
index 722ce5cf861e..72914aba9f78 100644
--- a/drivers/gpio/gpio-pl061.c
+++ b/drivers/gpio/gpio-pl061.c
@@ -47,7 +47,7 @@ struct pl061_context_save_regs {
 #endif
 
 struct pl061 {
-	raw_spinlock_t		lock;
+	hard_spinlock_t		lock;
 
 	void __iomem		*base;
 	struct gpio_chip	gc;
@@ -320,6 +320,7 @@ static int pl061_probe(struct amba_device *adev, const struct amba_id *id)
 	pl061->irq_chip.irq_unmask = pl061_irq_unmask;
 	pl061->irq_chip.irq_set_type = pl061_irq_type;
 	pl061->irq_chip.irq_set_wake = pl061_irq_set_wake;
+	pl061->irq_chip.flags = IRQCHIP_PIPELINE_SAFE;
 
 	writeb(0, pl061->base + GPIOIE); /* disable irqs */
 	irq = adev->irq[0];
diff --git a/drivers/gpio/gpio-zynq.c b/drivers/gpio/gpio-zynq.c
index cd475ff4bcad..7c2d47be5bf9 100644
--- a/drivers/gpio/gpio-zynq.c
+++ b/drivers/gpio/gpio-zynq.c
@@ -583,7 +583,7 @@ static struct irq_chip zynq_gpio_level_irqchip = {
 	.irq_request_resources = zynq_gpio_irq_reqres,
 	.irq_release_resources = zynq_gpio_irq_relres,
 	.flags		= IRQCHIP_EOI_THREADED | IRQCHIP_EOI_IF_HANDLED |
-			  IRQCHIP_MASK_ON_SUSPEND,
+			  IRQCHIP_MASK_ON_SUSPEND | IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct irq_chip zynq_gpio_edge_irqchip = {
@@ -596,7 +596,7 @@ static struct irq_chip zynq_gpio_edge_irqchip = {
 	.irq_set_wake	= zynq_gpio_set_wake,
 	.irq_request_resources = zynq_gpio_irq_reqres,
 	.irq_release_resources = zynq_gpio_irq_relres,
-	.flags		= IRQCHIP_MASK_ON_SUSPEND,
+	.flags		= IRQCHIP_MASK_ON_SUSPEND | IRQCHIP_PIPELINE_SAFE,
 };
 
 static void zynq_gpio_handle_bank_irq(struct zynq_gpio *gpio,
diff --git a/drivers/gpio/gpiolib.c b/drivers/gpio/gpiolib.c
index 104ed299d5ea..65f6a5e312f2 100644
--- a/drivers/gpio/gpiolib.c
+++ b/drivers/gpio/gpiolib.c
@@ -27,6 +27,7 @@
 #include <linux/poll.h>
 #include <linux/timekeeping.h>
 #include <uapi/linux/gpio.h>
+#include <evl/devices/gpio.h>
 
 #include "gpiolib.h"
 #include "gpiolib-of.h"
@@ -416,6 +417,8 @@ struct linehandle_state {
 	const char *label;
 	struct gpio_desc *descs[GPIOHANDLES_MAX];
 	u32 numdescs;
+	u32 lflags;
+	struct linehandle_oob_state oob_state;
 };
 
 #define GPIOHANDLE_REQUEST_VALID_FLAGS \
@@ -423,7 +426,13 @@ struct linehandle_state {
 	GPIOHANDLE_REQUEST_OUTPUT | \
 	GPIOHANDLE_REQUEST_ACTIVE_LOW | \
 	GPIOHANDLE_REQUEST_OPEN_DRAIN | \
-	GPIOHANDLE_REQUEST_OPEN_SOURCE)
+	GPIOHANDLE_REQUEST_OPEN_SOURCE | \
+	(IS_ENABLED(CONFIG_EVL) ? GPIOHANDLE_REQUEST_OOB : 0))
+
+static inline bool oob_handling_requested(u32 lflags)
+{
+	return IS_ENABLED(CONFIG_EVL) && lflags & GPIOHANDLE_REQUEST_OOB;
+}
 
 static long linehandle_ioctl(struct file *filep, unsigned int cmd,
 			     unsigned long arg)
@@ -487,12 +496,130 @@ static long linehandle_ioctl_compat(struct file *filep, unsigned int cmd,
 }
 #endif
 
+#ifdef CONFIG_EVL
+
+static int gpio_chip_get_multiple(struct gpio_chip *chip,
+				unsigned long *mask, unsigned long *bits);
+
+static void gpio_chip_set_multiple(struct gpio_chip *chip,
+				unsigned long *mask, unsigned long *bits);
+
+static int get_array_value_oob(struct linehandle_state *lh,
+				unsigned long *value_bitmap)
+{
+	struct gpio_chip *chip = lh->gdev->chip;
+	unsigned long mask[2 * BITS_TO_LONGS(FASTPATH_NGPIO)];
+	unsigned long *bits = mask + BITS_TO_LONGS(chip->ngpio);
+	const struct gpio_desc *desc;
+	int ret, n, hwgpio, value;
+
+	bitmap_zero(mask, chip->ngpio);
+
+	for (n = 0; n < lh->numdescs; n++) {
+		desc = lh->descs[n];
+		hwgpio = gpio_chip_hwgpio(desc);
+		__set_bit(hwgpio, mask);
+	}
+
+	ret = gpio_chip_get_multiple(chip, mask, bits);
+	if (ret)
+		return ret;
+
+	for (n = 0; n < lh->numdescs; n++) {
+		desc = lh->descs[n];
+		hwgpio = gpio_chip_hwgpio(desc);
+		value = test_bit(hwgpio, bits);
+		if (test_bit(FLAG_ACTIVE_LOW, &desc->flags))
+			value = !value;
+		__assign_bit(n, value_bitmap, value);
+		trace_gpio_value(desc_to_gpio(desc), 1, value);
+	}
+
+	return 0;
+}
+
+static int set_array_value_oob(struct linehandle_state *lh,
+			const unsigned long *value_bitmap)
+{
+	struct gpio_chip *chip = lh->gdev->chip;
+	unsigned long mask[2 * BITS_TO_LONGS(FASTPATH_NGPIO)];
+	unsigned long *bits = mask + BITS_TO_LONGS(chip->ngpio);
+	const struct gpio_desc *desc;
+	int n, hwgpio, value;
+
+	bitmap_zero(mask, chip->ngpio);
+
+	for (n = 0; n < lh->numdescs; n++) {
+		desc = lh->descs[n];
+		hwgpio = gpio_chip_hwgpio(desc);
+		__set_bit(hwgpio, mask);
+		value = test_bit(n, value_bitmap);
+		if (test_bit(FLAG_ACTIVE_LOW, &desc->flags))
+			value = !value;
+		if (value)
+			__set_bit(hwgpio, bits);
+		else
+			__clear_bit(hwgpio, bits);
+		trace_gpio_value(desc_to_gpio(desc), 0, value);
+	}
+
+	gpio_chip_set_multiple(chip, mask, bits);
+
+	return 0;
+}
+
+static long linehandle_oob_ioctl(struct file *filep, unsigned int cmd,
+				unsigned long arg)
+{
+	struct linehandle_state *lh = filep->private_data;
+	DECLARE_BITMAP(valmap, GPIOHANDLES_MAX);
+	void __user *ip = (void __user *)arg;
+	struct gpiohandle_data ghd;
+	int i, ret;
+
+	if (!oob_handling_requested(lh->lflags))
+		return -EPERM;
+
+	if (cmd == GPIOHANDLE_GET_LINE_VALUES_IOCTL) {
+		ret = get_array_value_oob(lh, valmap);
+		if (ret)
+			return ret;
+
+		memset(&ghd, 0, sizeof(ghd));
+		for (i = 0; i < lh->numdescs; i++)
+			ghd.values[i] = test_bit(i, valmap);
+
+		if (raw_copy_to_user(ip, &ghd, sizeof(ghd)))
+			return -EFAULT;
+
+		return 0;
+	} else if (cmd == GPIOHANDLE_SET_LINE_VALUES_IOCTL) {
+		if (!test_bit(FLAG_IS_OUT, &lh->descs[0]->flags))
+			return -EPERM;
+
+		if (raw_copy_from_user(&ghd, ip, sizeof(ghd)))
+			return -EFAULT;
+
+		for (i = 0; i < lh->numdescs; i++)
+			__assign_bit(i, valmap, ghd.values[i]);
+
+		return set_array_value_oob(lh, valmap);
+	}
+
+	return -EINVAL;
+}
+
+#endif
+
 static int linehandle_release(struct inode *inode, struct file *filep)
 {
 	struct linehandle_state *lh = filep->private_data;
 	struct gpio_device *gdev = lh->gdev;
 	int i;
 
+	if (oob_handling_requested(lh->lflags))
+		evl_release_file(&lh->oob_state.efile);
+
 	for (i = 0; i < lh->numdescs; i++)
 		gpiod_free(lh->descs[i]);
 	kfree(lh->label);
@@ -506,6 +633,9 @@ static const struct file_operations linehandle_fileops = {
 	.owner = THIS_MODULE,
 	.llseek = noop_llseek,
 	.unlocked_ioctl = linehandle_ioctl,
+#ifdef CONFIG_EVL
+	.oob_ioctl = linehandle_oob_ioctl,
+#endif
 #ifdef CONFIG_COMPAT
 	.compat_ioctl = linehandle_ioctl_compat,
 #endif
@@ -530,6 +660,18 @@ static int linehandle_create(struct gpio_device *gdev, void __user *ip)
 	if (lflags & ~GPIOHANDLE_REQUEST_VALID_FLAGS)
 		return -EINVAL;
 
+	if (oob_handling_requested(lflags)) {
+		if (gdev->chip->ngpio > FASTPATH_NGPIO) {
+			chip_warn(gdev->chip,
+				"too many lines for out-of-band handling"
+				" (%u > %u fastpath)\n",
+				gdev->chip->ngpio, FASTPATH_NGPIO);
+			return -ENOTSUPP;
+		}
+		if (gdev->chip->can_sleep)
+			return -ENOTSUPP;
+	}
+
 	/*
 	 * Do not allow both INPUT & OUTPUT flags to be set as they are
 	 * contradictory.
@@ -557,6 +699,7 @@ static int linehandle_create(struct gpio_device *gdev, void __user *ip)
 	if (!lh)
 		return -ENOMEM;
 	lh->gdev = gdev;
+	lh->lflags = lflags;
 	get_device(&gdev->dev);
 
 	/* Make sure this is terminated */
@@ -635,6 +778,15 @@ static int linehandle_create(struct gpio_device *gdev, void __user *ip)
 		goto out_put_unused_fd;
 	}
 
+	if (oob_handling_requested(lflags)) {
+		ret = evl_open_file(&lh->oob_state.efile, file);
+		if (ret) {
+			fput(file);
+			put_unused_fd(fd);
+			return ret;
+		}
+	}
+
 	handlereq.fd = fd;
 	if (copy_to_user(ip, &handlereq, sizeof(handlereq))) {
 		/*
@@ -688,12 +840,14 @@ struct lineevent_state {
 	struct gpio_device *gdev;
 	const char *label;
 	struct gpio_desc *desc;
+	u32 lflags;
 	u32 eflags;
 	int irq;
 	wait_queue_head_t wait;
 	DECLARE_KFIFO(events, struct gpioevent_data, 16);
 	struct mutex read_lock;
 	u64 timestamp;
+	struct lineevent_oob_state oob_state;
 };
 
 #define GPIOEVENT_REQUEST_VALID_FLAGS \
@@ -724,6 +878,9 @@ static ssize_t lineevent_read(struct file *filep,
 	unsigned int copied;
 	int ret;
 
+	if (oob_handling_requested(le->lflags))
+		return -EPERM;
+
 	if (count < sizeof(struct gpioevent_data))
 		return -EINVAL;
 
@@ -760,11 +917,151 @@ static ssize_t lineevent_read(struct file *filep,
 	return copied;
 }
 
+static irqreturn_t lineevent_read_pin(struct lineevent_state *le,
+				struct gpioevent_data *ge,
+				bool cansleep)
+{
+	int level;
+
+	if (le->eflags & GPIOEVENT_REQUEST_RISING_EDGE
+	    && le->eflags & GPIOEVENT_REQUEST_FALLING_EDGE) {
+		if (cansleep)
+			level = gpiod_get_value_cansleep(le->desc);
+		else
+			level = gpiod_get_value(le->desc);
+		if (level)
+			/* Emit low-to-high event */
+			ge->id = GPIOEVENT_EVENT_RISING_EDGE;
+		else
+			/* Emit high-to-low event */
+			ge->id = GPIOEVENT_EVENT_FALLING_EDGE;
+	} else if (le->eflags & GPIOEVENT_REQUEST_RISING_EDGE) {
+		/* Emit low-to-high event */
+		ge->id = GPIOEVENT_EVENT_RISING_EDGE;
+	} else if (le->eflags & GPIOEVENT_REQUEST_FALLING_EDGE) {
+		/* Emit high-to-low event */
+		ge->id = GPIOEVENT_EVENT_FALLING_EDGE;
+	} else {
+		return IRQ_NONE;
+	}
+
+	return IRQ_HANDLED;
+}
+
+#ifdef CONFIG_EVL
+
+static irqreturn_t lineevent_oob_irq_handler(int irq, void *p)
+{
+	struct lineevent_state *le = p;
+	struct gpioevent_data ge;
+
+	ge.timestamp = evl_ktime_monotonic();
+
+	if (lineevent_read_pin(le, &ge, false) == IRQ_NONE)
+		return IRQ_NONE;
+
+	evl_spin_lock(&le->oob_state.wait.lock);
+	kfifo_put(&le->events, ge);
+	evl_wake_up_head(&le->oob_state.wait);
+	evl_signal_poll_events(&le->oob_state.poll_head, POLLIN|POLLRDNORM);
+	evl_spin_unlock(&le->oob_state.wait.lock);
+
+	return IRQ_HANDLED;
+}
+
+static __poll_t lineevent_oob_poll(struct file *filep,
+				struct oob_poll_wait *wait)
+{
+	struct lineevent_state *le = filep->private_data;
+	unsigned long flags;
+	__poll_t ready = 0;
+
+	evl_poll_watch(&le->oob_state.poll_head, wait, NULL);
+
+	evl_spin_lock_irqsave(&le->oob_state.wait.lock, flags);
+
+	if (!kfifo_is_empty(&le->events))
+		ready |= POLLIN|POLLRDNORM;
+
+	evl_spin_unlock_irqrestore(&le->oob_state.wait.lock, flags);
+
+	return ready;
+}
+
+static ssize_t lineevent_oob_read(struct file *filep,
+				char __user *buf,
+				size_t count)
+{
+	struct lineevent_state *le = filep->private_data;
+	struct gpioevent_data ge = { 0 };
+	unsigned long flags;
+	int ret;
+
+	if (count < sizeof(struct gpioevent_data))
+		return -EINVAL;
+
+	if (!oob_handling_requested(le->lflags))
+		return -EPERM;
+
+	do {
+		evl_spin_lock_irqsave(&le->oob_state.wait.lock, flags);
+
+		ret = kfifo_get(&le->events, &ge);
+		/*
+		 * Silly work around to address a false positive
+		 * enabling -Wmaybe-uninitialized w/ gcc 8.3.1.
+		 */
+		if (!ret)
+			ret = 0;
+
+		evl_spin_unlock_irqrestore(&le->oob_state.wait.lock, flags);
+
+		if (ret) {
+			ret = raw_copy_to_user(buf, &ge, sizeof(ge));
+			return ret ? -EFAULT : sizeof(ge);
+		}
+
+		if (filep->f_flags & O_NONBLOCK)
+			return -EAGAIN;
+
+		ret = evl_wait_event(&le->oob_state.wait,
+				!kfifo_is_empty(&le->events));
+	} while (!ret);
+
+	return ret;
+}
+
+static int lineevent_init_oob_state(struct lineevent_state *le,
+				int irqflags)
+{
+	evl_init_wait(&le->oob_state.wait, &evl_mono_clock, EVL_WAIT_PRIO);
+	evl_init_poll_head(&le->oob_state.poll_head);
+
+	return request_irq(le->irq,
+			lineevent_oob_irq_handler,
+			irqflags | IRQF_OOB,
+			le->label,
+			le);
+}
+
+#else
+
+static inline int lineevent_init_oob_state(struct lineevent_state *le,
+					int irqflags)
+{
+	return -EINVAL;
+}
+
+#endif	/* !CONFIG_EVL */
+
 static int lineevent_release(struct inode *inode, struct file *filep)
 {
 	struct lineevent_state *le = filep->private_data;
 	struct gpio_device *gdev = le->gdev;
 
+	if (oob_handling_requested(le->lflags))
+		evl_release_file(&le->oob_state.efile);
+
 	free_irq(le->irq, le);
 	gpiod_free(le->desc);
 	kfree(le->label);
@@ -813,6 +1110,10 @@ static long lineevent_ioctl_compat(struct file *filep, unsigned int cmd,
 static const struct file_operations lineevent_fileops = {
 	.release = lineevent_release,
 	.read = lineevent_read,
+#ifdef CONFIG_EVL
+	.oob_read = lineevent_oob_read,
+	.oob_poll = lineevent_oob_poll,
+#endif
 	.poll = lineevent_poll,
 	.owner = THIS_MODULE,
 	.llseek = noop_llseek,
@@ -840,24 +1141,8 @@ static irqreturn_t lineevent_irq_thread(int irq, void *p)
 	else
 		ge.timestamp = le->timestamp;
 
-	if (le->eflags & GPIOEVENT_REQUEST_RISING_EDGE
-	    && le->eflags & GPIOEVENT_REQUEST_FALLING_EDGE) {
-		int level = gpiod_get_value_cansleep(le->desc);
-		if (level)
-			/* Emit low-to-high event */
-			ge.id = GPIOEVENT_EVENT_RISING_EDGE;
-		else
-			/* Emit high-to-low event */
-			ge.id = GPIOEVENT_EVENT_FALLING_EDGE;
-	} else if (le->eflags & GPIOEVENT_REQUEST_RISING_EDGE) {
-		/* Emit low-to-high event */
-		ge.id = GPIOEVENT_EVENT_RISING_EDGE;
-	} else if (le->eflags & GPIOEVENT_REQUEST_FALLING_EDGE) {
-		/* Emit high-to-low event */
-		ge.id = GPIOEVENT_EVENT_FALLING_EDGE;
-	} else {
+	if (lineevent_read_pin(le, &ge, true) == IRQ_NONE)
 		return IRQ_NONE;
-	}
 
 	ret = kfifo_put(&le->events, ge);
 	if (ret)
@@ -942,6 +1227,7 @@ static int lineevent_create(struct gpio_device *gdev, void __user *ip)
 		goto out_free_label;
 	le->desc = desc;
 	le->eflags = eflags;
+	le->lflags = lflags;
 
 	if (lflags & GPIOHANDLE_REQUEST_ACTIVE_LOW)
 		set_bit(FLAG_ACTIVE_LOW, &desc->flags);
@@ -962,21 +1248,32 @@ static int lineevent_create(struct gpio_device *gdev, void __user *ip)
 	if (eflags & GPIOEVENT_REQUEST_FALLING_EDGE)
 		irqflags |= test_bit(FLAG_ACTIVE_LOW, &desc->flags) ?
 			IRQF_TRIGGER_RISING : IRQF_TRIGGER_FALLING;
-	irqflags |= IRQF_ONESHOT;
 
 	INIT_KFIFO(le->events);
-	init_waitqueue_head(&le->wait);
-	mutex_init(&le->read_lock);
-
-	/* Request a thread to read the events */
-	ret = request_threaded_irq(le->irq,
-			lineevent_irq_handler,
-			lineevent_irq_thread,
-			irqflags,
-			le->label,
-			le);
-	if (ret)
-		goto out_free_desc;
+
+	if (oob_handling_requested(lflags)) {
+		if (desc->gdev->chip->can_sleep) {
+			ret = -ENOTSUPP;
+			goto out_free_desc;
+		}
+		ret = lineevent_init_oob_state(le, irqflags);
+		if (ret)
+			goto out_free_desc;
+	} else {
+		irqflags |= IRQF_ONESHOT;
+		init_waitqueue_head(&le->wait);
+		mutex_init(&le->read_lock);
+
+		/* Request a thread to read the events */
+		ret = request_threaded_irq(le->irq,
+					lineevent_irq_handler,
+					lineevent_irq_thread,
+					irqflags,
+					le->label,
+					le);
+		if (ret)
+			goto out_free_desc;
+	}
 
 	fd = get_unused_fd_flags(O_RDONLY | O_CLOEXEC);
 	if (fd < 0) {
@@ -993,12 +1290,23 @@ static int lineevent_create(struct gpio_device *gdev, void __user *ip)
 		goto out_put_unused_fd;
 	}
 
+	if (oob_handling_requested(lflags)) {
+		ret = evl_open_file(&le->oob_state.efile, file);
+		if (ret) {
+			fput(file);
+			put_unused_fd(fd);
+			return ret;
+		}
+	}
+
 	eventreq.fd = fd;
 	if (copy_to_user(ip, &eventreq, sizeof(eventreq))) {
 		/*
 		 * fput() will trigger the release() callback, so do not go onto
 		 * the regular error cleanup path here.
 		 */
+		if (oob_handling_requested(lflags))
+			evl_release_file(&le->oob_state.efile);
 		fput(file);
 		put_unused_fd(fd);
 		return -EFAULT;
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
index 29705e773a4b..6e87dadba10a 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_mdss.c
@@ -123,6 +123,7 @@ static struct irq_chip dpu_mdss_irq_chip = {
 	.name = "dpu_mdss",
 	.irq_mask = dpu_mdss_irq_mask,
 	.irq_unmask = dpu_mdss_irq_unmask,
+	.flags = IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct lock_class_key dpu_mdss_lock_key, dpu_mdss_request_key;
diff --git a/drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c b/drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
index 09bd46ad820b..8e0f2be155d8 100644
--- a/drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
+++ b/drivers/gpu/drm/msm/disp/mdp5/mdp5_mdss.c
@@ -91,6 +91,7 @@ static struct irq_chip mdss_hw_irq_chip = {
 	.name		= "mdss",
 	.irq_mask	= mdss_hw_mask_irq,
 	.irq_unmask	= mdss_hw_unmask_irq,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static int mdss_hw_irqdomain_map(struct irq_domain *d, unsigned int irq,
diff --git a/drivers/gpu/ipu-v3/ipu-common.c b/drivers/gpu/ipu-v3/ipu-common.c
index ee2a025e54cf..6bb61afcf07a 100644
--- a/drivers/gpu/ipu-v3/ipu-common.c
+++ b/drivers/gpu/ipu-v3/ipu-common.c
@@ -1303,6 +1303,7 @@ static int ipu_irq_init(struct ipu_soc *ipu)
 		ct->chip.irq_ack = irq_gc_ack_set_bit;
 		ct->chip.irq_mask = irq_gc_mask_clr_bit;
 		ct->chip.irq_unmask = irq_gc_mask_set_bit;
+		ct->chip.flags = IRQCHIP_PIPELINE_SAFE;
 		ct->regs.ack = IPU_INT_STAT(i / 32);
 		ct->regs.mask = IPU_INT_CTRL(i / 32);
 	}
diff --git a/drivers/iio/industrialio-trigger.c b/drivers/iio/industrialio-trigger.c
index 3908a9a90035..56c2ea6fd30f 100644
--- a/drivers/iio/industrialio-trigger.c
+++ b/drivers/iio/industrialio-trigger.c
@@ -543,6 +543,7 @@ static struct iio_trigger *viio_trigger_alloc(const char *fmt, va_list vargs)
 	trig->subirq_chip.name = trig->name;
 	trig->subirq_chip.irq_mask = &iio_trig_subirqmask;
 	trig->subirq_chip.irq_unmask = &iio_trig_subirqunmask;
+	trig->subirq_chip.flags = IRQCHIP_PIPELINE_SAFE;
 	for (i = 0; i < CONFIG_IIO_CONSUMERS_PER_TRIGGER; i++) {
 		irq_set_chip(trig->subirq_base + i, &trig->subirq_chip);
 		irq_set_handler(trig->subirq_base + i, &handle_simple_irq);
diff --git a/drivers/irqchip/irq-bcm2835.c b/drivers/irqchip/irq-bcm2835.c
index 418245d31921..c409720fdd21 100644
--- a/drivers/irqchip/irq-bcm2835.c
+++ b/drivers/irqchip/irq-bcm2835.c
@@ -101,7 +101,8 @@ static void armctrl_unmask_irq(struct irq_data *d)
 static struct irq_chip armctrl_chip = {
 	.name = "ARMCTRL-level",
 	.irq_mask = armctrl_mask_irq,
-	.irq_unmask = armctrl_unmask_irq
+	.irq_unmask = armctrl_unmask_irq,
+	.flags = IRQCHIP_PIPELINE_SAFE,
 };
 
 static int armctrl_xlate(struct irq_domain *d, struct device_node *ctrlr,
diff --git a/drivers/irqchip/irq-bcm2836.c b/drivers/irqchip/irq-bcm2836.c
index 2038693f074c..49e06a37bc9a 100644
--- a/drivers/irqchip/irq-bcm2836.c
+++ b/drivers/irqchip/irq-bcm2836.c
@@ -57,6 +57,7 @@ static struct irq_chip bcm2836_arm_irqchip_timer = {
 	.name		= "bcm2836-timer",
 	.irq_mask	= bcm2836_arm_irqchip_mask_timer_irq,
 	.irq_unmask	= bcm2836_arm_irqchip_unmask_timer_irq,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static void bcm2836_arm_irqchip_mask_pmu_irq(struct irq_data *d)
@@ -73,6 +74,7 @@ static struct irq_chip bcm2836_arm_irqchip_pmu = {
 	.name		= "bcm2836-pmu",
 	.irq_mask	= bcm2836_arm_irqchip_mask_pmu_irq,
 	.irq_unmask	= bcm2836_arm_irqchip_unmask_pmu_irq,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static void bcm2836_arm_irqchip_mask_gpu_irq(struct irq_data *d)
@@ -87,6 +89,7 @@ static struct irq_chip bcm2836_arm_irqchip_gpu = {
 	.name		= "bcm2836-gpu",
 	.irq_mask	= bcm2836_arm_irqchip_mask_gpu_irq,
 	.irq_unmask	= bcm2836_arm_irqchip_unmask_gpu_irq,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static int bcm2836_map(struct irq_domain *d, unsigned int irq,
diff --git a/drivers/irqchip/irq-gic-v2m.c b/drivers/irqchip/irq-gic-v2m.c
index e88e75c22b6a..7689721b0fb2 100644
--- a/drivers/irqchip/irq-gic-v2m.c
+++ b/drivers/irqchip/irq-gic-v2m.c
@@ -88,6 +88,7 @@ static struct irq_chip gicv2m_msi_irq_chip = {
 	.irq_unmask		= gicv2m_unmask_msi_irq,
 	.irq_eoi		= irq_chip_eoi_parent,
 	.irq_write_msi_msg	= pci_msi_domain_write_msg,
+	.flags			= IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct msi_domain_info gicv2m_msi_domain_info = {
@@ -129,6 +130,7 @@ static struct irq_chip gicv2m_irq_chip = {
 	.irq_eoi		= irq_chip_eoi_parent,
 	.irq_set_affinity	= irq_chip_set_affinity_parent,
 	.irq_compose_msi_msg	= gicv2m_compose_msi_msg,
+	.flags			= IRQCHIP_PIPELINE_SAFE,
 };
 
 static int gicv2m_irq_gic_domain_alloc(struct irq_domain *domain,
@@ -251,6 +253,7 @@ static bool is_msi_spi_valid(u32 base, u32 num)
 
 static struct irq_chip gicv2m_pmsi_irq_chip = {
 	.name			= "pMSI",
+	.flags			= IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct msi_domain_ops gicv2m_pmsi_ops = {
diff --git a/drivers/irqchip/irq-gic-v3.c b/drivers/irqchip/irq-gic-v3.c
index 1edc99335a94..1b07ddd92a17 100644
--- a/drivers/irqchip/irq-gic-v3.c
+++ b/drivers/irqchip/irq-gic-v3.c
@@ -1215,7 +1215,8 @@ static struct irq_chip gic_chip = {
 	.irq_nmi_teardown	= gic_irq_nmi_teardown,
 	.flags			= IRQCHIP_SET_TYPE_MASKED |
 				  IRQCHIP_SKIP_SET_WAKE |
-				  IRQCHIP_MASK_ON_SUSPEND,
+				  IRQCHIP_MASK_ON_SUSPEND |
+				  IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct irq_chip gic_eoimode1_chip = {
@@ -1232,7 +1233,8 @@ static struct irq_chip gic_eoimode1_chip = {
 	.irq_nmi_teardown	= gic_irq_nmi_teardown,
 	.flags			= IRQCHIP_SET_TYPE_MASKED |
 				  IRQCHIP_SKIP_SET_WAKE |
-				  IRQCHIP_MASK_ON_SUSPEND,
+				  IRQCHIP_MASK_ON_SUSPEND |
+				  IRQCHIP_PIPELINE_SAFE,
 };
 
 static int gic_irq_domain_map(struct irq_domain *d, unsigned int irq,
diff --git a/drivers/irqchip/irq-gic.c b/drivers/irqchip/irq-gic.c
index 30ab623343d3..c6a2377069c7 100644
--- a/drivers/irqchip/irq-gic.c
+++ b/drivers/irqchip/irq-gic.c
@@ -90,7 +90,7 @@ struct gic_chip_data {
 
 #ifdef CONFIG_BL_SWITCHER
 
-static DEFINE_RAW_SPINLOCK(cpu_map_lock);
+static DEFINE_HARD_SPINLOCK(cpu_map_lock);
 
 #define gic_lock_irqsave(f)		\
 	raw_spin_lock_irqsave(&cpu_map_lock, (f))
@@ -429,7 +429,8 @@ static const struct irq_chip gic_chip = {
 	.irq_set_irqchip_state	= gic_irq_set_irqchip_state,
 	.flags			= IRQCHIP_SET_TYPE_MASKED |
 				  IRQCHIP_SKIP_SET_WAKE |
-				  IRQCHIP_MASK_ON_SUSPEND,
+				  IRQCHIP_MASK_ON_SUSPEND |
+				  IRQCHIP_PIPELINE_SAFE,
 };
 
 void __init gic_cascade_irq(unsigned int gic_nr, unsigned int irq)
diff --git a/drivers/irqchip/irq-imx-irqsteer.c b/drivers/irqchip/irq-imx-irqsteer.c
index 290531ec3d61..f4d9e59e2072 100644
--- a/drivers/irqchip/irq-imx-irqsteer.c
+++ b/drivers/irqchip/irq-imx-irqsteer.c
@@ -29,7 +29,7 @@ struct irqsteer_data {
 	struct clk		*ipg_clk;
 	int			irq[CHAN_MAX_OUTPUT_INT];
 	int			irq_count;
-	raw_spinlock_t		lock;
+	hard_spinlock_t		lock;
 	int			reg_num;
 	int			channel;
 	struct irq_domain	*domain;
@@ -74,6 +74,7 @@ static struct irq_chip imx_irqsteer_irq_chip = {
 	.name		= "irqsteer",
 	.irq_mask	= imx_irqsteer_irq_mask,
 	.irq_unmask	= imx_irqsteer_irq_unmask,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static int imx_irqsteer_irq_map(struct irq_domain *h, unsigned int irq,
diff --git a/drivers/mfd/tps65217.c b/drivers/mfd/tps65217.c
index 7566ce4457a0..23095cdc1ced 100644
--- a/drivers/mfd/tps65217.c
+++ b/drivers/mfd/tps65217.c
@@ -84,6 +84,7 @@ static struct irq_chip tps65217_irq_chip = {
 	.irq_bus_sync_unlock	= tps65217_irq_sync_unlock,
 	.irq_enable		= tps65217_irq_enable,
 	.irq_disable		= tps65217_irq_disable,
+	.flags			= IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct mfd_cell tps65217s[] = {
diff --git a/drivers/net/ethernet/freescale/fec_main.c b/drivers/net/ethernet/freescale/fec_main.c
index a9c386b63581..82f120f3d5aa 100644
--- a/drivers/net/ethernet/freescale/fec_main.c
+++ b/drivers/net/ethernet/freescale/fec_main.c
@@ -1619,10 +1619,54 @@ fec_enet_interrupt(int irq, void *dev_id)
 	return ret;
 }
 
+static int unmask_events(struct net_device *ndev, unsigned int events)
+{
+	struct fec_enet_private *fep = netdev_priv(ndev);
+	struct fec_enet_priv_rx_q *rxq;
+	int n, queue_id;
+
+	writel(events, fep->hwp + FEC_IMASK);
+	dma_wmb();
+
+	if ((events & FEC_ENET_RXF) == 0)
+		return 0;
+
+	/*
+	 * The FEC sees the unmasking of RXF events in the EIMR while
+	 * RDAR is cleared as an error, and stops issuing RXF
+	 * interrupts as a consequence of this. Since the receive path
+	 * is fully interrupt-driven, this leads to a stall.
+	 *
+	 * Unfortunately, the combination of high network load on the
+	 * receiver side, and delays on the current CPU (kernel
+	 * preemption, IRQ activity) may cause the RX ring to fill up
+	 * again soon after we pulled some/all of the pending frames,
+	 * but _before_ RXF is unmasked in the EIMR, leading to the
+	 * obnoxious RX stall.
+	 *
+	 * To prevent this, we pull exactly one frame from the RX ring
+	 * if RDAR is zero, _after_ the EIMR was updated. RDAR gets
+	 * written to as a consequence of such update, which is enough
+	 * to re-enable the RXF event.
+	 *
+	 * NOTE: a request to unmask RXF implies that we did not
+	 * consume the entire NAPI budget for the current round. This
+	 * means that we may pull at least one more frame without
+	 * exceeding the allowed weight (NAPI_POLL_WEIGHT).
+	 */
+	for (n = 0; n < FEC_ENET_MAX_RX_QS; n++) {
+		queue_id = FEC_ENET_GET_QUQUE(n);
+		rxq = fep->rx_queue[queue_id];
+		if (rxq && readl(rxq->bd.reg_desc_active) == 0)
+			return fec_enet_rx_queue(ndev, 1, queue_id);
+	}
+
+	return 0;
+}
+
 static int fec_enet_rx_napi(struct napi_struct *napi, int budget)
 {
 	struct net_device *ndev = napi->dev;
-	struct fec_enet_private *fep = netdev_priv(ndev);
 	int pkts;
 
 	pkts = fec_enet_rx(ndev, budget);
@@ -1631,8 +1675,10 @@ static int fec_enet_rx_napi(struct napi_struct *napi, int budget)
 
 	if (pkts < budget) {
 		napi_complete_done(napi, pkts);
-		writel(FEC_DEFAULT_IMASK, fep->hwp + FEC_IMASK);
-	}
+		pkts += unmask_events(ndev, FEC_DEFAULT_IMASK);
+	} else
+		unmask_events(ndev, FEC_RX_DISABLED_IMASK);
+
 	return pkts;
 }
 
diff --git a/drivers/pci/controller/dwc/pcie-designware-host.c b/drivers/pci/controller/dwc/pcie-designware-host.c
index 0f36a926059a..46615a6a07cb 100644
--- a/drivers/pci/controller/dwc/pcie-designware-host.c
+++ b/drivers/pci/controller/dwc/pcie-designware-host.c
@@ -66,6 +66,7 @@ static struct irq_chip dw_pcie_msi_irq_chip = {
 	.irq_ack = dw_msi_ack_irq,
 	.irq_mask = dw_msi_mask_irq,
 	.irq_unmask = dw_msi_unmask_irq,
+	.flags = IRQCHIP_PIPELINE_SAFE,
 };
 
 static struct msi_domain_info dw_pcie_msi_domain_info = {
diff --git a/drivers/pinctrl/bcm/pinctrl-bcm2835.c b/drivers/pinctrl/bcm/pinctrl-bcm2835.c
index 0de1a3a96984..3b497500da3c 100644
--- a/drivers/pinctrl/bcm/pinctrl-bcm2835.c
+++ b/drivers/pinctrl/bcm/pinctrl-bcm2835.c
@@ -87,7 +87,7 @@ struct bcm2835_pinctrl {
 	struct gpio_chip gpio_chip;
 	struct pinctrl_gpio_range gpio_range;
 
-	raw_spinlock_t irq_lock[BCM2835_NUM_BANKS];
+	hard_spinlock_t irq_lock[BCM2835_NUM_BANKS];
 };
 
 /* pins are just named GPIO0..GPIO53 */
@@ -616,6 +616,7 @@ static struct irq_chip bcm2835_gpio_irq_chip = {
 	.irq_ack = bcm2835_gpio_irq_ack,
 	.irq_mask = bcm2835_gpio_irq_disable,
 	.irq_unmask = bcm2835_gpio_irq_enable,
+	.flags = IRQCHIP_PIPELINE_SAFE,
 };
 
 static int bcm2835_pctl_get_groups_count(struct pinctrl_dev *pctldev)
diff --git a/drivers/pinctrl/qcom/pinctrl-msm.c b/drivers/pinctrl/qcom/pinctrl-msm.c
index 763da0be10d6..d451ec844bb5 100644
--- a/drivers/pinctrl/qcom/pinctrl-msm.c
+++ b/drivers/pinctrl/qcom/pinctrl-msm.c
@@ -57,7 +57,7 @@ struct msm_pinctrl {
 	struct irq_chip irq_chip;
 	int irq;
 
-	raw_spinlock_t lock;
+	hard_spinlock_t lock;
 
 	DECLARE_BITMAP(dual_edge_irqs, MAX_NR_GPIO);
 	DECLARE_BITMAP(enabled_irqs, MAX_NR_GPIO);
@@ -1027,6 +1027,7 @@ static int msm_gpio_init(struct msm_pinctrl *pctrl)
 	pctrl->irq_chip.irq_set_wake = msm_gpio_irq_set_wake;
 	pctrl->irq_chip.irq_request_resources = msm_gpio_irq_reqres;
 	pctrl->irq_chip.irq_release_resources = msm_gpio_irq_relres;
+	pctrl->irq_chip.flags = IRQCHIP_PIPELINE_SAFE;
 
 	girq = &chip->irq;
 	girq->chip = &pctrl->irq_chip;
diff --git a/drivers/soc/qcom/smp2p.c b/drivers/soc/qcom/smp2p.c
index c7300d54e444..517c0f689feb 100644
--- a/drivers/soc/qcom/smp2p.c
+++ b/drivers/soc/qcom/smp2p.c
@@ -281,6 +281,7 @@ static struct irq_chip smp2p_irq_chip = {
 	.irq_mask       = smp2p_mask_irq,
 	.irq_unmask     = smp2p_unmask_irq,
 	.irq_set_type	= smp2p_set_irq_type,
+	.flags		= IRQCHIP_PIPELINE_SAFE,
 };
 
 static int smp2p_irq_map(struct irq_domain *d,
diff --git a/drivers/spmi/spmi-pmic-arb.c b/drivers/spmi/spmi-pmic-arb.c
index 97acc2ba2912..20c0b7eb904f 100644
--- a/drivers/spmi/spmi-pmic-arb.c
+++ b/drivers/spmi/spmi-pmic-arb.c
@@ -145,7 +145,7 @@ struct spmi_pmic_arb {
 	void __iomem		*cnfg;
 	void __iomem		*core;
 	resource_size_t		core_size;
-	raw_spinlock_t		lock;
+	hard_spinlock_t		lock;
 	u8			channel;
 	int			irq;
 	u8			ee;
@@ -685,7 +685,7 @@ static struct irq_chip pmic_arb_irqchip = {
 	.irq_set_type	= qpnpint_irq_set_type,
 	.irq_set_wake	= qpnpint_irq_set_wake,
 	.irq_get_irqchip_state	= qpnpint_get_irqchip_state,
-	.flags		= IRQCHIP_MASK_ON_SUSPEND,
+	.flags		= IRQCHIP_MASK_ON_SUSPEND|IRQCHIP_PIPELINE_SAFE,
 };
 
 static int qpnpint_irq_domain_translate(struct irq_domain *d,
diff --git a/drivers/tty/serial/8250/8250_core.c b/drivers/tty/serial/8250/8250_core.c
index e682390ce0de..9221053d40a0 100644
--- a/drivers/tty/serial/8250/8250_core.c
+++ b/drivers/tty/serial/8250/8250_core.c
@@ -662,12 +662,57 @@ static int univ8250_console_match(struct console *co, char *name, int idx,
 	return -ENODEV;
 }
 
+#ifdef CONFIG_RAW_PRINTK
+
+static void raw_write_char(struct uart_8250_port *up, int c)
+{
+	unsigned int status, tmout = 10000;
+
+	for (;;) {
+		status = serial_in(up, UART_LSR);
+		up->lsr_saved_flags |= status & LSR_SAVE_FLAGS;
+		if ((status & UART_LSR_THRE) == UART_LSR_THRE)
+			break;
+		if (--tmout == 0)
+			break;
+		cpu_relax();
+	}
+	serial_port_out(&up->port, UART_TX, c);
+}
+
+static void univ8250_console_write_raw(struct console *co, const char *s,
+				       unsigned int count)
+{
+	struct uart_8250_port *up = &serial8250_ports[co->index];
+	unsigned int ier;
+
+        ier = serial_in(up, UART_IER);
+
+        if (up->capabilities & UART_CAP_UUE)
+                serial_out(up, UART_IER, UART_IER_UUE);
+        else
+                serial_out(up, UART_IER, 0);
+
+	while (count-- > 0) {
+		if (*s == '\n')
+			raw_write_char(up, '\r');
+		raw_write_char(up, *s++);
+	}
+
+        serial_out(up, UART_IER, ier);
+}
+
+#endif
+
 static struct console univ8250_console = {
 	.name		= "ttyS",
 	.write		= univ8250_console_write,
 	.device		= uart_console_device,
 	.setup		= univ8250_console_setup,
 	.match		= univ8250_console_match,
+#ifdef CONFIG_RAW_PRINTK
+	.write_raw	= univ8250_console_write_raw,
+#endif
 	.flags		= CON_PRINTBUFFER | CON_ANYTIME,
 	.index		= -1,
 	.data		= &serial8250_reg,
diff --git a/drivers/tty/serial/amba-pl011.c b/drivers/tty/serial/amba-pl011.c
index 3a7d1a66f79c..02816673390e 100644
--- a/drivers/tty/serial/amba-pl011.c
+++ b/drivers/tty/serial/amba-pl011.c
@@ -1880,6 +1880,8 @@ static void pl011_shutdown(struct uart_port *port)
 
 	pl011_disable_uart(uap);
 
+	if (IS_ENABLED(CONFIG_RAW_PRINTK))
+		clk_disable(uap->clk);
 	/*
 	 * Shut down the clock producer
 	 */
@@ -2206,6 +2208,37 @@ static void pl011_console_putchar(struct uart_port *port, int ch)
 	pl011_write(ch, uap, REG_DR);
 }
 
+#ifdef CONFIG_RAW_PRINTK
+
+static void
+pl011_console_write_raw(struct console *co, const char *s, unsigned int count)
+{
+	struct uart_amba_port *uap = amba_ports[co->index];
+	unsigned int old_cr = 0, new_cr;
+
+	if (!uap->vendor->always_enabled) {
+		old_cr = pl011_read(uap, REG_CR);
+		new_cr = old_cr & ~UART011_CR_CTSEN;
+		new_cr |= UART01x_CR_UARTEN | UART011_CR_TXE;
+		pl011_write(new_cr, uap, REG_CR);
+	}
+
+	while (count-- > 0) {
+		if (*s == '\n')
+			pl011_console_putchar(&uap->port, '\r');
+		pl011_console_putchar(&uap->port, *s++);
+	}
+
+	while ((pl011_read(uap, REG_FR) ^ uap->vendor->inv_fr)
+		& uap->vendor->fr_busy)
+		cpu_relax();
+
+	if (!uap->vendor->always_enabled)
+		pl011_write(old_cr, uap, REG_CR);
+}
+
+#endif  /* !CONFIG_RAW_PRINTK */
+
 static void
 pl011_console_write(struct console *co, const char *s, unsigned int count)
 {
@@ -2336,6 +2369,9 @@ static int __init pl011_console_setup(struct console *co, char *options)
 			pl011_console_get_options(uap, &baud, &parity, &bits);
 	}
 
+	if (IS_ENABLED(CONFIG_RAW_PRINTK))
+		clk_enable(uap->clk);
+
 	return uart_set_options(&uap->port, co, baud, parity, bits, flow);
 }
 
@@ -2406,6 +2442,9 @@ static struct console amba_console = {
 	.device		= uart_console_device,
 	.setup		= pl011_console_setup,
 	.match		= pl011_console_match,
+#ifdef CONFIG_RAW_PRINTK
+	.write_raw	= pl011_console_write_raw,
+#endif
 	.flags		= CON_PRINTBUFFER | CON_ANYTIME,
 	.index		= -1,
 	.data		= &amba_reg,
diff --git a/drivers/tty/serial/imx.c b/drivers/tty/serial/imx.c
index 5e08f2657b90..db9c47eafa1d 100644
--- a/drivers/tty/serial/imx.c
+++ b/drivers/tty/serial/imx.c
@@ -1904,30 +1904,33 @@ static void imx_uart_console_putchar(struct uart_port *port, int ch)
  * Interrupts are disabled on entering
  */
 static void
-imx_uart_console_write(struct console *co, const char *s, unsigned int count)
+__imx_uart_console_write(struct console *co, const char *s, unsigned int count, int locked)
 {
 	struct imx_port *sport = imx_uart_ports[co->index];
 	struct imx_port_ucrs old_ucr;
 	unsigned int ucr1;
 	unsigned long flags = 0;
-	int locked = 1;
 	int retval;
 
-	retval = clk_enable(sport->clk_per);
-	if (retval)
-		return;
-	retval = clk_enable(sport->clk_ipg);
-	if (retval) {
-		clk_disable(sport->clk_per);
-		return;
+	if (!IS_ENABLED(CONFIG_RAW_PRINTK)) {
+		retval = clk_enable(sport->clk_per);
+		if (retval)
+			return;
+		retval = clk_enable(sport->clk_ipg);
+		if (retval) {
+			clk_disable(sport->clk_per);
+			return;
+		}
 	}
 
-	if (sport->port.sysrq)
-		locked = 0;
-	else if (oops_in_progress)
-		locked = spin_trylock_irqsave(&sport->port.lock, flags);
-	else
-		spin_lock_irqsave(&sport->port.lock, flags);
+	if (locked) {
+		if (sport->port.sysrq)
+			locked = 0;
+		else if (oops_in_progress)
+			locked = spin_trylock_irqsave(&sport->port.lock, flags);
+		else
+			spin_lock_irqsave(&sport->port.lock, flags);
+	}
 
 	/*
 	 *	First, save UCR1/2/3 and then disable interrupts
@@ -1957,10 +1960,26 @@ imx_uart_console_write(struct console *co, const char *s, unsigned int count)
 	if (locked)
 		spin_unlock_irqrestore(&sport->port.lock, flags);
 
-	clk_disable(sport->clk_ipg);
-	clk_disable(sport->clk_per);
+	if (!IS_ENABLED(CONFIG_RAW_PRINTK)) {
+		clk_disable(sport->clk_ipg);
+		clk_disable(sport->clk_per);
+	}
+}
+
+static void
+imx_uart_console_write(struct console *co, const char *s, unsigned int count)
+{
+	return __imx_uart_console_write(co, s, count, 1);
 }
 
+#ifdef CONFIG_RAW_PRINTK
+static void
+imx_uart_console_write_raw(struct console *co, const char *s, unsigned int count)
+{
+	return __imx_uart_console_write(co, s, count, 0);
+}
+#endif
+
 /*
  * If the port was already initialised (eg, by a boot loader),
  * try to determine the current setup.
@@ -2068,6 +2087,10 @@ imx_uart_console_setup(struct console *co, char *options)
 	retval = clk_prepare(sport->clk_per);
 	if (retval)
 		clk_unprepare(sport->clk_ipg);
+	else if (IS_ENABLED(CONFIG_RAW_PRINTK)) {
+		clk_enable(sport->clk_ipg);
+		clk_enable(sport->clk_per);
+	}
 
 error_console:
 	return retval;
@@ -2077,6 +2100,9 @@ static struct uart_driver imx_uart_uart_driver;
 static struct console imx_uart_console = {
 	.name		= DEV_NAME,
 	.write		= imx_uart_console_write,
+#ifdef CONFIG_RAW_PRINTK
+	.write_raw	= imx_uart_console_write_raw,
+#endif
 	.device		= uart_console_device,
 	.setup		= imx_uart_console_setup,
 	.flags		= CON_PRINTBUFFER,
diff --git a/drivers/tty/serial/st-asc.c b/drivers/tty/serial/st-asc.c
index 7971997cdead..e80561f15eb5 100644
--- a/drivers/tty/serial/st-asc.c
+++ b/drivers/tty/serial/st-asc.c
@@ -909,6 +909,29 @@ static void asc_console_write(struct console *co, const char *s, unsigned count)
 		spin_unlock_irqrestore(&port->lock, flags);
 }
 
+#ifdef CONFIG_RAW_PRINTK
+
+static void asc_console_write_raw(struct console *co,
+				  const char *s, unsigned int count)
+{
+	struct uart_port *port = &asc_ports[co->index].port;
+	unsigned long timeout = 1000000;
+	u32 intenable;
+
+	intenable = asc_in(port, ASC_INTEN);
+	asc_out(port, ASC_INTEN, 0);
+	(void)asc_in(port, ASC_INTEN);	/* Defeat bus write posting */
+
+	uart_console_write(port, s, count, asc_console_putchar);
+
+	while (timeout-- && !asc_txfifo_is_empty(port))
+		cpu_relax();	/* wait shorter */
+
+	asc_out(port, ASC_INTEN, intenable);
+}
+
+#endif
+
 static int asc_console_setup(struct console *co, char *options)
 {
 	struct asc_port *ascport;
@@ -941,6 +964,9 @@ static struct console asc_console = {
 	.name		= ASC_SERIAL_NAME,
 	.device		= uart_console_device,
 	.write		= asc_console_write,
+#ifdef CONFIG_RAW_PRINTK
+	.write_raw	= asc_console_write_raw,
+#endif
 	.setup		= asc_console_setup,
 	.flags		= CON_PRINTBUFFER,
 	.index		= -1,
diff --git a/fs/exec.c b/fs/exec.c
index 555e93c7dec8..42fe0016f110 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1011,6 +1011,7 @@ static int exec_mmap(struct mm_struct *mm)
 {
 	struct task_struct *tsk;
 	struct mm_struct *old_mm, *active_mm;
+	unsigned long flags;
 
 	/* Notify parent that we're no longer interested in the old VM */
 	tsk = current;
@@ -1035,8 +1036,10 @@ static int exec_mmap(struct mm_struct *mm)
 	active_mm = tsk->active_mm;
 	membarrier_exec_mmap(mm);
 	tsk->mm = mm;
+	protect_inband_mm(flags);
 	tsk->active_mm = mm;
 	activate_mm(active_mm, mm);
+	unprotect_inband_mm(flags);
 	tsk->mm->vmacache_seqnum = 0;
 	vmacache_flush(tsk);
 	task_unlock(tsk);
diff --git a/fs/file.c b/fs/file.c
index 3da91a112bab..d4fbe05210ab 100644
--- a/fs/file.c
+++ b/fs/file.c
@@ -385,6 +385,7 @@ static struct fdtable *close_files(struct files_struct * files)
 			if (set & 1) {
 				struct file * file = xchg(&fdt->fd[i], NULL);
 				if (file) {
+					uninstall_inband_fd(i, file, files);
 					filp_close(file, files);
 					cond_resched();
 				}
@@ -597,6 +598,7 @@ void __fd_install(struct files_struct *files, unsigned int fd,
 		fdt = files_fdtable(files);
 		BUG_ON(fdt->fd[fd] != NULL);
 		rcu_assign_pointer(fdt->fd[fd], file);
+		install_inband_fd(fd, file, files);
 		spin_unlock(&files->file_lock);
 		return;
 	}
@@ -605,6 +607,7 @@ void __fd_install(struct files_struct *files, unsigned int fd,
 	fdt = rcu_dereference_sched(files->fdt);
 	BUG_ON(fdt->fd[fd] != NULL);
 	rcu_assign_pointer(fdt->fd[fd], file);
+	install_inband_fd(fd, file, files);
 	rcu_read_unlock_sched();
 }
 
@@ -632,6 +635,7 @@ int __close_fd(struct files_struct *files, unsigned fd)
 		goto out_unlock;
 	rcu_assign_pointer(fdt->fd[fd], NULL);
 	__put_unused_fd(files, fd);
+	uninstall_inband_fd(fd, file, files);
 	spin_unlock(&files->file_lock);
 	return filp_close(file, files);
 
@@ -659,6 +663,7 @@ int __close_fd_get_file(unsigned int fd, struct file **res)
 		goto out_unlock;
 	rcu_assign_pointer(fdt->fd[fd], NULL);
 	__put_unused_fd(files, fd);
+	uninstall_inband_fd(fd, file, files);
 	spin_unlock(&files->file_lock);
 	get_file(file);
 	*res = file;
@@ -696,6 +701,7 @@ void do_close_on_exec(struct files_struct *files)
 				continue;
 			rcu_assign_pointer(fdt->fd[fd], NULL);
 			__put_unused_fd(files, fd);
+			uninstall_inband_fd(fd, file, files);
 			spin_unlock(&files->file_lock);
 			filp_close(file, files);
 			cond_resched();
@@ -872,6 +878,7 @@ __releases(&files->file_lock)
 		__set_close_on_exec(fd, fdt);
 	else
 		__clear_close_on_exec(fd, fdt);
+	replace_inband_fd(fd, file, files);
 	spin_unlock(&files->file_lock);
 
 	if (tofree)
diff --git a/include/asm-generic/atomic.h b/include/asm-generic/atomic.h
index 286867f593d2..e10b5059572d 100644
--- a/include/asm-generic/atomic.h
+++ b/include/asm-generic/atomic.h
@@ -76,9 +76,9 @@ static inline void atomic_##op(int i, atomic_t *v)			\
 {									\
 	unsigned long flags;						\
 									\
-	raw_local_irq_save(flags);					\
+	flags = hard_local_irq_save();					\
 	v->counter = v->counter c_op i;					\
-	raw_local_irq_restore(flags);					\
+	hard_local_irq_restore(flags);					\
 }
 
 #define ATOMIC_OP_RETURN(op, c_op)					\
@@ -87,9 +87,9 @@ static inline int atomic_##op##_return(int i, atomic_t *v)		\
 	unsigned long flags;						\
 	int ret;							\
 									\
-	raw_local_irq_save(flags);					\
+	flags = hard_local_irq_save();					\
 	ret = (v->counter = v->counter c_op i);				\
-	raw_local_irq_restore(flags);					\
+	hard_local_irq_restore(flags);					\
 									\
 	return ret;							\
 }
@@ -100,10 +100,10 @@ static inline int atomic_fetch_##op(int i, atomic_t *v)			\
 	unsigned long flags;						\
 	int ret;							\
 									\
-	raw_local_irq_save(flags);					\
+	flags = hard_local_irq_save();					\
 	ret = v->counter;						\
 	v->counter = v->counter c_op i;					\
-	raw_local_irq_restore(flags);					\
+	hard_local_irq_restore(flags);					\
 									\
 	return ret;							\
 }
diff --git a/include/asm-generic/cmpxchg-local.h b/include/asm-generic/cmpxchg-local.h
index f17f14f84d09..67d712ff0f01 100644
--- a/include/asm-generic/cmpxchg-local.h
+++ b/include/asm-generic/cmpxchg-local.h
@@ -23,7 +23,7 @@ static inline unsigned long __cmpxchg_local_generic(volatile void *ptr,
 	if (size == 8 && sizeof(unsigned long) != 8)
 		wrong_size_cmpxchg(ptr);
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	switch (size) {
 	case 1: prev = *(u8 *)ptr;
 		if (prev == old)
@@ -44,7 +44,7 @@ static inline unsigned long __cmpxchg_local_generic(volatile void *ptr,
 	default:
 		wrong_size_cmpxchg(ptr);
 	}
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 	return prev;
 }
 
@@ -57,11 +57,11 @@ static inline u64 __cmpxchg64_local_generic(volatile void *ptr,
 	u64 prev;
 	unsigned long flags;
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	prev = *(u64 *)ptr;
 	if (prev == old)
 		*(u64 *)ptr = new;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 	return prev;
 }
 
diff --git a/include/asm-generic/cmpxchg.h b/include/asm-generic/cmpxchg.h
index 9a24510cd8c1..475206bd5c85 100644
--- a/include/asm-generic/cmpxchg.h
+++ b/include/asm-generic/cmpxchg.h
@@ -32,10 +32,10 @@ unsigned long __xchg(unsigned long x, volatile void *ptr, int size)
 #ifdef __xchg_u8
 		return __xchg_u8(x, ptr);
 #else
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		ret = *(volatile u8 *)ptr;
 		*(volatile u8 *)ptr = x;
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		return ret;
 #endif /* __xchg_u8 */
 
@@ -43,10 +43,10 @@ unsigned long __xchg(unsigned long x, volatile void *ptr, int size)
 #ifdef __xchg_u16
 		return __xchg_u16(x, ptr);
 #else
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		ret = *(volatile u16 *)ptr;
 		*(volatile u16 *)ptr = x;
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		return ret;
 #endif /* __xchg_u16 */
 
@@ -54,10 +54,10 @@ unsigned long __xchg(unsigned long x, volatile void *ptr, int size)
 #ifdef __xchg_u32
 		return __xchg_u32(x, ptr);
 #else
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		ret = *(volatile u32 *)ptr;
 		*(volatile u32 *)ptr = x;
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		return ret;
 #endif /* __xchg_u32 */
 
@@ -66,10 +66,10 @@ unsigned long __xchg(unsigned long x, volatile void *ptr, int size)
 #ifdef __xchg_u64
 		return __xchg_u64(x, ptr);
 #else
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 		ret = *(volatile u64 *)ptr;
 		*(volatile u64 *)ptr = x;
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 		return ret;
 #endif /* __xchg_u64 */
 #endif /* CONFIG_64BIT */
diff --git a/include/asm-generic/evl/irq.h b/include/asm-generic/evl/irq.h
new file mode 100644
index 000000000000..ea3d047c33a2
--- /dev/null
+++ b/include/asm-generic/evl/irq.h
@@ -0,0 +1,21 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_GENERIC_EVL_IRQ_H
+#define _ASM_GENERIC_EVL_IRQ_H
+
+#include <evl/irq.h>
+
+static inline void irq_enter_pipeline(void)
+{
+#ifdef CONFIG_EVL
+	evl_enter_irq();
+#endif
+}
+
+static inline void irq_exit_pipeline(void)
+{
+#ifdef CONFIG_EVL
+	evl_exit_irq();
+#endif
+}
+
+#endif /* !_ASM_GENERIC_EVL_IRQ_H */
diff --git a/include/asm-generic/evl/thread_info.h b/include/asm-generic/evl/thread_info.h
new file mode 100644
index 000000000000..99cfd71e49bd
--- /dev/null
+++ b/include/asm-generic/evl/thread_info.h
@@ -0,0 +1,32 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _ASM_GENERIC_EVL_THREAD_INFO_H
+#define _ASM_GENERIC_EVL_THREAD_INFO_H
+
+#ifdef CONFIG_EVL
+
+struct evl_thread;
+
+struct oob_thread_state {
+	struct evl_thread *thread;
+	int preempt_count;
+};
+
+static inline
+void evl_init_thread_state(struct oob_thread_state *p)
+{
+	p->thread = NULL;
+	p->preempt_count = 0;
+}
+
+#else
+
+struct oob_thread_state { };
+
+static inline
+void evl_init_thread_state(struct oob_thread_state *p)
+{
+}
+
+#endif	/* !CONFIG_EVL */
+
+#endif /* !_ASM_GENERIC_EVL_THREAD_INFO_H */
diff --git a/include/asm-generic/irq_pipeline.h b/include/asm-generic/irq_pipeline.h
new file mode 100644
index 000000000000..f056d9c17123
--- /dev/null
+++ b/include/asm-generic/irq_pipeline.h
@@ -0,0 +1,122 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef __ASM_GENERIC_IRQ_PIPELINE_H
+#define __ASM_GENERIC_IRQ_PIPELINE_H
+
+#include <linux/kconfig.h>
+#include <linux/types.h>
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+#include <asm/bitsperlong.h>
+
+unsigned long inband_irq_save(void);
+void inband_irq_restore(unsigned long flags);
+void __inband_irq_enable(void);
+void inband_irq_enable(void);
+void inband_irq_disable(void);
+void inband_irq_restore_nosync(unsigned long flags);
+unsigned long inband_irqs_disabled(void);
+
+#define hard_cond_local_irq_enable()		hard_local_irq_enable()
+#define hard_cond_local_irq_disable()		hard_local_irq_disable()
+#define hard_cond_local_irq_save()		hard_local_irq_save()
+#define hard_cond_local_irq_restore(__flags)	hard_local_irq_restore(__flags)
+
+#define hard_local_irq_save()			native_irq_save()
+#define hard_local_irq_restore(__flags)		native_irq_restore(__flags)
+#define hard_local_irq_enable()			native_irq_enable()
+#define hard_local_irq_disable()		native_irq_disable()
+#define hard_local_save_flags()			native_save_flags()
+
+#define hard_irqs_disabled()			native_irqs_disabled()
+#define hard_irqs_disabled_flags(__flags)	native_irqs_disabled_flags(__flags)
+
+void irq_pipeline_nmi_enter(void);
+void irq_pipeline_nmi_exit(void);
+
+/* Swap then merge virtual and hardware interrupt states. */
+#define irqs_merge_flags(__flags, __stalled)				\
+	({								\
+		unsigned long __combo =					\
+			arch_irqs_virtual_to_native_flags(__stalled) |	\
+			arch_irqs_native_to_virtual_flags(__flags);	\
+		__combo;						\
+	})
+
+/* Extract swap virtual and hardware interrupt states. */
+#define irqs_split_flags(__combo, __stall_r)				\
+	({								\
+		unsigned long __virt = (__combo);			\
+		*(__stall_r) = hard_irqs_disabled_flags(__combo);	\
+		__virt &= ~arch_irqs_virtual_to_native_flags(*(__stall_r)); \
+		arch_irqs_virtual_to_native_flags(__virt);		\
+	})
+
+#else /* !CONFIG_IRQ_PIPELINE */
+
+#define hard_local_save_flags()			({ unsigned long __flags; \
+						raw_local_save_flags(__flags); __flags; })
+#define hard_local_irq_enable()			raw_local_irq_enable()
+#define hard_local_irq_disable()		raw_local_irq_disable()
+#define hard_local_irq_save()			({ unsigned long __flags; \
+						raw_local_irq_save(__flags); __flags; })
+#define hard_local_irq_restore(__flags)		raw_local_irq_restore(__flags)
+
+#define hard_cond_local_irq_enable()		do { } while(0)
+#define hard_cond_local_irq_disable()		do { } while(0)
+#define hard_cond_local_irq_save()		0
+#define hard_cond_local_irq_restore(__flags)	do { (void)(__flags); } while(0)
+
+#define hard_irqs_disabled()			irqs_disabled()
+#define hard_irqs_disabled_flags(__flags)	raw_irqs_disabled_flags(__flags)
+
+static inline void irq_pipeline_nmi_enter(void) { }
+static inline void irq_pipeline_nmi_exit(void) { }
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
+#define hard_local_irq_sync()			native_irq_sync()
+
+#if defined(CONFIG_SMP) && defined(CONFIG_IRQ_PIPELINE)
+#define hard_smp_local_irq_save()		hard_local_irq_save()
+#define hard_smp_local_irq_restore(__flags)	hard_local_irq_restore(__flags)
+#else /* !CONFIG_SMP */
+#define hard_smp_local_irq_save()		0
+#define hard_smp_local_irq_restore(__flags)	do { (void)(__flags); } while(0)
+#endif /* CONFIG_SMP */
+
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+void check_inband_stage(void);
+#define check_hard_irqs_disabled()		\
+	WARN_ON_ONCE(!hard_irqs_disabled())
+#define check_hard_irqs_disabled_in_smp()	\
+	WARN_ON_ONCE(IS_ENABLED(CONFIG_SMP) && !hard_irqs_disabled())
+#else
+static inline void check_inband_stage(void) { }
+static inline int check_hard_irqs_disabled(void) { return 0; }
+static inline int check_hard_irqs_disabled_in_smp(void) { return 0; }
+#endif
+
+extern bool irq_pipeline_oopsing;
+
+static inline bool irqs_pipelined(void)
+{
+	return IS_ENABLED(CONFIG_IRQ_PIPELINE);
+}
+
+static inline bool irq_pipeline_debug(void)
+{
+	return IS_ENABLED(CONFIG_DEBUG_IRQ_PIPELINE) &&
+		!irq_pipeline_oopsing;
+}
+
+static inline bool irq_pipeline_debug_locking(void)
+{
+	return IS_ENABLED(CONFIG_DEBUG_HARD_LOCKS);
+}
+
+#endif /* __ASM_GENERIC_IRQ_PIPELINE_H */
diff --git a/include/asm-generic/percpu.h b/include/asm-generic/percpu.h
index c2de013b2cf4..e8800e5b968e 100644
--- a/include/asm-generic/percpu.h
+++ b/include/asm-generic/percpu.h
@@ -125,9 +125,9 @@ do {									\
 ({									\
 	typeof(pcp) __ret;						\
 	unsigned long __flags;						\
-	raw_local_irq_save(__flags);					\
+	__flags = hard_local_irq_save();				\
 	__ret = raw_cpu_generic_read(pcp);				\
-	raw_local_irq_restore(__flags);					\
+	hard_local_irq_restore(__flags);				\
 	__ret;								\
 })
 
@@ -144,9 +144,9 @@ do {									\
 #define this_cpu_generic_to_op(pcp, val, op)				\
 do {									\
 	unsigned long __flags;						\
-	raw_local_irq_save(__flags);					\
+	__flags = hard_local_irq_save();				\
 	raw_cpu_generic_to_op(pcp, val, op);				\
-	raw_local_irq_restore(__flags);					\
+	hard_local_irq_restore(__flags);				\
 } while (0)
 
 
@@ -154,9 +154,9 @@ do {									\
 ({									\
 	typeof(pcp) __ret;						\
 	unsigned long __flags;						\
-	raw_local_irq_save(__flags);					\
+	__flags = hard_local_irq_save();				\
 	__ret = raw_cpu_generic_add_return(pcp, val);			\
-	raw_local_irq_restore(__flags);					\
+	hard_local_irq_restore(__flags);				\
 	__ret;								\
 })
 
@@ -164,9 +164,9 @@ do {									\
 ({									\
 	typeof(pcp) __ret;						\
 	unsigned long __flags;						\
-	raw_local_irq_save(__flags);					\
+	__flags = hard_local_irq_save();				\
 	__ret = raw_cpu_generic_xchg(pcp, nval);			\
-	raw_local_irq_restore(__flags);					\
+	hard_local_irq_restore(__flags);				\
 	__ret;								\
 })
 
@@ -174,9 +174,9 @@ do {									\
 ({									\
 	typeof(pcp) __ret;						\
 	unsigned long __flags;						\
-	raw_local_irq_save(__flags);					\
+	__flags = hard_local_irq_save();				\
 	__ret = raw_cpu_generic_cmpxchg(pcp, oval, nval);		\
-	raw_local_irq_restore(__flags);					\
+	hard_local_irq_restore(__flags);				\
 	__ret;								\
 })
 
@@ -184,10 +184,10 @@ do {									\
 ({									\
 	int __ret;							\
 	unsigned long __flags;						\
-	raw_local_irq_save(__flags);					\
+	__flags = hard_local_irq_save();				\
 	__ret = raw_cpu_generic_cmpxchg_double(pcp1, pcp2,		\
 			oval1, oval2, nval1, nval2);			\
-	raw_local_irq_restore(__flags);					\
+	hard_local_irq_restore(__flags);				\
 	__ret;								\
 })
 
diff --git a/include/dovetail/irq.h b/include/dovetail/irq.h
new file mode 100644
index 000000000000..ac8b5310e29d
--- /dev/null
+++ b/include/dovetail/irq.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _DOVETAIL_IRQ_H
+#define _DOVETAIL_IRQ_H
+
+/* Placeholders for pre- and post-IRQ handling. */
+
+static inline void irq_enter_pipeline(void) { }
+
+static inline void irq_exit_pipeline(void) { }
+
+#endif /* !_DOVETAIL_IRQ_H */
diff --git a/include/dovetail/mm_info.h b/include/dovetail/mm_info.h
new file mode 100644
index 000000000000..504bd1d875d1
--- /dev/null
+++ b/include/dovetail/mm_info.h
@@ -0,0 +1,12 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _DOVETAIL_MM_INFO_H
+#define _DOVETAIL_MM_INFO_H
+
+/*
+ * Placeholder for per-mm state information defined by the co-kernel.
+ */
+
+struct oob_mm_state {
+};
+
+#endif /* !_DOVETAIL_MM_INFO_H */
diff --git a/include/dovetail/thread_info.h b/include/dovetail/thread_info.h
new file mode 100644
index 000000000000..4dea8bf1ecff
--- /dev/null
+++ b/include/dovetail/thread_info.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef _DOVETAIL_THREAD_INFO_H
+#define _DOVETAIL_THREAD_INFO_H
+
+/*
+ * Placeholder for per-thread state information defined by the
+ * co-kernel.
+ */
+
+struct oob_thread_state {
+};
+
+#endif /* !_DOVETAIL_THREAD_INFO_H */
diff --git a/include/evl/assert.h b/include/evl/assert.h
new file mode 100644
index 000000000000..842c8e430ae4
--- /dev/null
+++ b/include/evl/assert.h
@@ -0,0 +1,52 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_ASSERT_H
+#define _EVL_ASSERT_H
+
+#include <linux/kconfig.h>
+
+#define EVL_INFO	KERN_INFO    "EVL: "
+#define EVL_WARNING	KERN_WARNING "EVL: "
+#define EVL_ERR		KERN_ERR     "EVL: "
+
+#define EVL_DEBUG(__subsys)				\
+	IS_ENABLED(CONFIG_EVL_DEBUG_##__subsys)
+#define EVL_ASSERT(__subsys, __cond)			\
+	(!WARN_ON(EVL_DEBUG(__subsys) && !(__cond)))
+#define EVL_WARN(__subsys, __cond, __fmt...)		\
+	WARN(EVL_DEBUG(__subsys) && (__cond), __fmt)
+#define EVL_WARN_ON(__subsys, __cond)			\
+	WARN_ON(EVL_DEBUG(__subsys) && (__cond))
+#define EVL_WARN_ON_ONCE(__subsys, __cond)		\
+	WARN_ON_ONCE(EVL_DEBUG(__subsys) && (__cond))
+#ifdef CONFIG_SMP
+#define EVL_WARN_ON_SMP(__subsys, __cond)		\
+	EVL_WARN_ON(__subsys, __cond)
+#else
+#define EVL_WARN_ON_SMP(__subsys, __cond)  0
+#endif
+
+#define oob_context_only()       EVL_WARN_ON_ONCE(CORE, running_inband())
+#define inband_context_only()    EVL_WARN_ON_ONCE(CORE, !running_inband())
+#ifdef CONFIG_SMP
+#define assert_hard_lock(__lock) EVL_WARN_ON_ONCE(CORE, \
+				!(raw_spin_is_locked(__lock) && hard_irqs_disabled()))
+#define assert_evl_lock(__lock) EVL_WARN_ON_ONCE(CORE, \
+				!(raw_spin_is_locked(&(__lock)->_lock) && oob_irqs_disabled()))
+#else
+#define assert_hard_lock(__lock) EVL_WARN_ON_ONCE(CORE, !hard_irqs_disabled())
+#define assert_evl_lock(__lock)  EVL_WARN_ON_ONCE(CORE, !oob_irqs_disabled())
+#endif
+
+#define assert_thread_pinned(__thread)			\
+	do {						\
+		assert_evl_lock(&(__thread)->lock);	\
+		assert_evl_lock(&(__thread)->rq->lock);	\
+	} while (0)
+
+#endif /* !_EVL_ASSERT_H */
diff --git a/include/evl/clock.h b/include/evl/clock.h
new file mode 100644
index 000000000000..8c55b371bea2
--- /dev/null
+++ b/include/evl/clock.h
@@ -0,0 +1,175 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_CLOCK_H
+#define _EVL_CLOCK_H
+
+#include <linux/types.h>
+#include <linux/time.h>
+#include <linux/ktime.h>
+#include <linux/cpumask.h>
+#include <evl/list.h>
+#include <evl/factory.h>
+#include <uapi/evl/clock.h>
+
+#define ONE_BILLION  1000000000
+
+struct evl_rq;
+struct evl_timerbase;
+struct clock_event_device;
+
+struct evl_clock_gravity {
+	ktime_t irq;
+	ktime_t kernel;
+	ktime_t user;
+};
+
+struct evl_clock {
+	/* (ns) */
+	ktime_t resolution;
+	/* Anticipation values for timer shots. */
+	struct evl_clock_gravity gravity;
+	/* Clock name. */
+	const char *name;
+	struct {
+		ktime_t (*read)(struct evl_clock *clock);
+		u64 (*read_cycles)(struct evl_clock *clock);
+		int (*set_time)(struct evl_clock *clock,
+				const struct timespec *ts);
+		void (*program_local_shot)(struct evl_clock *clock);
+		void (*program_remote_shot)(struct evl_clock *clock,
+					struct evl_rq *rq);
+		int (*set_gravity)(struct evl_clock *clock,
+				const struct evl_clock_gravity *p);
+		void (*reset_gravity)(struct evl_clock *clock);
+		void (*adjust)(struct evl_clock *clock);
+		int (*adjust_time)(struct evl_clock *clock,
+				struct timex *tx);
+	} ops;
+	struct evl_timerbase *timerdata;
+	struct evl_clock *master;
+	/* Offset from master clock. */
+	ktime_t offset;
+#ifdef CONFIG_SMP
+	/* CPU affinity of clock beat. */
+	struct cpumask affinity;
+#endif
+	struct list_head next;
+	struct evl_element element;
+	void (*dispose)(struct evl_clock *clock);
+} ____cacheline_aligned;
+
+extern struct evl_clock evl_mono_clock;
+
+extern struct evl_clock evl_realtime_clock;
+
+int evl_init_clock(struct evl_clock *clock,
+		const struct cpumask *affinity);
+
+int evl_init_slave_clock(struct evl_clock *clock,
+			struct evl_clock *master);
+
+void evl_core_tick(struct clock_event_device *dummy);
+
+void evl_announce_tick(struct evl_clock *clock);
+
+void evl_adjust_timers(struct evl_clock *clock,
+		ktime_t delta);
+
+void evl_stop_timers(struct evl_clock *clock);
+
+static inline u64 evl_read_clock_cycles(struct evl_clock *clock)
+{
+	return clock->ops.read_cycles(clock);
+}
+
+static ktime_t evl_ktime_monotonic(void)
+{
+	return ktime_get_mono_fast_ns();
+}
+
+static inline ktime_t evl_read_clock(struct evl_clock *clock)
+{
+	/*
+	 * In many occasions on the fast path, evl_read_clock() is
+	 * explicitly called with &evl_mono_clock which resolves as
+	 * a constant. Skip the clock trampoline handler, branching
+	 * immediately to the final code for such clock.
+	 */
+	if (clock == &evl_mono_clock)
+		return evl_ktime_monotonic();
+
+	return clock->ops.read(clock);
+}
+
+static inline int
+evl_set_clock_time(struct evl_clock *clock,
+		const struct timespec *ts)
+{
+	if (clock->ops.set_time)
+		return clock->ops.set_time(clock, ts);
+
+	return -EOPNOTSUPP;
+}
+
+static inline
+ktime_t evl_get_clock_resolution(struct evl_clock *clock)
+{
+	return clock->resolution;
+}
+
+static inline
+void evl_set_clock_resolution(struct evl_clock *clock,
+			ktime_t resolution)
+{
+	clock->resolution = resolution;
+}
+
+static inline
+int evl_set_clock_gravity(struct evl_clock *clock,
+			const struct evl_clock_gravity *gravity)
+{
+	if (clock->ops.set_gravity)
+		return clock->ops.set_gravity(clock, gravity);
+
+	return -EOPNOTSUPP;
+}
+
+static inline void evl_reset_clock_gravity(struct evl_clock *clock)
+{
+	if (clock->ops.reset_gravity)
+		clock->ops.reset_gravity(clock);
+}
+
+#define evl_get_clock_gravity(__clock, __type)  ((__clock)->gravity.__type)
+
+static inline
+int evl_clock_adjust_time(struct evl_clock *clock, struct timex *tx)
+{
+	if (clock->ops.adjust_time)
+		return clock->ops.adjust_time(clock, tx);
+
+	return -EOPNOTSUPP;
+}
+
+int evl_clock_init(void);
+
+void evl_clock_cleanup(void);
+
+int evl_register_clock(struct evl_clock *clock,
+		const struct cpumask *affinity);
+
+void evl_unregister_clock(struct evl_clock *clock);
+
+struct evl_clock *evl_get_clock_by_fd(int efd);
+
+static inline void evl_put_clock(struct evl_clock *clock)
+{
+	evl_put_element(&clock->element);
+}
+
+#endif /* !_EVL_CLOCK_H */
diff --git a/include/evl/control.h b/include/evl/control.h
new file mode 100644
index 000000000000..5a736ab2e5ea
--- /dev/null
+++ b/include/evl/control.h
@@ -0,0 +1,58 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_CONTROL_H
+#define _EVL_CONTROL_H
+
+#include <linux/atomic.h>
+#include <linux/notifier.h>
+#include <evl/factory.h>
+
+enum evl_run_states {
+	EVL_STATE_DISABLED,
+	EVL_STATE_RUNNING,
+	EVL_STATE_STOPPED,
+	EVL_STATE_TEARDOWN,
+	EVL_STATE_WARMUP,
+};
+
+extern atomic_t evl_runstate;
+
+static inline enum evl_run_states get_evl_state(void)
+{
+	return atomic_read(&evl_runstate);
+}
+
+static inline int evl_is_warming(void)
+{
+	return get_evl_state() == EVL_STATE_WARMUP;
+}
+
+static inline int evl_is_running(void)
+{
+	return get_evl_state() == EVL_STATE_RUNNING;
+}
+
+static inline int evl_is_enabled(void)
+{
+	return get_evl_state() != EVL_STATE_DISABLED;
+}
+
+static inline int evl_is_stopped(void)
+{
+	return get_evl_state() == EVL_STATE_STOPPED;
+}
+
+static inline void set_evl_state(enum evl_run_states state)
+{
+	atomic_set(&evl_runstate, state);
+}
+
+void evl_add_state_chain(struct notifier_block *nb);
+
+void evl_remove_state_chain(struct notifier_block *nb);
+
+#endif /* !_EVL_CONTROL_H */
diff --git a/include/evl/devices.h b/include/evl/devices.h
new file mode 100644
index 000000000000..29b168dd0f58
--- /dev/null
+++ b/include/evl/devices.h
@@ -0,0 +1,32 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_DEVICES_H
+#define _EVL_DEVICES_H
+
+#ifdef CONFIG_EVL
+
+#include <evl/file.h>
+#include <evl/lock.h>
+#include <evl/mutex.h>
+#include <evl/wait.h>
+#include <evl/poll.h>
+
+#else  /* !CONFIG_EVL */
+
+struct evl_file { };
+
+#define evl_open_file(__efilp, __filp)	({ 0; })
+#define evl_release_file(__efilp)	do { } while (0)
+
+#endif	/* !CONFIG_EVL */
+
+static inline bool evl_enabled(void)
+{
+	return IS_ENABLED(CONFIG_EVL);
+}
+
+#endif /* !_EVL_DEVICES_H */
diff --git a/include/evl/devices/gpio.h b/include/evl/devices/gpio.h
new file mode 100644
index 000000000000..4a0f15cc9cc4
--- /dev/null
+++ b/include/evl/devices/gpio.h
@@ -0,0 +1,38 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_DEVICES_GPIO_H
+#define _EVL_DEVICES_GPIO_H
+
+#include <evl/devices.h>
+#include <uapi/evl/devices/gpio.h>
+
+#ifdef CONFIG_EVL
+
+#include <evl/poll.h>
+#include <evl/wait.h>
+#include <evl/irq.h>
+
+struct lineevent_oob_state {
+	struct evl_file efile;
+	struct evl_poll_head poll_head;
+	struct evl_wait_queue wait;
+	hard_spinlock_t lock;
+};
+
+#else
+
+struct lineevent_oob_state {
+	struct evl_file efile;
+};
+
+#endif
+
+struct linehandle_oob_state {
+	struct evl_file efile;
+};
+
+#endif /* !_EVL_DEVICES_GPIO_H */
diff --git a/include/evl/factory.h b/include/evl/factory.h
new file mode 100644
index 000000000000..dc4ac92bf138
--- /dev/null
+++ b/include/evl/factory.h
@@ -0,0 +1,163 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_FACTORY_H
+#define _EVL_FACTORY_H
+
+#include <linux/device.h>
+#include <linux/cdev.h>
+#include <linux/fs.h>
+#include <linux/bits.h>
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <linux/rbtree.h>
+#include <linux/rcupdate.h>
+#include <linux/workqueue.h>
+#include <linux/irq_work.h>
+#include <linux/mutex.h>
+#include <linux/hashtable.h>
+#include <evl/file.h>
+#include <uapi/evl/types.h>
+
+#define element_of(__filp, __type)					\
+	({								\
+		struct evl_file_binding *__fbind = (__filp)->private_data; \
+		container_of(__fbind->element, __type, element);	\
+	})
+
+#define fundle_of(__obj)	((__obj)->element.fundle)
+
+struct evl_element;
+
+#define EVL_FACTORY_CLONE	BIT(0)
+#define EVL_FACTORY_SINGLE	BIT(1)
+
+#define EVL_DEVHASH_BITS	8
+
+struct evl_factory {
+	const char *name;
+	const struct file_operations *fops;
+	unsigned int nrdev;
+	struct evl_element *(*build)(struct evl_factory *fac,
+				const char *name,
+				void __user *u_attrs,
+				u32 *state_offp);
+	void (*dispose)(struct evl_element *e);
+	const struct attribute_group **attrs;
+	int flags;
+	struct {
+		struct device_type type;
+		struct class *class;
+		struct cdev cdev;
+		struct device *dev;
+		dev_t sub_rdev;
+		kuid_t kuid;
+		kgid_t kgid;
+		unsigned long *minor_map;
+		struct evl_index {
+			struct rb_root root;
+			hard_spinlock_t lock;
+			fundle_t generator;
+		} index;
+		DECLARE_HASHTABLE(name_hash, EVL_DEVHASH_BITS);
+		struct mutex hash_lock;
+	}; /* Internal. */
+};
+
+struct evl_element {
+	struct rcu_head rcu;
+	struct evl_factory *factory;
+	struct cdev cdev;
+	struct device *dev;
+	struct filename *devname;
+	unsigned int minor;
+	int refs;
+	bool zombie;
+	hard_spinlock_t ref_lock;
+	fundle_t fundle;
+	struct rb_node index_node;
+	struct irq_work irq_work;
+	struct work_struct work;
+	struct hlist_node hash;
+};
+
+static inline const char *
+evl_element_name(struct evl_element *e)
+{
+	if (e->devname)
+		return e->devname->name;
+
+	return NULL;
+}
+
+int evl_init_element(struct evl_element *e,
+		struct evl_factory *fac);
+
+void evl_destroy_element(struct evl_element *e);
+
+void evl_get_element(struct evl_element *e);
+
+struct evl_element *
+__evl_get_element_by_fundle(struct evl_factory *fac,
+			fundle_t fundle);
+
+#define evl_get_element_by_fundle(__fac, __fundle, __type)		\
+	({								\
+		struct evl_element *__e;				\
+		__e = __evl_get_element_by_fundle(__fac, __fundle);	\
+		__e ? container_of(__e, __type, element) : NULL;	\
+	})
+
+/*
+ * An element can be disposed of only after the device backing it is
+ * removed. If @dev is valid, so is @e at the time of the call.
+ */
+#define evl_get_element_by_dev(__dev, __type)				\
+	({								\
+		struct evl_element *__e = dev_get_drvdata(__dev);	\
+		evl_get_element(__e);					\
+		container_of(__e, __type, element);			\
+	})
+
+void evl_put_element(struct evl_element *e);
+
+int evl_open_element(struct inode *inode,
+		struct file *filp);
+
+int evl_release_element(struct inode *inode,
+			struct file *filp);
+
+int evl_create_element_device(struct evl_element *e,
+			struct evl_factory *fac,
+			const char *name);
+
+void evl_remove_element_device(struct evl_element *e);
+
+void evl_index_element(struct evl_element *e);
+
+int evl_index_element_at(struct evl_element *e,
+			fundle_t fundle);
+
+void evl_unindex_element(struct evl_element *e);
+
+int evl_early_init_factories(void);
+
+void evl_early_cleanup_factories(void);
+
+int evl_late_init_factories(void);
+
+void evl_cleanup_factories(void);
+
+extern struct evl_factory evl_clock_factory;
+extern struct evl_factory evl_control_factory;
+extern struct evl_factory evl_monitor_factory;
+extern struct evl_factory evl_poll_factory;
+extern struct evl_factory evl_thread_factory;
+extern struct evl_factory evl_trace_factory;
+extern struct evl_factory evl_xbuf_factory;
+extern struct evl_factory evl_proxy_factory;
+
+#endif /* !_EVL_FACTORY_H */
diff --git a/include/evl/file.h b/include/evl/file.h
new file mode 100644
index 000000000000..15f6cd5184cf
--- /dev/null
+++ b/include/evl/file.h
@@ -0,0 +1,73 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_FILE_H
+#define _EVL_FILE_H
+
+#include <linux/spinlock.h>
+#include <linux/atomic.h>
+#include <linux/rbtree.h>
+#include <linux/list.h>
+#include <linux/completion.h>
+#include <linux/irq_work.h>
+
+struct file;
+struct files_struct;
+struct evl_element;
+struct evl_poll_node;
+
+struct evl_file {
+	struct file *filp;
+	atomic_t oob_refs;
+	struct completion oob_done;
+	struct irq_work oob_work;
+};
+
+struct evl_fd {
+	unsigned int fd;
+	struct evl_file *efilp;
+	struct files_struct *files;
+	struct rb_node rb;
+	struct list_head poll_nodes; /* poll_item->node */
+};
+
+struct evl_file_binding {
+	struct evl_file efile;
+	struct evl_element *element;
+};
+
+int evl_open_file(struct evl_file *efilp,
+		struct file *filp);
+
+void evl_release_file(struct evl_file *efilp);
+
+static inline
+void evl_get_fileref(struct evl_file *efilp)
+{
+	atomic_inc(&efilp->oob_refs);
+}
+
+struct evl_file *evl_get_file(unsigned int fd);
+
+void __evl_put_file(struct evl_file *efilp);
+
+static inline
+void evl_put_file(struct evl_file *efilp) /* OOB */
+{
+	if (atomic_dec_return(&efilp->oob_refs) == 0)
+		__evl_put_file(efilp);
+}
+
+struct evl_file *evl_watch_fd(unsigned int fd,
+			struct evl_poll_node *node);
+
+void evl_ignore_fd(struct evl_poll_node *node);
+
+int evl_init_files(void);
+
+void evl_cleanup_files(void);
+
+#endif /* !_EVL_FILE_H */
diff --git a/include/evl/flag.h b/include/evl/flag.h
new file mode 100644
index 000000000000..4a9ebed05174
--- /dev/null
+++ b/include/evl/flag.h
@@ -0,0 +1,136 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2017 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_FLAG_H
+#define _EVL_FLAG_H
+
+#include <evl/wait.h>
+#include <evl/sched.h>
+
+struct evl_flag {
+	struct evl_wait_queue wait;
+	bool raised;
+};
+
+#define EVL_FLAG_INITIALIZER(__name) {				\
+		.wait = EVL_WAIT_INITIALIZER((__name).wait),	\
+		.raised = false,				\
+	}
+
+#define DEFINE_EVL_FLAG(__name)					\
+	struct evl_flag __name = EVL_FLAG_INITIALIZER(__name)
+
+static inline void evl_init_flag(struct evl_flag *wf)
+{
+	evl_init_wait(&wf->wait, &evl_mono_clock, EVL_WAIT_PRIO);
+	wf->raised = false;
+}
+
+static inline void evl_destroy_flag(struct evl_flag *wf)
+{
+	evl_destroy_wait(&wf->wait);
+}
+
+static inline bool evl_read_flag(struct evl_flag *wf)
+{
+	if (wf->raised) {
+		wf->raised = false;
+		return true;
+	}
+
+	return false;
+}
+
+#define evl_lock_flag(__wf, __flags)		\
+	evl_spin_lock_irqsave(&(__wf)->wait.lock, __flags)
+
+#define evl_unlock_flag(__wf, __flags)		\
+	evl_spin_unlock_irqrestore(&(__wf)->wait.lock, __flags)
+
+static inline
+int evl_wait_flag_timeout(struct evl_flag *wf,
+			ktime_t timeout, enum evl_tmode timeout_mode)
+{
+	return evl_wait_event_timeout(&wf->wait, timeout,
+				timeout_mode, evl_read_flag(wf));
+}
+
+static inline int evl_wait_flag(struct evl_flag *wf)
+{
+	return evl_wait_flag_timeout(wf, EVL_INFINITE, EVL_REL);
+}
+
+/* wf->wait.lock held, irqs off */
+static inline struct evl_thread *evl_wait_flag_head(struct evl_flag *wf)
+{
+	return evl_wait_head(&wf->wait);
+}
+
+/* wf->wait.lock held, irqs off */
+static inline void evl_raise_flag_locked(struct evl_flag *wf)
+{
+	wf->raised = true;
+	evl_flush_wait_locked(&wf->wait, 0);
+}
+
+static inline void evl_raise_flag_nosched(struct evl_flag *wf)
+{
+	unsigned long flags;
+
+	evl_lock_flag(wf, flags);
+	evl_raise_flag_locked(wf);
+	evl_unlock_flag(wf, flags);
+}
+
+static inline void evl_raise_flag(struct evl_flag *wf)
+{
+	evl_raise_flag_nosched(wf);
+	evl_schedule();
+}
+
+/* wf->wait.lock held, irqs off */
+static inline void evl_pulse_flag_locked(struct evl_flag *wf)
+{
+	evl_flush_wait_locked(&wf->wait, T_BCAST);
+}
+
+static inline void evl_pulse_flag_nosched(struct evl_flag *wf)
+{
+	unsigned long flags;
+
+	evl_lock_flag(wf, flags);
+	evl_pulse_flag_locked(wf);
+	evl_unlock_flag(wf, flags);
+}
+
+static inline void evl_pulse_flag(struct evl_flag *wf)
+{
+	evl_pulse_flag_nosched(wf);
+	evl_schedule();
+}
+
+/* wf->wait.lock held, irqs off */
+static inline void evl_flush_flag_locked(struct evl_flag *wf, int reason)
+{
+	evl_flush_wait_locked(&wf->wait, reason);
+}
+
+static inline void evl_flush_flag_nosched(struct evl_flag *wf, int reason)
+{
+	unsigned long flags;
+
+	evl_lock_flag(wf, flags);
+	evl_flush_flag_locked(wf, reason);
+	evl_unlock_flag(wf, flags);
+}
+
+static inline void evl_flush_flag(struct evl_flag *wf, int reason)
+{
+	evl_flush_flag_nosched(wf, reason);
+	evl_schedule();
+}
+
+#endif /* _EVL_FLAG_H */
diff --git a/include/evl/init.h b/include/evl/init.h
new file mode 100644
index 000000000000..b588c58b81f4
--- /dev/null
+++ b/include/evl/init.h
@@ -0,0 +1,34 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_INIT_H
+#define _EVL_INIT_H
+
+#include <linux/dovetail.h>
+
+struct evl_machine_cpudata {
+};
+
+DECLARE_PER_CPU(struct evl_machine_cpudata, evl_machine_cpudata);
+
+extern struct cpumask evl_oob_cpus;
+
+#ifdef CONFIG_EVL_DEBUG
+void evl_warn_init(const char *fn, int level, int status);
+#else
+static inline void evl_warn_init(const char *fn, int level, int status)
+{ }
+#endif
+
+#define EVL_INIT_CALL(__level, __call)				\
+	({							\
+		int __ret = __call;				\
+		if (__ret)					\
+			evl_warn_init(#__call, __level, __ret);	\
+		__ret;						\
+	})
+
+#endif /* !_EVL_INIT_H_ */
diff --git a/include/evl/irq.h b/include/evl/irq.h
new file mode 100644
index 000000000000..babee3738b4c
--- /dev/null
+++ b/include/evl/irq.h
@@ -0,0 +1,38 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2017 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_IRQ_H
+#define _EVL_IRQ_H
+
+#include <evl/sched.h>
+
+/* hard irqs off. */
+static inline void evl_enter_irq(void)
+{
+	struct evl_rq *rq = this_evl_rq();
+
+	rq->local_flags |= RQ_IRQ;
+}
+
+/* hard irqs off. */
+static inline void evl_exit_irq(void)
+{
+	struct evl_rq *this_rq = this_evl_rq();
+
+	this_rq->local_flags &= ~RQ_IRQ;
+
+	/*
+	 * CAUTION: Switching stages as a result of rescheduling may
+	 * re-enable irqs, shut them off before returning if so.
+	 */
+	if ((this_rq->flags|this_rq->local_flags) & RQ_SCHED) {
+		evl_schedule();
+		if (!hard_irqs_disabled())
+			hard_local_irq_disable();
+	}
+}
+
+#endif /* !_EVL_IRQ_H */
diff --git a/include/evl/list.h b/include/evl/list.h
new file mode 100644
index 000000000000..742ce664b084
--- /dev/null
+++ b/include/evl/list.h
@@ -0,0 +1,46 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2013, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_LIST_H
+#define _EVL_LIST_H
+
+#include <linux/list.h>
+
+#define __list_add_pri(__new, __head, __member_pri, __member_next, __relop)	\
+do {										\
+	typeof(*__new) *__pos;							\
+	if (list_empty(__head))							\
+		list_add(&(__new)->__member_next, __head);		 	\
+	else {									\
+		list_for_each_entry_reverse(__pos, __head, __member_next) {	\
+			if ((__new)->__member_pri __relop __pos->__member_pri)	\
+				break;						\
+		}								\
+		list_add(&(__new)->__member_next, &__pos->__member_next); 	\
+	}									\
+} while (0)
+
+#define list_add_priff(__new, __head, __member_pri, __member_next)		\
+	__list_add_pri(__new, __head, __member_pri, __member_next, <=)
+
+#define list_add_prilf(__new, __head, __member_pri, __member_next)		\
+	__list_add_pri(__new, __head, __member_pri, __member_next, <)
+
+#define list_get_entry(__head, __type, __member)		\
+  ({								\
+	  __type *__item;					\
+	  __item = list_first_entry(__head, __type, __member);	\
+	  list_del(&__item->__member);				\
+	  __item;						\
+  })
+
+#ifndef list_next_entry
+#define list_next_entry(__item, __member)			\
+	list_entry((__item)->__member.next, typeof(*(__item)), __member)
+#endif
+
+#endif /* !_EVL_LIST_H_ */
diff --git a/include/evl/lock.h b/include/evl/lock.h
new file mode 100644
index 000000000000..177ce71acbf8
--- /dev/null
+++ b/include/evl/lock.h
@@ -0,0 +1,66 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum <rpm@xenomai.org>
+ */
+#ifndef _EVL_LOCK_H
+#define _EVL_LOCK_H
+
+#include <linux/irq_pipeline.h>
+
+/*
+ * The spinlock API used in the EVL core, which preserves Dovetail's
+ * stall bit for the out-of-band stage.
+ */
+
+typedef struct evl_spinlock {
+	hard_spinlock_t _lock;
+} evl_spinlock_t;
+
+#define __EVL_SPIN_LOCK_INITIALIZER(__lock)	{			\
+		._lock = __HARD_SPIN_LOCK_INITIALIZER((__lock)._lock),	\
+	}
+
+#define DEFINE_EVL_SPINLOCK(__lock)	\
+	evl_spinlock_t __lock = __EVL_SPIN_LOCK_INITIALIZER(__lock)
+
+#define evl_spin_lock_init(__lock)	\
+	raw_spin_lock_init(&(__lock)->_lock)
+
+#define evl_spin_lock(__lock)		\
+	raw_spin_lock(&(__lock)->_lock)
+
+#define evl_spin_lock_nested(__lock, __subclass)	\
+	raw_spin_lock_nested(&(__lock)->_lock, __subclass)
+
+#define evl_spin_trylock(__lock)			\
+	raw_spin_trylock(&(__lock)->_lock)
+
+#define evl_spin_lock_irq(__lock)			\
+	do {						\
+		oob_irq_disable();			\
+		raw_spin_lock(&(__lock)->_lock);	\
+	} while (0)
+
+#define evl_spin_unlock_irq(__lock)			\
+	do {						\
+		raw_spin_unlock(&(__lock)->_lock);	\
+		oob_irq_enable();			\
+	} while (0)
+
+#define evl_spin_lock_irqsave(__lock, __flags)		\
+	do {						\
+		(__flags) = oob_irq_save();		\
+		evl_spin_lock(__lock);			\
+	} while (0)
+
+#define evl_spin_unlock(__lock)				\
+	raw_spin_unlock(&(__lock)->_lock)
+
+#define evl_spin_unlock_irqrestore(__lock, __flags)	\
+	do {						\
+		raw_spin_unlock(&(__lock)->_lock);	\
+		oob_irq_restore(__flags);		\
+	} while (0)
+
+#endif /* !_EVL_LOCK_H */
diff --git a/include/evl/memory.h b/include/evl/memory.h
new file mode 100644
index 000000000000..3219ee4bdf80
--- /dev/null
+++ b/include/evl/memory.h
@@ -0,0 +1,141 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_MEMORY_H
+#define _EVL_MEMORY_H
+
+#include <linux/types.h>
+#include <linux/atomic.h>
+#include <linux/spinlock.h>
+#include <linux/rbtree.h>
+#include <evl/list.h>
+#include <evl/factory.h>
+#include <uapi/evl/types.h>
+
+#define EVL_HEAP_PAGE_SHIFT	9 /* 2^9 => 512 bytes */
+#define EVL_HEAP_PAGE_SIZE	(1UL << EVL_HEAP_PAGE_SHIFT)
+#define EVL_HEAP_PAGE_MASK	(~(EVL_HEAP_PAGE_SIZE - 1))
+#define EVL_HEAP_MIN_LOG2	4 /* 16 bytes */
+/*
+ * Use bucketed memory for sizes between 2^EVL_HEAP_MIN_LOG2 and
+ * 2^(EVL_HEAP_PAGE_SHIFT-1).
+ */
+#define EVL_HEAP_MAX_BUCKETS	(EVL_HEAP_PAGE_SHIFT - EVL_HEAP_MIN_LOG2)
+#define EVL_HEAP_MIN_ALIGN	(1U << EVL_HEAP_MIN_LOG2)
+/* Maximum size of a heap (4Gb - PAGE_SIZE). */
+#define EVL_HEAP_MAX_HEAPSZ	(4294967295U - PAGE_SIZE + 1)
+/* Bits we need for encoding a page # */
+#define EVL_HEAP_PGENT_BITS      (32 - EVL_HEAP_PAGE_SHIFT)
+/* Each page is represented by a page map entry. */
+#define EVL_HEAP_PGMAP_BYTES	sizeof(struct evl_heap_pgentry)
+
+struct evl_heap_pgentry {
+	/* Linkage in bucket list. */
+	unsigned int prev : EVL_HEAP_PGENT_BITS;
+	unsigned int next : EVL_HEAP_PGENT_BITS;
+	/*  page_list or log2. */
+	unsigned int type : 6;
+	/*
+	 * We hold either a spatial map of busy blocks within the page
+	 * for bucketed memory (up to 32 blocks per page), or the
+	 * overall size of the multi-page block if entry.type ==
+	 * page_list.
+	 */
+	union {
+		u32 map;
+		u32 bsize;
+	};
+};
+
+/*
+ * A range descriptor is stored at the beginning of the first page of
+ * a range of free pages. evl_heap_range.size is nrpages *
+ * EVL_HEAP_PAGE_SIZE. Ranges are indexed by address and size in
+ * rbtrees.
+ */
+struct evl_heap_range {
+	struct rb_node addr_node;
+	struct rb_node size_node;
+	size_t size;
+};
+
+struct evl_heap {
+	void *membase;
+	struct rb_root addr_tree;
+	struct rb_root size_tree;
+	struct evl_heap_pgentry *pagemap;
+	size_t usable_size;
+	size_t used_size;
+	u32 buckets[EVL_HEAP_MAX_BUCKETS];
+	hard_spinlock_t lock;
+	struct list_head next;
+};
+
+extern struct evl_heap evl_system_heap;
+
+extern struct evl_heap evl_shared_heap;
+
+static inline size_t evl_get_heap_size(const struct evl_heap *heap)
+{
+	return heap->usable_size;
+}
+
+static inline size_t evl_get_heap_free(const struct evl_heap *heap)
+{
+	return heap->usable_size - heap->used_size;
+}
+
+static inline void *evl_get_heap_base(const struct evl_heap *heap)
+{
+	return heap->membase;
+}
+
+int evl_init_heap(struct evl_heap *heap, void *membase,
+		size_t size);
+
+void evl_destroy_heap(struct evl_heap *heap);
+
+void *evl_alloc_chunk(struct evl_heap *heap, size_t size);
+
+void evl_free_chunk(struct evl_heap *heap, void *block);
+
+ssize_t evl_check_chunk(struct evl_heap *heap, void *block);
+
+static inline void *evl_zalloc_chunk(struct evl_heap *heap, u32 size)
+{
+	void *p;
+
+	p = evl_alloc_chunk(heap, size);
+	if (p)
+		memset(p, 0, size);
+
+	return p;
+}
+
+static inline
+int evl_shared_offset(void *p)
+{
+	return p - evl_get_heap_base(&evl_shared_heap);
+}
+
+static inline void *evl_alloc(size_t size)
+{
+	return evl_alloc_chunk(&evl_system_heap, size);
+}
+
+static inline void evl_free(void *ptr)
+{
+	evl_free_chunk(&evl_system_heap, ptr);
+}
+
+int evl_init_memory(void);
+
+void evl_cleanup_memory(void);
+
+extern size_t evl_shm_size;
+
+#endif /* !_EVL_MEMORY_H */
diff --git a/include/evl/monitor.h b/include/evl/monitor.h
new file mode 100644
index 000000000000..441decab3aad
--- /dev/null
+++ b/include/evl/monitor.h
@@ -0,0 +1,27 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_MONITOR_H
+#define _EVL_MONITOR_H
+
+#include <evl/factory.h>
+#include <evl/thread.h>
+#include <evl/sched.h>
+
+int evl_signal_monitor_targeted(struct evl_thread *target,
+				int monfd);
+
+void __evl_commit_monitor_ceiling(void);
+
+static inline void evl_commit_monitor_ceiling(void)
+{
+	struct evl_thread *curr = evl_current();
+
+	if (curr->u_window->pp_pending != EVL_NO_HANDLE)
+		__evl_commit_monitor_ceiling();
+}
+
+#endif /* !_EVL_MONITOR_H */
diff --git a/include/evl/mutex.h b/include/evl/mutex.h
new file mode 100644
index 000000000000..14a81bd6b2fa
--- /dev/null
+++ b/include/evl/mutex.h
@@ -0,0 +1,149 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_MUTEX_H
+#define _EVL_MUTEX_H
+
+#include <linux/types.h>
+#include <linux/ktime.h>
+#include <linux/atomic.h>
+#include <evl/list.h>
+#include <evl/assert.h>
+#include <evl/timer.h>
+#include <evl/thread.h>
+#include <uapi/evl/mutex.h>
+
+struct evl_clock;
+struct evl_thread;
+
+#define EVL_MUTEX_PI      	BIT(0)
+#define EVL_MUTEX_PP      	BIT(1)
+#define EVL_MUTEX_CLAIMED	BIT(2)
+#define EVL_MUTEX_CEILING	BIT(3)
+
+struct evl_mutex {
+	int wprio;
+	int flags;
+	struct evl_thread *owner;
+	struct evl_clock *clock;
+	atomic_t *fastlock;
+	u32 *ceiling_ref;
+	evl_spinlock_t lock;
+	struct evl_wait_channel wchan;
+	struct list_head next_booster; /* thread->boosters */
+	struct list_head next_tracker;   /* thread->trackers */
+};
+
+void __evl_init_mutex(struct evl_mutex *mutex,
+		struct evl_clock *clock,
+		atomic_t *fastlock,
+		u32 *ceiling_ref);
+
+#define evl_init_mutex_pi(__mutex, __clock, __fastlock)		\
+	do {							\
+		static struct lock_class_key __key;		\
+		__evl_init_mutex(__mutex, __clock, __fastlock, NULL);	\
+		lockdep_set_class_and_name(&(__mutex)->lock._lock, \
+					&__key, #__mutex);	   \
+	} while (0)
+
+#define evl_init_mutex_pp(__mutex, __clock, __fastlock, __ceiling)	\
+	do {								\
+		static struct lock_class_key __key;			\
+		__evl_init_mutex(__mutex, __clock, __fastlock, __ceiling); \
+		lockdep_set_class_and_name(&(__mutex)->lock._lock, \
+					&__key, #__mutex);	   \
+	} while (0)
+
+void evl_destroy_mutex(struct evl_mutex *mutex);
+
+int evl_trylock_mutex(struct evl_mutex *mutex);
+
+int evl_lock_mutex_timeout(struct evl_mutex *mutex, ktime_t timeout,
+			enum evl_tmode timeout_mode);
+
+static inline int evl_lock_mutex(struct evl_mutex *mutex)
+{
+	return evl_lock_mutex_timeout(mutex, EVL_INFINITE, EVL_REL);
+}
+
+void __evl_unlock_mutex(struct evl_mutex *mutex);
+
+void evl_unlock_mutex(struct evl_mutex *mutex);
+
+void evl_flush_mutex(struct evl_mutex *mutex,
+		int reason);
+
+void evl_commit_mutex_ceiling(struct evl_mutex *mutex);
+
+void evl_detect_boost_drop(struct evl_thread *owner);
+
+int evl_reorder_mutex_wait(struct evl_thread *waiter,
+			struct evl_thread *originator);
+
+int evl_follow_mutex_depend(struct evl_wait_channel *wchan,
+			struct evl_thread *originator);
+
+void evl_drop_tracking_mutexes(struct evl_thread *curr);
+
+struct evl_kmutex {
+	struct evl_mutex mutex;
+	atomic_t fastlock;
+};
+
+#define EVL_KMUTEX_INITIALIZER(__name) {				\
+		.mutex = {						\
+			.fastlock = &(__name).fastlock,			\
+			.flags = EVL_MUTEX_PI,				\
+			.owner = NULL,					\
+			.wprio = -1,					\
+			.ceiling_ref = NULL,				\
+			.clock = &evl_mono_clock,			\
+			.lock = __EVL_SPIN_LOCK_INITIALIZER((__name).lock), \
+			.wchan = {					\
+				.reorder_wait = evl_reorder_mutex_wait,	\
+				.follow_depend = evl_follow_mutex_depend, \
+				.wait_list = LIST_HEAD_INIT((__name).mutex.wchan.wait_list), \
+			},						\
+		},							\
+		.fastlock = ATOMIC_INIT(0),				\
+	}
+
+#define DEFINE_EVL_KMUTEX(__name)					\
+	struct evl_kmutex __name = EVL_KMUTEX_INITIALIZER(__name)
+
+static inline
+void evl_init_kmutex(struct evl_kmutex *kmutex)
+{
+	atomic_set(&kmutex->fastlock, 0);
+	evl_init_mutex_pi(&kmutex->mutex, &evl_mono_clock, &kmutex->fastlock);
+}
+
+static inline
+void evl_destroy_kmutex(struct evl_kmutex *kmutex)
+{
+	evl_destroy_mutex(&kmutex->mutex);
+}
+
+static inline
+int evl_trylock_kmutex(struct evl_kmutex *kmutex)
+{
+	return evl_trylock_mutex(&kmutex->mutex);
+}
+
+static inline
+int evl_lock_kmutex(struct evl_kmutex *kmutex)
+{
+	return evl_lock_mutex(&kmutex->mutex);
+}
+
+static inline
+void evl_unlock_kmutex(struct evl_kmutex *kmutex)
+{
+	return evl_unlock_mutex(&kmutex->mutex);
+}
+
+#endif /* !_EVL_MUTEX_H */
diff --git a/include/evl/poll.h b/include/evl/poll.h
new file mode 100644
index 000000000000..522229a3559a
--- /dev/null
+++ b/include/evl/poll.h
@@ -0,0 +1,80 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_POLL_H
+#define _EVL_POLL_H
+
+#include <linux/types.h>
+#include <linux/list.h>
+#include <linux/rbtree.h>
+#include <linux/spinlock.h>
+#include <linux/poll.h>
+#include <evl/lock.h>
+#include <evl/wait.h>
+#include <evl/factory.h>
+#include <uapi/evl/poll.h>
+
+struct file;
+
+#define EVL_POLLHEAD_INITIALIZER(__name) {				\
+		.watchpoints = LIST_HEAD_INIT((__name).watchpoints),	\
+		.lock = __EVL_SPIN_LOCK_INITIALIZER((__name).lock),	\
+	}
+
+struct evl_poll_head {
+	struct list_head watchpoints; /* struct poll_watchpoint */
+	evl_spinlock_t lock;
+};
+
+struct evl_poll_node {
+	struct list_head next;	/* in evl_fd->poll_nodes */
+};
+
+/*
+ * The watchpoint struct linked to poll heads by drivers. This watches
+ * files not elements, so that we can monitor any type of EVL files.
+ */
+struct evl_poll_watchpoint {
+	unsigned int fd;
+	int events_polled;
+	int events_received;
+	struct oob_poll_wait wait;
+	struct evl_flag *flag;
+	struct file *filp;
+	struct evl_poll_head *head;
+	void (*unwatch)(struct file *filp);
+	struct evl_poll_node node;
+};
+
+static inline
+void evl_init_poll_head(struct evl_poll_head *head)
+{
+	INIT_LIST_HEAD(&head->watchpoints);
+	evl_spin_lock_init(&head->lock);
+}
+
+void evl_poll_watch(struct evl_poll_head *head,
+		struct oob_poll_wait *wait,
+		void (*unwait)(struct file *filp));
+
+void __evl_signal_poll_events(struct evl_poll_head *head,
+			      int events);
+
+static inline void
+evl_signal_poll_events(struct evl_poll_head *head,
+		       int events)
+{
+	/* Quick check. We'll redo under lock */
+	if (!list_empty(&head->watchpoints))
+		__evl_signal_poll_events(head, events);
+
+}
+
+void evl_drop_poll_table(struct evl_thread *thread);
+
+void evl_drop_watchpoints(struct list_head *drop_list);
+
+#endif /* !_EVL_POLL_H */
diff --git a/include/evl/sched.h b/include/evl/sched.h
new file mode 100644
index 000000000000..4b1cd974c4d4
--- /dev/null
+++ b/include/evl/sched.h
@@ -0,0 +1,623 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_H
+#define _EVL_SCHED_H
+
+#include <linux/percpu.h>
+#include <linux/list.h>
+#include <evl/lock.h>
+#include <evl/thread.h>
+#include <evl/sched/queue.h>
+#include <evl/sched/weak.h>
+#include <evl/sched/quota.h>
+#include <evl/sched/tp.h>
+#include <evl/assert.h>
+#include <evl/init.h>
+
+/*
+ * Shared rq flags bits.
+ *
+ * A rescheduling operation is pending. May also be present in the
+ * private flags.
+ */
+#define RQ_SCHED	0x10000000
+
+/**
+ * Private rq flags (combined in test operation with shared bits by
+ * evl_schedule(), care for any conflict).
+ *
+ * Currently running in tick handler context.
+ */
+#define RQ_TIMER	0x00010000
+/*
+ * A proxy tick is being processed, i.e. matching an earlier timing
+ * request from inband via set_next_event().
+ */
+#define RQ_TPROXY	0x00008000
+/*
+ * Currently running in IRQ handling context.
+ */
+#define RQ_IRQ		0x00004000
+/*
+ * Proxy tick is deferred, because we have more urgent out-of-band
+ * work to carry out first.
+ */
+#define RQ_TDEFER	0x00002000
+/*
+ * Idle state: there is no outstanding timer. We check this flag to
+ * know whether we may allow inband to enter the CPU idle state.
+ */
+#define RQ_IDLE		0x00001000
+/*
+ * Hardware timer is stopped.
+ */
+#define RQ_TSTOPPED	0x00000800
+
+struct evl_sched_fifo {
+	struct evl_multilevel_queue runnable;
+};
+
+struct evl_rq {
+	evl_spinlock_t lock;
+
+	/*
+	 * Shared data, covered by ->lock.
+	 */
+	unsigned long flags;
+	struct evl_thread *curr;
+	struct evl_sched_fifo fifo;
+	struct evl_sched_weak weak;
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	struct evl_sched_quota quota;
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	struct evl_sched_tp tp;
+#endif
+	struct evl_thread root_thread;
+#ifdef CONFIG_EVL_RUNSTATS
+	ktime_t last_account_switch;
+	struct evl_account *current_account;
+#endif
+
+	/*
+	 * runqueue-local data the owner may modify locklessly.
+	 */
+	unsigned long local_flags;
+#ifdef CONFIG_SMP
+	int cpu;
+	struct cpumask resched_cpus;
+#endif
+	struct evl_timer inband_timer;
+	struct evl_timer rrbtimer;
+#ifdef CONFIG_EVL_WATCHDOG
+	struct evl_timer wdtimer;
+#endif
+	/* Misc stuff. */
+	char *proxy_timer_name;
+	char *rrb_timer_name;
+};
+
+DECLARE_PER_CPU(struct evl_rq, evl_runqueues);
+
+extern struct cpumask evl_cpu_affinity;
+
+extern struct list_head evl_thread_list;
+
+extern int evl_nrthreads;
+
+union evl_sched_param;
+struct evl_sched_config;
+
+struct evl_sched_class {
+	void (*sched_init)(struct evl_rq *rq);
+	void (*sched_enqueue)(struct evl_thread *thread);
+	void (*sched_dequeue)(struct evl_thread *thread);
+	void (*sched_requeue)(struct evl_thread *thread);
+	struct evl_thread *(*sched_pick)(struct evl_rq *rq);
+	void (*sched_tick)(struct evl_rq *rq);
+	void (*sched_rotate)(struct evl_rq *rq,
+			     const union evl_sched_param *p);
+	void (*sched_migrate)(struct evl_thread *thread,
+			      struct evl_rq *rq);
+	/*
+	 * Set base scheduling parameters. This routine is indirectly
+	 * called upon a change of base scheduling settings through
+	 * evl_set_thread_schedparam_locked() ->
+	 * evl_set_thread_policy_locked(), exclusively.
+	 *
+	 * The scheduling class implementation should do the necessary
+	 * housekeeping to comply with the new settings.
+	 * thread->base_class is up to date before the call is made,
+	 * and should be considered for the new weighted priority
+	 * calculation. On the contrary, thread->sched_class should
+	 * NOT be referred to by this handler.
+	 *
+	 * sched_setparam() is NEVER involved in PI or PP
+	 * management. However it must deny a priority update if it
+	 * contradicts an ongoing boost for @a thread. This is
+	 * typically what the evl_set_effective_thread_priority() helper
+	 * does for such handler.
+	 *
+	 * Returns true if the effective priority was updated
+	 * (thread->cprio).
+	 */
+	bool (*sched_setparam)(struct evl_thread *thread,
+			       const union evl_sched_param *p);
+	void (*sched_getparam)(struct evl_thread *thread,
+			       union evl_sched_param *p);
+	int (*sched_chkparam)(struct evl_thread *thread,
+			      const union evl_sched_param *p);
+	void (*sched_trackprio)(struct evl_thread *thread,
+				const union evl_sched_param *p);
+	void (*sched_ceilprio)(struct evl_thread *thread, int prio);
+	/* Prep work for assigning a policy to a thread. */
+	int (*sched_declare)(struct evl_thread *thread,
+			     const union evl_sched_param *p);
+	void (*sched_forget)(struct evl_thread *thread);
+	void (*sched_kick)(struct evl_thread *thread);
+	ssize_t (*sched_show)(struct evl_thread *thread,
+			      char *buf, ssize_t count);
+	int (*sched_control)(int cpu, union evl_sched_ctlparam *ctlp,
+			union evl_sched_ctlinfo *infp);
+	int nthreads;
+	struct evl_sched_class *next;
+	int weight;
+	int policy;
+	const char *name;
+};
+
+#define EVL_CLASS_WEIGHT(n)	(n * EVL_CLASS_WEIGHT_FACTOR)
+
+#define for_each_evl_thread(__thread)				\
+	list_for_each_entry(__thread, &evl_thread_list, next)
+
+static inline struct evl_rq *evl_cpu_rq(int cpu)
+{
+	return &per_cpu(evl_runqueues, cpu);
+}
+
+static inline struct evl_rq *this_evl_rq(void)
+{
+	/* IRQs off */
+	return raw_cpu_ptr(&evl_runqueues);
+}
+
+static inline struct evl_thread *this_evl_rq_thread(void)
+{
+	return this_evl_rq()->curr;
+}
+
+/* Test resched flag of given rq. */
+static inline int evl_need_resched(struct evl_rq *rq)
+{
+	return rq->flags & RQ_SCHED;
+}
+
+/* Set resched flag for the current rq. */
+static inline void evl_set_self_resched(struct evl_rq *rq)
+{
+	assert_evl_lock(&rq->lock);
+	rq->flags |= RQ_SCHED;
+}
+
+/* Set resched flag for the given rq. */
+#ifdef CONFIG_SMP
+
+static inline bool is_evl_cpu(int cpu)
+{
+	return !!cpumask_test_cpu(cpu, &evl_oob_cpus);
+}
+
+static inline int evl_rq_cpu(struct evl_rq *rq)
+{
+	return rq->cpu;
+}
+
+static inline void evl_set_resched(struct evl_rq *rq)
+{
+	struct evl_rq *this_rq = this_evl_rq();
+
+	assert_evl_lock(&rq->lock); /* Implies oob is stalled. */
+
+	if (this_rq == rq) {
+		this_rq->flags |= RQ_SCHED;
+	} else if (!evl_need_resched(rq)) {
+		rq->flags |= RQ_SCHED;
+		/*
+		 * The following updates change CPU-local data and oob
+		 * is stalled on the current CPU, so this is safe
+		 * despite that we don't hold this_rq->lock.
+		 *
+		 * NOTE: raising RQ_SCHED in the local_flags too
+		 * ensures that the current CPU will pass through
+		 * evl_schedule() to __evl_schedule() at the next
+		 * opportunity for sending the resched IPIs (see
+		 * test_resched()).
+		 */
+		this_rq->local_flags |= RQ_SCHED;
+		cpumask_set_cpu(evl_rq_cpu(rq), &this_rq->resched_cpus);
+	}
+}
+
+static inline bool is_threading_cpu(int cpu)
+{
+	return !!cpumask_test_cpu(cpu, &evl_cpu_affinity);
+}
+
+void evl_migrate_thread(struct evl_thread *thread,
+			struct evl_rq *dst_rq);
+
+#else /* !CONFIG_SMP */
+
+static inline bool is_evl_cpu(int cpu)
+{
+	return true;
+}
+
+static inline int evl_rq_cpu(struct evl_rq *rq)
+{
+	return 0;
+}
+
+static inline void evl_set_resched(struct evl_rq *rq)
+{
+	evl_set_self_resched(rq);
+}
+
+static inline bool is_threading_cpu(int cpu)
+{
+	return true;
+}
+
+static inline
+void evl_migrate_thread(struct evl_thread *thread,
+			struct evl_rq *dst_rq)
+{ }
+
+#endif /* !CONFIG_SMP */
+
+#define for_each_evl_cpu(cpu)		\
+	for_each_online_cpu(cpu)	\
+		if (is_evl_cpu(cpu))
+
+void __evl_schedule(void);
+
+static inline void evl_schedule(void)
+{
+	struct evl_rq *this_rq = this_evl_rq();
+
+	/*
+	 * If we race here reading the rq state locklessly because of
+	 * a CPU migration, we must be running over the in-band stage,
+	 * in which case the call to __evl_schedule() will be
+	 * escalated to the oob stage where migration cannot happen,
+	 * ensuring safe access to the runqueue state.
+	 *
+	 * Remote RQ_SCHED requests are paired with out-of-band IPIs
+	 * running on the oob stage by definition, so we can't miss
+	 * them here.
+	 *
+	 * Finally, RQ_IRQ is always tested from the CPU which handled
+	 * an out-of-band interrupt, there is no coherence issue.
+	 */
+	if (((this_rq->flags|this_rq->local_flags) & (RQ_IRQ|RQ_SCHED)) != RQ_SCHED)
+		return;
+
+	if (likely(running_oob())) {
+		__evl_schedule();
+		return;
+	}
+
+	run_oob_call((int (*)(void *))__evl_schedule, NULL);
+}
+
+int evl_switch_oob(void);
+
+void evl_switch_inband(int cause);
+
+static inline int evl_preempt_count(void)
+{
+	return dovetail_current_state()->preempt_count;
+}
+
+static inline void __evl_disable_preempt(void)
+{
+	dovetail_current_state()->preempt_count++;
+}
+
+static inline void __evl_enable_preempt(void)
+{
+	if (--dovetail_current_state()->preempt_count == 0 &&
+		!oob_irqs_disabled())
+		evl_schedule();
+}
+
+#ifdef CONFIG_EVL_DEBUG_CORE
+
+void evl_disable_preempt(void);
+void evl_enable_preempt(void);
+
+#else
+
+static inline void evl_disable_preempt(void)
+{
+	__evl_disable_preempt();
+}
+
+static inline void evl_enable_preempt(void)
+{
+	__evl_enable_preempt();
+}
+
+#endif
+
+static inline bool evl_in_irq(void)
+{
+	return !!(this_evl_rq()->local_flags & RQ_IRQ);
+}
+
+static inline bool evl_is_inband(void)
+{
+	return !!(this_evl_rq_thread()->state & T_ROOT);
+}
+
+static inline bool evl_cannot_block(void)
+{
+	return evl_in_irq() || evl_is_inband();
+}
+
+#define evl_get_thread_rq(__thread, __flags)				\
+	({								\
+		struct evl_rq *__rq;					\
+		evl_spin_lock_irqsave(&(__thread)->lock, __flags);	\
+		__rq = (__thread)->rq;					\
+		evl_spin_lock(&__rq->lock);				\
+		__rq;							\
+	})
+
+#define evl_put_thread_rq(__thread, __rq, __flags)			\
+	do {								\
+		evl_spin_unlock(&(__rq)->lock);				\
+		evl_spin_unlock_irqrestore(&(__thread)->lock, __flags);	\
+	} while (0)
+
+bool evl_set_effective_thread_priority(struct evl_thread *thread,
+				       int prio);
+
+#include <evl/sched/idle.h>
+#include <evl/sched/fifo.h>
+
+void evl_putback_thread(struct evl_thread *thread);
+
+int evl_set_thread_policy_locked(struct evl_thread *thread,
+				struct evl_sched_class *sched_class,
+				const union evl_sched_param *p);
+
+int evl_set_thread_policy(struct evl_thread *thread,
+			  struct evl_sched_class *sched_class,
+			  const union evl_sched_param *p);
+
+void evl_track_thread_policy(struct evl_thread *thread,
+			     struct evl_thread *target);
+
+void evl_protect_thread_priority(struct evl_thread *thread,
+				 int prio);
+
+static inline
+void evl_rotate_rq(struct evl_rq *rq,
+		   struct evl_sched_class *sched_class,
+		   const union evl_sched_param *sched_param)
+{
+	sched_class->sched_rotate(rq, sched_param);
+}
+
+static inline int evl_init_rq_thread(struct evl_thread *thread)
+{
+	int ret = 0;
+
+	evl_init_idle_thread(thread);
+	evl_init_fifo_thread(thread);
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	ret = evl_quota_init_thread(thread);
+	if (ret)
+		return ret;
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	ret = evl_tp_init_thread(thread);
+	if (ret)
+		return ret;
+#endif
+
+	return ret;
+}
+
+/* rq->lock held, irqs off */
+static inline void evl_sched_tick(struct evl_rq *rq)
+{
+	struct evl_thread *curr = rq->curr;
+	struct evl_sched_class *sched_class = curr->sched_class;
+
+	assert_evl_lock(&rq->lock);
+
+	/*
+	 * A thread that undergoes round-robin scheduling only
+	 * consumes its time slice when it runs within its own
+	 * scheduling class, which excludes temporary PI boosts.
+	 */
+	if (sched_class == curr->base_class &&
+	    sched_class->sched_tick &&
+	    (curr->state & (EVL_THREAD_BLOCK_BITS|T_RRB)) == T_RRB &&
+	    evl_preempt_count() == 0)
+		sched_class->sched_tick(rq);
+}
+
+static inline
+int evl_check_schedparams(struct evl_sched_class *sched_class,
+			  struct evl_thread *thread,
+			  const union evl_sched_param *p)
+{
+	int ret = 0;
+
+	assert_thread_pinned(thread);
+
+	if (sched_class->sched_chkparam)
+		ret = sched_class->sched_chkparam(thread, p);
+
+	return ret;
+}
+
+static inline
+int evl_declare_thread(struct evl_sched_class *sched_class,
+		       struct evl_thread *thread,
+		       const union evl_sched_param *p)
+{
+	int ret;
+
+	assert_thread_pinned(thread);
+
+	if (sched_class->sched_declare) {
+		ret = sched_class->sched_declare(thread, p);
+		if (ret)
+			return ret;
+	}
+	if (sched_class != thread->base_class)
+		sched_class->nthreads++;
+
+	return 0;
+}
+
+static inline int evl_calc_weighted_prio(struct evl_sched_class *sched_class,
+					 int prio)
+{
+	return prio + sched_class->weight;
+}
+
+static __always_inline void evl_enqueue_thread(struct evl_thread *thread)
+{
+	struct evl_sched_class *sched_class = thread->sched_class;
+
+	assert_thread_pinned(thread);
+
+	/*
+	 * Enqueue for next pick: i.e. move to end of current priority
+	 * group (i.e. FIFO).
+	 */
+	if (likely(sched_class == &evl_sched_fifo))
+		__evl_enqueue_fifo_thread(thread);
+	else if (sched_class != &evl_sched_idle)
+		sched_class->sched_enqueue(thread);
+}
+
+static __always_inline void evl_dequeue_thread(struct evl_thread *thread)
+{
+	struct evl_sched_class *sched_class = thread->sched_class;
+
+	assert_thread_pinned(thread);
+
+	/*
+	 * Pull from the runnable thread queue.
+	 */
+	if (likely(sched_class == &evl_sched_fifo))
+		__evl_dequeue_fifo_thread(thread);
+	else if (sched_class != &evl_sched_idle)
+		sched_class->sched_dequeue(thread);
+}
+
+static __always_inline void evl_requeue_thread(struct evl_thread *thread)
+{
+	struct evl_sched_class *sched_class = thread->sched_class;
+
+	assert_thread_pinned(thread);
+
+	/*
+	 * Put back at same place: i.e. requeue to head of current
+	 * priority group (i.e. LIFO, used for preemption handling).
+	 */
+	if (likely(sched_class == &evl_sched_fifo))
+		__evl_requeue_fifo_thread(thread);
+	else if (sched_class != &evl_sched_idle)
+		sched_class->sched_requeue(thread);
+}
+
+static inline
+bool evl_set_schedparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	assert_thread_pinned(thread);
+
+	return thread->base_class->sched_setparam(thread, p);
+}
+
+static inline void evl_get_schedparam(struct evl_thread *thread,
+				      union evl_sched_param *p)
+{
+	assert_thread_pinned(thread);
+
+	thread->sched_class->sched_getparam(thread, p);
+}
+
+static inline void evl_track_priority(struct evl_thread *thread,
+				      const union evl_sched_param *p)
+{
+	assert_thread_pinned(thread);
+
+	thread->sched_class->sched_trackprio(thread, p);
+	thread->wprio = evl_calc_weighted_prio(thread->sched_class, thread->cprio);
+}
+
+static inline void evl_ceil_priority(struct evl_thread *thread, int prio)
+{
+	assert_thread_pinned(thread);
+
+	thread->sched_class->sched_ceilprio(thread, prio);
+	thread->wprio = evl_calc_weighted_prio(thread->sched_class, thread->cprio);
+}
+
+static inline void evl_forget_thread(struct evl_thread *thread)
+{
+	struct evl_sched_class *sched_class = thread->base_class;
+
+	assert_thread_pinned(thread);
+
+	--sched_class->nthreads;
+
+	if (sched_class->sched_forget)
+		sched_class->sched_forget(thread);
+}
+
+static inline void evl_force_thread(struct evl_thread *thread)
+{
+	struct evl_sched_class *sched_class = thread->base_class;
+
+	assert_thread_pinned(thread);
+
+	thread->info |= T_KICKED;
+
+	if (sched_class->sched_kick)
+		sched_class->sched_kick(thread);
+
+	evl_set_resched(thread->rq);
+}
+
+struct evl_sched_group {
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	struct evl_quota_group quota;
+#endif
+	struct list_head next;
+};
+
+struct evl_sched_class *
+evl_find_sched_class(union evl_sched_param *param,
+		     const struct evl_sched_attrs *attrs,
+		     ktime_t *tslice_r);
+
+int __init evl_init_sched(void);
+
+void __init evl_cleanup_sched(void);
+
+#endif /* !_EVL_SCHED_H */
diff --git a/include/evl/sched/fifo.h b/include/evl/sched/fifo.h
new file mode 100644
index 000000000000..6eecd7b6ec9a
--- /dev/null
+++ b/include/evl/sched/fifo.h
@@ -0,0 +1,114 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_FIFO_H
+#define _EVL_SCHED_FIFO_H
+
+#ifndef _EVL_SCHED_H
+#error "please don't include evl/sched/fifo.h directly"
+#endif
+
+/*
+ * EVL's SCHED_FIFO class is meant to map onto the inband SCHED_FIFO
+ * priority scale when applied to user threads. EVL kthreads may use a
+ * couple of levels more, from EVL_CORE_MIN_PRIO to EVL_CORE_MAX_PRIO.
+ */
+#define EVL_FIFO_MIN_PRIO  1
+#define EVL_FIFO_MAX_PRIO  (MAX_USER_RT_PRIO - 1)
+
+extern struct evl_sched_class evl_sched_fifo;
+
+static inline void __evl_requeue_fifo_thread(struct evl_thread *thread)
+{
+	evl_add_schedq(&thread->rq->fifo.runnable, thread);
+}
+
+static inline void __evl_enqueue_fifo_thread(struct evl_thread *thread)
+{
+	evl_add_schedq_tail(&thread->rq->fifo.runnable, thread);
+}
+
+static inline void __evl_dequeue_fifo_thread(struct evl_thread *thread)
+{
+	evl_del_schedq(&thread->rq->fifo.runnable, thread);
+}
+
+static inline
+int __evl_chk_fifo_schedparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	int min = EVL_FIFO_MIN_PRIO, max = EVL_FIFO_MAX_PRIO;
+
+	if (!(thread->state & T_USER)) {
+		min = EVL_CORE_MIN_PRIO;
+		max = EVL_CORE_MAX_PRIO;
+	}
+
+	if (p->fifo.prio < min || p->fifo.prio > max)
+		return -EINVAL;
+
+	return 0;
+}
+
+static inline
+bool __evl_set_fifo_schedparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	bool ret = evl_set_effective_thread_priority(thread, p->fifo.prio);
+
+	if (!(thread->state & T_BOOST))
+		thread->state &= ~T_WEAK;
+
+	return ret;
+}
+
+static inline
+void __evl_get_fifo_schedparam(struct evl_thread *thread,
+			union evl_sched_param *p)
+{
+	p->fifo.prio = thread->cprio;
+}
+
+static inline
+void __evl_track_fifo_priority(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	if (p)
+		thread->cprio = p->fifo.prio; /* Force update. */
+	else {
+		thread->cprio = thread->bprio;
+		/* Leaving PI/PP, so neither boosted nor weak. */
+		thread->state &= ~T_WEAK;
+	}
+}
+
+static inline
+void __evl_ceil_fifo_priority(struct evl_thread *thread, int prio)
+{
+	/*
+	 * The FIFO class supports the widest priority range from
+	 * EVL_CORE_MIN_PRIO to EVL_CORE_MAX_PRIO inclusive, no need
+	 * to cap the priority argument which is guaranteed to be in
+	 * this range.
+	 */
+	thread->cprio = prio;
+}
+
+static inline
+void __evl_forget_fifo_thread(struct evl_thread *thread)
+{
+}
+
+static inline
+int evl_init_fifo_thread(struct evl_thread *thread)
+{
+	return 0;
+}
+
+struct evl_thread *evl_fifo_pick(struct evl_rq *rq);
+
+#endif /* !_EVL_SCHED_FIFO_H */
diff --git a/include/evl/sched/idle.h b/include/evl/sched/idle.h
new file mode 100644
index 000000000000..3f8aae3bfd32
--- /dev/null
+++ b/include/evl/sched/idle.h
@@ -0,0 +1,53 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_IDLE_H
+#define _EVL_SCHED_IDLE_H
+
+#ifndef _EVL_SCHED_H
+#error "please don't include evl/sched/idle.h directly"
+#endif
+
+/* Idle priority level - actually never used for indexing. */
+#define EVL_IDLE_PRIO  -1
+
+extern struct evl_sched_class evl_sched_idle;
+
+static inline bool __evl_set_idle_schedparam(struct evl_thread *thread,
+					     const union evl_sched_param *p)
+{
+	thread->state &= ~T_WEAK;
+	return evl_set_effective_thread_priority(thread, p->idle.prio);
+}
+
+static inline void __evl_get_idle_schedparam(struct evl_thread *thread,
+					     union evl_sched_param *p)
+{
+	p->idle.prio = thread->cprio;
+}
+
+static inline void __evl_track_idle_priority(struct evl_thread *thread,
+					     const union evl_sched_param *p)
+{
+	if (p)
+		/* Inheriting a priority-less class makes no sense. */
+		EVL_WARN_ON_ONCE(CORE, 1);
+	else
+		thread->cprio = EVL_IDLE_PRIO;
+}
+
+static inline void __evl_ceil_idle_priority(struct evl_thread *thread, int prio)
+{
+	EVL_WARN_ON_ONCE(CORE, 1);
+}
+
+static inline int evl_init_idle_thread(struct evl_thread *thread)
+{
+	return 0;
+}
+
+#endif /* !_EVL_SCHED_IDLE_H */
diff --git a/include/evl/sched/param.h b/include/evl/sched/param.h
new file mode 100644
index 000000000000..342c3affee86
--- /dev/null
+++ b/include/evl/sched/param.h
@@ -0,0 +1,45 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_PARAM_H
+#define _EVL_SCHED_PARAM_H
+
+struct evl_idle_param {
+	int prio;
+};
+
+struct evl_weak_param {
+	int prio;
+};
+
+struct evl_fifo_param {
+	int prio;
+};
+
+struct evl_quota_param {
+	int prio;
+	int tgid;	/* thread group id. */
+};
+
+struct evl_tp_param {
+	int prio;
+	int ptid;	/* partition id. */
+};
+
+union evl_sched_param {
+	struct evl_idle_param idle;
+	struct evl_fifo_param fifo;
+	struct evl_weak_param weak;
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	struct evl_quota_param quota;
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	struct evl_tp_param tp;
+#endif
+};
+
+#endif /* !_EVL_SCHED_PARAM_H */
diff --git a/include/evl/sched/queue.h b/include/evl/sched/queue.h
new file mode 100644
index 000000000000..8e3519e27686
--- /dev/null
+++ b/include/evl/sched/queue.h
@@ -0,0 +1,126 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_QUEUE_H
+#define _EVL_SCHED_QUEUE_H
+
+#include <linux/bitmap.h>
+#include <evl/list.h>
+
+/*
+ * EVL core priority scale. We reserve a couple of additional priority
+ * levels above the highest inband kthread priority (MAX_RT_PRIO-1),
+ * which is guaranteed not to be less than the highest EVL user task
+ * priority (MAX_USER_RT_PRIO-1) we use for SCHED_FIFO. Those extra
+ * levels can be used for EVL kthreads which must top the priority of
+ * any userland thread.
+ */
+#define EVL_CORE_MIN_PRIO  0
+#define EVL_CORE_MAX_PRIO  (MAX_RT_PRIO + 1)
+#define EVL_CORE_NR_PRIO   (EVL_CORE_MAX_PRIO - EVL_CORE_MIN_PRIO + 1)
+
+#define EVL_MLQ_LEVELS		 EVL_CORE_NR_PRIO
+
+#define EVL_CLASS_WEIGHT_FACTOR	 1024
+
+#if EVL_CORE_NR_PRIO > EVL_CLASS_WEIGHT_FACTOR ||	\
+	EVL_CORE_NR_PRIO > EVL_MLQ_LEVELS
+#error "EVL_MLQ_LEVELS is too low"
+#endif
+
+struct evl_multilevel_queue {
+	int elems;
+	DECLARE_BITMAP(prio_map, EVL_MLQ_LEVELS);
+	struct list_head heads[EVL_MLQ_LEVELS];
+};
+
+struct evl_thread;
+
+void evl_init_schedq(struct evl_multilevel_queue *q);
+
+struct evl_thread *evl_get_schedq(struct evl_multilevel_queue *q);
+
+struct evl_thread *
+evl_lookup_schedq(struct evl_multilevel_queue *q, int prio);
+
+static __always_inline
+int evl_schedq_is_empty(struct evl_multilevel_queue *q)
+{
+	return q->elems == 0;
+}
+
+static __always_inline
+int evl_get_schedq_weight(struct evl_multilevel_queue *q)
+{
+	/* Highest priorities are mapped to lowest array elements. */
+	return find_first_bit(q->prio_map, EVL_MLQ_LEVELS);
+}
+
+static __always_inline
+int get_qindex(struct evl_multilevel_queue *q, int prio)
+{
+	/*
+	 * find_first_bit() is used to scan the bitmap, so the lower
+	 * the index value, the higher the priority.
+	 */
+	return EVL_MLQ_LEVELS - prio - 1;
+}
+
+static __always_inline
+struct list_head *add_q(struct evl_multilevel_queue *q, int prio)
+{
+	struct list_head *head;
+	int idx;
+
+	idx = get_qindex(q, prio);
+	head = q->heads + idx;
+	q->elems++;
+
+	/* New item is not linked yet. */
+	if (list_empty(head))
+		__set_bit(idx, q->prio_map);
+
+	return head;
+}
+
+static __always_inline
+void evl_add_schedq(struct evl_multilevel_queue *q,
+		struct evl_thread *thread)
+{
+	struct list_head *head = add_q(q, thread->cprio);
+	list_add(&thread->rq_next, head);
+}
+
+static __always_inline
+void evl_add_schedq_tail(struct evl_multilevel_queue *q,
+			struct evl_thread *thread)
+{
+	struct list_head *head = add_q(q, thread->cprio);
+	list_add_tail(&thread->rq_next, head);
+}
+
+static __always_inline
+void __evl_del_schedq(struct evl_multilevel_queue *q,
+		struct list_head *entry, int idx)
+{
+	struct list_head *head = q->heads + idx;
+
+	list_del(entry);
+	q->elems--;
+
+	if (list_empty(head))
+		__clear_bit(idx, q->prio_map);
+}
+
+static __always_inline
+void evl_del_schedq(struct evl_multilevel_queue *q,
+	struct evl_thread *thread)
+{
+	__evl_del_schedq(q, &thread->rq_next, get_qindex(q, thread->cprio));
+}
+
+#endif /* !_EVL_SCHED_QUEUE_H */
diff --git a/include/evl/sched/quota.h b/include/evl/sched/quota.h
new file mode 100644
index 000000000000..dfe3b7390958
--- /dev/null
+++ b/include/evl/sched/quota.h
@@ -0,0 +1,76 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2013, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_QUOTA_H
+#define _EVL_SCHED_QUOTA_H
+
+#ifndef _EVL_SCHED_H
+#error "please don't include evl/sched/quota.h directly"
+#endif
+
+#ifdef CONFIG_EVL_SCHED_QUOTA
+
+#define EVL_QUOTA_MIN_PRIO	EVL_FIFO_MIN_PRIO
+#define EVL_QUOTA_MAX_PRIO	EVL_FIFO_MAX_PRIO
+#define EVL_QUOTA_NR_PRIO	\
+	(EVL_QUOTA_MAX_PRIO - EVL_QUOTA_MIN_PRIO + 1)
+
+extern struct evl_sched_class evl_sched_quota;
+
+struct evl_quota_group {
+	struct evl_rq *rq;
+	ktime_t quota;
+	ktime_t quota_peak;
+	ktime_t run_start;
+	ktime_t run_budget;
+	ktime_t run_credit;
+	struct list_head members;
+	struct list_head expired;
+	struct list_head next;
+	int nr_active;
+	int nr_threads;
+	int tgid;
+	int quota_percent;
+	int quota_peak_percent;
+};
+
+struct evl_sched_quota {
+	ktime_t period;
+	struct evl_timer refill_timer;
+	struct evl_timer limit_timer;
+	struct list_head groups;
+};
+
+static inline int evl_quota_init_thread(struct evl_thread *thread)
+{
+	thread->quota = NULL;
+	INIT_LIST_HEAD(&thread->quota_expired);
+
+	return 0;
+}
+
+int evl_quota_create_group(struct evl_quota_group *tg,
+			struct evl_rq *rq,
+			int *quota_sum_r);
+
+int evl_quota_destroy_group(struct evl_quota_group *tg,
+			int force,
+			int *quota_sum_r);
+
+void evl_quota_set_limit(struct evl_quota_group *tg,
+			int quota_percent, int quota_peak_percent,
+			int *quota_sum_r);
+
+int evl_quota_sum_all(struct evl_rq *rq);
+
+void evl_set_quota_period(ktime_t period);
+
+ktime_t evl_get_quota_period(void);
+
+#endif /* !CONFIG_EVL_SCHED_QUOTA */
+
+#endif /* !_EVL_SCHED_QUOTA_H */
diff --git a/include/evl/sched/tp.h b/include/evl/sched/tp.h
new file mode 100644
index 000000000000..0e1b0404ab56
--- /dev/null
+++ b/include/evl/sched/tp.h
@@ -0,0 +1,57 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_TP_H
+#define _EVL_SCHED_TP_H
+
+#ifndef _EVL_SCHED_H
+#error "please don't include evl/sched/tp.h directly"
+#endif
+
+#ifdef CONFIG_EVL_SCHED_TP
+
+#define EVL_TP_MIN_PRIO  EVL_FIFO_MIN_PRIO
+#define EVL_TP_MAX_PRIO  EVL_FIFO_MAX_PRIO
+#define EVL_TP_NR_PRIO	 (EVL_TP_MAX_PRIO - EVL_TP_MIN_PRIO + 1)
+
+extern struct evl_sched_class evl_sched_tp;
+
+struct evl_tp_window {
+	ktime_t w_offset;
+	int w_part;
+};
+
+struct evl_tp_schedule {
+	int pwin_nr;
+	ktime_t tf_duration;
+	atomic_t refcount;
+	struct evl_tp_window pwins[0];
+};
+
+struct evl_sched_tp {
+	struct evl_tp_rq {
+		struct evl_multilevel_queue runnable;
+	} partitions[CONFIG_EVL_SCHED_TP_NR_PART];
+	struct evl_tp_rq idle;
+	struct evl_tp_rq *tps;
+	struct evl_timer tf_timer;
+	struct evl_tp_schedule *gps;
+	int wnext;
+	ktime_t tf_start;
+	struct list_head threads;
+};
+
+static inline int evl_tp_init_thread(struct evl_thread *thread)
+{
+	thread->tps = NULL;
+
+	return 0;
+}
+
+#endif /* !CONFIG_EVL_SCHED_TP */
+
+#endif /* !_EVL_SCHED_TP_H */
diff --git a/include/evl/sched/weak.h b/include/evl/sched/weak.h
new file mode 100644
index 000000000000..198654eeacae
--- /dev/null
+++ b/include/evl/sched/weak.h
@@ -0,0 +1,35 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2013, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SCHED_WEAK_H
+#define _EVL_SCHED_WEAK_H
+
+#ifndef _EVL_SCHED_H
+#error "please don't include evl/sched/weak.h directly"
+#endif
+
+#define EVL_WEAK_MIN_PRIO  0
+#define EVL_WEAK_MAX_PRIO  99
+#define EVL_WEAK_NR_PRIO   (EVL_WEAK_MAX_PRIO - EVL_WEAK_MIN_PRIO + 1)
+
+#if EVL_WEAK_NR_PRIO > EVL_CLASS_WEIGHT_FACTOR ||	\
+	EVL_WEAK_NR_PRIO > EVL_MLQ_LEVELS
+#error "WEAK class has too many priority levels"
+#endif
+
+extern struct evl_sched_class evl_sched_weak;
+
+struct evl_sched_weak {
+	struct evl_multilevel_queue runnable;
+};
+
+static inline int evl_weak_init_thread(struct evl_thread *thread)
+{
+	return 0;
+}
+
+#endif /* !_EVL_SCHED_WEAK_H */
diff --git a/include/evl/sem.h b/include/evl/sem.h
new file mode 100644
index 000000000000..2db96de9530a
--- /dev/null
+++ b/include/evl/sem.h
@@ -0,0 +1,45 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_SEM_H
+#define _EVL_SEM_H
+
+#include <linux/ktime.h>
+#include <evl/wait.h>
+
+struct evl_ksem {
+	struct evl_wait_queue wait;
+	unsigned int value;
+};
+
+#define EVL_KSEM_INITIALIZER(__name, __value) {			\
+		.wait = EVL_WAIT_INITIALIZER((__name).wait),	\
+		.value = (__value),				\
+	}
+
+#define DEFINE_EVL_KSEM(__name, __value)			\
+	struct evl_ksem __name = EVL_KSEM_INITIALIZER(__name, __value)
+
+static inline void evl_init_ksem(struct evl_ksem *ksem, unsigned int value)
+{
+	evl_init_wait(&ksem->wait, &evl_mono_clock, EVL_WAIT_PRIO);
+}
+
+static inline void evl_destroy_ksem(struct evl_ksem *ksem)
+{
+	evl_destroy_wait(&ksem->wait);
+}
+
+int evl_down_timeout(struct evl_ksem *ksem,
+		ktime_t timeout);
+
+int evl_down(struct evl_ksem *ksem);
+
+int evl_trydown(struct evl_ksem *ksem);
+
+void evl_up(struct evl_ksem *ksem);
+
+#endif /* !_EVL_SEM_H */
diff --git a/include/evl/stat.h b/include/evl/stat.h
new file mode 100644
index 000000000000..a94aa709c9fe
--- /dev/null
+++ b/include/evl/stat.h
@@ -0,0 +1,141 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006 Jan Kiszka <jan.kiszka@web.de>.
+ * Copyright (C) 2006 Dmitry Adamushko <dmitry.adamushko@gmail.com>
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_STAT_H
+#define _EVL_STAT_H
+
+#include <evl/clock.h>
+
+struct evl_rq;
+
+#ifdef CONFIG_EVL_RUNSTATS
+
+struct evl_account {
+	ktime_t start;   /* Start of execution time accumulation */
+	ktime_t total; /* Accumulated execution time */
+};
+
+/*
+ * Return current date which can be passed to other accounting
+ * services for immediate accounting. We do not use sched_clock() on
+ * purpose: its worst case execution time may be really bad under some
+ * combination of clock data updates and high cache pressure.
+ */
+static inline ktime_t evl_get_timestamp(void)
+{
+	return evl_read_clock(&evl_mono_clock);
+}
+
+static inline ktime_t evl_get_account_total(struct evl_account *account)
+{
+	return account->total;
+}
+
+/*
+ * Reset statistics from inside the accounted entity (e.g. after CPU
+ * migration).
+ */
+static inline void evl_reset_account(struct evl_account *account)
+{
+	account->total = 0;
+	account->start = evl_get_timestamp();
+}
+
+/*
+ * Accumulate the time spent for the current account until now.
+ * CAUTION: all changes must be committed before changing the
+ * current_account reference in rq.
+ */
+#define evl_update_account(__rq)				\
+	do {							\
+		ktime_t __now = evl_get_timestamp();		\
+		(__rq)->current_account->total +=		\
+			__now - (__rq)->last_account_switch;	\
+		(__rq)->last_account_switch = __now;		\
+		smp_wmb();					\
+	} while (0)
+
+/* Obtain last account switch date of considered runqueue */
+#define evl_get_last_account_switch(__rq)	((__rq)->last_account_switch)
+
+/*
+ * Update the current account reference, returning the previous one.
+ */
+#define evl_set_current_account(__rq, __new_account)			\
+	({								\
+		struct evl_account *__prev;				\
+		__prev = (struct evl_account *)				\
+			xchg(&(__rq)->current_account, (__new_account)); \
+		__prev;							\
+	})
+
+/*
+ * Finalize an account (no need to accumulate the exectime, just mark
+ * the switch date and set the new account).
+ */
+#define evl_close_account(__rq, __new_account)			\
+	do {							\
+		(__rq)->last_account_switch =			\
+			evl_get_timestamp();			\
+		(__rq)->current_account = (__new_account);	\
+	} while (0)
+
+struct evl_counter {
+	unsigned long counter;
+};
+
+static inline unsigned long evl_inc_counter(struct evl_counter *c)
+{
+	return c->counter++;
+}
+
+static inline unsigned long evl_get_counter(struct evl_counter *c)
+{
+	return c->counter;
+}
+
+static inline
+void evl_set_counter(struct evl_counter *c, unsigned long value)
+{
+	c->counter = value;
+}
+
+#else /* !CONFIG_EVL_RUNSTATS */
+
+struct evl_account {
+};
+
+#define evl_get_timestamp()				({ 0; })
+#define evl_get_account_total(__account)		({ 0; })
+#define evl_reset_account(__account)			do { } while (0)
+#define evl_update_account(__rq)			do { } while (0)
+#define evl_set_current_account(__rq, __new_account)	({ (void)__rq; NULL; })
+#define evl_close_account(__rq, __new_account)	do { } while (0)
+#define evl_get_last_account_switch(__rq)		({ 0; })
+
+struct evl_counter {
+};
+
+#define evl_inc_counter(__c) 	({ do { } while(0); 0; })
+#define evl_get_counter(__c) 	({ 0; })
+#define evl_set_counter(_c, __value)	do { } while (0)
+
+#endif /* CONFIG_EVL_RUNSTATS */
+
+/*
+ * Account the exectime of the current account until now, switch to
+ * new_account, return the previous one.
+ */
+#define evl_switch_account(__rq, __new_account)			\
+	({							\
+		evl_update_account(__rq);			\
+		evl_set_current_account(__rq, __new_account);	\
+	})
+
+#endif /* !_EVL_STAT_H */
diff --git a/include/evl/thread.h b/include/evl/thread.h
new file mode 100644
index 000000000000..707b46dcbc57
--- /dev/null
+++ b/include/evl/thread.h
@@ -0,0 +1,346 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2018 Philippe Gerum  <rpm@xenomai.org>
+ * Copyright Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>.
+ */
+
+#ifndef _EVL_THREAD_H
+#define _EVL_THREAD_H
+
+#include <linux/types.h>
+#include <linux/dovetail.h>
+#include <linux/completion.h>
+#include <linux/irq_work.h>
+#include <linux/atomic.h>
+#include <linux/spinlock.h>
+#include <linux/ptrace.h>
+#include <evl/list.h>
+#include <evl/lock.h>
+#include <evl/stat.h>
+#include <evl/timer.h>
+#include <evl/sched/param.h>
+#include <evl/factory.h>
+#include <uapi/evl/thread.h>
+#include <uapi/evl/signal.h>
+#include <uapi/evl/sched.h>
+#include <asm/evl/thread.h>
+
+#define EVL_THREAD_BLOCK_BITS   (T_SUSP|T_PEND|T_DELAY|T_WAIT|T_DORMANT|T_INBAND|T_HALT)
+#define EVL_THREAD_INFO_MASK	(T_RMID|T_TIMEO|T_BREAK|T_WAKEN|T_ROBBED|T_KICKED|T_BCAST)
+
+struct evl_thread;
+struct evl_rq;
+struct evl_sched_class;
+struct evl_poll_watchpoint;
+
+struct evl_init_thread_attr {
+	struct cpumask affinity;
+	int flags;
+	struct evl_sched_class *sched_class;
+	union evl_sched_param sched_param;
+};
+
+struct evl_wait_channel {
+	int (*reorder_wait)(struct evl_thread *waiter,
+			struct evl_thread *originator);
+	int (*follow_depend)(struct evl_wait_channel *wchan,
+			struct evl_thread *originator);
+	struct list_head wait_list;
+};
+
+struct evl_thread {
+	evl_spinlock_t lock;
+
+	/*
+	 * Shared data, covered by ->lock.
+	 */
+	struct evl_rq *rq;
+	struct evl_sched_class *base_class;
+	struct evl_sched_class *sched_class; /* PI/PP sensitive. */
+
+	int bprio;
+	int cprio; /* PI/PP sensitive. */
+	int wprio; /* cprio + scheduling class weight */
+
+	/*
+	 * List of mutexes owned by this thread which specifically
+	 * cause a priority boost due to one of the following
+	 * reasons:
+	 *
+	 * - they are currently claimed by other thread(s) when
+	 * enforcing the priority inheritance protocol (EVL_MUTEX_PI).
+	 *
+	 * - they require immediate priority ceiling (EVL_MUTEX_PP).
+	 *
+	 * This list is ordered by decreasing (weighted) priorities of
+	 * waiters.
+	 */
+	struct list_head boosters;
+	struct evl_wait_channel *wchan;	/* Wait channel @thread pends on */
+	struct list_head wait_next;	/* in wchan->wait_list */
+	struct evl_wait_channel *wwake;	/* wchan that triggered wakeup */
+
+	struct evl_timer rtimer;  /* Resource timer */
+	struct evl_timer ptimer;  /* Periodic timer */
+	ktime_t rrperiod;  /* Round-robin period (ns) */
+
+	/*
+	 * Shared data, covered by both thread->lock AND
+	 * thread->rq->lock.
+	 */
+	__u32 state;
+	__u32 info;
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	struct evl_quota_group *quota;
+	struct list_head quota_expired; /* evl_rq->quota.expired */
+	struct list_head quota_next;	/* evl_rq->quota.members */
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	struct evl_tp_rq *tps;
+	struct list_head tp_link;	/* evl_rq->tp.threads */
+#endif
+	struct list_head rq_next;	/* evl_rq->policy.runqueue */
+	struct list_head next;		/* in evl_thread_list */
+
+	/*
+	 * Thread-local data the owner may modify locklessly.
+	 */
+	struct dovetail_altsched_context altsched;
+	__u32 local_info;
+	void *wait_data;
+	struct {
+		struct evl_poll_watchpoint *table;
+		unsigned int generation;
+		int nr;
+	} poll_context;
+	atomic_t inband_disable_count;
+	struct irq_work inband_work;
+	struct {
+		struct evl_counter isw;	/* in-band switches */
+		struct evl_counter csw;	/* context switches */
+		struct evl_counter sc;	/* OOB syscalls */
+		struct evl_counter rwa;	/* remote wakeups */
+		struct evl_account account; /* exec time accounting */
+		struct evl_account lastperiod;
+	} stat;
+	struct evl_user_window *u_window;
+
+	/* Misc stuff. */
+
+	struct list_head trackers; /* Mutexes tracking @thread */
+	hard_spinlock_t tracking_lock;
+	struct evl_element element;
+	struct cpumask affinity;
+	struct completion exited;
+	kernel_cap_t raised_cap;
+	struct list_head kill_next;
+	char *name;
+};
+
+struct evl_kthread {
+	struct evl_thread thread;
+	struct completion done;
+	void (*threadfn)(struct evl_kthread *kthread);
+	int status;
+	struct irq_work irq_work;
+};
+
+#define for_each_evl_booster(__pos, __thread)			\
+	list_for_each_entry(__pos, &(__thread)->boosters, next_booster)
+
+#define for_each_evl_tracker_safe(__pos, __tmp, __thread)	\
+	list_for_each_entry_safe(__pos, __tmp, &(__thread)->trackers, next_tracker)
+
+static inline void evl_sync_uwindow(struct evl_thread *curr)
+{
+	if (curr->u_window) {
+		curr->u_window->state = curr->state;
+		curr->u_window->info = curr->info;
+	}
+}
+
+static inline
+void evl_clear_sync_uwindow(struct evl_thread *curr, int state_bits)
+{
+	if (curr->u_window) {
+		curr->u_window->state = curr->state & ~state_bits;
+		curr->u_window->info = curr->info;
+	}
+}
+
+static inline
+void evl_set_sync_uwindow(struct evl_thread *curr, int state_bits)
+{
+	if (curr->u_window) {
+		curr->u_window->state = curr->state | state_bits;
+		curr->u_window->info = curr->info;
+	}
+}
+
+void __evl_test_cancel(struct evl_thread *curr);
+
+void evl_discard_thread(struct evl_thread *thread);
+
+/*
+ * Might differ from this_evl_rq() if @current is running inband, and
+ * evl_migrate_thread() is pending until it switches back to oob.
+ */
+static inline struct evl_thread *evl_current(void)
+{
+	return dovetail_current_state()->thread;
+}
+
+static inline
+struct evl_rq *evl_thread_rq(struct evl_thread *thread)
+{
+	return thread->rq;
+}
+
+static inline struct evl_rq *evl_current_rq(void)
+{
+	return evl_thread_rq(evl_current());
+}
+
+static inline
+struct evl_thread *evl_thread_from_task(struct task_struct *p)
+{
+	return dovetail_task_state(p)->thread;
+}
+
+static inline void evl_test_cancel(void)
+{
+	struct evl_thread *curr = evl_current();
+
+	if (curr && (curr->info & T_CANCELD))
+		__evl_test_cancel(curr);
+}
+
+ktime_t evl_get_thread_timeout(struct evl_thread *thread);
+
+ktime_t evl_get_thread_period(struct evl_thread *thread);
+
+int evl_init_thread(struct evl_thread *thread,
+		const struct evl_init_thread_attr *attr,
+		struct evl_rq *rq,
+		const char *fmt, ...);
+
+void evl_sleep_on_locked(ktime_t timeout, enum evl_tmode timeout_mode,
+		struct evl_clock *clock,
+		struct evl_wait_channel *wchan);
+
+void evl_sleep_on(ktime_t timeout, enum evl_tmode timeout_mode,
+		struct evl_clock *clock,
+		struct evl_wait_channel *wchan);
+
+void evl_wakeup_thread(struct evl_thread *thread,
+		int mask, int info);
+
+void evl_hold_thread(struct evl_thread *thread,
+		int mask);
+
+void evl_release_thread(struct evl_thread *thread,
+			int mask, int info);
+
+void evl_unblock_thread(struct evl_thread *thread,
+			int reason);
+
+ktime_t evl_delay_thread(ktime_t timeout,
+			enum evl_tmode timeout_mode,
+			struct evl_clock *clock);
+
+int evl_sleep_until(ktime_t timeout);
+
+int evl_sleep(ktime_t delay);
+
+int evl_set_thread_period(struct evl_clock *clock,
+			ktime_t idate,
+			ktime_t period);
+
+int evl_wait_thread_period(unsigned long *overruns_r);
+
+void evl_cancel_thread(struct evl_thread *thread);
+
+int evl_join_thread(struct evl_thread *thread,
+		bool uninterruptible);
+
+void evl_get_thread_state(struct evl_thread *thread,
+			struct evl_thread_state *statebuf);
+
+int evl_detach_self(void);
+
+void evl_kick_thread(struct evl_thread *thread);
+
+void evl_demote_thread(struct evl_thread *thread);
+
+void evl_signal_thread(struct evl_thread *thread,
+		int sig, int arg);
+
+int evl_set_thread_schedparam_locked(struct evl_thread *thread,
+				struct evl_sched_class *sched_class,
+				const union evl_sched_param *sched_param);
+
+int evl_set_thread_schedparam(struct evl_thread *thread,
+			struct evl_sched_class *sched_class,
+			const union evl_sched_param *sched_param);
+
+int evl_killall(int mask);
+
+void __evl_propagate_schedparam_change(struct evl_thread *curr);
+
+static inline void evl_propagate_schedparam_change(struct evl_thread *curr)
+{
+	if (curr->info & T_SCHEDP)
+		__evl_propagate_schedparam_change(curr);
+}
+
+int __evl_run_kthread(struct evl_kthread *kthread);
+
+#define _evl_run_kthread(__kthread, __affinity, __fn, __priority,	\
+			__fmt, __args...)				\
+	({								\
+		int __ret;						\
+		struct evl_init_thread_attr __iattr = {			\
+			.flags = 0,					\
+			.affinity = __affinity,				\
+			.sched_class = &evl_sched_fifo,			\
+			.sched_param.fifo.prio = __priority,		\
+		};							\
+		(__kthread)->threadfn = __fn;				\
+		(__kthread)->status = 0;				\
+		init_completion(&(__kthread)->done);			\
+		__ret = evl_init_thread(&(__kthread)->thread, &__iattr,	\
+					NULL, __fmt, ##__args);		\
+		if (!__ret)						\
+			__ret = __evl_run_kthread(__kthread);		\
+		__ret;							\
+	})
+
+#define evl_run_kthread(__kthread, __fn, __priority,			\
+			__fmt, __args...)				\
+	_evl_run_kthread(__kthread, CPU_MASK_ALL, __fn, __priority,	\
+			__fmt, ##__args)
+
+#define evl_run_kthread_on_cpu(__kthread, __cpu, __fn, __priority,	\
+			__fmt, __args...)				\
+	_evl_run_kthread(__kthread, *cpumask_of(__cpu), __fn, __priority, \
+			__fmt, ##__args)
+
+static inline void evl_cancel_kthread(struct evl_kthread *kthread)
+{
+	evl_cancel_thread(&kthread->thread);
+	evl_join_thread(&kthread->thread, true);
+}
+
+static inline int evl_kthread_should_stop(void)
+{
+	return evl_current()->info & T_CANCELD;
+}
+
+void evl_set_kthread_priority(struct evl_kthread *thread,
+			int priority);
+
+pid_t evl_get_inband_pid(struct evl_thread *thread);
+
+#endif /* !_EVL_THREAD_H */
diff --git a/include/evl/tick.h b/include/evl/tick.h
new file mode 100644
index 000000000000..581bb106b5d7
--- /dev/null
+++ b/include/evl/tick.h
@@ -0,0 +1,63 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_TICK_H
+#define _EVL_TICK_H
+
+#include <linux/types.h>
+#include <linux/ktime.h>
+#include <linux/tick.h>
+#include <evl/clock.h>
+#include <evl/sched.h>
+#include <uapi/evl/types.h>
+
+struct evl_rq;
+
+static inline void evl_program_local_tick(struct evl_clock *clock)
+{
+	struct evl_clock *master = clock->master;
+
+	if (master->ops.program_local_shot)
+		master->ops.program_local_shot(master);
+}
+
+static inline void evl_program_remote_tick(struct evl_clock *clock,
+					struct evl_rq *rq)
+{
+#ifdef CONFIG_SMP
+	struct evl_clock *master = clock->master;
+
+	if (master->ops.program_remote_shot)
+		master->ops.program_remote_shot(master, rq);
+#endif
+}
+
+/* hard IRQs off. */
+static inline void evl_notify_proxy_tick(struct evl_rq *this_rq)
+{
+	/*
+	 * A proxy clock event device is active on this CPU, make it
+	 * tick asap when the in-band code resumes; this will honour a
+	 * previous set_next_ktime() request received from the kernel
+	 * we have carried out using our core timing services.
+	 */
+	this_rq->local_flags &= ~RQ_TPROXY;
+	tick_notify_proxy();
+}
+
+int evl_enable_tick(void);
+
+void evl_disable_tick(void);
+
+void evl_notify_proxy_tick(struct evl_rq *this_rq);
+
+void evl_program_proxy_tick(struct evl_clock *clock);
+
+void evl_send_timer_ipi(struct evl_clock *clock,
+			struct evl_rq *rq);
+
+#endif /* !_EVL_TICK_H */
diff --git a/include/evl/timer.h b/include/evl/timer.h
new file mode 100644
index 000000000000..04dc8f67ce0d
--- /dev/null
+++ b/include/evl/timer.h
@@ -0,0 +1,412 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_TIMER_H
+#define _EVL_TIMER_H
+
+#include <linux/types.h>
+#include <linux/time.h>
+#include <linux/list.h>
+#include <linux/rbtree.h>
+#include <evl/clock.h>
+#include <evl/stat.h>
+#include <evl/list.h>
+#include <evl/assert.h>
+
+/*
+ * Basic assumption throughout the code: ktime_t is a 64bit signed
+ * scalar type holding an internal time unit, which means that:
+ *
+ * - we may compare two ktime_t values using basic relational operators
+ * - we may check for nullness by comparing to 0 directly
+ * - we must use ktime_to_ns()/ns_to_ktime() helpers for converting
+ *   to/from nanoseconds.
+ */
+#define EVL_INFINITE   0
+#define EVL_NONBLOCK   ((s64)((u64)1 << 63))
+
+static inline bool timeout_infinite(ktime_t kt)
+{
+	return kt == 0;
+}
+
+static inline bool timeout_nonblock(ktime_t kt)
+{
+	return kt < 0;
+}
+
+static inline bool timeout_valid(ktime_t kt)
+{
+	return kt > 0;
+}
+
+/* Timer modes */
+enum evl_tmode {
+	EVL_REL,
+	EVL_ABS,
+};
+
+/* Timer status */
+#define EVL_TIMER_DEQUEUED  0x00000001
+#define EVL_TIMER_KILLED    0x00000002
+#define EVL_TIMER_PERIODIC  0x00000004
+#define EVL_TIMER_FIRED     0x00000010
+#define EVL_TIMER_RUNNING   0x00000020
+#define EVL_TIMER_KGRAVITY  0x00000040
+#define EVL_TIMER_UGRAVITY  0x00000080
+#define EVL_TIMER_IGRAVITY  0	     /* most conservative */
+
+#define EVL_TIMER_GRAVITY_MASK	(EVL_TIMER_KGRAVITY|EVL_TIMER_UGRAVITY)
+#define EVL_TIMER_INIT_MASK	EVL_TIMER_GRAVITY_MASK
+
+/* Timer priorities */
+#define EVL_TIMER_LOPRIO  (-999999999)
+#define EVL_TIMER_STDPRIO 0
+#define EVL_TIMER_HIPRIO  999999999
+
+struct evl_tnode {
+	struct rb_node rb;
+	ktime_t date;
+	int prio;
+};
+
+struct evl_tqueue {
+	struct rb_root root;
+	struct evl_tnode *head;
+};
+
+static inline void evl_init_tqueue(struct evl_tqueue *tq)
+{
+	tq->root = RB_ROOT;
+	tq->head = NULL;
+}
+
+#define evl_destroy_tqueue(__tq)	do { } while (0)
+
+static inline bool evl_tqueue_is_empty(struct evl_tqueue *tq)
+{
+	return tq->head == NULL;
+}
+
+static inline
+struct evl_tnode *evl_get_tqueue_head(struct evl_tqueue *tq)
+{
+	return tq->head;
+}
+
+static inline
+struct evl_tnode *evl_get_tqueue_next(struct evl_tqueue *tq,
+				struct evl_tnode *node)
+{
+	struct rb_node *_node = rb_next(&node->rb);
+	return _node ? container_of(_node, struct evl_tnode, rb) : NULL;
+}
+
+static inline
+void evl_remove_tnode(struct evl_tqueue *tq, struct evl_tnode *node)
+{
+	if (node == tq->head)
+		tq->head = evl_get_tqueue_next(tq, node);
+
+	rb_erase(&node->rb, &tq->root);
+}
+
+#define for_each_evl_tnode(__node, __tq)			\
+	for ((__node) = evl_get_tqueue_head(__tq); (__node);	\
+	     (__node) = evl_get_tqueue_next(__tq, __node))
+
+struct evl_rq;
+
+struct evl_timerbase {
+	hard_spinlock_t lock;
+	struct evl_tqueue q;
+};
+
+static inline struct evl_timerbase *
+evl_percpu_timers(struct evl_clock *clock, int cpu)
+{
+	return per_cpu_ptr(clock->timerdata, cpu);
+}
+
+static inline struct evl_timerbase *
+evl_this_cpu_timers(struct evl_clock *clock)
+{
+	return raw_cpu_ptr(clock->timerdata);
+}
+
+struct evl_timer {
+	struct evl_clock *clock;
+	struct evl_tnode node;
+	struct list_head adjlink;
+	int status;
+	ktime_t interval;	/* 0 == oneshot */
+	ktime_t start_date;
+	u64 pexpect_ticks;	/* periodic release date */
+	u64 periodic_ticks;
+#ifdef CONFIG_SMP
+	struct evl_rq *rq;
+#endif
+	struct evl_timerbase *base;
+	void (*handler)(struct evl_timer *timer);
+	const char *name;
+#ifdef CONFIG_EVL_RUNSTATS
+	struct evl_counter scheduled;
+	struct evl_counter fired;
+#endif /* CONFIG_EVL_RUNSTATS */
+};
+
+#define evl_tdate(__timer)	((__timer)->node.date)
+
+void evl_start_timer(struct evl_timer *timer,
+		ktime_t value,
+		ktime_t interval);
+
+void __evl_stop_timer(struct evl_timer *timer);
+
+static inline int evl_timer_is_running(struct evl_timer *timer)
+{
+	return (timer->status & EVL_TIMER_RUNNING) != 0;
+}
+
+static inline int evl_timer_is_periodic(struct evl_timer *timer)
+{
+	return (timer->status & EVL_TIMER_PERIODIC) != 0;
+}
+
+static inline void evl_stop_timer(struct evl_timer *timer)
+{
+	if (evl_timer_is_running(timer))
+		__evl_stop_timer(timer);
+}
+
+void evl_destroy_timer(struct evl_timer *timer);
+
+static inline ktime_t evl_abs_timeout(struct evl_timer *timer,
+				ktime_t delta)
+{
+	return ktime_add(evl_read_clock(timer->clock), delta);
+}
+
+#ifdef CONFIG_SMP
+static inline struct evl_rq *evl_get_timer_rq(struct evl_timer *timer)
+{
+	return timer->rq;
+}
+#else /* !CONFIG_SMP */
+#define evl_get_timer_rq(t)	this_evl_rq()
+#endif /* !CONFIG_SMP */
+
+/*
+ * timer base locked so that ->clock does not change under our
+ * feet.
+ */
+static inline unsigned long evl_get_timer_gravity(struct evl_timer *timer)
+{
+	struct evl_clock *clock = timer->clock;
+
+	if (timer->status & EVL_TIMER_KGRAVITY)
+		return clock->gravity.kernel;
+
+	if (timer->status & EVL_TIMER_UGRAVITY)
+		return clock->gravity.user;
+
+	return clock->gravity.irq;
+}
+
+/* timer base locked. */
+static inline void evl_update_timer_date(struct evl_timer *timer)
+{
+	evl_tdate(timer) = ktime_add_ns(timer->start_date,
+		(timer->periodic_ticks * ktime_to_ns(timer->interval))
+			- evl_get_timer_gravity(timer));
+}
+
+static inline
+ktime_t evl_get_timer_next_date(struct evl_timer *timer)
+{
+	return ktime_add_ns(timer->start_date,
+			timer->pexpect_ticks * ktime_to_ns(timer->interval));
+}
+
+static inline
+void evl_set_timer_priority(struct evl_timer *timer, int prio)
+{
+	timer->node.prio = prio;
+}
+
+void __evl_init_timer(struct evl_timer *timer,
+		struct evl_clock *clock,
+		void (*handler)(struct evl_timer *timer),
+		struct evl_rq *rq,
+		const char *name,
+		int flags);
+
+void evl_set_timer_gravity(struct evl_timer *timer,
+			int gravity);
+
+#define evl_init_timer_on_rq(__timer, __clock, __handler, __rq, __flags) \
+	__evl_init_timer(__timer, __clock, __handler,			\
+			__rq, #__handler, __flags)
+
+#define evl_init_timer_on_cpu(__timer, __cpu, __handler)		\
+	do {								\
+		struct evl_rq *__rq = evl_cpu_rq(__cpu);		\
+		evl_init_timer_on_rq(__timer, &evl_mono_clock, __handler, \
+				__rq, EVL_TIMER_IGRAVITY);		\
+	} while (0)
+
+#define evl_init_timer(__timer, __handler)				\
+	evl_init_timer_on_rq(__timer, &evl_mono_clock, __handler, NULL,	\
+			EVL_TIMER_IGRAVITY)
+
+#ifdef CONFIG_EVL_RUNSTATS
+
+static inline
+void evl_reset_timer_stats(struct evl_timer *timer)
+{
+	evl_set_counter(&timer->scheduled, 0);
+	evl_set_counter(&timer->fired, 0);
+}
+
+static inline
+void evl_account_timer_scheduled(struct evl_timer *timer)
+{
+	evl_inc_counter(&timer->scheduled);
+}
+
+static inline
+void evl_account_timer_fired(struct evl_timer *timer)
+{
+	evl_inc_counter(&timer->fired);
+}
+
+#else /* !CONFIG_EVL_RUNSTATS */
+
+static inline
+void evl_reset_timer_stats(struct evl_timer *timer) { }
+
+static inline
+void evl_account_timer_scheduled(struct evl_timer *timer) { }
+
+static inline
+void evl_account_timer_fired(struct evl_timer *timer) { }
+
+#endif /* !CONFIG_EVL_RUNSTATS */
+
+static inline
+void evl_set_timer_name(struct evl_timer *timer, const char *name)
+{
+	timer->name = name;
+}
+
+static inline
+const char *evl_get_timer_name(struct evl_timer *timer)
+{
+	return timer->name;
+}
+
+bool evl_timer_deactivate(struct evl_timer *timer);
+
+/* timer base locked. */
+static inline ktime_t evl_get_timer_expiry(struct evl_timer *timer)
+{
+	/* Ideal expiry date without anticipation (no gravity) */
+	return ktime_add(evl_tdate(timer),
+			evl_get_timer_gravity(timer));
+}
+
+ktime_t evl_get_timer_date(struct evl_timer *timer);
+
+ktime_t __evl_get_timer_delta(struct evl_timer *timer);
+
+static inline ktime_t evl_get_timer_delta(struct evl_timer *timer)
+{
+	if (!evl_timer_is_running(timer))
+		return EVL_INFINITE;
+
+	return __evl_get_timer_delta(timer);
+}
+
+static inline
+ktime_t __evl_get_stopped_timer_delta(struct evl_timer *timer)
+{
+	return __evl_get_timer_delta(timer);
+}
+
+static inline
+ktime_t evl_get_stopped_timer_delta(struct evl_timer *timer)
+{
+	ktime_t t = __evl_get_stopped_timer_delta(timer);
+
+	if (ktime_to_ns(t) <= 1)
+		return EVL_INFINITE;
+
+	return t;
+}
+
+static __always_inline
+void evl_dequeue_timer(struct evl_timer *timer,
+		struct evl_tqueue *tq)
+{
+	evl_remove_tnode(tq, &timer->node);
+	timer->status |= EVL_TIMER_DEQUEUED;
+}
+
+void evl_insert_tnode(struct evl_tqueue *tq, struct evl_tnode *node);
+
+/* timer base locked. */
+static __always_inline
+void evl_enqueue_timer(struct evl_timer *timer,
+		struct evl_tqueue *tq)
+{
+	evl_insert_tnode(tq, &timer->node);
+	timer->status &= ~EVL_TIMER_DEQUEUED;
+	evl_account_timer_scheduled(timer);
+}
+
+unsigned long evl_get_timer_overruns(struct evl_timer *timer);
+
+void evl_move_timer(struct evl_timer *timer,
+		struct evl_clock *clock,
+		struct evl_rq *rq);
+
+#ifdef CONFIG_SMP
+
+static inline void evl_prepare_timed_wait(struct evl_timer *timer,
+					struct evl_clock *clock,
+					struct evl_rq *rq)
+{
+	/* We may change the reference clock before waiting. */
+	if (rq != timer->rq || clock != timer->clock)
+		evl_move_timer(timer, clock, rq);
+}
+
+static inline bool evl_timer_on_rq(struct evl_timer *timer,
+				struct evl_rq *rq)
+{
+	return timer->rq == rq;
+}
+
+#else /* ! CONFIG_SMP */
+
+static inline void evl_prepare_timed_wait(struct evl_timer *timer,
+					struct evl_clock *clock,
+					struct evl_rq *rq)
+{
+	if (clock != timer->clock)
+		evl_move_timer(timer, clock, rq);
+}
+
+static inline bool evl_timer_on_rq(struct evl_timer *timer,
+				struct evl_rq *rq)
+{
+	return true;
+}
+
+#endif /* CONFIG_SMP */
+
+#endif /* !_EVL_TIMER_H */
diff --git a/include/evl/wait.h b/include/evl/wait.h
new file mode 100644
index 000000000000..59891d777174
--- /dev/null
+++ b/include/evl/wait.h
@@ -0,0 +1,136 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_WAIT_H
+#define _EVL_WAIT_H
+
+#include <linux/types.h>
+#include <linux/errno.h>
+#include <linux/spinlock.h>
+#include <evl/list.h>
+#include <evl/timer.h>
+#include <evl/clock.h>
+#include <evl/thread.h>
+#include <evl/sched.h>
+#include <trace/events/evl.h>
+#include <uapi/evl/thread.h>
+
+#define EVL_WAIT_FIFO    0
+#define EVL_WAIT_PRIO    BIT(0)
+
+struct evl_wait_queue {
+	int flags;
+	struct evl_clock *clock;
+	struct evl_wait_channel wchan;
+	evl_spinlock_t lock;
+};
+
+#define EVL_WAIT_INITIALIZER(__name) {					\
+		.flags = EVL_WAIT_PRIO,					\
+		.clock = &evl_mono_clock,				\
+		.lock = __EVL_SPIN_LOCK_INITIALIZER((__name).lock),	\
+		.wchan = {						\
+			.reorder_wait = evl_reorder_wait,		\
+			.follow_depend = evl_follow_wait_depend,	\
+			.wait_list = LIST_HEAD_INIT((__name).wchan.wait_list), \
+		},							\
+	}
+
+#define evl_head_waiter(__wq)						\
+	list_first_entry_or_null(&(__wq)->wchan.wait_list,		\
+				struct evl_thread, wait_next)
+
+#define evl_for_each_waiter(__pos, __wq)				\
+	list_for_each_entry(__pos, &(__wq)->wchan.wait_list, wait_next)
+
+#define evl_for_each_waiter_safe(__pos, __tmp, __wq)			\
+	list_for_each_entry_safe(__pos, __tmp,				\
+				&(__wq)->wchan.wait_list, wait_next)
+
+#define evl_wait_event_timeout(__wq, __timeout, __timeout_mode, __cond)	\
+({									\
+	int __ret = 0, __bcast;						\
+	unsigned long __flags;						\
+									\
+	evl_spin_lock_irqsave(&(__wq)->lock, __flags);			\
+	if (!(__cond)) {						\
+		if (timeout_nonblock(__timeout))			\
+			__ret = -EAGAIN;				\
+		else {							\
+			do {						\
+				evl_add_wait_queue(__wq, __timeout,	\
+						__timeout_mode);	\
+				evl_spin_unlock_irqrestore(&(__wq)->lock, __flags); \
+				__ret = evl_wait_schedule(__wq);	\
+				__bcast = evl_current()->info & T_BCAST; \
+				evl_spin_lock_irqsave(&(__wq)->lock, __flags); \
+			} while (!__ret && !__bcast && !(__cond));	\
+		}							\
+	}								\
+	evl_spin_unlock_irqrestore(&(__wq)->lock, __flags);		\
+	__ret;								\
+})
+
+#define evl_wait_event(__wq, __cond)					\
+	evl_wait_event_timeout(__wq, EVL_INFINITE, EVL_REL, __cond)
+
+void evl_add_wait_queue(struct evl_wait_queue *wq,
+			ktime_t timeout,
+			enum evl_tmode timeout_mode);
+
+int evl_wait_schedule(struct evl_wait_queue *wq);
+
+static inline bool evl_wait_active(struct evl_wait_queue *wq)
+{
+	assert_evl_lock(&wq->lock);
+	return !list_empty(&wq->wchan.wait_list);
+}
+
+static inline
+struct evl_thread *evl_wait_head(struct evl_wait_queue *wq)
+{
+	assert_evl_lock(&wq->lock);
+	return list_first_entry_or_null(&wq->wchan.wait_list,
+					struct evl_thread, wait_next);
+}
+
+void __evl_init_wait(struct evl_wait_queue *wq,
+		struct evl_clock *clock,
+		int flags,
+		const char *name,
+		struct lock_class_key *key);
+
+#define evl_init_wait(__wq, __clock, __flags)				\
+	do {								\
+		static struct lock_class_key __key;			\
+		__evl_init_wait(__wq, __clock, __flags, #__wq, &__key); \
+	} while (0)
+
+void evl_destroy_wait(struct evl_wait_queue *wq);
+
+void evl_flush_wait_locked(struct evl_wait_queue *wq,
+			int reason);
+
+void evl_flush_wait(struct evl_wait_queue *wq,
+		int reason);
+
+struct evl_thread *evl_wake_up(struct evl_wait_queue *wq,
+			struct evl_thread *waiter);
+
+static inline
+struct evl_thread *evl_wake_up_head(struct evl_wait_queue *wq)
+{
+	return evl_wake_up(wq, NULL);
+}
+
+int evl_reorder_wait(struct evl_thread *waiter,
+		struct evl_thread *originator);
+
+int evl_follow_wait_depend(struct evl_wait_channel *wchan,
+			struct evl_thread *originator);
+
+#endif /* !_EVL_WAIT_H_ */
diff --git a/include/evl/xbuf.h b/include/evl/xbuf.h
new file mode 100644
index 000000000000..ff70136758c5
--- /dev/null
+++ b/include/evl/xbuf.h
@@ -0,0 +1,28 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_XBUF_H
+#define _EVL_XBUF_H
+
+#include <linux/types.h>
+
+struct evl_file;
+struct evl_xbuf;
+
+struct evl_xbuf *evl_get_xbuf(int efd,
+			struct evl_file **efilpp);
+
+void evl_put_xbuf(struct evl_file *efilp);
+
+ssize_t evl_read_xbuf(struct evl_xbuf *xbuf,
+		void *buf, size_t count,
+		int f_flags);
+
+ssize_t evl_write_xbuf(struct evl_xbuf *xbuf,
+		const void *buf, size_t count,
+		int f_flags);
+
+#endif /* !_EVL_XBUF_H */
diff --git a/include/linux/clockchips.h b/include/linux/clockchips.h
index 8ae9a95ebf5b..dd980dca81e7 100644
--- a/include/linux/clockchips.h
+++ b/include/linux/clockchips.h
@@ -15,6 +15,7 @@
 # include <linux/cpumask.h>
 # include <linux/ktime.h>
 # include <linux/notifier.h>
+# include <linux/irq_pipeline.h>
 
 struct clock_event_device;
 struct module;
@@ -38,6 +39,7 @@ enum clock_event_state {
 	CLOCK_EVT_STATE_PERIODIC,
 	CLOCK_EVT_STATE_ONESHOT,
 	CLOCK_EVT_STATE_ONESHOT_STOPPED,
+	CLOCK_EVT_STATE_RESERVED,
 };
 
 /*
@@ -67,6 +69,17 @@ enum clock_event_state {
  */
 # define CLOCK_EVT_FEAT_HRTIMER		0x000080
 
+/*
+ * Interrupt pipeline support:
+ *
+ * - Clockevent device can work with pipelined timer events (i.e. proxied).
+ * - Device currently delivers high-precision events via out-of-band interrupts.
+ * - Device acts as a proxy for timer interrupt pipelining.
+ */
+# define CLOCK_EVT_FEAT_PIPELINE	0x000100
+# define CLOCK_EVT_FEAT_OOB		0x000200
+# define CLOCK_EVT_FEAT_PROXY		0x000400
+
 /**
  * struct clock_event_device - clock event device descriptor
  * @event_handler:	Assigned by the framework to be called by the low
@@ -91,7 +104,7 @@ enum clock_event_state {
  * @max_delta_ticks:	maximum delta value in ticks stored for reconfiguration
  * @name:		ptr to clock event name
  * @rating:		variable to rate clock event devices
- * @irq:		IRQ number (only for non CPU local devices)
+ * @irq:		IRQ number (only for non CPU local devices, or pipelined timers)
  * @bound_on:		Bound on CPU
  * @cpumask:		cpumask to indicate for which CPUs this device works
  * @list:		list head for the management code
@@ -137,6 +150,11 @@ static inline bool clockevent_state_detached(struct clock_event_device *dev)
 	return dev->state_use_accessors == CLOCK_EVT_STATE_DETACHED;
 }
 
+static inline bool clockevent_state_reserved(struct clock_event_device *dev)
+{
+	return dev->state_use_accessors == CLOCK_EVT_STATE_RESERVED;
+}
+
 static inline bool clockevent_state_shutdown(struct clock_event_device *dev)
 {
 	return dev->state_use_accessors == CLOCK_EVT_STATE_SHUTDOWN;
@@ -157,6 +175,11 @@ static inline bool clockevent_state_oneshot_stopped(struct clock_event_device *d
 	return dev->state_use_accessors == CLOCK_EVT_STATE_ONESHOT_STOPPED;
 }
 
+static inline bool clockevent_is_oob(struct clock_event_device *dev)
+{
+	return !!(dev->features & CLOCK_EVT_FEAT_OOB);
+}
+
 /*
  * Calculate a multiplication factor for scaled math, which is used to convert
  * nanoseconds based values to clock ticks:
@@ -186,6 +209,8 @@ extern int clockevents_unbind_device(struct clock_event_device *ced, int cpu);
 extern void clockevents_config_and_register(struct clock_event_device *dev,
 					    u32 freq, unsigned long min_delta,
 					    unsigned long max_delta);
+extern void clockevents_switch_state(struct clock_event_device *dev,
+				     enum clock_event_state state);
 
 extern int clockevents_update_freq(struct clock_event_device *ce, u32 freq);
 
@@ -215,6 +240,49 @@ static inline int tick_check_broadcast_expired(void) { return 0; }
 static inline void tick_setup_hrtimer_broadcast(void) { }
 # endif
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+struct clock_proxy_device {
+	struct clock_event_device proxy_device;
+	struct clock_event_device *real_device;
+	void (*handle_oob_event)(struct clock_event_device *dev);
+	void (*__setup_handler)(struct clock_proxy_device *dev);
+	void (*__original_handler)(struct clock_event_device *dev);
+};
+
+void tick_notify_proxy(void);
+
+static inline
+void clockevents_handle_event(struct clock_event_device *ced)
+{
+	/*
+	 * If called from the in-band stage, or for delivering a
+	 * high-precision timer event to the out-of-band stage, call
+	 * the event handler immediately.
+	 *
+	 * Otherwise, ced is still the in-band tick device for the
+	 * current CPU, so just relay the incoming tick to the in-band
+	 * stage via tick_notify_proxy().  This situation can happen
+	 * when all CPUs receive the same out-of-band IRQ from a given
+	 * clock event device, but only a subset of the online CPUs has
+	 * enabled a proxy.
+	 */
+	if (clockevent_is_oob(ced) || running_inband())
+		ced->event_handler(ced);
+	else
+		tick_notify_proxy();
+}
+
+#else
+
+static inline
+void clockevents_handle_event(struct clock_event_device *ced)
+{
+	ced->event_handler(ced);
+}
+
+#endif	/* !CONFIG_IRQ_PIPELINE */
+
 #else /* !CONFIG_GENERIC_CLOCKEVENTS: */
 
 static inline void clockevents_suspend(void) { }
diff --git a/include/linux/clocksource.h b/include/linux/clocksource.h
index b21db536fd52..971ce7a3bde1 100644
--- a/include/linux/clocksource.h
+++ b/include/linux/clocksource.h
@@ -13,12 +13,15 @@
 #include <linux/timex.h>
 #include <linux/time.h>
 #include <linux/list.h>
+#include <linux/hashtable.h>
 #include <linux/cache.h>
 #include <linux/timer.h>
+#include <linux/cdev.h>
 #include <linux/init.h>
 #include <linux/of.h>
 #include <asm/div64.h>
 #include <asm/io.h>
+#include <uapi/linux/clocksource.h>
 
 struct clocksource;
 struct module;
@@ -109,6 +112,36 @@ struct clocksource {
 	struct module *owner;
 };
 
+struct clocksource_mmio {
+	void __iomem *reg;
+	struct clocksource clksrc;
+};
+
+struct clocksource_user_mmio {
+	struct clocksource_mmio mmio;
+	void __iomem *reg_upper;
+	unsigned int bits_lower;
+	unsigned int mask_lower;
+	unsigned int mask_upper;
+	enum clksrc_user_mmio_type type;
+	unsigned long phys_lower;
+	unsigned long phys_upper;
+	unsigned int id;
+	struct device *dev;
+	struct cdev cdev;
+	DECLARE_HASHTABLE(mappings, 10);
+	struct spinlock lock;
+	struct list_head link;
+};
+
+struct clocksource_mmio_regs {
+	void __iomem *reg_upper;
+	void __iomem *reg_lower;
+	unsigned int bits_upper;
+	unsigned int bits_lower;
+	unsigned long (*revmap)(void *);
+};
+
 /*
  * Clock source flags bits::
  */
@@ -253,10 +286,21 @@ extern u64 clocksource_mmio_readl_up(struct clocksource *);
 extern u64 clocksource_mmio_readl_down(struct clocksource *);
 extern u64 clocksource_mmio_readw_up(struct clocksource *);
 extern u64 clocksource_mmio_readw_down(struct clocksource *);
+extern u64 clocksource_dual_mmio_readw_up(struct clocksource *);
+extern u64 clocksource_dual_mmio_readl_up(struct clocksource *);
 
 extern int clocksource_mmio_init(void __iomem *, const char *,
 	unsigned long, int, unsigned, u64 (*)(struct clocksource *));
 
+extern int clocksource_user_mmio_init(struct clocksource_user_mmio *ucs,
+				      const struct clocksource_mmio_regs *regs,
+				      unsigned long hz);
+
+extern int clocksource_user_single_mmio_init(
+	void __iomem *base, const char *name,
+	unsigned long hz, int rating, unsigned int bits,
+	u64 (*read)(struct clocksource *));
+
 extern int clocksource_i8253_init(void);
 
 #define TIMER_OF_DECLARE(name, compat, fn) \
diff --git a/include/linux/console.h b/include/linux/console.h
index d09951d5a94e..f45d24f0e1ce 100644
--- a/include/linux/console.h
+++ b/include/linux/console.h
@@ -145,6 +145,7 @@ static inline int con_debug_leave(void)
 struct console {
 	char	name[16];
 	void	(*write)(struct console *, const char *, unsigned);
+	void	(*write_raw)(struct console *, const char *, unsigned);
 	int	(*read)(struct console *, char *, unsigned);
 	struct tty_driver *(*device)(struct console *, int *);
 	void	(*unblank)(void);
diff --git a/include/linux/context_tracking.h b/include/linux/context_tracking.h
index d05609ad329d..2bec38de9647 100644
--- a/include/linux/context_tracking.h
+++ b/include/linux/context_tracking.h
@@ -108,7 +108,7 @@ static inline void guest_enter_irqoff(void)
 	else
 		current->flags |= PF_VCPU;
 
-	if (context_tracking_is_enabled())
+	if (running_inband() && context_tracking_is_enabled())
 		__context_tracking_enter(CONTEXT_GUEST);
 
 	/* KVM does not hold any references to rcu protected data when it
diff --git a/include/linux/dovetail.h b/include/linux/dovetail.h
new file mode 100644
index 000000000000..466858c67192
--- /dev/null
+++ b/include/linux/dovetail.h
@@ -0,0 +1,282 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef _LINUX_DOVETAIL_H
+#define _LINUX_DOVETAIL_H
+
+#ifdef CONFIG_DOVETAIL
+
+#include <linux/sched.h>
+#include <linux/mm.h>
+#include <linux/thread_info.h>
+#include <asm/dovetail.h>
+
+struct pt_regs;
+struct task_struct;
+struct file;
+struct files_struct;
+
+enum inband_event_type {
+	INBAND_TASK_SCHEDULE,
+	INBAND_TASK_SIGNAL,
+	INBAND_TASK_MIGRATION,
+	INBAND_TASK_EXIT,
+	INBAND_PROCESS_CLEANUP,
+};
+
+struct dovetail_migration_data {
+	struct task_struct *task;
+	int dest_cpu;
+};
+
+struct dovetail_altsched_context {
+	struct task_struct *task;
+	struct mm_struct *active_mm;
+	bool borrowed_mm;
+};
+
+void inband_task_init(struct task_struct *p);
+
+int pipeline_syscall(struct thread_info *ti,
+		     unsigned long syscall, struct pt_regs *regs);
+
+void __oob_trap_notify(unsigned int trapnr,
+		       struct pt_regs *regs);
+
+static inline void oob_trap_notify(unsigned int trapnr,
+				   struct pt_regs *regs)
+{
+	if (running_oob())
+		__oob_trap_notify(trapnr, regs);
+}
+
+void inband_event_notify(enum inband_event_type,
+			 void *data);
+
+void inband_clock_was_set(void);
+
+static inline void inband_signal_notify(struct task_struct *p)
+{
+	if (test_ti_local_flags(task_thread_info(p), _TLF_DOVETAIL))
+		inband_event_notify(INBAND_TASK_SIGNAL, p);
+}
+
+static inline void inband_migration_notify(struct task_struct *p, int cpu)
+{
+	if (test_ti_local_flags(task_thread_info(p), _TLF_DOVETAIL)) {
+		struct dovetail_migration_data d = {
+			.task = p,
+			.dest_cpu = cpu,
+		};
+		inband_event_notify(INBAND_TASK_MIGRATION, &d);
+	}
+}
+
+static inline void inband_exit_notify(void)
+{
+	if (test_thread_local_flags(_TLF_DOVETAIL))
+		inband_event_notify(INBAND_TASK_EXIT, NULL);
+}
+
+static inline void inband_cleanup_notify(struct mm_struct *mm)
+{
+	/*
+	 * Notify regardless of _TLF_DOVETAIL: current may have
+	 * resources to clean up although it might not be interested
+	 * in other kernel events.
+	 */
+	inband_event_notify(INBAND_PROCESS_CLEANUP, mm);
+}
+
+static inline
+void prepare_inband_switch(struct task_struct *next)
+{
+	struct task_struct *prev = current;
+
+	if (test_ti_local_flags(task_thread_info(next), _TLF_DOVETAIL)) {
+		__this_cpu_write(irq_pipeline.rqlock_owner, prev);
+		inband_event_notify(INBAND_TASK_SCHEDULE, next);
+	}
+
+	hard_local_irq_disable();
+}
+
+static inline void inband_enter_guest(struct kvm_oob_notifier *nfy)
+{
+	struct irq_pipeline_data *p = raw_cpu_ptr(&irq_pipeline);
+	p->vcpu_notify = nfy;
+	barrier();
+}
+
+static inline void inband_exit_guest(void)
+{
+	struct irq_pipeline_data *p = raw_cpu_ptr(&irq_pipeline);
+	p->vcpu_notify = NULL;
+	barrier();
+}
+
+int inband_switch_tail(void);
+
+void oob_trampoline(void);
+
+#ifdef CONFIG_KVM
+void oob_notify_kvm(void);
+#else
+static inline void oob_notify_kvm(void)
+{ }
+#endif
+
+void arch_inband_task_init(struct task_struct *p);
+
+void sync_inband_irqs(void);
+
+#define protect_inband_mm(__flags)			\
+	do {						\
+		(__flags) = hard_cond_local_irq_save();	\
+		barrier();				\
+	} while (0)					\
+
+#define unprotect_inband_mm(__flags)			\
+	do {						\
+		barrier();				\
+		hard_cond_local_irq_restore(__flags);	\
+	} while (0)					\
+
+int dovetail_start(void);
+
+void dovetail_stop(void);
+
+void dovetail_init_altsched(struct dovetail_altsched_context *p);
+
+void dovetail_start_altsched(void);
+
+void dovetail_stop_altsched(void);
+
+__must_check int dovetail_leave_inband(void);
+
+static inline void dovetail_leave_oob(void)
+{
+	clear_thread_local_flags(_TLF_OOB|_TLF_OFFSTAGE);
+	clear_thread_flag(TIF_MAYDAY);
+}
+
+void dovetail_resume_inband(void);
+
+bool dovetail_context_switch(struct dovetail_altsched_context *out,
+			struct dovetail_altsched_context *in,
+			bool leave_inband);
+
+static inline
+struct oob_thread_state *dovetail_current_state(void)
+{
+	return &current_thread_info()->oob_state;
+}
+
+static inline
+struct oob_thread_state *dovetail_task_state(struct task_struct *p)
+{
+	return &task_thread_info(p)->oob_state;
+}
+
+static inline
+struct oob_mm_state *dovetail_mm_state(void)
+{
+	if (current->flags & PF_KTHREAD)
+		return NULL;
+
+	return &current->mm->oob_state;
+}
+
+void dovetail_call_mayday(struct thread_info *ti,
+			  struct pt_regs *regs);
+
+static inline void dovetail_send_mayday(struct task_struct *castaway)
+{
+	struct thread_info *ti = task_thread_info(castaway);
+
+	if (test_ti_local_flags(ti, _TLF_DOVETAIL))
+		set_ti_thread_flag(ti, TIF_MAYDAY);
+}
+
+void install_inband_fd(unsigned int fd, struct file *file,
+		       struct files_struct *files);
+
+void uninstall_inband_fd(unsigned int fd, struct file *file,
+			 struct files_struct *files);
+
+void replace_inband_fd(unsigned int fd, struct file *file,
+		       struct files_struct *files);
+
+#else	/* !CONFIG_DOVETAIL */
+
+struct files_struct;
+
+static inline
+void inband_task_init(struct task_struct *p) { }
+
+#define oob_trap_notify(__trapnr, __regs)	 do { } while (0)
+
+static inline
+int pipeline_syscall(struct thread_info *ti,
+		     unsigned long syscall, struct pt_regs *regs)
+{
+	return 0;
+}
+
+static inline void inband_signal_notify(struct task_struct *p) { }
+
+static inline
+void inband_migration_notify(struct task_struct *p, int cpu) { }
+
+static inline void inband_exit_notify(void) { }
+
+static inline void inband_cleanup_notify(struct mm_struct *mm) { }
+
+static inline void oob_trampoline(void) { }
+
+static inline void prepare_inband_switch(struct task_struct *next) { }
+
+#define inband_enter_guest(__nfy)	do { } while (0)
+
+#define inband_exit_guest()		do { } while (0)
+
+static inline int inband_switch_tail(void)
+{
+	return 0;
+}
+
+#define protect_inband_mm(__flags)	\
+	do { (void)(__flags); } while (0)
+
+#define unprotect_inband_mm(__flags)	\
+	do { (void)(__flags); } while (0)
+
+static inline void inband_clock_was_set(void) { }
+
+static inline
+void install_inband_fd(unsigned int fd, struct file *file,
+		       struct files_struct *files) { }
+
+static inline
+void uninstall_inband_fd(unsigned int fd, struct file *file,
+			 struct files_struct *files) { }
+
+static inline
+void replace_inband_fd(unsigned int fd, struct file *file,
+		       struct files_struct *files) { }
+
+#endif	/* !CONFIG_DOVETAIL */
+
+static inline bool dovetailing(void)
+{
+	return IS_ENABLED(CONFIG_DOVETAIL);
+}
+
+static inline bool dovetail_debug(void)
+{
+	return IS_ENABLED(CONFIG_DEBUG_DOVETAIL);
+}
+
+#endif /* _LINUX_DOVETAIL_H */
diff --git a/include/linux/dw_apb_timer.h b/include/linux/dw_apb_timer.h
index 14f072edbca5..abd5a050a529 100644
--- a/include/linux/dw_apb_timer.h
+++ b/include/linux/dw_apb_timer.h
@@ -31,7 +31,7 @@ struct dw_apb_clock_event_device {
 
 struct dw_apb_clocksource {
 	struct dw_apb_timer			timer;
-	struct clocksource			cs;
+	struct clocksource_user_mmio		ummio;
 };
 
 void dw_apb_clockevent_register(struct dw_apb_clock_event_device *dw_ced);
diff --git a/include/linux/fs.h b/include/linux/fs.h
index e0d909d35763..d95ce9460f92 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -54,6 +54,7 @@ struct kiocb;
 struct kobject;
 struct pipe_inode_info;
 struct poll_table_struct;
+struct oob_poll_wait;
 struct kstatfs;
 struct vm_area_struct;
 struct vfsmount;
@@ -962,6 +963,7 @@ struct file {
 #endif
 	/* needed for tty driver, and maybe others */
 	void			*private_data;
+	void			*oob_data;
 
 #ifdef CONFIG_EPOLL
 	/* Used by fs/eventpoll.c to link all the hooks to this file */
@@ -1824,6 +1826,10 @@ struct file_operations {
 	__poll_t (*poll) (struct file *, struct poll_table_struct *);
 	long (*unlocked_ioctl) (struct file *, unsigned int, unsigned long);
 	long (*compat_ioctl) (struct file *, unsigned int, unsigned long);
+	ssize_t (*oob_read) (struct file *, char __user *, size_t);
+	ssize_t (*oob_write) (struct file *, const char __user *, size_t);
+	long (*oob_ioctl) (struct file *, unsigned int, unsigned long);
+	__poll_t (*oob_poll) (struct file *, struct oob_poll_wait *);
 	int (*mmap) (struct file *, struct vm_area_struct *);
 	unsigned long mmap_supported_flags;
 	int (*open) (struct inode *, struct file *);
diff --git a/include/linux/hardirq.h b/include/linux/hardirq.h
index da0af631ded5..2acfcd9223db 100644
--- a/include/linux/hardirq.h
+++ b/include/linux/hardirq.h
@@ -6,6 +6,7 @@
 #include <linux/lockdep.h>
 #include <linux/ftrace_irq.h>
 #include <linux/vtime.h>
+#include <asm-generic/irq_pipeline.h>
 #include <asm/hardirq.h>
 
 
@@ -44,6 +45,7 @@ extern void rcu_nmi_exit(void);
  * Enter irq context (on NO_HZ, update jiffies):
  */
 extern void irq_enter(void);
+void irq_enter_if_inband(void);
 
 /*
  * Exit irq context without processing softirqs:
@@ -59,6 +61,7 @@ extern void irq_enter(void);
  * Exit irq context and process softirqs if needed:
  */
 extern void irq_exit(void);
+void irq_exit_if_inband(void);
 
 #ifndef arch_nmi_enter
 #define arch_nmi_enter()	do { } while (0)
@@ -67,6 +70,7 @@ extern void irq_exit(void);
 
 #define nmi_enter()						\
 	do {							\
+		irq_pipeline_nmi_enter();			\
 		arch_nmi_enter();				\
 		printk_nmi_enter();				\
 		lockdep_off();					\
@@ -87,6 +91,17 @@ extern void irq_exit(void);
 		lockdep_on();					\
 		printk_nmi_exit();				\
 		arch_nmi_exit();				\
+		irq_pipeline_nmi_exit();			\
 	} while (0)
 
+static inline bool start_irq_flow(void)
+{
+	return !irqs_pipelined() || in_pipeline();
+}
+
+static inline bool on_pipeline_entry(void)
+{
+	return irqs_pipelined() && in_pipeline();
+}
+
 #endif /* LINUX_HARDIRQ_H */
diff --git a/include/linux/intel-iommu.h b/include/linux/intel-iommu.h
index ed11ef594378..d565bc459ce7 100644
--- a/include/linux/intel-iommu.h
+++ b/include/linux/intel-iommu.h
@@ -521,7 +521,7 @@ struct intel_iommu {
 	u64		cap;
 	u64		ecap;
 	u32		gcmd; /* Holds TE, EAFL. Don't need SRTP, SFL, WBF */
-	raw_spinlock_t	register_lock; /* protect register handling */
+	hard_spinlock_t	register_lock; /* protect register handling */
 	int		seq_id;	/* sequence id of the iommu */
 	int		agaw; /* agaw of this iommu */
 	int		msagaw; /* max sagaw of this iommu */
diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index 89fc59dab57d..070dd60e3e4d 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -61,6 +61,12 @@
  *                interrupt handler after suspending interrupts. For system
  *                wakeup devices users need to implement wakeup detection in
  *                their interrupt handlers.
+ * IRQF_OOB - Interrupt is attached to an out-of-band handler living
+ *            on the heading stage of the interrupt pipeline
+ *            (CONFIG_IRQ_PIPELINE).  It may be delivered to the
+ *            handler any time interrupts are enabled in the CPU,
+ *            regardless of the (virtualized) interrupt state
+ *            maintained by local_irq_save/disable().
  */
 #define IRQF_SHARED		0x00000080
 #define IRQF_PROBE_SHARED	0x00000100
@@ -74,6 +80,7 @@
 #define IRQF_NO_THREAD		0x00010000
 #define IRQF_EARLY_RESUME	0x00020000
 #define IRQF_COND_SUSPEND	0x00040000
+#define IRQF_OOB		0x00080000
 
 #define IRQF_TIMER		(__IRQF_TIMER | IRQF_NO_SUSPEND | IRQF_NO_THREAD)
 
@@ -499,9 +506,29 @@ extern bool force_irqthreads;
  * to ensure that after a local_irq_disable(), interrupts have
  * really been disabled in hardware. Such architectures need to
  * implement the following hook.
+ *
+ * Those cases also apply when interrupt pipelining is in effect,
+ * since we are virtualizing the interrupt disable state here too.
  */
 #ifndef hard_irq_disable
-#define hard_irq_disable()	do { } while(0)
+#define hard_irq_disable()	hard_cond_local_irq_disable()
+#endif
+
+/*
+ * Unlike other virtualized interrupt disabling schemes may assume, we
+ * can't expect local_irq_restore() to turn hard interrupts on when
+ * pipelining.  hard_irq_enable() is introduced to be paired with
+ * hard_irq_disable(), for unconditionally turning them on. The only
+ * sane sequence mixing virtual and real disable state manipulation
+ * is:
+ *
+ * 1. local_irq_save/disable
+ * 2. hard_irq_disable
+ * 3. hard_irq_enable
+ * 4. local_irq_restore/enable
+ */
+#ifndef hard_irq_enable
+#define hard_irq_enable()	hard_cond_local_irq_enable()
 #endif
 
 /* PLEASE, avoid to allocate new softirqs, if you need not _really_ high
diff --git a/include/linux/irq.h b/include/linux/irq.h
index fb301cf29148..2f9d6193b45c 100644
--- a/include/linux/irq.h
+++ b/include/linux/irq.h
@@ -71,6 +71,11 @@ enum irqchip_irq_state;
  *				  it from the spurious interrupt detection
  *				  mechanism and from core side polling.
  * IRQ_DISABLE_UNLAZY		- Disable lazy irq disable
+ * IRQ_OOB                      - Interrupt can be delivered to the out-of-band handler
+ *                                when pipelining is enabled (CONFIG_IRQ_PIPELINE),
+ *                                regardless of the (virtualized) interrupt state
+ *                                maintained by local_irq_save/disable().
+ * IRQ_CHAINED                  - Interrupt is chained.
  */
 enum {
 	IRQ_TYPE_NONE		= 0x00000000,
@@ -97,13 +102,15 @@ enum {
 	IRQ_PER_CPU_DEVID	= (1 << 17),
 	IRQ_IS_POLLED		= (1 << 18),
 	IRQ_DISABLE_UNLAZY	= (1 << 19),
+	IRQ_OOB			= (1 << 19),
+	IRQ_CHAINED		= (1 << 20),
 };
 
 #define IRQF_MODIFY_MASK	\
 	(IRQ_TYPE_SENSE_MASK | IRQ_NOPROBE | IRQ_NOREQUEST | \
 	 IRQ_NOAUTOEN | IRQ_MOVE_PCNTXT | IRQ_LEVEL | IRQ_NO_BALANCING | \
 	 IRQ_PER_CPU | IRQ_NESTED_THREAD | IRQ_NOTHREAD | IRQ_PER_CPU_DEVID | \
-	 IRQ_IS_POLLED | IRQ_DISABLE_UNLAZY)
+	 IRQ_IS_POLLED | IRQ_DISABLE_UNLAZY | IRQ_OOB)
 
 #define IRQ_NO_BALANCING_MASK	(IRQ_PER_CPU | IRQ_NO_BALANCING)
 
@@ -511,6 +518,7 @@ struct irq_chip {
  * IRQCHIP_EOI_THREADED:	Chip requires eoi() on unmask in threaded mode
  * IRQCHIP_SUPPORTS_LEVEL_MSI	Chip can provide two doorbells for Level MSIs
  * IRQCHIP_SUPPORTS_NMI:	Chip can deliver NMIs, only for root irqchips
+ * IRQCHIP_PIPELINE_SAFE:	Chip can work in pipelined mode
  */
 enum {
 	IRQCHIP_SET_TYPE_MASKED		= (1 <<  0),
@@ -522,6 +530,7 @@ enum {
 	IRQCHIP_EOI_THREADED		= (1 <<  6),
 	IRQCHIP_SUPPORTS_LEVEL_MSI	= (1 <<  7),
 	IRQCHIP_SUPPORTS_NMI		= (1 <<  8),
+	IRQCHIP_PIPELINE_SAFE		= (1 <<  9),
 };
 
 #include <linux/irqdesc.h>
@@ -600,6 +609,7 @@ extern void handle_percpu_irq(struct irq_desc *desc);
 extern void handle_percpu_devid_irq(struct irq_desc *desc);
 extern void handle_bad_irq(struct irq_desc *desc);
 extern void handle_nested_irq(unsigned int irq);
+extern void handle_synthetic_irq(struct irq_desc *desc);
 
 extern void handle_fasteoi_nmi(struct irq_desc *desc);
 extern void handle_percpu_devid_fasteoi_nmi(struct irq_desc *desc);
@@ -744,7 +754,13 @@ extern int irq_set_irq_type(unsigned int irq, unsigned int type);
 extern int irq_set_msi_desc(unsigned int irq, struct msi_desc *entry);
 extern int irq_set_msi_desc_off(unsigned int irq_base, unsigned int irq_offset,
 				struct msi_desc *entry);
-extern struct irq_data *irq_get_irq_data(unsigned int irq);
+
+static inline struct irq_data *irq_get_irq_data(unsigned int irq)
+{
+	struct irq_desc *desc = irq_to_desc(irq);
+
+	return desc ? &desc->irq_data : NULL;
+}
 
 static inline struct irq_chip *irq_get_chip(unsigned int irq)
 {
@@ -987,7 +1003,7 @@ struct irq_chip_type {
  * different flow mechanisms (level/edge) for it.
  */
 struct irq_chip_generic {
-	raw_spinlock_t		lock;
+	hard_spinlock_t		lock;
 	void __iomem		*reg_base;
 	u32			(*reg_readl)(void __iomem *addr);
 	void			(*reg_writel)(u32 val, void __iomem *addr);
@@ -1114,6 +1130,12 @@ static inline struct irq_chip_type *irq_data_get_chip_type(struct irq_data *d)
 
 #define IRQ_MSK(n) (u32)((n) < 32 ? ((1 << (n)) - 1) : UINT_MAX)
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+int irq_switch_oob(unsigned int irq, bool on);
+
+#endif	/* !CONFIG_IRQ_PIPELINE */
+
 #ifdef CONFIG_SMP
 static inline void irq_gc_lock(struct irq_chip_generic *gc)
 {
diff --git a/include/linux/irq_pipeline.h b/include/linux/irq_pipeline.h
new file mode 100644
index 000000000000..80ec18a0c0db
--- /dev/null
+++ b/include/linux/irq_pipeline.h
@@ -0,0 +1,135 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2002 Philippe Gerum  <rpm@xenomai.org>.
+ *               2006 Gilles Chanteperdrix.
+ *               2007 Jan Kiszka.
+ */
+#ifndef _LINUX_IRQ_PIPELINE_H
+#define _LINUX_IRQ_PIPELINE_H
+
+struct cpuidle_device;
+struct cpuidle_state;
+struct irq_desc;
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+#include <linux/compiler.h>
+#include <linux/irqdomain.h>
+#include <linux/percpu.h>
+#include <linux/interrupt.h>
+#include <linux/irqstage.h>
+#include <linux/thread_info.h>
+#include <asm/irqflags.h>
+
+void irq_pipeline_init_early(void);
+
+void irq_pipeline_init(void);
+
+void arch_irq_pipeline_init(void);
+
+int irq_inject_pipeline(unsigned int irq);
+
+void synchronize_pipeline(void);
+
+static __always_inline void synchronize_pipeline_on_irq(void)
+{
+	/*
+	 * Optimize if we preempted the high priority oob stage: we
+	 * don't need to synchronize the pipeline unless there is a
+	 * pending interrupt for it.
+	 */
+	if (running_inband() ||
+	    stage_irqs_pending(this_oob_staged()))
+		synchronize_pipeline();
+}
+
+void dovetail_call_mayday(struct thread_info *ti,
+			  struct pt_regs *regs);
+
+bool handle_oob_irq(struct irq_desc *desc);
+
+void arch_do_IRQ_pipelined(struct irq_desc *desc);
+
+void irq_pipeline_clear(struct irq_desc *desc);
+
+#ifdef CONFIG_SMP
+void irq_pipeline_send_remote(unsigned int ipi,
+			      const struct cpumask *cpumask);
+#endif	/* CONFIG_SMP */
+
+void irq_pipeline_oops(void);
+
+bool irq_pipeline_steal_tick(void);
+
+bool irq_cpuidle_enter(struct cpuidle_device *dev,
+		       struct cpuidle_state *state);
+
+int run_oob_call(int (*fn)(void *arg), void *arg);
+
+extern bool irq_pipeline_active;
+
+static inline bool inband_unsafe(void)
+{
+	return running_oob() ||
+		(hard_irqs_disabled() && irq_pipeline_active);
+}
+
+static inline bool inband_irq_pending(void)
+{
+	check_hard_irqs_disabled();
+
+	return stage_irqs_pending(this_inband_staged());
+}
+
+int handle_irq_pipelined(struct pt_regs *regs);
+
+extern struct irq_domain *synthetic_irq_domain;
+
+#else /* !CONFIG_IRQ_PIPELINE */
+
+#include <linux/irqstage.h>
+#include <asm/irq_pipeline.h>
+
+static inline
+void irq_pipeline_init_early(void) { }
+
+static inline
+void irq_pipeline_init(void) { }
+
+static inline
+void irq_pipeline_clear(struct irq_desc *desc) { }
+
+static inline
+void irq_pipeline_oops(void) { }
+
+static inline bool handle_oob_irq(struct irq_desc *desc)
+{
+	return false;
+}
+
+static inline bool irq_cpuidle_enter(struct cpuidle_device *dev,
+				     struct cpuidle_state *state)
+{
+	return true;
+}
+
+static inline bool inband_unsafe(void)
+{
+	return false;
+}
+
+static inline bool inband_irq_pending(void)
+{
+	return false;
+}
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
+#if !defined(CONFIG_IRQ_PIPELINE) || !defined(CONFIG_SPARSE_IRQ)
+static inline void uncache_irq_desc(unsigned int irq) { }
+#else
+void uncache_irq_desc(unsigned int irq);
+#endif
+
+#endif /* _LINUX_IRQ_PIPELINE_H */
diff --git a/include/linux/irqdesc.h b/include/linux/irqdesc.h
index d6e2ab538ef2..3f38f784f839 100644
--- a/include/linux/irqdesc.h
+++ b/include/linux/irqdesc.h
@@ -72,7 +72,7 @@ struct irq_desc {
 	unsigned int		irqs_unhandled;
 	atomic_t		threads_handled;
 	int			threads_handled_last;
-	raw_spinlock_t		lock;
+	mutable_spinlock_t	lock;
 	struct cpumask		*percpu_enabled;
 	const struct cpumask	*percpu_affinity;
 #ifdef CONFIG_SMP
@@ -158,6 +158,8 @@ static inline void generic_handle_irq_desc(struct irq_desc *desc)
 
 int generic_handle_irq(unsigned int irq);
 
+int generic_pipeline_irq(unsigned int irq, struct pt_regs *regs);
+
 #ifdef CONFIG_HANDLE_DOMAIN_IRQ
 /*
  * Convert a HW interrupt number to a logical one using a IRQ domain,
@@ -168,11 +170,24 @@ int generic_handle_irq(unsigned int irq);
 int __handle_domain_irq(struct irq_domain *domain, unsigned int hwirq,
 			bool lookup, struct pt_regs *regs);
 
+#ifdef CONFIG_IRQ_PIPELINE
+unsigned int irq_find_mapping(struct irq_domain *host,
+			irq_hw_number_t hwirq);
+
+static inline int handle_domain_irq(struct irq_domain *domain,
+				    unsigned int hwirq, struct pt_regs *regs)
+{
+	unsigned int irq = irq_find_mapping(domain, hwirq);
+
+	return generic_pipeline_irq(irq, regs);
+}
+#else
 static inline int handle_domain_irq(struct irq_domain *domain,
 				    unsigned int hwirq, struct pt_regs *regs)
 {
 	return __handle_domain_irq(domain, hwirq, true, regs);
 }
+#endif	/* !CONFIG_IRQ_PIPELINE */
 
 #ifdef CONFIG_IRQ_DOMAIN
 int handle_domain_nmi(struct irq_domain *domain, unsigned int hwirq,
@@ -256,6 +271,14 @@ static inline bool irq_is_percpu_devid(unsigned int irq)
 	return desc->status_use_accessors & IRQ_PER_CPU_DEVID;
 }
 
+static inline int irq_is_oob(unsigned int irq)
+{
+	struct irq_desc *desc;
+
+	desc = irq_to_desc(irq);
+	return desc->status_use_accessors & IRQ_OOB;
+}
+
 static inline void
 irq_set_lockdep_class(unsigned int irq, struct lock_class_key *lock_class,
 		      struct lock_class_key *request_class)
diff --git a/include/linux/irqflags.h b/include/linux/irqflags.h
index 21619c92c377..ac79e9e04955 100644
--- a/include/linux/irqflags.h
+++ b/include/linux/irqflags.h
@@ -13,6 +13,7 @@
 #define _LINUX_TRACE_IRQFLAGS_H
 
 #include <linux/typecheck.h>
+#include <asm-generic/irq_pipeline.h>
 #include <asm/irqflags.h>
 
 /* Currently trace_softirqs_on/off is used only by lockdep */
@@ -148,6 +149,23 @@ do {						\
 
 #endif /* CONFIG_TRACE_IRQFLAGS */
 
+#ifdef CONFIG_IRQ_PIPELINE
+#define local_irq_enable_full()			\
+	do {					\
+		hard_local_irq_enable();	\
+		local_irq_enable();		\
+	} while (0)
+
+#define local_irq_disable_full()		\
+	do {					\
+		local_irq_disable();		\
+		hard_local_irq_disable();	\
+	} while (0)
+#else
+#define local_irq_enable_full()		local_irq_enable()
+#define local_irq_disable_full()	local_irq_disable()
+#endif
+
 #define local_save_flags(flags)	raw_local_save_flags(flags)
 
 /*
diff --git a/include/linux/irqstage.h b/include/linux/irqstage.h
new file mode 100644
index 000000000000..830a7cb8e8ac
--- /dev/null
+++ b/include/linux/irqstage.h
@@ -0,0 +1,394 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016, 2019 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef _LINUX_IRQSTAGE_H
+#define _LINUX_IRQSTAGE_H
+
+#ifdef CONFIG_IRQ_PIPELINE
+
+#include <linux/percpu.h>
+#include <linux/bitops.h>
+#include <linux/preempt.h>
+#include <asm/irq_pipeline.h>
+
+struct task_struct;
+struct kvm_oob_notifier;
+
+struct irq_stage {
+	int index;
+	const char *name;
+};
+
+extern struct irq_stage inband_stage;
+
+extern struct irq_stage oob_stage;
+
+/* Interrupts disabled for a stage. */
+#define STAGE_STALL_BIT  0
+
+struct irq_event_map;
+
+struct irq_log {
+	unsigned long himap;
+	struct irq_event_map *map;
+};
+
+/* Per-CPU, per-stage data. */
+struct irq_stage_data {
+	unsigned long status;
+	struct irq_log log;
+	struct irq_stage *stage;
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+	int cpu;
+#endif
+};
+
+/* Per-CPU pipeline descriptor. */
+struct irq_pipeline_data {
+	struct irq_stage_data stages[2];
+	struct pt_regs tick_regs;
+#ifdef CONFIG_DOVETAIL
+	struct task_struct *task_inflight;
+	struct task_struct *rqlock_owner;
+	struct kvm_oob_notifier *vcpu_notify;
+#endif
+};
+
+DECLARE_PER_CPU(struct irq_pipeline_data, irq_pipeline);
+
+/**
+ * this_staged - IRQ stage data on the current CPU
+ *
+ * Return the address of @stage's data on the current CPU. IRQs must
+ * be hard disabled to prevent CPU migration.
+ */
+static inline
+struct irq_stage_data *this_staged(struct irq_stage *stage)
+{
+	return &raw_cpu_ptr(irq_pipeline.stages)[stage->index];
+}
+
+/**
+ * percpu_inband_staged - IRQ stage data on specified CPU
+ *
+ * Return the address of @stage's data on @cpu.
+ *
+ * This is the slowest accessor, use it carefully. Prefer
+ * this_staged() for requests referring to the current
+ * CPU. Additionally, if the target stage is known at build time,
+ * consider using this_{inband, oob}_staged() instead.
+ */
+static inline
+struct irq_stage_data *percpu_inband_staged(struct irq_stage *stage, int cpu)
+{
+	return &per_cpu(irq_pipeline.stages, cpu)[stage->index];
+}
+
+/**
+ * this_inband_staged - return the address of the pipeline context
+ * data for the inband stage on the current CPU. CPU migration must be
+ * disabled.
+ *
+ * This accessor is recommended when the stage we refer to is known at
+ * build time to be the inband one.
+ */
+static inline struct irq_stage_data *this_inband_staged(void)
+{
+	return raw_cpu_ptr(&irq_pipeline.stages[0]);
+}
+
+/**
+ * this_oob_staged - return the address of the pipeline context data
+ * for the registered oob stage on the current CPU. CPU migration must
+ * be disabled.
+ *
+ * This accessor is recommended when the stage we refer to is known at
+ * build time to be the registered oob stage. This address is always
+ * different from the context data of the inband stage, even in
+ * absence of registered oob stage.
+ */
+static inline struct irq_stage_data *this_oob_staged(void)
+{
+	return raw_cpu_ptr(&irq_pipeline.stages[1]);
+}
+
+static inline struct irq_stage_data *__current_irq_staged(void)
+{
+	return &raw_cpu_ptr(irq_pipeline.stages)[stage_level()];
+}
+
+/**
+ * current_irq_staged - return the address of the pipeline context
+ * data for the current stage. CPU migration must be disabled.
+ */
+#define current_irq_staged __current_irq_staged()
+
+static inline
+void check_staged_locality(struct irq_stage_data *pd)
+{
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+	/*
+	 * Setting our context with another processor's is a really
+	 * bad idea, our caller definitely went loopy.
+	 */
+	WARN_ON_ONCE(raw_smp_processor_id() != pd->cpu);
+#endif
+}
+
+/**
+ * switch_oob(), switch_inband() - switch the current CPU to the
+ * specified stage context. CPU migration must be disabled.
+ *
+ * Calling these routines is the only sane and safe way to change the
+ * interrupt stage for the current CPU. Don't bypass them, ever.
+ * Really.
+ */
+static inline
+void switch_oob(struct irq_stage_data *pd)
+{
+	check_staged_locality(pd);
+	if (!(preempt_count() & STAGE_MASK))
+		preempt_count_add(STAGE_OFFSET);
+}
+
+static inline
+void switch_inband(struct irq_stage_data *pd)
+{
+	check_staged_locality(pd);
+	if (preempt_count() & STAGE_MASK)
+		preempt_count_sub(STAGE_OFFSET);
+}
+
+static inline
+void set_current_irq_staged(struct irq_stage_data *pd)
+{
+	if (pd->stage == &inband_stage)
+		switch_inband(pd);
+	else
+		switch_oob(pd);
+}
+
+static inline struct irq_stage *__current_irq_stage(void)
+{
+	/*
+	 * We don't have to hard disable irqs while accessing the
+	 * per-CPU stage data here, because there is no way we could
+	 * switch stage and CPU at the same time.
+	 */
+	return __current_irq_staged()->stage;
+}
+
+#define current_irq_stage	__current_irq_stage()
+
+static inline bool oob_stage_present(void)
+{
+	return oob_stage.index != 0;
+}
+
+/**
+ * stage_irqs_pending() - Whether we have interrupts pending
+ * (i.e. logged) on the current CPU for the given stage. Hard IRQs
+ * must be disabled.
+ */
+static inline int stage_irqs_pending(struct irq_stage_data *pd)
+{
+	return pd->log.himap != 0;
+}
+
+void sync_current_irq_stage(void);
+
+void sync_irq_stage(struct irq_stage *top);
+
+void irq_post_stage(struct irq_stage *stage,
+		    unsigned int irq);
+
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+
+#define __check_stage_bit_access(__pd)			\
+	({						\
+		check_hard_irqs_disabled_in_smp();	\
+		(__pd)->cpu != raw_smp_processor_id();	\
+	})
+
+#define check_stage_bit_access(__op, __bit, __pd)			\
+	do {								\
+		if (__check_stage_bit_access(__pd))			\
+			trace_printk("REMOTE %s(%s) to %s/%d\n",	\
+			     __op, __bit,  __pd->stage->name, __pd->cpu); \
+	} while (0)
+
+#define set_stage_bit(__bit, __pd)					\
+	do {								\
+		__set_bit(__bit, &(__pd)->status);			\
+		check_stage_bit_access("set", # __bit, __pd);		\
+	} while (0)
+
+#define clear_stage_bit(__bit, __pd)					\
+	do {								\
+		__clear_bit(__bit, &(__pd)->status);			\
+		check_stage_bit_access("clear", # __bit, __pd);		\
+	} while (0)
+
+#define test_and_set_stage_bit(__bit, __pd)				\
+	({								\
+		int __ret;						\
+		__ret = __test_and_set_bit(__bit, &(__pd)->status);	\
+		check_stage_bit_access("test_and_set", # __bit, __pd);	\
+		__ret;							\
+	})
+
+#define __test_stage_bit(__bit, __pd)					\
+	test_bit(__bit, &(__pd)->status)
+
+#define test_stage_bit(__bit, __pd)					\
+	({								\
+		int __ret;						\
+		__ret = __test_stage_bit(__bit,  __pd);			\
+		check_stage_bit_access("test", # __bit, __pd);		\
+		__ret;							\
+	})
+
+#else
+
+static inline
+void set_stage_bit(int bit, struct irq_stage_data *pd)
+{
+	__set_bit(bit, &pd->status);
+}
+
+static inline
+void clear_stage_bit(int bit, struct irq_stage_data *pd)
+{
+	__clear_bit(bit, &pd->status);
+}
+
+static inline
+int test_and_set_stage_bit(int bit, struct irq_stage_data *pd)
+{
+	return __test_and_set_bit(bit, &pd->status);
+}
+
+static inline
+int __test_stage_bit(int bit, struct irq_stage_data *pd)
+{
+	return test_bit(bit, &pd->status);
+}
+
+static inline
+int test_stage_bit(int bit, struct irq_stage_data *pd)
+{
+	return __test_stage_bit(bit, pd);
+}
+
+#endif /* !CONFIG_DEBUG_IRQ_PIPELINE */
+
+static inline void irq_post_oob(unsigned int irq)
+{
+	irq_post_stage(&oob_stage, irq);
+}
+
+static inline void irq_post_inband(unsigned int irq)
+{
+	irq_post_stage(&inband_stage, irq);
+}
+
+static inline void oob_irq_disable(void)
+{
+	hard_local_irq_disable();
+	set_stage_bit(STAGE_STALL_BIT, this_oob_staged());
+}
+
+static inline unsigned long oob_irq_save(void)
+{
+	hard_local_irq_disable();
+
+	return test_and_set_stage_bit(STAGE_STALL_BIT, this_oob_staged());
+}
+
+static inline unsigned long oob_irqs_disabled(void)
+{
+	unsigned long flags, ret;
+
+	/*
+	 * Here we __must__ guard against CPU migration because we may
+	 * be reading the oob stage data from the inband stage. In
+	 * such a case, the oob stage on the destination CPU might be
+	 * in a different (stalled) state than the oob stage is on the
+	 * source one.
+	 */
+	flags = hard_smp_local_irq_save();
+	ret = test_stage_bit(STAGE_STALL_BIT, this_oob_staged());
+	hard_smp_local_irq_restore(flags);
+
+	return ret;
+}
+
+void oob_irq_enable(void);
+
+void __oob_irq_restore(unsigned long x);
+
+static inline void oob_irq_restore(unsigned long x)
+{
+	if ((x ^ test_stage_bit(STAGE_STALL_BIT, this_oob_staged())) & 1)
+		__oob_irq_restore(x);
+}
+
+bool stage_disabled(void);
+
+unsigned long test_and_disable_stage(int *irqsoff);
+
+static inline unsigned long disable_stage(void)
+{
+	return test_and_disable_stage(NULL);
+}
+
+void restore_stage(unsigned long combo);
+
+#define stage_save_flags(__combo)					\
+	do {								\
+		(__combo) = irqs_merge_flags(hard_local_save_flags(),	\
+					     irqs_disabled());		\
+	} while (0)
+
+int enable_oob_stage(const char *name);
+
+int arch_enable_oob_stage(void);
+
+void disable_oob_stage(void);
+
+#else /* !CONFIG_IRQ_PIPELINE */
+
+static inline bool oob_stage_present(void)
+{
+	return false;
+}
+
+static inline bool stage_disabled(void)
+{
+	return irqs_disabled();
+}
+
+#define test_and_disable_stage(__irqsoff)			\
+	({							\
+		unsigned long __flags;				\
+		raw_local_irq_save(__flags);			\
+		*(__irqsoff) = irqs_disabled_flags(__flags);	\
+		__flags;					\
+	})
+
+#define disable_stage()				\
+	({					\
+		unsigned long __flags;		\
+		raw_local_irq_save(__flags);	\
+		__flags;			\
+	})
+
+#define restore_stage(__flags)	raw_local_irq_restore(__flags)
+
+#define stage_save_flags(__flags)	raw_local_save_flags(__flags)
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
+#endif	/* !_LINUX_IRQSTAGE_H */
diff --git a/include/linux/kernel.h b/include/linux/kernel.h
index d83d403dac2e..449b9101d64d 100644
--- a/include/linux/kernel.h
+++ b/include/linux/kernel.h
@@ -14,6 +14,7 @@
 #include <linux/typecheck.h>
 #include <linux/printk.h>
 #include <linux/build_bug.h>
+#include <asm-generic/irq_pipeline.h>
 #include <asm/byteorder.h>
 #include <asm/div64.h>
 #include <uapi/linux/kernel.h>
@@ -203,9 +204,12 @@ struct user;
 
 #ifdef CONFIG_PREEMPT_VOLUNTARY
 extern int _cond_resched(void);
-# define might_resched() _cond_resched()
+# define might_resched() do { \
+		check_inband_stage(); \
+		_cond_resched(); \
+	} while (0)
 #else
-# define might_resched() do { } while (0)
+# define might_resched() check_inband_stage()
 #endif
 
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
diff --git a/include/linux/kvm_host.h b/include/linux/kvm_host.h
index 719fc3e15ea4..fa62f984ea67 100644
--- a/include/linux/kvm_host.h
+++ b/include/linux/kvm_host.h
@@ -260,10 +260,22 @@ struct kvm_mmio_fragment {
 	unsigned len;
 };
 
+/*
+ * Called when the host is about to leave the inband stage. Typically
+ * used for switching the current vcpu out of guest mode before a
+ * co-kernel reinstates an oob task context.
+ */
+struct kvm_oob_notifier {
+	void (*handler)(struct kvm_oob_notifier *nfy);
+};
+
 struct kvm_vcpu {
 	struct kvm *kvm;
 #ifdef CONFIG_PREEMPT_NOTIFIERS
 	struct preempt_notifier preempt_notifier;
+#endif
+#ifdef CONFIG_DOVETAIL
+	struct kvm_oob_notifier oob_notifier;
 #endif
 	int cpu;
 	int vcpu_id;
diff --git a/include/linux/lockdep.h b/include/linux/lockdep.h
index b8a835fd611b..dd2f3a0d6222 100644
--- a/include/linux/lockdep.h
+++ b/include/linux/lockdep.h
@@ -309,21 +309,22 @@ extern void lockdep_init_map(struct lockdep_map *lock, const char *name,
  * or they are too narrow (they suffer from a false class-split):
  */
 #define lockdep_set_class(lock, key) \
-		lockdep_init_map(&(lock)->dep_map, #key, key, 0)
+	lockdep_init_map(LOCKDEP_ALT_DEPMAP(lock), #key, key, 0)
 #define lockdep_set_class_and_name(lock, key, name) \
-		lockdep_init_map(&(lock)->dep_map, name, key, 0)
+	lockdep_init_map(LOCKDEP_ALT_DEPMAP(lock), name, key, 0)
 #define lockdep_set_class_and_subclass(lock, key, sub) \
-		lockdep_init_map(&(lock)->dep_map, #key, key, sub)
+	lockdep_init_map(LOCKDEP_ALT_DEPMAP(lock), #key, key, sub)
 #define lockdep_set_subclass(lock, sub)	\
-		lockdep_init_map(&(lock)->dep_map, #lock, \
-				 (lock)->dep_map.key, sub)
+	lockdep_init_map(LOCKDEP_ALT_DEPMAP(lock), #lock,	\
+			 LOCKDEP_ALT_DEPMAP(lock)->key, sub)
 
 #define lockdep_set_novalidate_class(lock) \
 	lockdep_set_class_and_name(lock, &__lockdep_no_validate__, #lock)
 /*
  * Compare locking classes
  */
-#define lockdep_match_class(lock, key) lockdep_match_key(&(lock)->dep_map, key)
+#define lockdep_match_class(lock, key) \
+	lockdep_match_key(LOCKDEP_ALT_DEPMAP(lock), key)
 
 static inline int lockdep_match_key(struct lockdep_map *lock,
 				    struct lock_class_key *key)
@@ -362,8 +363,8 @@ static inline int lock_is_held(const struct lockdep_map *lock)
 	return lock_is_held_type(lock, -1);
 }
 
-#define lockdep_is_held(lock)		lock_is_held(&(lock)->dep_map)
-#define lockdep_is_held_type(lock, r)	lock_is_held_type(&(lock)->dep_map, (r))
+#define lockdep_is_held(lock)		lock_is_held(LOCKDEP_ALT_DEPMAP(lock))
+#define lockdep_is_held_type(lock, r)	lock_is_held_type(LOCKDEP_ALT_DEPMAP(lock), (r))
 
 extern void lock_set_class(struct lockdep_map *lock, const char *name,
 			   struct lock_class_key *key, unsigned int subclass,
@@ -388,26 +389,27 @@ extern void lock_unpin_lock(struct lockdep_map *lock, struct pin_cookie);
 #define lockdep_depth(tsk)	(debug_locks ? (tsk)->lockdep_depth : 0)
 
 #define lockdep_assert_held(l)	do {				\
-		WARN_ON(debug_locks && !lockdep_is_held(l));	\
+		WARN_ON(debug_locks && !LOCKDEP_HARD_DEBUG_RET(l, 1, lockdep_is_held(l))); \
 	} while (0)
 
 #define lockdep_assert_held_write(l)	do {			\
-		WARN_ON(debug_locks && !lockdep_is_held_type(l, 0));	\
+		WARN_ON(debug_locks && !LOCKDEP_HARD_DEBUG_RET(l, 1, lockdep_is_held_type(l, 0))); \
 	} while (0)
 
 #define lockdep_assert_held_read(l)	do {				\
-		WARN_ON(debug_locks && !lockdep_is_held_type(l, 1));	\
+		WARN_ON(debug_locks && !LOCKDEP_HARD_DEBUG_RET(l, 1, lockdep_is_held_type(l, 1))); \
 	} while (0)
 
 #define lockdep_assert_held_once(l)	do {				\
-		WARN_ON_ONCE(debug_locks && !lockdep_is_held(l));	\
+		WARN_ON_ONCE(debug_locks && !LOCKDEP_HARD_DEBUG_RET(l, 1, lockdep_is_held(l))); \
 	} while (0)
 
 #define lockdep_recursing(tsk)	((tsk)->lockdep_recursion)
 
-#define lockdep_pin_lock(l)	lock_pin_lock(&(l)->dep_map)
-#define lockdep_repin_lock(l,c)	lock_repin_lock(&(l)->dep_map, (c))
-#define lockdep_unpin_lock(l,c)	lock_unpin_lock(&(l)->dep_map, (c))
+#define lockdep_pin_lock(l)	LOCKDEP_HARD_DEBUG_RET(l, ({ struct pin_cookie cookie; cookie;} ), \
+							lock_pin_lock(LOCKDEP_ALT_DEPMAP(l)))
+#define lockdep_repin_lock(l,c)	LOCKDEP_HARD_DEBUG(l,, lock_repin_lock(LOCKDEP_ALT_DEPMAP(l), (c)))
+#define lockdep_unpin_lock(l,c)	LOCKDEP_HARD_DEBUG(l,, lock_unpin_lock(LOCKDEP_ALT_DEPMAP(l), (c)))
 
 #else /* !CONFIG_LOCKDEP */
 
diff --git a/include/linux/mm.h b/include/linux/mm.h
index a2adf95b3f9c..61decade042c 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -19,6 +19,7 @@
 #include <linux/pfn.h>
 #include <linux/percpu-refcount.h>
 #include <linux/bit_spinlock.h>
+#include <linux/dovetail.h>
 #include <linux/shrinker.h>
 #include <linux/resource.h>
 #include <linux/page_ext.h>
@@ -2873,5 +2874,16 @@ static inline int pages_identical(struct page *page1, struct page *page2)
 	return !memcmp_pages(page1, page2);
 }
 
+#ifdef CONFIG_DOVETAIL
+int commit_vma(struct mm_struct *mm, struct vm_area_struct *vma);
+int force_commit_memory(void);
+#else
+static inline
+int commit_vma(struct mm_struct *mm, struct vm_area_struct *vma)
+{
+	return 0;
+}
+#endif
+
 #endif /* __KERNEL__ */
 #endif /* _LINUX_MM_H */
diff --git a/include/linux/mm_types.h b/include/linux/mm_types.h
index 270aa8fd2800..fe15c1fabcfe 100644
--- a/include/linux/mm_types.h
+++ b/include/linux/mm_types.h
@@ -14,6 +14,7 @@
 #include <linux/uprobes.h>
 #include <linux/page-flags-layout.h>
 #include <linux/workqueue.h>
+#include <dovetail/mm_info.h>
 
 #include <asm/mmu.h>
 
@@ -522,6 +523,9 @@ struct mm_struct {
 		struct uprobes_state uprobes_state;
 #ifdef CONFIG_HUGETLB_PAGE
 		atomic_long_t hugetlb_usage;
+#endif
+#ifdef CONFIG_DOVETAIL
+		struct oob_mm_state oob_state;
 #endif
 		struct work_struct async_put_work;
 	} __randomize_layout;
diff --git a/include/linux/poll.h b/include/linux/poll.h
index 1cdc32b1f1b0..09fd27887fd5 100644
--- a/include/linux/poll.h
+++ b/include/linux/poll.h
@@ -110,6 +110,13 @@ struct poll_wqueues {
 	struct poll_table_entry inline_entries[N_INLINE_POLL_ENTRIES];
 };
 
+/*
+ * Generic poll operation descriptor for f_op->oob_poll.
+ */
+struct oob_poll_wait {
+	struct list_head next;
+};
+
 extern void poll_initwait(struct poll_wqueues *pwq);
 extern void poll_freewait(struct poll_wqueues *pwq);
 extern u64 select_estimate_accuracy(struct timespec64 *tv);
diff --git a/include/linux/preempt.h b/include/linux/preempt.h
index bbb68dba37cc..febc7f6fd9f8 100644
--- a/include/linux/preempt.h
+++ b/include/linux/preempt.h
@@ -27,17 +27,23 @@
  *         SOFTIRQ_MASK:	0x0000ff00
  *         HARDIRQ_MASK:	0x000f0000
  *             NMI_MASK:	0x00100000
+ *         PIPELINE_MASK:	0x00200000
+ *         STAGE_MASK:		0x00400000
  * PREEMPT_NEED_RESCHED:	0x80000000
  */
 #define PREEMPT_BITS	8
 #define SOFTIRQ_BITS	8
 #define HARDIRQ_BITS	4
 #define NMI_BITS	1
+#define PIPELINE_BITS	1
+#define STAGE_BITS	1
 
 #define PREEMPT_SHIFT	0
 #define SOFTIRQ_SHIFT	(PREEMPT_SHIFT + PREEMPT_BITS)
 #define HARDIRQ_SHIFT	(SOFTIRQ_SHIFT + SOFTIRQ_BITS)
 #define NMI_SHIFT	(HARDIRQ_SHIFT + HARDIRQ_BITS)
+#define PIPELINE_SHIFT	(NMI_SHIFT + NMI_BITS)
+#define STAGE_SHIFT	(PIPELINE_SHIFT + PIPELINE_BITS)
 
 #define __IRQ_MASK(x)	((1UL << (x))-1)
 
@@ -45,11 +51,15 @@
 #define SOFTIRQ_MASK	(__IRQ_MASK(SOFTIRQ_BITS) << SOFTIRQ_SHIFT)
 #define HARDIRQ_MASK	(__IRQ_MASK(HARDIRQ_BITS) << HARDIRQ_SHIFT)
 #define NMI_MASK	(__IRQ_MASK(NMI_BITS)     << NMI_SHIFT)
+#define PIPELINE_MASK	(__IRQ_MASK(PIPELINE_BITS) << PIPELINE_SHIFT)
+#define STAGE_MASK	(__IRQ_MASK(STAGE_BITS) << STAGE_SHIFT)
 
 #define PREEMPT_OFFSET	(1UL << PREEMPT_SHIFT)
 #define SOFTIRQ_OFFSET	(1UL << SOFTIRQ_SHIFT)
 #define HARDIRQ_OFFSET	(1UL << HARDIRQ_SHIFT)
 #define NMI_OFFSET	(1UL << NMI_SHIFT)
+#define PIPELINE_OFFSET	(1UL << PIPELINE_SHIFT)
+#define STAGE_OFFSET	(1UL << STAGE_SHIFT)
 
 #define SOFTIRQ_DISABLE_OFFSET	(2 * SOFTIRQ_OFFSET)
 
@@ -82,6 +92,9 @@
 #define irq_count()	(preempt_count() & (HARDIRQ_MASK | SOFTIRQ_MASK \
 				 | NMI_MASK))
 
+/* The current IRQ stage level: 0=inband, 1=oob */
+#define stage_level()	((preempt_count() & STAGE_MASK) >> STAGE_SHIFT)
+
 /*
  * Are we doing bottom half or hardware interrupt processing?
  *
@@ -91,6 +104,7 @@
  * in_serving_softirq() - We're in softirq context
  * in_nmi()       - We're in NMI context
  * in_task()	  - We're in task context
+ * in_pipeline()  - We're on pipeline entry
  *
  * Note: due to the BH disabled confusion: in_softirq(),in_interrupt() really
  *       should not be used in new code.
@@ -102,6 +116,7 @@
 #define in_nmi()		(preempt_count() & NMI_MASK)
 #define in_task()		(!(preempt_count() & \
 				   (NMI_MASK | HARDIRQ_MASK | SOFTIRQ_OFFSET)))
+#define in_pipeline()		(preempt_count() & PIPELINE_MASK)
 
 /*
  * The preempt_count offset after preempt_disable();
@@ -180,7 +195,8 @@ do { \
 
 #define preempt_enable_no_resched() sched_preempt_enable_no_resched()
 
-#define preemptible()	(preempt_count() == 0 && !irqs_disabled())
+#define preemptible()	(preempt_count() == 0 && \
+			 !hard_irqs_disabled() && !irqs_disabled())
 
 #ifdef CONFIG_PREEMPTION
 #define preempt_enable() \
@@ -322,4 +338,43 @@ static inline void preempt_notifier_init(struct preempt_notifier *notifier,
 
 #endif
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+static inline bool running_inband(void)
+{
+	return stage_level() == 0;
+}
+
+static inline bool running_oob(void)
+{
+	return !running_inband();
+}
+
+unsigned long hard_preempt_disable(void);
+void hard_preempt_enable(unsigned long flags);
+
+#else
+
+static inline bool running_inband(void)
+{
+	return true;
+}
+
+static inline bool running_oob(void)
+{
+	return false;
+}
+
+#define hard_preempt_disable()		\
+({					\
+	preempt_disable();		\
+	0;				\
+})
+#define hard_preempt_enable(__flags)	\
+	do {				\
+		preempt_enable();	\
+		(void)(__flags);	\
+	} while (0)
+#endif
+
 #endif /* __LINUX_PREEMPT_H */
diff --git a/include/linux/printk.h b/include/linux/printk.h
index c09d67edda3a..686516af0d78 100644
--- a/include/linux/printk.h
+++ b/include/linux/printk.h
@@ -158,6 +158,20 @@ static inline void printk_nmi_direct_enter(void) { }
 static inline void printk_nmi_direct_exit(void) { }
 #endif /* PRINTK_NMI */
 
+#ifdef CONFIG_RAW_PRINTK
+void raw_puts(const char *s, size_t len);
+void raw_vprintk(const char *fmt, va_list ap);
+asmlinkage __printf(1, 2)
+void raw_printk(const char *fmt, ...);
+#else
+static inline __cold
+void raw_puts(const char *s, size_t len) { }
+static inline __cold
+void raw_vprintk(const char *s, va_list ap) { }
+static inline __printf(1, 2) __cold
+void raw_printk(const char *s, ...) { }
+#endif
+
 #ifdef CONFIG_PRINTK
 asmlinkage __printf(5, 0)
 int vprintk_emit(int facility, int level,
diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index 75a2eded7aa2..4b91f72f3630 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -240,7 +240,7 @@ static inline int rcu_read_lock_bh_held(void)
 
 static inline int rcu_read_lock_sched_held(void)
 {
-	return !preemptible();
+	return !running_inband() || !preemptible();
 }
 
 static inline int rcu_read_lock_any_held(void)
diff --git a/include/linux/regmap.h b/include/linux/regmap.h
index dfe493ac692d..3a35bf1a12e4 100644
--- a/include/linux/regmap.h
+++ b/include/linux/regmap.h
@@ -373,6 +373,7 @@ struct regmap_config {
 	int (*reg_write)(void *context, unsigned int reg, unsigned int val);
 
 	bool fast_io;
+	bool oob_io;
 
 	unsigned int max_register;
 	const struct regmap_access_table *wr_table;
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 67a1d86981a9..915c0a0895fe 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -23,6 +23,7 @@
 #include <linux/rcupdate.h>
 #include <linux/refcount.h>
 #include <linux/resource.h>
+#include <linux/irqstage.h>
 #include <linux/latencytop.h>
 #include <linux/sched/prio.h>
 #include <linux/sched/types.h>
@@ -117,6 +118,12 @@ struct task_group;
 					 (task->flags & PF_FROZEN) == 0 && \
 					 (task->state & TASK_NOLOAD) == 0)
 
+#ifdef CONFIG_DOVETAIL
+#define task_is_off_stage(task)		test_ti_local_flags(task_thread_info(task), _TLF_OFFSTAGE)
+#else
+#define task_is_off_stage(task)		0
+#endif
+
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
 
 /*
diff --git a/include/linux/sched/coredump.h b/include/linux/sched/coredump.h
index ecdc6542070f..cefa20991d06 100644
--- a/include/linux/sched/coredump.h
+++ b/include/linux/sched/coredump.h
@@ -73,6 +73,7 @@ static inline int get_dumpable(struct mm_struct *mm)
 #define MMF_OOM_VICTIM		25	/* mm is the oom victim */
 #define MMF_OOM_REAP_QUEUED	26	/* mm was queued for oom_reaper */
 #define MMF_DISABLE_THP_MASK	(1 << MMF_DISABLE_THP)
+#define MMF_VM_PINNED		31	/* disable ondemand memory */
 
 #define MMF_INIT_MASK		(MMF_DUMPABLE_MASK | MMF_DUMP_FILTER_MASK |\
 				 MMF_DISABLE_THP_MASK)
diff --git a/include/linux/smp.h b/include/linux/smp.h
index 6fc856c9eda5..fb5ce68614d6 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -222,6 +222,21 @@ static inline int get_boot_cpu_id(void)
 #define get_cpu()		({ preempt_disable(); __smp_processor_id(); })
 #define put_cpu()		preempt_enable()
 
+#ifdef CONFIG_IRQ_PIPELINE
+#define hard_get_cpu(flags)	({			\
+		(flags) = hard_preempt_disable();	\
+		raw_smp_processor_id();			\
+	})
+#define hard_put_cpu(flags)	hard_preempt_enable(flags)
+#else
+#define hard_get_cpu(flags)	({ (void)(flags); get_cpu(); })
+#define hard_put_cpu(flags)	\
+	do {			\
+		(void)(flags);	\
+		put_cpu();	\
+	} while (0)
+#endif
+
 /*
  * Callback to arch code if there's nosmp or maxcpus=0 on the
  * boot command line:
diff --git a/include/linux/spinlock.h b/include/linux/spinlock.h
index 031ce8617df8..459f21773192 100644
--- a/include/linux/spinlock.h
+++ b/include/linux/spinlock.h
@@ -95,21 +95,27 @@
   extern void __raw_spin_lock_init(raw_spinlock_t *lock, const char *name,
 				   struct lock_class_key *key);
 # define raw_spin_lock_init(lock)				\
+	LOCK_ALTERNATIVES(lock,	spin_lock_init,			\
 do {								\
 	static struct lock_class_key __key;			\
 								\
-	__raw_spin_lock_init((lock), #lock, &__key);		\
-} while (0)
+	__raw_spin_lock_init(__RAWLOCK(lock), #lock, &__key);	\
+} while (0))
 
 #else
 # define raw_spin_lock_init(lock)				\
-	do { *(lock) = __RAW_SPIN_LOCK_UNLOCKED(lock); } while (0)
+	LOCK_ALTERNATIVES(lock,	spin_lock_init,			\
+	do { *(__RAWLOCK(lock)) = __RAW_SPIN_LOCK_UNLOCKED(__RAWLOCK(lock)); } while (0))
 #endif
 
-#define raw_spin_is_locked(lock)	arch_spin_is_locked(&(lock)->raw_lock)
+#define raw_spin_is_locked(lock)		\
+	LOCK_ALTERNATIVES_RET(lock, spin_is_locked,	\
+	      arch_spin_is_locked(&(__RAWLOCK(lock))->raw_lock))
 
 #ifdef arch_spin_is_contended
-#define raw_spin_is_contended(lock)	arch_spin_is_contended(&(lock)->raw_lock)
+#define raw_spin_is_contended(lock)			\
+	LOCK_ALTERNATIVES_RET(lock, spin_is_contended,	\
+	      arch_spin_is_contended(&(__RAWLOCK(lock))->raw_lock))
 #else
 #define raw_spin_is_contended(lock)	(((void)(lock), 0))
 #endif /*arch_spin_is_contended*/
@@ -218,13 +224,19 @@ static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
  * various methods are defined as nops in the case they are not
  * required.
  */
-#define raw_spin_trylock(lock)	__cond_lock(lock, _raw_spin_trylock(lock))
+#define raw_spin_trylock(lock)			\
+	__cond_lock(lock,			\
+		    LOCK_ALTERNATIVES_RET(lock,	\
+		    spin_trylock, _raw_spin_trylock(__RAWLOCK(lock))))
 
-#define raw_spin_lock(lock)	_raw_spin_lock(lock)
+#define raw_spin_lock(lock)	\
+	LOCK_ALTERNATIVES(lock, spin_lock, _raw_spin_lock(__RAWLOCK(lock)))
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
+
 # define raw_spin_lock_nested(lock, subclass) \
-	_raw_spin_lock_nested(lock, subclass)
+	LOCK_ALTERNATIVES(lock, spin_lock_nested, \
+		_raw_spin_lock_nested(__RAWLOCK(lock), subclass), subclass)
 
 # define raw_spin_lock_nest_lock(lock, nest_lock)			\
 	 do {								\
@@ -237,18 +249,20 @@ static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
  * warns about set-but-not-used variables when building with
  * CONFIG_DEBUG_LOCK_ALLOC=n and with W=1.
  */
-# define raw_spin_lock_nested(lock, subclass)		\
-	_raw_spin_lock(((void)(subclass), (lock)))
+# define raw_spin_lock_nested(lock, subclass)	\
+	LOCK_ALTERNATIVES(lock, spin_lock_nested, \
+		_raw_spin_lock(((void)(subclass), __RAWLOCK(lock))), subclass)
 # define raw_spin_lock_nest_lock(lock, nest_lock)	_raw_spin_lock(lock)
 #endif
 
 #if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK)
 
-#define raw_spin_lock_irqsave(lock, flags)			\
-	do {						\
-		typecheck(unsigned long, flags);	\
-		flags = _raw_spin_lock_irqsave(lock);	\
-	} while (0)
+#define raw_spin_lock_irqsave(lock, flags)				\
+	LOCK_ALTERNATIVES(lock, spin_lock_irqsave,			\
+	do {								\
+		typecheck(unsigned long, flags);			\
+		flags = _raw_spin_lock_irqsave(__RAWLOCK(lock));	\
+	} while (0), flags)
 
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 #define raw_spin_lock_irqsave_nested(lock, flags, subclass)		\
@@ -266,45 +280,55 @@ static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
 
 #else
 
-#define raw_spin_lock_irqsave(lock, flags)		\
-	do {						\
-		typecheck(unsigned long, flags);	\
-		_raw_spin_lock_irqsave(lock, flags);	\
-	} while (0)
+#define raw_spin_lock_irqsave(lock, flags)			\
+	LOCK_ALTERNATIVES(lock, spin_lock_irqsave,		\
+	do {							\
+		typecheck(unsigned long, flags);		\
+		_raw_spin_lock_irqsave(__RAWLOCK(lock), flags);	\
+	} while (0), flags)
 
 #define raw_spin_lock_irqsave_nested(lock, flags, subclass)	\
 	raw_spin_lock_irqsave(lock, flags)
 
 #endif
 
-#define raw_spin_lock_irq(lock)		_raw_spin_lock_irq(lock)
+#define raw_spin_lock_irq(lock)		       \
+	LOCK_ALTERNATIVES(lock, spin_lock_irq, \
+			  _raw_spin_lock_irq(__RAWLOCK(lock)))
 #define raw_spin_lock_bh(lock)		_raw_spin_lock_bh(lock)
-#define raw_spin_unlock(lock)		_raw_spin_unlock(lock)
-#define raw_spin_unlock_irq(lock)	_raw_spin_unlock_irq(lock)
-
-#define raw_spin_unlock_irqrestore(lock, flags)		\
-	do {							\
-		typecheck(unsigned long, flags);		\
-		_raw_spin_unlock_irqrestore(lock, flags);	\
-	} while (0)
+#define raw_spin_unlock(lock)		     \
+	LOCK_ALTERNATIVES(lock, spin_unlock, \
+			  _raw_spin_unlock(__RAWLOCK(lock)))
+#define raw_spin_unlock_irq(lock)	\
+	LOCK_ALTERNATIVES(lock, spin_unlock_irq, \
+			  _raw_spin_unlock_irq(__RAWLOCK(lock)))
+
+#define raw_spin_unlock_irqrestore(lock, flags)				\
+	LOCK_ALTERNATIVES(lock, spin_unlock_irqrestore,			\
+	do {								\
+		typecheck(unsigned long, flags);			\
+		_raw_spin_unlock_irqrestore(__RAWLOCK(lock), flags);	\
+	} while (0), flags)
 #define raw_spin_unlock_bh(lock)	_raw_spin_unlock_bh(lock)
 
 #define raw_spin_trylock_bh(lock) \
 	__cond_lock(lock, _raw_spin_trylock_bh(lock))
 
 #define raw_spin_trylock_irq(lock) \
+	LOCK_ALTERNATIVES_RET(lock, spin_trylock_irq, \
 ({ \
 	local_irq_disable(); \
-	raw_spin_trylock(lock) ? \
+	raw_spin_trylock(__RAWLOCK(lock)) ?	\
 	1 : ({ local_irq_enable(); 0;  }); \
-})
+}))
 
 #define raw_spin_trylock_irqsave(lock, flags) \
+	LOCK_ALTERNATIVES_RET(lock, spin_trylock_irqsave, \
 ({ \
 	local_irq_save(flags); \
-	raw_spin_trylock(lock) ? \
+	raw_spin_trylock(__RAWLOCK(lock)) ?	\
 	1 : ({ local_irq_restore(flags); 0; }); \
-})
+}), flags)
 
 /* Include rwlock functions */
 #include <linux/rwlock.h>
@@ -318,6 +342,11 @@ static inline void do_raw_spin_unlock(raw_spinlock_t *lock) __releases(lock)
 # include <linux/spinlock_api_up.h>
 #endif
 
+/* Pull the lock types specific to the IRQ pipeline. */
+#ifdef CONFIG_IRQ_PIPELINE
+#include <linux/spinlock_pipeline.h>
+#endif
+
 /*
  * Map the spin_lock functions to the raw variants for PREEMPT_RT=n
  */
diff --git a/include/linux/spinlock_api_up.h b/include/linux/spinlock_api_up.h
index d0d188861ad6..6895779e81bd 100644
--- a/include/linux/spinlock_api_up.h
+++ b/include/linux/spinlock_api_up.h
@@ -30,21 +30,33 @@
 #define __LOCK(lock) \
   do { preempt_disable(); ___LOCK(lock); } while (0)
 
+#define __HARD_LOCK(lock) \
+  do { ___LOCK(lock); } while (0)
+
 #define __LOCK_BH(lock) \
   do { __local_bh_disable_ip(_THIS_IP_, SOFTIRQ_LOCK_OFFSET); ___LOCK(lock); } while (0)
 
 #define __LOCK_IRQ(lock) \
   do { local_irq_disable(); __LOCK(lock); } while (0)
 
+#define __HARD_LOCK_IRQ(lock) \
+  do { hard_local_irq_disable(); __HARD_LOCK(lock); } while (0)
+
 #define __LOCK_IRQSAVE(lock, flags) \
   do { local_irq_save(flags); __LOCK(lock); } while (0)
 
+#define __HARD_LOCK_IRQSAVE(lock, flags) \
+  do { flags = hard_local_irq_save(); __HARD_LOCK(lock); } while (0)
+
 #define ___UNLOCK(lock) \
   do { __release(lock); (void)(lock); } while (0)
 
 #define __UNLOCK(lock) \
   do { preempt_enable(); ___UNLOCK(lock); } while (0)
 
+#define __HARD_UNLOCK(lock) \
+  do { ___UNLOCK(lock); } while (0)
+
 #define __UNLOCK_BH(lock) \
   do { __local_bh_enable_ip(_THIS_IP_, SOFTIRQ_LOCK_OFFSET); \
        ___UNLOCK(lock); } while (0)
@@ -52,9 +64,15 @@
 #define __UNLOCK_IRQ(lock) \
   do { local_irq_enable(); __UNLOCK(lock); } while (0)
 
+#define __HARD_UNLOCK_IRQ(lock) \
+  do { hard_local_irq_enable(); __HARD_UNLOCK(lock); } while (0)
+
 #define __UNLOCK_IRQRESTORE(lock, flags) \
   do { local_irq_restore(flags); __UNLOCK(lock); } while (0)
 
+#define __HARD_UNLOCK_IRQRESTORE(lock, flags) \
+  do { hard_local_irq_restore(flags); __HARD_UNLOCK(lock); } while (0)
+
 #define _raw_spin_lock(lock)			__LOCK(lock)
 #define _raw_spin_lock_nested(lock, subclass)	__LOCK(lock)
 #define _raw_read_lock(lock)			__LOCK(lock)
diff --git a/include/linux/spinlock_pipeline.h b/include/linux/spinlock_pipeline.h
new file mode 100644
index 000000000000..cc17d0c74908
--- /dev/null
+++ b/include/linux/spinlock_pipeline.h
@@ -0,0 +1,355 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#ifndef __LINUX_SPINLOCK_PIPELINE_H
+#define __LINUX_SPINLOCK_PIPELINE_H
+
+#ifndef __LINUX_SPINLOCK_H
+# error "Please don't include this file directly. Use spinlock.h."
+#endif
+
+#define hard_spin_lock_irqsave(__rlock, __flags)		\
+	do {							\
+		(__flags) = __hard_spin_lock_irqsave(__rlock);	\
+	} while (0)
+
+#define hard_spin_trylock_irqsave(__rlock, __flags)			\
+	({								\
+		int __locked;						\
+		(__flags) = __hard_spin_trylock_irqsave(__rlock, &__locked); \
+		__locked;						\
+	})
+
+#define mutable_spin_lock_init(__rlock)	hard_spin_lock_init(__rlock)
+
+/*
+ * CAUTION: We don't want the hand-coded irq-enable of
+ * do_raw_spin_lock_flags(), hard locked sections assume that
+ * interrupts are not re-enabled during lock-acquire.
+ */
+#define hard_lock_acquire(__rlock, __try, __ip)				\
+	do {								\
+		if (irq_pipeline_debug_locking()) {			\
+			spin_acquire(&(__rlock)->dep_map, 0, __try, __ip); \
+			LOCK_CONTENDED(__rlock, do_raw_spin_trylock, do_raw_spin_lock); \
+		} else							\
+			do_raw_spin_lock(__rlock);			\
+	} while (0)
+
+#define hard_lock_acquire_nested(__rlock, __subclass, __ip)		\
+	do {								\
+		if (irq_pipeline_debug_locking()) {			\
+			spin_acquire(&(__rlock)->dep_map, __subclass, 0, __ip); \
+			LOCK_CONTENDED(__rlock, do_raw_spin_trylock, do_raw_spin_lock); \
+		} else							\
+			do_raw_spin_lock(__rlock);			\
+	} while (0)
+
+#define hard_trylock_acquire(__rlock, __try, __ip)			\
+	do {								\
+		if (irq_pipeline_debug_locking())			\
+			spin_acquire(&(__rlock)->dep_map, 0, __try, __ip); \
+	} while (0)
+
+#define hard_lock_release(__rlock, __ip)				\
+	do {								\
+		if (irq_pipeline_debug_locking())			\
+			spin_release(&(__rlock)->dep_map, 1, __ip);	\
+		do_raw_spin_unlock(__rlock);				\
+	} while (0)
+
+#if defined(CONFIG_SMP) || defined(CONFIG_DEBUG_SPINLOCK)
+
+#ifdef CONFIG_DEBUG_SPINLOCK
+#define hard_spin_lock_init(__lock)				\
+	do {							\
+		static struct lock_class_key __key;		\
+		__raw_spin_lock_init((raw_spinlock_t *)__lock, #__lock, &__key); \
+	} while (0)
+#else
+#define hard_spin_lock_init(__rlock)				\
+	do { *(__rlock) = __HARD_SPIN_LOCK_UNLOCKED(__rlock); } while (0)
+#endif
+
+/*
+ * XXX: no preempt_enable/disable when hard locking.
+ */
+
+static inline
+void hard_spin_lock(struct raw_spinlock *rlock)
+{
+	hard_lock_acquire(rlock, 0, _THIS_IP_);
+}
+
+#ifdef CONFIG_DEBUG_LOCK_ALLOC
+static inline
+void hard_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	hard_lock_acquire_nested(rlock, subclass, _THIS_IP_);
+}
+#else
+static inline
+void hard_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	hard_spin_lock(rlock);
+}
+#endif
+
+static inline
+void hard_spin_unlock(struct raw_spinlock *rlock)
+{
+	hard_lock_release(rlock, _THIS_IP_);
+}
+
+static inline
+void hard_spin_lock_irq(struct raw_spinlock *rlock)
+{
+	hard_local_irq_disable();
+	hard_lock_acquire(rlock, 0, _THIS_IP_);
+}
+
+static inline
+void hard_spin_unlock_irq(struct raw_spinlock *rlock)
+{
+	hard_lock_release(rlock, _THIS_IP_);
+	hard_local_irq_enable();
+}
+
+static inline
+void hard_spin_unlock_irqrestore(struct raw_spinlock *rlock,
+				 unsigned long flags)
+{
+	hard_lock_release(rlock, _THIS_IP_);
+	hard_local_irq_restore(flags);
+}
+
+static inline
+unsigned long __hard_spin_lock_irqsave(struct raw_spinlock *rlock)
+{
+	unsigned long flags = hard_local_irq_save();
+
+	hard_lock_acquire(rlock, 0, _THIS_IP_);
+
+	return flags;
+}
+
+static inline
+int hard_spin_trylock(struct raw_spinlock *rlock)
+{
+	if (do_raw_spin_trylock(rlock)) {
+		hard_trylock_acquire(rlock, 1, _THIS_IP_);
+		return 1;
+	}
+	return 0;
+}
+
+static inline
+unsigned long __hard_spin_trylock_irqsave(struct raw_spinlock *rlock,
+					  int *locked)
+{
+	unsigned long flags = hard_local_irq_save();
+	*locked = hard_spin_trylock(rlock);
+	return *locked ? flags : ({ hard_local_irq_restore(flags); flags; });
+}
+
+static inline
+int hard_spin_trylock_irq(struct raw_spinlock *rlock)
+{
+	hard_local_irq_disable();
+	return hard_spin_trylock(rlock) ? : ({ hard_local_irq_enable(); 0; });
+}
+
+static inline
+int hard_spin_is_locked(struct raw_spinlock *rlock)
+{
+	return arch_spin_is_locked(&rlock->raw_lock);
+}
+
+static inline
+int hard_spin_is_contended(struct raw_spinlock *rlock)
+{
+#ifdef CONFIG_GENERIC_LOCKBREAK
+	return rlock->break_lock;
+#elif defined(arch_spin_is_contended)
+	return arch_spin_is_contended(&rlock->raw_lock);
+#else
+	return 0;
+#endif
+}
+
+#else  /* !SMP && !DEBUG_SPINLOCK */
+
+#define hard_spin_lock_init(__rlock)	do { (void)(__rlock); } while (0)
+#define hard_spin_lock(__rlock)		__HARD_LOCK(__rlock)
+#define hard_spin_lock_nested(__rlock, __subclass)  \
+	do { __HARD_LOCK(__rlock); (void)(__subclass); } while (0)
+#define hard_spin_unlock(__rlock)	__HARD_UNLOCK(__rlock)
+#define hard_spin_lock_irq(__rlock)	__HARD_LOCK_IRQ(__rlock)
+#define hard_spin_unlock_irq(__rlock)	__HARD_UNLOCK_IRQ(__rlock)
+#define hard_spin_unlock_irqrestore(__rlock, __flags)	\
+	__HARD_UNLOCK_IRQRESTORE(__rlock, __flags)
+#define __hard_spin_lock_irqsave(__rlock)		\
+	({						\
+		unsigned long __flags;			\
+		__HARD_LOCK_IRQSAVE(__rlock, __flags);	\
+		__flags;				\
+	})
+#define __hard_spin_trylock_irqsave(__rlock, __locked)	\
+	({						\
+		unsigned long __flags;			\
+		__HARD_LOCK_IRQSAVE(__rlock, __flags);	\
+		*(__locked) = 1;			\
+		__flags;				\
+	})
+#define hard_spin_trylock(__rlock)	({ __HARD_LOCK(__rlock); 1; })
+#define hard_spin_trylock_irq(__rlock)	({ __HARD_LOCK_IRQ(__rlock); 1; })
+#define hard_spin_is_locked(__rlock)	((void)(__rlock), 0)
+#define hard_spin_is_contended(__rlock)	((void)(__rlock), 0)
+#endif	/* !SMP && !DEBUG_SPINLOCK */
+
+/*
+ * In the pipeline entry context, the regular preemption and root
+ * stall logic do not apply since we may actually have preempted any
+ * critical section of the kernel which is protected by regular
+ * locking (spin or stall), or we may even have preempted the head
+ * stage. Therefore, we just need to grab the raw spinlock underlying
+ * a mutable spinlock to exclude other CPUs.
+ *
+ * NOTE: When entering the pipeline, IRQs are already hard disabled.
+ */
+
+void __mutable_spin_lock(struct raw_spinlock *rlock);
+void __mutable_spin_lock_nested(struct raw_spinlock *rlock, int subclass);
+
+static inline void mutable_spin_lock(struct raw_spinlock *rlock)
+{
+	if (in_pipeline())
+		hard_lock_acquire(rlock, 0, _THIS_IP_);
+	else
+		__mutable_spin_lock(rlock);
+}
+
+#ifdef CONFIG_DEBUG_LOCK_ALLOC
+static inline
+void mutable_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	if (in_pipeline())
+		hard_lock_acquire_nested(rlock, subclass, _THIS_IP_);
+	else
+		__mutable_spin_lock_nested(rlock, subclass);
+}
+#else
+static inline
+void mutable_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	mutable_spin_lock(rlock);
+}
+#endif
+
+void __mutable_spin_unlock(struct raw_spinlock *rlock);
+
+static inline void mutable_spin_unlock(struct raw_spinlock *rlock)
+{
+	if (in_pipeline())
+		hard_lock_release(rlock, _THIS_IP_);
+	else
+		__mutable_spin_unlock(rlock);
+}
+
+void __mutable_spin_lock_irq(struct raw_spinlock *rlock);
+
+static inline void mutable_spin_lock_irq(struct raw_spinlock *rlock)
+{
+	if (in_pipeline())
+		hard_lock_acquire(rlock, 0, _THIS_IP_);
+	else
+		__mutable_spin_lock_irq(rlock);
+}
+
+void __mutable_spin_unlock_irq(struct raw_spinlock *rlock);
+
+static inline void mutable_spin_unlock_irq(struct raw_spinlock *rlock)
+{
+	if (in_pipeline())
+		hard_lock_release(rlock, _THIS_IP_);
+	else
+		__mutable_spin_unlock_irq(rlock);
+}
+
+unsigned long __mutable_spin_lock_irqsave(struct raw_spinlock *rlock);
+
+#define mutable_spin_lock_irqsave(__rlock, __flags)			\
+	do {								\
+		if (in_pipeline()) {					\
+			hard_lock_acquire(__rlock, 0, _THIS_IP_);	\
+			(__flags) = hard_local_save_flags();		\
+		} else							\
+			(__flags) = __mutable_spin_lock_irqsave(__rlock); \
+	} while (0)
+
+void __mutable_spin_unlock_irqrestore(struct raw_spinlock *rlock,
+				      unsigned long flags);
+
+static inline void mutable_spin_unlock_irqrestore(struct raw_spinlock *rlock,
+						  unsigned long flags)
+{
+
+	if (in_pipeline())
+		hard_lock_release(rlock, _THIS_IP_);
+	else
+		__mutable_spin_unlock_irqrestore(rlock, flags);
+}
+
+int __mutable_spin_trylock(struct raw_spinlock *rlock);
+
+static inline int mutable_spin_trylock(struct raw_spinlock *rlock)
+{
+	if (in_pipeline()) {
+		if (do_raw_spin_trylock(rlock)) {
+			hard_trylock_acquire(rlock, 1, _THIS_IP_);
+			return 1;
+		}
+		return 0;
+	}
+
+	return __mutable_spin_trylock(rlock);
+}
+
+int __mutable_spin_trylock_irqsave(struct raw_spinlock *rlock,
+				   unsigned long *flags);
+
+#define mutable_spin_trylock_irqsave(__rlock, __flags)			\
+	({								\
+		int __ret = 1;						\
+		if (in_pipeline()) {					\
+			if (do_raw_spin_trylock(__rlock)) {		\
+				hard_trylock_acquire(__rlock, 1, _THIS_IP_); \
+				(__flags) = hard_local_save_flags();	\
+			} else						\
+				__ret = 0;				\
+		} else							\
+			__ret = __mutable_spin_trylock_irqsave(__rlock, &(__flags)); \
+		__ret;							\
+	})
+
+static inline int mutable_spin_trylock_irq(struct raw_spinlock *rlock)
+{
+	unsigned long flags;
+	return mutable_spin_trylock_irqsave(rlock, flags);
+}
+
+static inline
+int mutable_spin_is_locked(struct raw_spinlock *rlock)
+{
+	return hard_spin_is_locked(rlock);
+}
+
+static inline
+int mutable_spin_is_contended(struct raw_spinlock *rlock)
+{
+	return hard_spin_is_contended(rlock);
+}
+
+#endif /* __LINUX_SPINLOCK_PIPELINE_H */
diff --git a/include/linux/spinlock_types.h b/include/linux/spinlock_types.h
index 24b4e6f2c1a2..50a9860b4cca 100644
--- a/include/linux/spinlock_types.h
+++ b/include/linux/spinlock_types.h
@@ -80,6 +80,142 @@ typedef struct spinlock {
 
 #define DEFINE_SPINLOCK(x)	spinlock_t x = __SPIN_LOCK_UNLOCKED(x)
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+void __bad_spinlock_type(void);
+
+#define __RAWLOCK(x) ((struct raw_spinlock *)(x))
+
+#define LOCK_ALTERNATIVES(__lock, __base_op, __raw_form, __args...)	\
+	do {								\
+		if (__builtin_types_compatible_p(typeof(__lock),	\
+						 raw_spinlock_t *))	\
+			__raw_form;					\
+		else if (__builtin_types_compatible_p(typeof(__lock),	\
+						 hard_spinlock_t *))	\
+			hard_ ## __base_op(__RAWLOCK(__lock), ##__args); \
+		else if (__builtin_types_compatible_p(typeof(__lock),	\
+						 mutable_spinlock_t *))	\
+			mutable_ ## __base_op(__RAWLOCK(__lock), ##__args); \
+		else							\
+			__bad_spinlock_type();				\
+	} while (0)
+
+#define LOCK_ALTERNATIVES_RET(__lock, __base_op, __raw_form, __args...) \
+	({								\
+		long __ret = 0;						\
+		if (__builtin_types_compatible_p(typeof(__lock),	\
+						 raw_spinlock_t *))	\
+			__ret = __raw_form;				\
+		else if (__builtin_types_compatible_p(typeof(__lock),	\
+						 hard_spinlock_t *))	\
+			__ret = hard_ ## __base_op(__RAWLOCK(__lock), ##__args); \
+		else if (__builtin_types_compatible_p(typeof(__lock),	\
+						 mutable_spinlock_t *))	\
+			__ret = mutable_ ## __base_op(__RAWLOCK(__lock), ##__args); \
+		else							\
+			__bad_spinlock_type();				\
+		__ret;							\
+	})
+
+#define LOCKDEP_ALT_DEPMAP(__lock)					\
+	({								\
+		struct lockdep_map *__ret;				\
+		if (__builtin_types_compatible_p(typeof(&(__lock)->dep_map), \
+						 struct phony_lockdep_map *)) \
+			__ret = &__RAWLOCK(__lock)->dep_map;		\
+		else							\
+			__ret = (struct lockdep_map *)(&(__lock)->dep_map); \
+		__ret;							\
+	})
+
+#define LOCKDEP_HARD_DEBUG(__lock, __nodebug, __debug)	\
+	do {						\
+		if (__builtin_types_compatible_p(typeof(__lock),	\
+						raw_spinlock_t *) ||	\
+			irq_pipeline_debug_locking()) {			\
+			__debug;			\
+		} else {				\
+			__nodebug;			\
+		}					\
+	} while (0)
+
+#define LOCKDEP_HARD_DEBUG_RET(__lock, __nodebug, __debug)	\
+	({						\
+		typeof(__nodebug) __ret;		\
+		if (__builtin_types_compatible_p(typeof(__lock),	\
+						raw_spinlock_t *) ||	\
+			irq_pipeline_debug_locking()) {			\
+			__ret = (__debug);		\
+		} else {				\
+			__ret = (__nodebug);		\
+		}					\
+		__ret;					\
+	})
+
+#define __HARD_SPIN_LOCK_UNLOCKED(__rlock)	\
+	__RAW_SPIN_LOCK_UNLOCKED(__rlock)
+
+#define __HARD_SPIN_LOCK_INITIALIZER(__lock)				\
+	{								\
+		.rlock = __HARD_SPIN_LOCK_UNLOCKED((__lock).rlock),	\
+	}
+
+#define DEFINE_HARD_SPINLOCK(x)	hard_spinlock_t x = {	\
+		.rlock = __HARD_SPIN_LOCK_UNLOCKED(x),	\
+	}
+
+struct phony_lockdep_map {
+	/* empty */
+};
+
+typedef struct hard_spinlock {
+	/* XXX: offset_of(struct hard_spinlock, rlock) == 0 */
+	struct raw_spinlock rlock;
+	struct phony_lockdep_map dep_map;
+} hard_spinlock_t;
+
+#define DEFINE_MUTABLE_SPINLOCK(x)	mutable_spinlock_t x = {	\
+		.rlock = __RAW_SPIN_LOCK_UNLOCKED(x),			\
+	}
+
+typedef struct mutable_spinlock {
+	/* XXX: offset_of(struct mutable_spinlock, rlock) == 0 */
+	struct raw_spinlock rlock;
+	unsigned long hwflags;
+	struct phony_lockdep_map dep_map;
+} mutable_spinlock_t;
+
+#else
+
+typedef raw_spinlock_t hard_spinlock_t;
+
+typedef raw_spinlock_t mutable_spinlock_t;
+
+#define LOCK_ALTERNATIVES(__lock, __base_op, __raw_form, __args...)	\
+	__raw_form
+
+#define LOCK_ALTERNATIVES_RET(__lock, __base_op, __raw_form, __args...) \
+	__raw_form
+
+#define LOCKDEP_ALT_DEPMAP(__lock)	(&(__lock)->dep_map)
+
+#define LOCKDEP_HARD_DEBUG(__lock, __nondebug, __debug)		do { __debug; } while (0)
+
+#define LOCKDEP_HARD_DEBUG_RET(__lock, __nondebug, __debug)	({ __debug; })
+
+#define DEFINE_HARD_SPINLOCK(x)		DEFINE_RAW_SPINLOCK(x)
+
+#define DEFINE_MUTABLE_SPINLOCK(x)	DEFINE_RAW_SPINLOCK(x)
+
+#define __RAWLOCK(x) (x)
+
+#define __HARD_SPIN_LOCK_UNLOCKED(__lock)	__RAW_SPIN_LOCK_UNLOCKED(__lock)
+
+#define __HARD_SPIN_LOCK_INITIALIZER(__lock)	__RAW_SPIN_LOCK_UNLOCKED(__lock)
+
+#endif	/* CONFIG_IRQ_PIPELINE */
+
 #include <linux/rwlock_types.h>
 
 #endif /* __LINUX_SPINLOCK_TYPES_H */
diff --git a/include/linux/stop_machine.h b/include/linux/stop_machine.h
index f9a0c6189852..132752acfa82 100644
--- a/include/linux/stop_machine.h
+++ b/include/linux/stop_machine.h
@@ -6,6 +6,7 @@
 #include <linux/cpumask.h>
 #include <linux/smp.h>
 #include <linux/list.h>
+#include <linux/interrupt.h>
 
 /*
  * stop_cpu[s]() is simplistic per-cpu maximum priority cpu
@@ -145,7 +146,9 @@ static inline int stop_machine_cpuslocked(cpu_stop_fn_t fn, void *data,
 	unsigned long flags;
 	int ret;
 	local_irq_save(flags);
+	hard_irq_disable();
 	ret = fn(data);
+	hard_irq_enable();
 	local_irq_restore(flags);
 	return ret;
 }
diff --git a/include/linux/thread_info.h b/include/linux/thread_info.h
index 659a4400517b..643623109640 100644
--- a/include/linux/thread_info.h
+++ b/include/linux/thread_info.h
@@ -155,6 +155,71 @@ check_copy_size(const void *addr, size_t bytes, bool is_source)
 static inline void arch_setup_new_exec(void) { }
 #endif
 
+#ifdef ti_local_flags
+/*
+ * If the arch defines a set of per-thread synchronous flags, provide
+ * generic accessors to them.
+ */
+static inline void set_ti_local_flags(struct thread_info *ti, unsigned int mask)
+{
+	ti_local_flags(ti) |= mask;
+}
+
+static inline void set_thread_local_flags(unsigned int mask)
+{
+	set_ti_local_flags(current_thread_info(), mask);
+}
+
+static inline
+int test_and_set_ti_local_flags(struct thread_info *ti, unsigned int mask)
+{
+	int old = ti_local_flags(ti) & mask;
+	ti_local_flags(ti) |= mask;
+	return old != 0;
+}
+
+static inline int test_and_set_thread_local_flags(unsigned int mask)
+{
+	return test_and_set_ti_local_flags(current_thread_info(), mask);
+}
+
+static inline
+void clear_ti_local_flags(struct thread_info *ti, unsigned int mask)
+{
+	ti_local_flags(ti) &= ~mask;
+}
+
+static inline
+int test_and_clear_ti_local_flags(struct thread_info *ti, unsigned int mask)
+{
+	int old = ti_local_flags(ti) & mask;
+	ti_local_flags(ti) &= ~mask;
+	return old != 0;
+}
+
+static inline int test_and_clear_thread_local_flags(unsigned int mask)
+{
+	return test_and_clear_ti_local_flags(current_thread_info(), mask);
+}
+
+static inline void clear_thread_local_flags(unsigned int mask)
+{
+	clear_ti_local_flags(current_thread_info(), mask);
+}
+
+static inline
+bool test_ti_local_flags(struct thread_info *ti, unsigned int mask)
+{
+	return (ti_local_flags(ti) & mask) != 0;
+}
+
+static inline bool test_thread_local_flags(unsigned int mask)
+{
+	return test_ti_local_flags(current_thread_info(), mask);
+}
+
+#endif	/* ti_local_flags */
+
 #endif	/* __KERNEL__ */
 
 #endif /* _LINUX_THREAD_INFO_H */
diff --git a/include/linux/tick.h b/include/linux/tick.h
index f92a10b5e112..9c2d03a153c1 100644
--- a/include/linux/tick.h
+++ b/include/linux/tick.h
@@ -20,6 +20,14 @@ extern void tick_suspend_local(void);
 extern void tick_resume_local(void);
 extern void tick_handover_do_timer(void);
 extern void tick_cleanup_dead_cpu(int cpu);
+
+#ifdef CONFIG_IRQ_PIPELINE
+int tick_install_proxy(void (*setup_proxy)(struct clock_proxy_device *dev),
+		const struct cpumask *cpumask);
+void tick_uninstall_proxy(const struct cpumask *cpumask);
+void tick_notify_proxy(void);
+#endif
+
 #else /* CONFIG_GENERIC_CLOCKEVENTS */
 static inline void tick_init(void) { }
 static inline void tick_suspend_local(void) { }
diff --git a/include/linux/timekeeping.h b/include/linux/timekeeping.h
index b27e2ffa96c1..31278a7c4833 100644
--- a/include/linux/timekeeping.h
+++ b/include/linux/timekeeping.h
@@ -69,6 +69,7 @@ extern ktime_t ktime_get_with_offset(enum tk_offsets offs);
 extern ktime_t ktime_get_coarse_with_offset(enum tk_offsets offs);
 extern ktime_t ktime_mono_to_any(ktime_t tmono, enum tk_offsets offs);
 extern ktime_t ktime_get_raw(void);
+extern ktime_t ktime_get_real_fast(void);
 extern u32 ktime_get_resolution_ns(void);
 
 /**
diff --git a/include/linux/tracepoint.h b/include/linux/tracepoint.h
index 1fb11daa5c53..fd43fa65f20a 100644
--- a/include/linux/tracepoint.h
+++ b/include/linux/tracepoint.h
@@ -210,7 +210,7 @@ static inline struct tracepoint *tracepoint_ptr_deref(tracepoint_ptr_t *p)
 			__DO_TRACE(&__tracepoint_##name,		\
 				TP_PROTO(data_proto),			\
 				TP_ARGS(data_args),			\
-				TP_CONDITION(cond), 1);			\
+				TP_CONDITION(cond), running_inband());	\
 	}
 #else
 #define __DECLARE_TRACE_RCU(name, proto, args, cond, data_proto, data_args)
diff --git a/include/linux/vmalloc.h b/include/linux/vmalloc.h
index 4e7809408073..1d96a633dcc1 100644
--- a/include/linux/vmalloc.h
+++ b/include/linux/vmalloc.h
@@ -234,5 +234,6 @@ pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms)
 
 int register_vmap_purge_notifier(struct notifier_block *nb);
 int unregister_vmap_purge_notifier(struct notifier_block *nb);
+void arch_advertise_page_mapping(unsigned long start, unsigned long end);
 
 #endif /* _LINUX_VMALLOC_H */
diff --git a/include/trace/events/evl.h b/include/trace/events/evl.h
new file mode 100644
index 000000000000..7d654ea8f374
--- /dev/null
+++ b/include/trace/events/evl.h
@@ -0,0 +1,893 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2014 Jan Kiszka <jan.kiszka@siemens.com>.
+ * Copyright (C) 2014, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#if !defined(_TRACE_EVL_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_EVL_H
+
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM evl
+
+#include <linux/mman.h>
+#include <linux/sched.h>
+#include <linux/math64.h>
+#include <linux/tracepoint.h>
+#include <linux/trace_seq.h>
+#include <evl/timer.h>
+
+struct evl_rq;
+struct evl_thread;
+struct evl_sched_attrs;
+struct evl_init_thread_attr;
+struct evl_wait_channel;
+struct evl_wait_queue;
+struct evl_mutex;
+struct evl_clock;
+
+DECLARE_EVENT_CLASS(thread_event,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread),
+
+	TP_STRUCT__entry(
+		__field(pid_t, pid)
+		__field(u32, state)
+		__field(u32, info)
+	),
+
+	TP_fast_assign(
+		__entry->state = thread->state;
+		__entry->info = thread->info;
+		__entry->pid = evl_get_inband_pid(thread);
+	),
+
+	TP_printk("pid=%d state=%#x info=%#x",
+		  __entry->pid, __entry->state, __entry->info)
+);
+
+DECLARE_EVENT_CLASS(curr_thread_event,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread),
+
+	TP_STRUCT__entry(
+		__field(struct evl_thread *, thread)
+		__field(u32, state)
+		__field(u32, info)
+	),
+
+	TP_fast_assign(
+		__entry->state = thread->state;
+		__entry->info = thread->info;
+	),
+
+	TP_printk("state=%#x info=%#x",
+		  __entry->state, __entry->info)
+);
+
+DECLARE_EVENT_CLASS(wq_event,
+	TP_PROTO(struct evl_wait_queue *wq),
+	TP_ARGS(wq),
+
+	TP_STRUCT__entry(
+		__field(struct evl_wait_queue *, wq)
+	),
+
+	TP_fast_assign(
+		__entry->wq = wq;
+	),
+
+	TP_printk("wq=%p", __entry->wq)
+);
+
+DECLARE_EVENT_CLASS(mutex_event,
+	TP_PROTO(struct evl_mutex *mutex),
+	TP_ARGS(mutex),
+
+	TP_STRUCT__entry(
+		__field(struct evl_mutex *, mutex)
+	),
+
+	TP_fast_assign(
+		__entry->mutex = mutex;
+	),
+
+	TP_printk("mutex=%p", __entry->mutex)
+);
+
+DECLARE_EVENT_CLASS(timer_event,
+	TP_PROTO(struct evl_timer *timer),
+	TP_ARGS(timer),
+
+	TP_STRUCT__entry(
+		__field(struct evl_timer *, timer)
+	),
+
+	TP_fast_assign(
+		__entry->timer = timer;
+	),
+
+	TP_printk("timer=%s", evl_get_timer_name(__entry->timer))
+);
+
+#define evl_print_syscall(__nr)			\
+	__print_symbolic(__nr,			\
+			 { 0, "oob_read"  },	\
+			 { 1, "oob_write" },	\
+			 { 2, "oob_ioctl" })
+
+DECLARE_EVENT_CLASS(syscall_entry,
+	TP_PROTO(unsigned int nr),
+	TP_ARGS(nr),
+
+	TP_STRUCT__entry(
+		__field(unsigned int, nr)
+	),
+
+	TP_fast_assign(
+		__entry->nr = nr;
+	),
+
+	TP_printk("syscall=%s", evl_print_syscall(__entry->nr))
+);
+
+DECLARE_EVENT_CLASS(syscall_exit,
+	TP_PROTO(long result),
+	TP_ARGS(result),
+
+	TP_STRUCT__entry(
+		__field(long, result)
+	),
+
+	TP_fast_assign(
+		__entry->result = result;
+	),
+
+	TP_printk("result=%ld", __entry->result)
+);
+
+#define evl_print_sched_policy(__policy)		\
+	__print_symbolic(__policy,			\
+			 {SCHED_NORMAL, "normal"},	\
+			 {SCHED_FIFO, "fifo"},		\
+			 {SCHED_RR, "rr"},		\
+			 {SCHED_QUOTA, "quota"},	\
+			 {SCHED_WEAK, "weak"})
+
+const char *evl_trace_sched_attrs(struct trace_seq *seq,
+				  struct evl_sched_attrs *attrs);
+
+DECLARE_EVENT_CLASS(evl_sched_attrs,
+	TP_PROTO(struct evl_thread *thread,
+		 const struct evl_sched_attrs *attrs),
+	TP_ARGS(thread, attrs),
+
+	TP_STRUCT__entry(
+		__field(struct evl_thread *, thread)
+		__field(int, policy)
+		__dynamic_array(char, attrs, sizeof(struct evl_sched_attrs))
+	),
+
+	TP_fast_assign(
+		__entry->thread = thread;
+		__entry->policy = attrs->sched_policy;
+		memcpy(__get_dynamic_array(attrs), attrs, sizeof(*attrs));
+	),
+
+	TP_printk("thread=%s policy=%s param={ %s }",
+		  evl_element_name(&__entry->thread->element),
+		  evl_print_sched_policy(__entry->policy),
+		  evl_trace_sched_attrs(p,
+					(struct evl_sched_attrs *)
+					__get_dynamic_array(attrs))
+	)
+);
+
+DECLARE_EVENT_CLASS(evl_clock_timespec,
+	TP_PROTO(struct evl_clock *clock, const struct timespec *val),
+	TP_ARGS(clock, val),
+
+	TP_STRUCT__entry(
+		__timespec_fields(val)
+		__string(name, clock->name)
+	),
+
+	TP_fast_assign(
+		__assign_timespec(val, val);
+		__assign_str(name, clock->name);
+	),
+
+	TP_printk("clock=%s timeval=(%ld.%09ld)",
+		  __get_str(name),
+		  __timespec_args(val)
+	)
+);
+
+DECLARE_EVENT_CLASS(evl_clock_ident,
+	TP_PROTO(const char *name),
+	TP_ARGS(name),
+	TP_STRUCT__entry(
+		__string(name, name)
+	),
+	TP_fast_assign(
+		__assign_str(name, name);
+	),
+	TP_printk("name=%s", __get_str(name))
+);
+
+DECLARE_EVENT_CLASS(evl_schedule_event,
+	TP_PROTO(struct evl_rq *rq),
+	TP_ARGS(rq),
+
+	TP_STRUCT__entry(
+		__field(unsigned long, flags)
+		__field(unsigned long, local_flags)
+	),
+
+	TP_fast_assign(
+		__entry->flags = rq->flags;
+		__entry->local_flags = rq->local_flags;
+	),
+
+	TP_printk("flags=%#lx, local_flags=%#lx",
+		  __entry->flags, __entry->local_flags)
+);
+
+DEFINE_EVENT(evl_schedule_event, evl_schedule,
+	TP_PROTO(struct evl_rq *rq),
+	TP_ARGS(rq)
+);
+
+DEFINE_EVENT(evl_schedule_event, evl_reschedule_ipi,
+	TP_PROTO(struct evl_rq *rq),
+	TP_ARGS(rq)
+);
+
+TRACE_EVENT(evl_switch_context,
+	TP_PROTO(struct evl_thread *prev, struct evl_thread *next),
+	TP_ARGS(prev, next),
+
+	TP_STRUCT__entry(
+		__string(prev_name, prev->name)
+		__string(next_name, next->name)
+		__field(pid_t, prev_pid)
+		__field(int, prev_prio)
+		__field(u32, prev_state)
+		__field(pid_t, next_pid)
+		__field(int, next_prio)
+	),
+
+	TP_fast_assign(
+		__entry->prev_pid = evl_get_inband_pid(prev);
+		__entry->prev_prio = prev->cprio;
+		__entry->prev_state = prev->state;
+		__entry->next_pid = evl_get_inband_pid(next);
+		__entry->next_prio = next->cprio;
+		__assign_str(prev_name, prev->name);
+		__assign_str(next_name, next->name);
+	),
+
+	TP_printk("{ %s[%d] prio=%d, state=%#x } => { %s[%d] prio=%d }",
+		  __get_str(prev_name), __entry->prev_pid,
+		  __entry->prev_prio, __entry->prev_state,
+		  __get_str(next_name), __entry->next_pid, __entry->next_prio)
+);
+
+TRACE_EVENT(evl_init_thread,
+	TP_PROTO(struct evl_thread *thread,
+		 const struct evl_init_thread_attr *iattr,
+		 int status),
+	TP_ARGS(thread, iattr, status),
+
+	TP_STRUCT__entry(
+		__field(struct evl_thread *, thread)
+		__string(thread_name, thread->name)
+		__string(class_name, iattr->sched_class->name)
+		__field(unsigned long, flags)
+		__field(int, cprio)
+		__field(int, status)
+	),
+
+	TP_fast_assign(
+		__entry->thread = thread;
+		__assign_str(thread_name, thread->name);
+		__entry->flags = iattr->flags;
+		__assign_str(class_name, iattr->sched_class->name);
+		__entry->cprio = thread->cprio;
+		__entry->status = status;
+	),
+
+	TP_printk("thread=%p name=%s flags=%#lx class=%s prio=%d status=%#x",
+		   __entry->thread, __get_str(thread_name), __entry->flags,
+		  __get_str(class_name), __entry->cprio, __entry->status)
+);
+
+TRACE_EVENT(evl_sleep_on,
+	TP_PROTO(ktime_t timeout,
+		 enum evl_tmode timeout_mode, struct evl_clock *clock,
+		 struct evl_wait_channel *wchan),
+	TP_ARGS(timeout, timeout_mode, clock, wchan),
+
+	TP_STRUCT__entry(
+		__field(pid_t, pid)
+		__field(ktime_t, timeout)
+		__field(enum evl_tmode, timeout_mode)
+		__field(struct evl_wait_channel *, wchan)
+		__string(clock_name, clock ? clock->name : "none")
+	),
+
+	TP_fast_assign(
+		__entry->pid = evl_get_inband_pid(evl_current());
+		__entry->timeout = timeout;
+		__entry->timeout_mode = timeout_mode;
+		__entry->wchan = wchan;
+		__assign_str(clock_name, clock ? clock->name : "none");
+	),
+
+	TP_printk("pid=%d timeout=%Lu timeout_mode=%d clock=%s wchan=%p",
+		  __entry->pid,
+		  ktime_to_ns(__entry->timeout), __entry->timeout_mode,
+		  __get_str(clock_name),
+		  __entry->wchan)
+);
+
+TRACE_EVENT(evl_wakeup_thread,
+	TP_PROTO(struct evl_thread *thread, int mask, int info),
+	TP_ARGS(thread, mask, info),
+
+	TP_STRUCT__entry(
+		__string(name, thread->name)
+		__field(pid_t, pid)
+		__field(int, mask)
+		__field(int, info)
+	),
+
+	TP_fast_assign(
+		__assign_str(name, thread->name);
+		__entry->pid = evl_get_inband_pid(thread);
+		__entry->mask = mask;
+		__entry->info = info;
+	),
+
+	TP_printk("name=%s pid=%d mask=%#x info=%#x",
+		__get_str(name), __entry->pid,
+		__entry->mask, __entry->info)
+);
+
+TRACE_EVENT(evl_hold_thread,
+	TP_PROTO(struct evl_thread *thread, unsigned long mask),
+	TP_ARGS(thread, mask),
+
+	TP_STRUCT__entry(
+		__string(name, thread->name)
+		__field(pid_t, pid)
+		__field(unsigned long, mask)
+	),
+
+	TP_fast_assign(
+		__assign_str(name, thread->name);
+		__entry->pid = evl_get_inband_pid(thread);
+		__entry->mask = mask;
+	),
+
+	TP_printk("name=%s pid=%d mask=%#lx",
+		  __get_str(name), __entry->pid, __entry->mask)
+);
+
+TRACE_EVENT(evl_release_thread,
+	TP_PROTO(struct evl_thread *thread, int mask, int info),
+	TP_ARGS(thread, mask, info),
+
+	TP_STRUCT__entry(
+		__string(name, thread->name)
+		__field(pid_t, pid)
+		__field(int, mask)
+		__field(int, info)
+	),
+
+	TP_fast_assign(
+		__assign_str(name, thread->name);
+		__entry->pid = evl_get_inband_pid(thread);
+		__entry->mask = mask;
+		__entry->info = info;
+	),
+
+	TP_printk("name=%s pid=%d mask=%#x info=%#x",
+		__get_str(name), __entry->pid,
+		__entry->mask, __entry->info)
+);
+
+TRACE_EVENT(evl_thread_fault,
+	TP_PROTO(int trapnr, struct pt_regs *regs),
+	TP_ARGS(trapnr, regs),
+
+	TP_STRUCT__entry(
+		__field(long,	ip)
+		__field(unsigned int, trapnr)
+	),
+
+	TP_fast_assign(
+		__entry->ip = instruction_pointer(regs);
+		__entry->trapnr = trapnr;
+	),
+
+	TP_printk("ip=%#lx trapnr=%#x",
+		  __entry->ip, __entry->trapnr)
+);
+
+TRACE_EVENT(evl_thread_set_current_prio,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread),
+
+	TP_STRUCT__entry(
+		__field(struct evl_thread *, thread)
+		__field(pid_t, pid)
+		__field(int, cprio)
+	),
+
+	TP_fast_assign(
+		__entry->thread = thread;
+		__entry->pid = evl_get_inband_pid(thread);
+		__entry->cprio = thread->cprio;
+	),
+
+	TP_printk("thread=%p pid=%d prio=%d",
+		  __entry->thread, __entry->pid, __entry->cprio)
+);
+
+DEFINE_EVENT(thread_event, evl_thread_cancel,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+DEFINE_EVENT(thread_event, evl_thread_join,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+DEFINE_EVENT(thread_event, evl_unblock_thread,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_thread_wait_period,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_thread_missed_period,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+TRACE_EVENT(evl_thread_migrate,
+	TP_PROTO(struct evl_thread *thread, unsigned int cpu),
+	TP_ARGS(thread, cpu),
+
+	TP_STRUCT__entry(
+		__field(struct evl_thread *, thread)
+		__field(pid_t, pid)
+		__field(unsigned int, cpu)
+	),
+
+	TP_fast_assign(
+		__entry->thread = thread;
+		__entry->pid = evl_get_inband_pid(thread);
+		__entry->cpu = cpu;
+	),
+
+	TP_printk("thread=%p pid=%d cpu=%u",
+		  __entry->thread, __entry->pid, __entry->cpu)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_watchdog_signal,
+	TP_PROTO(struct evl_thread *curr),
+	TP_ARGS(curr)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_switching_oob,
+	TP_PROTO(struct evl_thread *curr),
+	TP_ARGS(curr)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_switched_oob,
+	TP_PROTO(struct evl_thread *curr),
+	TP_ARGS(curr)
+);
+
+#define evl_print_switch_cause(cause)					\
+	__print_symbolic(cause,						\
+			 { SIGDEBUG_NONE,		"undefined" },	\
+			 { SIGDEBUG_MIGRATE_SIGNAL,	"signal" },	\
+			 { SIGDEBUG_MIGRATE_SYSCALL,	"syscall" },	\
+			 { SIGDEBUG_MIGRATE_FAULT,	"fault" })
+
+TRACE_EVENT(evl_switching_inband,
+	TP_PROTO(int cause),
+	TP_ARGS(cause),
+
+	TP_STRUCT__entry(
+		__field(int, cause)
+	),
+
+	TP_fast_assign(
+		__entry->cause = cause;
+	),
+
+	TP_printk("cause=%s", evl_print_switch_cause(__entry->cause))
+);
+
+DEFINE_EVENT(curr_thread_event, evl_switched_inband,
+	TP_PROTO(struct evl_thread *curr),
+	TP_ARGS(curr)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_kthread_entry,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+TRACE_EVENT(evl_thread_map,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread),
+
+	TP_STRUCT__entry(
+		__field(struct evl_thread *, thread)
+		__field(pid_t, pid)
+		__field(int, prio)
+	),
+
+	TP_fast_assign(
+		__entry->thread = thread;
+		__entry->pid = evl_get_inband_pid(thread);
+		__entry->prio = thread->bprio;
+	),
+
+	TP_printk("thread=%p pid=%d prio=%d",
+		  __entry->thread, __entry->pid, __entry->prio)
+);
+
+DEFINE_EVENT(curr_thread_event, evl_thread_unmap,
+	TP_PROTO(struct evl_thread *thread),
+	TP_ARGS(thread)
+);
+
+TRACE_EVENT(evl_inband_wakeup,
+	TP_PROTO(struct task_struct *task),
+	TP_ARGS(task),
+
+	TP_STRUCT__entry(
+		__field(pid_t, pid)
+		__array(char, comm, TASK_COMM_LEN)
+	),
+
+	TP_fast_assign(
+		__entry->pid = task_pid_nr(task);
+		memcpy(__entry->comm, task->comm, TASK_COMM_LEN);
+	),
+
+	TP_printk("pid=%d comm=%s",
+		  __entry->pid, __entry->comm)
+);
+
+TRACE_EVENT(evl_inband_signal,
+	TP_PROTO(struct task_struct *task, int sig),
+	TP_ARGS(task, sig),
+
+	TP_STRUCT__entry(
+		__field(pid_t, pid)
+		__array(char, comm, TASK_COMM_LEN)
+		__field(int, sig)
+	),
+
+	TP_fast_assign(
+		__entry->pid = task_pid_nr(task);
+		__entry->sig = sig;
+		memcpy(__entry->comm, task->comm, TASK_COMM_LEN);
+	),
+
+	TP_printk("pid=%d comm=%s sig=%d",
+		  __entry->pid, __entry->comm, __entry->sig)
+);
+
+DEFINE_EVENT(timer_event, evl_timer_stop,
+	TP_PROTO(struct evl_timer *timer),
+	TP_ARGS(timer)
+);
+
+DEFINE_EVENT(timer_event, evl_timer_expire,
+	TP_PROTO(struct evl_timer *timer),
+	TP_ARGS(timer)
+);
+
+#define evl_print_timer_mode(mode)		\
+	__print_symbolic(mode,			\
+			 { EVL_REL, "rel" },	\
+			 { EVL_ABS, "abs" })
+
+TRACE_EVENT(evl_timer_start,
+	TP_PROTO(struct evl_timer *timer, ktime_t value, ktime_t interval),
+	TP_ARGS(timer, value, interval),
+
+	TP_STRUCT__entry(
+		__field(struct evl_timer *, timer)
+		__field(ktime_t, value)
+		__field(ktime_t, interval)
+	),
+
+	TP_fast_assign(
+		__entry->timer = timer;
+		__entry->value = value;
+		__entry->interval = interval;
+	),
+
+	TP_printk("timer=%s value=%Lu interval=%Lu",
+		evl_get_timer_name(__entry->timer),
+		ktime_to_ns(__entry->value),
+		ktime_to_ns(__entry->interval))
+);
+
+TRACE_EVENT(evl_timer_move,
+	TP_PROTO(struct evl_timer *timer,
+		 struct evl_clock *clock,
+		 unsigned int cpu),
+	    TP_ARGS(timer, clock, cpu),
+
+	TP_STRUCT__entry(
+		__field(unsigned int, cpu)
+		__string(timer_name, timer->name)
+		__string(clock_name, clock->name)
+	),
+
+	TP_fast_assign(
+		__entry->cpu = cpu;
+		__assign_str(timer_name, timer->name);
+		__assign_str(clock_name, clock->name);
+	),
+
+	TP_printk("timer=%s clock=%s cpu=%u",
+		  __get_str(timer_name),
+		  __get_str(clock_name),
+		  __entry->cpu)
+);
+
+TRACE_EVENT(evl_timer_shot,
+	TP_PROTO(struct evl_timer *timer, s64 delta, u64 cycles),
+	TP_ARGS(timer, delta, cycles),
+
+	TP_STRUCT__entry(
+		__field(u64, secs)
+		__field(u32, nsecs)
+		__field(s64, delta)
+		__field(u64, cycles)
+		__string(name, timer->name)
+	),
+
+	TP_fast_assign(
+		__entry->cycles = cycles;
+		__entry->delta = delta;
+		__entry->secs = div_u64_rem(trace_clock_local() + delta,
+					    NSEC_PER_SEC, &__entry->nsecs);
+		__assign_str(name, timer->name);
+	),
+
+	TP_printk("%s at %Lu.%06u (delay: %Ld us, %Lu cycles)",
+		  __get_str(name),
+		  (unsigned long long)__entry->secs,
+		  __entry->nsecs / 1000, div_s64(__entry->delta, 1000),
+		  __entry->cycles)
+);
+
+DEFINE_EVENT(wq_event, evl_wait,
+	TP_PROTO(struct evl_wait_queue *wq),
+	TP_ARGS(wq)
+);
+
+DEFINE_EVENT(wq_event, evl_wake_up,
+	TP_PROTO(struct evl_wait_queue *wq),
+	TP_ARGS(wq)
+);
+
+DEFINE_EVENT(wq_event, evl_flush_wait,
+	TP_PROTO(struct evl_wait_queue *wq),
+	TP_ARGS(wq)
+);
+
+DEFINE_EVENT(mutex_event, evl_mutex_trylock,
+	TP_PROTO(struct evl_mutex *mutex),
+	TP_ARGS(mutex)
+);
+
+DEFINE_EVENT(mutex_event, evl_mutex_lock,
+	TP_PROTO(struct evl_mutex *mutex),
+	TP_ARGS(mutex)
+);
+
+DEFINE_EVENT(mutex_event, evl_mutex_unlock,
+	TP_PROTO(struct evl_mutex *mutex),
+	TP_ARGS(mutex)
+);
+
+DEFINE_EVENT(mutex_event, evl_mutex_destroy,
+	TP_PROTO(struct evl_mutex *mutex),
+	TP_ARGS(mutex)
+);
+
+DEFINE_EVENT(mutex_event, evl_mutex_flush,
+	TP_PROTO(struct evl_mutex *mutex),
+	TP_ARGS(mutex)
+);
+
+#define __timespec_fields(__name)				\
+	__field(__kernel_time_t, tv_sec_##__name)		\
+	__field(long, tv_nsec_##__name)
+
+#define __assign_timespec(__to, __from)				\
+	do {							\
+		__entry->tv_sec_##__to = (__from)->tv_sec;	\
+		__entry->tv_nsec_##__to = (__from)->tv_nsec;	\
+	} while (0)
+
+#define __timespec_args(__name)					\
+	__entry->tv_sec_##__name, __entry->tv_nsec_##__name
+
+DEFINE_EVENT(syscall_entry, evl_oob_sysentry,
+	TP_PROTO(unsigned int nr),
+	TP_ARGS(nr)
+);
+
+DEFINE_EVENT(syscall_exit, evl_oob_sysexit,
+	TP_PROTO(long result),
+	TP_ARGS(result)
+);
+
+DEFINE_EVENT(syscall_entry, evl_inband_sysentry,
+	TP_PROTO(unsigned int nr),
+	TP_ARGS(nr)
+);
+
+DEFINE_EVENT(syscall_exit, evl_inband_sysexit,
+	TP_PROTO(long result),
+	TP_ARGS(result)
+);
+
+DEFINE_EVENT(evl_sched_attrs, evl_thread_setsched,
+	TP_PROTO(struct evl_thread *thread,
+		 const struct evl_sched_attrs *attrs),
+	TP_ARGS(thread, attrs)
+);
+
+DEFINE_EVENT(evl_sched_attrs, evl_thread_getsched,
+	TP_PROTO(struct evl_thread *thread,
+		 const struct evl_sched_attrs *attrs),
+	TP_ARGS(thread, attrs)
+);
+
+#define evl_print_thread_mode(__mode)	\
+	__print_flags(__mode, "|",	\
+		{T_WOSS, "woss"},	\
+		{T_WOLI, "woli"})
+
+TRACE_EVENT(evl_thread_update_mode,
+	TP_PROTO(int mode, bool set),
+	TP_ARGS(mode, set),
+	TP_STRUCT__entry(
+		__field(int, mode)
+		__field(bool, set)
+	),
+	TP_fast_assign(
+		__entry->mode = mode;
+		__entry->set = set;
+	),
+	TP_printk("%s %#x(%s)",
+		  __entry->set ? "set" : "clear",
+		  __entry->mode, evl_print_thread_mode(__entry->mode))
+);
+
+DEFINE_EVENT(evl_clock_timespec, evl_clock_getres,
+	TP_PROTO(struct evl_clock *clock, const struct timespec *res),
+	TP_ARGS(clock, res)
+);
+
+DEFINE_EVENT(evl_clock_timespec, evl_clock_gettime,
+	TP_PROTO(struct evl_clock *clock, const struct timespec *time),
+	TP_ARGS(clock, time)
+);
+
+DEFINE_EVENT(evl_clock_timespec, evl_clock_settime,
+	TP_PROTO(struct evl_clock *clock, const struct timespec *time),
+	TP_ARGS(clock, time)
+);
+
+TRACE_EVENT(evl_clock_adjtime,
+	TP_PROTO(struct evl_clock *clock, struct timex *tx),
+	TP_ARGS(clock, tx),
+
+	TP_STRUCT__entry(
+		__field(struct timex *, tx)
+		__string(name, clock->name)
+	),
+
+	TP_fast_assign(
+		__entry->tx = tx;
+		__assign_str(name, clock->name);
+	),
+
+	TP_printk("clock=%s timex=%p",
+		  __get_str(name),
+		  __entry->tx
+	)
+);
+
+#define evl_print_timer_flags(__flags)			\
+	__print_flags(__flags, "|",			\
+		      {TIMER_ABSTIME, "TIMER_ABSTIME"})
+
+DEFINE_EVENT(evl_clock_ident, evl_register_clock,
+	TP_PROTO(const char *name),
+	TP_ARGS(name)
+);
+
+DEFINE_EVENT(evl_clock_ident, evl_unregister_clock,
+	TP_PROTO(const char *name),
+	TP_ARGS(name)
+);
+
+TRACE_EVENT(evl_trace,
+	TP_PROTO(const char *msg),
+	TP_ARGS(msg),
+	TP_STRUCT__entry(
+		__string(msg, msg)
+	),
+	TP_fast_assign(
+		__assign_str(msg, msg);
+	),
+	TP_printk("%s", __get_str(msg))
+);
+
+TRACE_EVENT(evl_latspot,
+	TP_PROTO(int latmax_ns),
+	TP_ARGS(latmax_ns),
+	TP_STRUCT__entry(
+		 __field(int, latmax_ns)
+	),
+	TP_fast_assign(
+		__entry->latmax_ns = latmax_ns;
+	),
+	TP_printk("** latency peak: %d.%.3d us **",
+		  __entry->latmax_ns / 1000,
+		  __entry->latmax_ns % 1000)
+);
+
+TRACE_EVENT(evl_fpu_corrupt,
+	TP_PROTO(unsigned int fp_val),
+	TP_ARGS(fp_val),
+	TP_STRUCT__entry(
+		 __field(unsigned int, fp_val)
+	),
+	TP_fast_assign(
+		__entry->fp_val = fp_val;
+	),
+	TP_printk("** bad FPU context: fp_val = %u **",
+		__entry->fp_val)
+);
+
+/* Basically evl_trace() + trigger point */
+TRACE_EVENT(evl_trigger,
+	TP_PROTO(const char *issuer),
+	TP_ARGS(issuer),
+	TP_STRUCT__entry(
+		__string(issuer, issuer)
+	),
+	TP_fast_assign(
+		__assign_str(issuer, issuer);
+	),
+	TP_printk("%s", __get_str(issuer))
+);
+
+#endif /* _TRACE_EVL_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
diff --git a/include/trace/events/irq.h b/include/trace/events/irq.h
index eeceafaaea4c..e76f462f5f54 100644
--- a/include/trace/events/irq.h
+++ b/include/trace/events/irq.h
@@ -100,6 +100,48 @@ TRACE_EVENT(irq_handler_exit,
 		  __entry->irq, __entry->ret ? "handled" : "unhandled")
 );
 
+/**
+ * irq_pipeline_entry - called when an external irq enters the pipeline
+ * @irq: irq number
+ */
+TRACE_EVENT(irq_pipeline_entry,
+
+	TP_PROTO(int irq),
+
+	TP_ARGS(irq),
+
+	TP_STRUCT__entry(
+		__field(	int,	irq		)
+	),
+
+	TP_fast_assign(
+		__entry->irq = irq;
+	),
+
+	TP_printk("irq=%d", __entry->irq)
+);
+
+/**
+ * irq_pipeline_exit - called when an external irq leaves the pipeline
+ * @irq: irq number
+ */
+TRACE_EVENT(irq_pipeline_exit,
+
+	TP_PROTO(int irq),
+
+	TP_ARGS(irq),
+
+	TP_STRUCT__entry(
+		__field(	int,	irq		)
+	),
+
+	TP_fast_assign(
+		__entry->irq = irq;
+	),
+
+	TP_printk("irq=%d", __entry->irq)
+);
+
 DECLARE_EVENT_CLASS(softirq,
 
 	TP_PROTO(unsigned int vec_nr),
diff --git a/include/uapi/evl/clock.h b/include/uapi/evl/clock.h
new file mode 100644
index 000000000000..fa5caa35395b
--- /dev/null
+++ b/include/uapi/evl/clock.h
@@ -0,0 +1,47 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_CLOCK_H
+#define _EVL_UAPI_CLOCK_H
+
+#define EVL_CLOCK_MONOTONIC_DEV		"monotonic"
+#define EVL_CLOCK_REALTIME_DEV		"realtime"
+#define EVL_CLOCK_DEV			"clock"
+
+#define EVL_CLOCK_MONOTONIC  (-CLOCK_MONOTONIC)
+#define EVL_CLOCK_REALTIME   (-CLOCK_REALTIME)
+
+#define EVL_CLOCK_IOCBASE	'c'
+
+struct evl_clock_sleepreq {
+	struct timespec timeout;
+};
+
+#define EVL_CLKIOC_SLEEP	_IOWR(EVL_CLOCK_IOCBASE, 0, struct evl_clock_sleepreq)
+#define EVL_CLKIOC_GET_RES	_IOR(EVL_CLOCK_IOCBASE, 1, struct timespec)
+#define EVL_CLKIOC_GET_TIME	_IOR(EVL_CLOCK_IOCBASE, 2, struct timespec)
+#define EVL_CLKIOC_SET_TIME	_IOR(EVL_CLOCK_IOCBASE, 3, struct timespec)
+#define EVL_CLKIOC_ADJ_TIME	_IOR(EVL_CLOCK_IOCBASE, 4, struct timex)
+#define EVL_CLKIOC_NEW_TIMER	_IO(EVL_CLOCK_IOCBASE, 5)
+
+/* Set operation flag for timers. */
+#define EVL_TIMERFD_ABSTIME  0x1
+
+struct evl_timerfd_setreq {
+	struct itimerspec *value;
+	struct itimerspec *ovalue;
+};
+
+struct evl_timerfd_getreq {
+	struct itimerspec *value;
+};
+
+#define EVL_TIMERFD_IOCBASE	't'
+
+#define EVL_TFDIOC_SET	_IOWR(EVL_TIMERFD_IOCBASE, 0, struct evl_timerfd_setreq)
+#define EVL_TFDIOC_GET	_IOR(EVL_TIMERFD_IOCBASE, 1, struct evl_timerfd_getreq)
+
+#endif /* !_EVL_UAPI_CLOCK_H */
diff --git a/include/uapi/evl/control.h b/include/uapi/evl/control.h
new file mode 100644
index 000000000000..9c59f62b0e17
--- /dev/null
+++ b/include/uapi/evl/control.h
@@ -0,0 +1,34 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_CONTROL_H
+#define _EVL_UAPI_CONTROL_H
+
+#include <linux/types.h>
+#include <uapi/evl/sched.h>
+
+#define EVL_ABI_LEVEL  12
+
+#define EVL_CONTROL_DEV  "/dev/evl/control"
+
+struct evl_core_info {
+	__u32 abi_level;
+	__u32 fpu_features;
+	__u64 shm_size;
+};
+
+struct evl_cpu_state {
+	__u32 cpu;
+	__u32 *state;
+};
+
+#define EVL_CONTROL_IOCBASE	'C'
+
+#define EVL_CTLIOC_GET_COREINFO		_IOR(EVL_CONTROL_IOCBASE, 0, struct evl_core_info)
+#define EVL_CTLIOC_SCHEDCTL		_IOWR(EVL_CONTROL_IOCBASE, 1, struct evl_sched_ctlreq)
+#define EVL_CTLIOC_GET_CPUSTATE		_IOR(EVL_CONTROL_IOCBASE, 2, struct evl_cpu_state)
+
+#endif /* !_EVL_UAPI_CONTROL_H */
diff --git a/include/uapi/evl/devices/gpio.h b/include/uapi/evl/devices/gpio.h
new file mode 100644
index 000000000000..06e43fbe8263
--- /dev/null
+++ b/include/uapi/evl/devices/gpio.h
@@ -0,0 +1,10 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ */
+
+#ifndef _EVL_UAPI_DEVICES_GPIO_H
+#define _EVL_UAPI_DEVICES_GPIO_H
+
+#define GPIOHANDLE_REQUEST_OOB		(1UL << 5)
+
+#endif /* !_EVL_UAPI_DEVICES_GPIO_H */
diff --git a/include/uapi/evl/devices/hectic.h b/include/uapi/evl/devices/hectic.h
new file mode 100644
index 000000000000..4ef3366ae8c9
--- /dev/null
+++ b/include/uapi/evl/devices/hectic.h
@@ -0,0 +1,45 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt's switchtest driver, https://xenomai.org/
+ * Copyright (C) 2010 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_DEVICES_HECTIC_H
+#define _EVL_UAPI_DEVICES_HECTIC_H
+
+#include <linux/types.h>
+
+/* hectic_task_index.flags */
+#define HECTIC_OOB_WAIT     0x10000
+#define HECTIC_INBAND_WAIT  0
+
+struct hectic_task_index {
+	unsigned int index;
+	unsigned int flags;
+};
+
+struct hectic_switch_req {
+	unsigned int from;
+	unsigned int to;
+};
+
+struct hectic_error {
+	struct hectic_switch_req last_switch;
+	unsigned int fp_val;
+};
+
+#define EVL_HECTIC_IOCBASE	'H'
+
+#define EVL_HECIOC_SET_TASKS_COUNT	_IOW(EVL_HECTIC_IOCBASE, 0, __u32)
+#define EVL_HECIOC_SET_CPU		_IOW(EVL_HECTIC_IOCBASE, 1, __u32)
+#define EVL_HECIOC_REGISTER_UTASK 	_IOW(EVL_HECTIC_IOCBASE, 2, struct hectic_task_index)
+#define EVL_HECIOC_CREATE_KTASK 	_IOWR(EVL_HECTIC_IOCBASE, 3, struct hectic_task_index)
+#define EVL_HECIOC_PEND 		_IOR(EVL_HECTIC_IOCBASE, 4, struct hectic_task_index)
+#define EVL_HECIOC_SWITCH_TO 		_IOR(EVL_HECTIC_IOCBASE, 5, struct hectic_switch_req)
+#define EVL_HECIOC_GET_SWITCHES_COUNT 	_IOR(EVL_HECTIC_IOCBASE, 6, __u32)
+#define EVL_HECIOC_GET_LAST_ERROR 	_IOR(EVL_HECTIC_IOCBASE, 7, struct hectic_error)
+#define EVL_HECIOC_SET_PAUSE 		_IOW(EVL_HECTIC_IOCBASE, 8, __u32)
+
+#endif /* !_EVL_UAPI_DEVICES_HECTIC_H */
diff --git a/include/uapi/evl/devices/latmus.h b/include/uapi/evl/devices/latmus.h
new file mode 100644
index 000000000000..50bb814a814d
--- /dev/null
+++ b/include/uapi/evl/devices/latmus.h
@@ -0,0 +1,65 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt's autotune driver, https://xenomai.org/
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_DEVICES_LATMUS_H
+#define _EVL_UAPI_DEVICES_LATMUS_H
+
+#include <linux/types.h>
+
+/* Latmus context types. */
+#define EVL_LAT_IRQ   0
+#define EVL_LAT_KERN  1
+#define EVL_LAT_USER  2
+
+struct latmus_setup {
+	__u32 type;
+	__u64 period;
+	__s32 priority;
+	__u32 cpu;
+	union {
+		struct {
+			__u32 verbosity;
+		} tune;
+		struct {
+			__u32 xfd;
+			__u32 hcells;
+		} measure;
+	} u;
+};
+
+/*
+ * The measurement record which the driver sends to userland each
+ * second through an xbuf channel.
+ */
+struct latmus_measurement {
+	__s64 sum_lat;
+	__s32 min_lat;
+	__s32 max_lat;
+	__u32 overruns;
+	__u32 samples;
+};
+
+struct latmus_measurement_result {
+	struct latmus_measurement *last;
+	__s32 *histogram;
+	__u32 len;
+};
+
+struct latmus_result {
+	void *data;
+	__u32 len;
+};
+
+#define EVL_LATMUS_IOCBASE	'L'
+
+#define EVL_LATIOC_TUNE		_IOWR(EVL_LATMUS_IOCBASE, 0, struct latmus_setup)
+#define EVL_LATIOC_MEASURE	_IOWR(EVL_LATMUS_IOCBASE, 1, struct latmus_setup)
+#define EVL_LATIOC_RUN		_IOR(EVL_LATMUS_IOCBASE, 2, struct latmus_result)
+#define EVL_LATIOC_PULSE	_IOW(EVL_LATMUS_IOCBASE, 3, __u64)
+#define EVL_LATIOC_RESET	_IO(EVL_LATMUS_IOCBASE, 4)
+
+#endif /* !_EVL_UAPI_DEVICES_LATMUS_H */
diff --git a/include/uapi/evl/factory.h b/include/uapi/evl/factory.h
new file mode 100644
index 000000000000..3424bfd137a2
--- /dev/null
+++ b/include/uapi/evl/factory.h
@@ -0,0 +1,28 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_FACTORY_H
+#define _EVL_UAPI_FACTORY_H
+
+#include <linux/types.h>
+
+#define EVL_FACTORY_IOCBASE	'f'
+
+struct evl_element_ids {
+	__u32 minor;
+	__u32 fundle;
+	__u32 state_offset;
+};
+
+struct evl_clone_req {
+	const char *name;
+	void *attrs;
+	struct evl_element_ids eids;
+};
+
+#define EVL_IOC_CLONE	_IOWR(EVL_FACTORY_IOCBASE, 0, struct evl_clone_req)
+
+#endif /* !_EVL_UAPI_FACTORY_H */
diff --git a/include/uapi/evl/monitor.h b/include/uapi/evl/monitor.h
new file mode 100644
index 000000000000..1e27c2458c8f
--- /dev/null
+++ b/include/uapi/evl/monitor.h
@@ -0,0 +1,86 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_MONITOR_H
+#define _EVL_UAPI_MONITOR_H
+
+#include <linux/types.h>
+#include <uapi/evl/types.h>
+#include <uapi/evl/factory.h>
+
+#define EVL_MONITOR_DEV		"monitor"
+
+#define EVL_MONITOR_EVENT  0	/* Event monitor. */
+#  define EVL_EVENT_GATED  0	/* Gate protected. */
+#  define EVL_EVENT_COUNT  1	/* Semaphore. */
+#  define EVL_EVENT_MASK   2	/* Event (bit)mask. */
+#define EVL_MONITOR_GATE   1	/* Gate monitor. */
+#  define EVL_GATE_PI      0	/* Gate with priority inheritance. */
+#  define EVL_GATE_PP      1	/* Gate with priority protection (ceiling). */
+
+struct evl_monitor_attrs {
+	__u32 clockfd;
+	__u32 type : 2,
+	      protocol : 4;
+	__u32 initval;
+};
+
+/* State flags. */
+#define EVL_MONITOR_SIGNALED   0x1 /* Gate/Event */
+#define EVL_MONITOR_BROADCAST  0x2 /* Event */
+#define EVL_MONITOR_TARGETED   0x4 /* Event */
+
+#define EVL_MONITOR_NOGATE  -1U
+
+struct evl_monitor_state {
+	__u32 flags;
+	union {
+		struct {
+			atomic_t owner;
+			__u32 ceiling;
+			__u32 recursive: 1,
+				nesting : 31;
+		} gate;
+		struct {
+			atomic_t value;
+			atomic_t pollrefs;
+			__u32 gate_offset;
+		} event;
+	} u;
+};
+
+struct evl_monitor_lockreq {
+	struct timespec timeout;
+};
+
+struct evl_monitor_waitreq {
+	struct timespec timeout;
+	__s32 gatefd;
+	__s32 status;
+	__s32 value;
+};
+
+struct evl_monitor_unwaitreq {
+	__s32 gatefd;
+};
+
+struct evl_monitor_binding {
+	__u32 type : 2,
+	      protocol : 4;
+	struct evl_element_ids eids;
+};
+
+#define EVL_MONITOR_IOCBASE	'm'
+
+#define EVL_MONIOC_ENTER	_IOW(EVL_MONITOR_IOCBASE, 0, struct evl_monitor_lockreq)
+#define EVL_MONIOC_TRYENTER	_IO(EVL_MONITOR_IOCBASE, 1)
+#define EVL_MONIOC_EXIT		_IO(EVL_MONITOR_IOCBASE, 2)
+#define EVL_MONIOC_WAIT		_IOWR(EVL_MONITOR_IOCBASE, 3, struct evl_monitor_waitreq)
+#define EVL_MONIOC_UNWAIT	_IOWR(EVL_MONITOR_IOCBASE, 4, struct evl_monitor_unwaitreq)
+#define EVL_MONIOC_BIND		_IOR(EVL_MONITOR_IOCBASE, 5, struct evl_monitor_binding)
+#define EVL_MONIOC_SIGNAL	_IOW(EVL_MONITOR_IOCBASE, 6, __s32)
+
+#endif /* !_EVL_UAPI_MONITOR_H */
diff --git a/include/uapi/evl/mutex.h b/include/uapi/evl/mutex.h
new file mode 100644
index 000000000000..68df16399aee
--- /dev/null
+++ b/include/uapi/evl/mutex.h
@@ -0,0 +1,43 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2013, 2018 Philippe Gerum <rpm@xenomai.org>
+ * Copyright (C) 2008, 2009 Jan Kiszka <jan.kiszka@siemens.com>.
+ */
+
+#ifndef _EVL_UAPI_MUTEX_H
+#define _EVL_UAPI_MUTEX_H
+
+#include <uapi/evl/types.h>
+
+static inline int
+evl_is_mutex_owner(atomic_t *fastlock, fundle_t ownerh)
+{
+	return evl_get_index(atomic_read(fastlock)) == ownerh;
+}
+
+static inline
+int evl_fast_lock_mutex(atomic_t *fastlock, fundle_t new_ownerh)
+{
+	fundle_t h;
+
+	h = atomic_cmpxchg(fastlock, EVL_NO_HANDLE, new_ownerh);
+	if (h != EVL_NO_HANDLE) {
+		if (evl_get_index(h) == new_ownerh)
+			return -EBUSY;
+
+		return -EAGAIN;
+	}
+
+	return 0;
+}
+
+static inline
+int evl_fast_unlock_mutex(atomic_t *fastlock, fundle_t cur_ownerh)
+{
+	return atomic_cmpxchg(fastlock, cur_ownerh, EVL_NO_HANDLE)
+		== cur_ownerh;
+}
+
+#endif /* !_EVL_UAPI_MUTEX_H */
diff --git a/include/uapi/evl/poll.h b/include/uapi/evl/poll.h
new file mode 100644
index 000000000000..4d28316f3c95
--- /dev/null
+++ b/include/uapi/evl/poll.h
@@ -0,0 +1,40 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_POLL_H
+#define _EVL_UAPI_POLL_H
+
+#include <linux/types.h>
+
+#define EVL_POLL_DEV		"poll"
+
+#define EVL_POLL_IOCBASE  'p'
+
+#define EVL_POLL_CTLADD  0
+#define EVL_POLL_CTLDEL  1
+#define EVL_POLL_CTLMOD  2
+
+struct evl_poll_ctlreq {
+	__u32 action;
+	__u32 fd;
+	__u32 events;
+};
+
+struct evl_poll_event {
+	__u32 fd;
+	__u32 events;
+};
+
+struct evl_poll_waitreq {
+	struct timespec timeout;
+	struct evl_poll_event *pollset;
+	int nrset;
+};
+
+#define EVL_POLIOC_CTL		_IOW(EVL_POLL_IOCBASE, 0, struct evl_poll_ctlreq)
+#define EVL_POLIOC_WAIT		_IOWR(EVL_POLL_IOCBASE, 1, struct evl_poll_waitreq)
+
+#endif /* !_EVL_UAPI_POLL_H */
diff --git a/include/uapi/evl/proxy.h b/include/uapi/evl/proxy.h
new file mode 100644
index 000000000000..4b01a3b72ee2
--- /dev/null
+++ b/include/uapi/evl/proxy.h
@@ -0,0 +1,20 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_PROXY_H
+#define _EVL_UAPI_PROXY_H
+
+#include <linux/types.h>
+
+#define EVL_PROXY_DEV	"proxy"
+
+struct evl_proxy_attrs {
+	__u32 fd;
+	__u32 bufsz;
+	__u32 granularity;
+};
+
+#endif /* !_EVL_UAPI_PROXY_H */
diff --git a/include/uapi/evl/sched.h b/include/uapi/evl/sched.h
new file mode 100644
index 000000000000..ef7af38b8e77
--- /dev/null
+++ b/include/uapi/evl/sched.h
@@ -0,0 +1,122 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2005, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_SCHED_H
+#define _EVL_UAPI_SCHED_H
+
+#include <linux/types.h>
+
+#define EVL_CPU_OOB      (1 << 0)
+#define EVL_CPU_ISOL     (1 << 1)
+#define EVL_CPU_OFFLINE  (1 << 2)
+
+#define SCHED_WEAK	43
+
+#define sched_rr_quantum	sched_u.rr.__sched_rr_quantum
+
+struct __sched_rr_param {
+	struct timespec __sched_rr_quantum;
+};
+
+#define SCHED_QUOTA		44
+#define sched_quota_group	sched_u.quota.__sched_group
+
+struct __sched_quota_param {
+	int __sched_group;
+};
+
+struct evl_quota_ctlparam {
+	enum {
+		evl_quota_add,
+		evl_quota_remove,
+		evl_quota_force_remove,
+		evl_quota_set,
+		evl_quota_get,
+	} op;
+	union {
+		struct {
+			int tgid;
+		} remove;
+		struct {
+			int tgid;
+			int quota;
+			int quota_peak;
+		} set;
+		struct {
+			int tgid;
+		} get;
+	} u;
+};
+
+struct evl_quota_ctlinfo {
+	int tgid;
+	int quota;
+	int quota_peak;
+	int quota_sum;
+};
+
+#define SCHED_TP		45
+#define sched_tp_partition	sched_u.tp.__sched_partition
+
+struct __sched_tp_param {
+	int __sched_partition;
+};
+
+#define EVL_TP_IDLE	-1	/* Idle pseudo-partition */
+
+struct evl_tp_ctlparam {
+	enum {
+		evl_install_tp,
+		evl_uninstall_tp,
+		evl_start_tp,
+		evl_stop_tp,
+		evl_get_tp,
+	} op;
+	int nr_windows;
+	struct __sched_tp_window {
+		struct timespec offset;
+		struct timespec duration;
+		int ptid;
+	} windows[0];
+};
+
+struct evl_tp_ctlinfo {
+	int nr_windows;
+	struct __sched_tp_window windows[0];
+};
+
+#define evl_tp_paramlen(__p)	\
+	(sizeof(*__p) + (__p)->nr_windows * sizeof((__p)->windows))
+
+struct evl_sched_attrs {
+	int sched_policy;
+	int sched_priority;
+	union {
+		struct __sched_rr_param rr;
+		struct __sched_quota_param quota;
+		struct __sched_tp_param tp;
+	} sched_u;
+};
+
+union evl_sched_ctlparam {
+	struct evl_quota_ctlparam quota;
+	struct evl_tp_ctlparam tp;
+};
+
+union evl_sched_ctlinfo {
+	struct evl_quota_ctlinfo quota;
+	struct evl_tp_ctlinfo tp;
+};
+
+struct evl_sched_ctlreq {
+	int policy;
+	int cpu;
+	union evl_sched_ctlparam *param;
+	union evl_sched_ctlinfo *info;
+};
+
+#endif /* !_EVL_UAPI_SCHED_H */
diff --git a/include/uapi/evl/signal.h b/include/uapi/evl/signal.h
new file mode 100644
index 000000000000..e422ab80d5f3
--- /dev/null
+++ b/include/uapi/evl/signal.h
@@ -0,0 +1,37 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
+ * Copyright (C) 2013, 2018 Philippe Gerum <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_SIGNAL_H
+#define _EVL_UAPI_SIGNAL_H
+
+#define SIGEVL				SIGWINCH
+#define sigevl_action(code)		((code) & 0xff)
+#define sigevl_arg(code)		(((code) >> 8) & 0xff)
+#define sigevl_int(action, arg)		((action) | ((arg) << 8))
+
+/* SIGEVL action codes. */
+#define SIGEVL_ACTION_HOME		1
+
+#define SIGDEBUG			SIGXCPU
+#define sigdebug_code(si)		((si)->si_value.sival_int)
+#define sigdebug_cause(si)		(sigdebug_code(si) & 0xff)
+#define sigdebug_marker			0xfccf0000
+#define sigdebug_marked(si)		\
+	((sigdebug_code(si) & 0xffff0000) == sigdebug_marker)
+
+/* Possible values of sigdebug_cause() */
+#define SIGDEBUG_NONE			0
+#define SIGDEBUG_MIGRATE_SIGNAL		1
+#define SIGDEBUG_MIGRATE_SYSCALL	2
+#define SIGDEBUG_MIGRATE_FAULT		3
+#define SIGDEBUG_MIGRATE_PRIOINV	4
+#define SIGDEBUG_WATCHDOG		5
+#define SIGDEBUG_MUTEX_IMBALANCE	6
+#define SIGDEBUG_MUTEX_SLEEP		7
+
+#endif /* !_EVL_UAPI_SIGNAL_H */
diff --git a/include/uapi/evl/syscall.h b/include/uapi/evl/syscall.h
new file mode 100644
index 000000000000..70807eb54551
--- /dev/null
+++ b/include/uapi/evl/syscall.h
@@ -0,0 +1,16 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_SYSCALL_H
+#define _EVL_UAPI_SYSCALL_H
+
+#define __NR_EVL_SYSCALLS	3
+
+#define sys_evl_read	0	/* oob_read() */
+#define sys_evl_write	1	/* oob_write() */
+#define sys_evl_ioctl	2	/* oob_ioctl() */
+
+#endif /* !_EVL_UAPI_SYSCALL_H */
diff --git a/include/uapi/evl/thread.h b/include/uapi/evl/thread.h
new file mode 100644
index 000000000000..da7f0f985cf2
--- /dev/null
+++ b/include/uapi/evl/thread.h
@@ -0,0 +1,107 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2005, 2018 Philippe Gerum <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_THREAD_H
+#define _EVL_UAPI_THREAD_H
+
+#include <linux/types.h>
+#include <uapi/evl/sched.h>
+
+#define EVL_THREAD_DEV		"thread"
+
+/* State flags (shared) */
+
+#define T_SUSP    0x00000001 /*< Suspended */
+#define T_PEND    0x00000002 /*< Blocked on a wait_queue/mutex */
+#define T_DELAY   0x00000004 /*< Delayed/timed */
+#define T_WAIT    0x00000008 /*< Periodic wait */
+#define T_READY   0x00000010 /*< Ready to run (in rq) */
+#define T_DORMANT 0x00000020 /*< Not started yet */
+#define T_ZOMBIE  0x00000040 /*< Dead, waiting for disposal */
+#define T_INBAND  0x00000080 /*< Running in-band */
+#define T_HALT    0x00000100 /*< Halted */
+#define T_BOOST   0x00000200 /*< PI/PP boost undergoing */
+#define T_SSTEP   0x00000400 /*< Single-stepped by debugger */
+#define T_RRB     0x00000800 /*< Undergoes round-robin scheduling */
+#define T_ROOT    0x00001000 /*< Root thread (in-band kernel placeholder) */
+#define T_WEAK    0x00002000 /*< Weak scheduling (non real-time) */
+#define T_USER    0x00004000 /*< Userland thread */
+#define T_WOSS    0x00008000 /*< Warn on stage switch (SIGDEBUG) */
+#define T_WOLI    0x00010000 /*< Warn on locking inconsistency (SIGDEBUG)  */
+
+/* Information flags (shared) */
+
+#define T_TIMEO   0x00000001 /*< Woken up due to a timeout condition */
+#define T_RMID    0x00000002 /*< Pending on a removed resource */
+#define T_BREAK   0x00000004 /*< Forcibly awaken from a wait state */
+#define T_KICKED  0x00000008 /*< Forced out of OOB context */
+#define T_WAKEN   0x00000010 /*< Thread waken up upon resource availability */
+#define T_ROBBED  0x00000020 /*< Robbed from resource ownership */
+#define T_CANCELD 0x00000040 /*< Cancellation request is pending */
+#define T_PIALERT 0x00000080 /*< Priority inversion alert (SIGDEBUG sent) */
+#define T_SCHEDP  0x00000100 /*< schedparam propagation is pending */
+#define T_BCAST   0x00000200 /*< Woken up upon resource broadcast */
+#define T_SIGNAL  0x00000400 /*< Event monitor signaled */
+
+/* Local information flags (private to current thread) */
+
+#define T_SYSRST  0x00000001 /*< Thread awaiting syscall restart after signal */
+#define T_HICCUP  0x00000002 /*< Just left from ptracing - timings wrecked */
+#define T_INFAULT 0x00000004 /*< In fault handling */
+
+/*
+ * Must follow strictly the declaration order of the state flags
+ * defined above. Status symbols are defined as follows:
+ *
+ * 'S' -> Forcibly suspended
+ * 'w'/'W' -> Blocked with/without timeout
+ * 'D' -> Delayed
+ * 'p' -> Periodic timeline
+ * 'R' -> Ready to run
+ * 'U' -> Dormant
+ * 'Z' -> Zombie
+ * 'X' -> Running in-band
+ * 'H' -> Held in emergency
+ * 'b' -> Priority boost undergoing
+ * 'T' -> Ptraced and stopped
+ * 'r' -> Undergoes round-robin
+ * 'g' -> Warned on stage switch (SIGDEBUG)
+ * 'G' -> Warned on locking inconsistency (SIGDEBUG)
+ */
+#define EVL_THREAD_STATE_LABELS  "SWDpRUZXHbTr...12"
+
+struct evl_user_window {
+	__u32 state;
+	__u32 info;
+	__u32 pp_pending;
+};
+
+struct evl_thread_state {
+	struct evl_sched_attrs eattrs;
+	__u32 cpu;
+	__u32 state;
+	__u32 isw;
+	__u32 csw;
+	__u32 sc;
+	__u32 rwa;
+	__u64 xtime;
+};
+
+#define EVL_THREAD_IOCBASE	'T'
+
+#define EVL_THRIOC_SIGNAL		_IOW(EVL_THREAD_IOCBASE, 0, __u32)
+#define EVL_THRIOC_SET_SCHEDPARAM	_IOW(EVL_THREAD_IOCBASE, 1, struct evl_sched_attrs)
+#define EVL_THRIOC_GET_SCHEDPARAM	_IOR(EVL_THREAD_IOCBASE, 2, struct evl_sched_attrs)
+#define EVL_THRIOC_JOIN			_IO(EVL_THREAD_IOCBASE, 3)
+#define EVL_THRIOC_GET_STATE		_IOR(EVL_THREAD_IOCBASE, 4, struct evl_thread_state)
+#define EVL_THRIOC_SWITCH_OOB		_IO(EVL_THREAD_IOCBASE, 5)
+#define EVL_THRIOC_SWITCH_INBAND	_IO(EVL_THREAD_IOCBASE, 6)
+#define EVL_THRIOC_DETACH_SELF		_IO(EVL_THREAD_IOCBASE, 7)
+#define EVL_THRIOC_SET_MODE		_IOW(EVL_THREAD_IOCBASE, 8, __u32)
+#define EVL_THRIOC_CLEAR_MODE		_IOW(EVL_THREAD_IOCBASE, 9, __u32)
+
+#endif /* !_EVL_UAPI_THREAD_H */
diff --git a/include/uapi/evl/trace.h b/include/uapi/evl/trace.h
new file mode 100644
index 000000000000..b0e4e8c26481
--- /dev/null
+++ b/include/uapi/evl/trace.h
@@ -0,0 +1,14 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_TRACE_H
+#define _EVL_UAPI_TRACE_H
+
+#define EVL_TRACE_IOCBASE	'O'
+
+#define EVL_TRCIOC_SNAPSHOT	_IO(EVL_TRACE_IOCBASE, 0)
+
+#endif /* !_EVL_UAPI_TRACE_H */
diff --git a/include/uapi/evl/types.h b/include/uapi/evl/types.h
new file mode 100644
index 000000000000..356b42d7d204
--- /dev/null
+++ b/include/uapi/evl/types.h
@@ -0,0 +1,31 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2013, 2018 Philippe Gerum <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_TYPES_H
+#define _EVL_UAPI_TYPES_H
+
+#include <linux/types.h>
+
+typedef __u32 fundle_t;
+
+#define EVL_NO_HANDLE		((fundle_t)0x00000000)
+
+/* Reserved status bits */
+#define EVL_MUTEX_FLCLAIM	((fundle_t)0x80000000) /* Contended. */
+#define EVL_MUTEX_FLCEIL	((fundle_t)0x40000000) /* Ceiling active. */
+#define EVL_HANDLE_INDEX_MASK	(EVL_MUTEX_FLCLAIM|EVL_MUTEX_FLCEIL)
+
+/*
+ * Strip all reserved bits from the handle, only retaining the fast
+ * index value.
+ */
+static inline fundle_t evl_get_index(fundle_t handle)
+{
+	return handle & ~EVL_HANDLE_INDEX_MASK;
+}
+
+#endif /* !_EVL_UAPI_TYPES_H */
diff --git a/include/uapi/evl/xbuf.h b/include/uapi/evl/xbuf.h
new file mode 100644
index 000000000000..ff0afc5b3a60
--- /dev/null
+++ b/include/uapi/evl/xbuf.h
@@ -0,0 +1,21 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#ifndef _EVL_UAPI_XBUF_H
+#define _EVL_UAPI_XBUF_H
+
+#include <linux/types.h>
+
+#define EVL_XBUF_DEV		"xbuf"
+
+struct evl_xbuf_attrs {
+	__u32 i_bufsz;
+	__u32 o_bufsz;
+};
+
+#define EVL_XBUF_IOCBASE	'x'
+
+#endif /* !_EVL_UAPI_XBUF_H */
diff --git a/include/uapi/linux/clocksource.h b/include/uapi/linux/clocksource.h
new file mode 100644
index 000000000000..a0a1c2747398
--- /dev/null
+++ b/include/uapi/linux/clocksource.h
@@ -0,0 +1,33 @@
+/*
+ * Definitions for user-mappable clock sources.
+ *
+ * Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
+ */
+#ifndef _UAPI_LINUX_CLOCKSOURCE_H
+#define _UAPI_LINUX_CLOCKSOURCE_H
+
+enum clksrc_user_mmio_type {
+	CLKSRC_MMIO_L_UP,
+	CLKSRC_MMIO_L_DOWN,
+	CLKSRC_MMIO_W_UP,
+	CLKSRC_MMIO_W_DOWN,
+	CLKSRC_DMMIO_L_UP,
+	CLKSRC_DMMIO_W_UP,
+
+	CLKSRC_MMIO_TYPE_NR,
+};
+
+struct clksrc_user_mmio_info {
+	enum clksrc_user_mmio_type type;
+	void *reg_lower;
+	unsigned int mask_lower;
+	unsigned int bits_lower;
+	void *reg_upper;
+	unsigned int mask_upper;
+};
+
+#define CLKSRC_USER_MMIO_MAX 16
+
+#define CLKSRC_USER_MMIO_MAP _IOWR(0xC1, 0, struct clksrc_user_mmio_info)
+
+#endif /* _UAPI_LINUX_CLOCKSOURCE_H */
diff --git a/include/vdso/helpers.h b/include/vdso/helpers.h
index 01641dbb68ef..3f378e332f41 100644
--- a/include/vdso/helpers.h
+++ b/include/vdso/helpers.h
@@ -34,6 +34,7 @@ static __always_inline void vdso_write_begin(struct vdso_data *vd)
 	 * updates to vd[x].seq and it is possible that the value seen by the
 	 * reader it is inconsistent.
 	 */
+	hard_cond_local_irq_disable();
 	WRITE_ONCE(vd[CS_HRES_COARSE].seq, vd[CS_HRES_COARSE].seq + 1);
 	WRITE_ONCE(vd[CS_RAW].seq, vd[CS_RAW].seq + 1);
 	smp_wmb();
@@ -49,6 +50,7 @@ static __always_inline void vdso_write_end(struct vdso_data *vd)
 	 */
 	WRITE_ONCE(vd[CS_HRES_COARSE].seq, vd[CS_HRES_COARSE].seq + 1);
 	WRITE_ONCE(vd[CS_RAW].seq, vd[CS_RAW].seq + 1);
+	hard_cond_local_irq_enable();
 }
 
 #endif /* !__ASSEMBLY__ */
diff --git a/init/Kconfig b/init/Kconfig
index b4daad2bac23..9309faae3456 100644
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1433,7 +1433,19 @@ config PRINTK
 config PRINTK_NMI
 	def_bool y
 	depends on PRINTK
-	depends on HAVE_NMI
+	depends on HAVE_NMI || IRQ_PIPELINE
+
+config RAW_PRINTK
+       bool "Enable support for raw printk"
+       default n
+       help
+         This option enables a printk variant called raw_printk() for
+         writing all output unmodified to a raw console channel
+         immediately, without any header or preparation whatsoever,
+         usable from any context.
+
+	 Unlike early_printk() console devices, raw_printk() devices
+         can live past the boot sequence.
 
 config BUG
 	bool "BUG() support" if EXPERT
diff --git a/init/Makefile b/init/Makefile
index 6246a06364d0..1d060bc15c98 100644
--- a/init/Makefile
+++ b/init/Makefile
@@ -35,4 +35,5 @@ include/generated/compile.h: FORCE
 	@$($(quiet)chk_compile.h)
 	$(Q)$(CONFIG_SHELL) $(srctree)/scripts/mkcompile_h $@	\
 	"$(UTS_MACHINE)" "$(CONFIG_SMP)" "$(CONFIG_PREEMPT)"	\
-	"$(CONFIG_PREEMPT_RT)" "$(CC) $(KBUILD_CFLAGS)"
+	"$(CONFIG_PREEMPT_RT)" "$(CONFIG_IRQ_PIPELINE)" \
+	"$(CC) $(KBUILD_CFLAGS)"
diff --git a/init/main.c b/init/main.c
index 91f6ebb30ef0..3f338902d01f 100644
--- a/init/main.c
+++ b/init/main.c
@@ -49,6 +49,7 @@
 #include <linux/tick.h>
 #include <linux/sched/isolation.h>
 #include <linux/interrupt.h>
+#include <linux/irq_pipeline.h>
 #include <linux/taskstats_kern.h>
 #include <linux/delayacct.h>
 #include <linux/unistd.h>
@@ -583,7 +584,7 @@ asmlinkage __visible void __init start_kernel(void)
 
 	cgroup_init_early();
 
-	local_irq_disable();
+	hard_local_irq_disable();
 	early_boot_irqs_disabled = true;
 
 	/*
@@ -623,6 +624,7 @@ asmlinkage __visible void __init start_kernel(void)
 	setup_log_buf(0);
 	vfs_caches_init_early();
 	sort_main_extable();
+	irq_pipeline_init_early();
 	trap_init();
 	mm_init();
 
@@ -672,6 +674,7 @@ asmlinkage __visible void __init start_kernel(void)
 	/* init some links before init_ISA_irqs() */
 	early_irq_init();
 	init_IRQ();
+	irq_pipeline_init();
 	tick_init();
 	rcu_init_nohz();
 	init_timers();
@@ -700,7 +703,7 @@ asmlinkage __visible void __init start_kernel(void)
 	WARN(!irqs_disabled(), "Interrupts were enabled early\n");
 
 	early_boot_irqs_disabled = false;
-	local_irq_enable();
+	local_irq_enable_full();
 
 	kmem_cache_init_late();
 
diff --git a/kernel/Kconfig.dovetail b/kernel/Kconfig.dovetail
new file mode 100644
index 000000000000..adc6922d64e1
--- /dev/null
+++ b/kernel/Kconfig.dovetail
@@ -0,0 +1,14 @@
+
+# DOVETAIL co-kernel interface
+config HAVE_DOVETAIL
+	bool
+
+config DOVETAIL
+	bool "Dovetail interface"
+	depends on HAVE_DOVETAIL
+	select IRQ_PIPELINE
+	default n
+	---help---
+	  Activate this option if you want to enable the interface for
+	  running a secondary kernel side-by-side with Linux (aka
+	  "dual kernel" configuration).
diff --git a/kernel/Kconfig.evl b/kernel/Kconfig.evl
new file mode 100644
index 000000000000..668e5d56f949
--- /dev/null
+++ b/kernel/Kconfig.evl
@@ -0,0 +1,32 @@
+
+# EVL real-time core
+config HAVE_ARCH_EVL
+	bool
+
+menuconfig EVL
+	bool "EVL real-time core"
+	depends on HAVE_ARCH_EVL
+	select DOVETAIL
+	select DEVTMPFS
+	help
+
+	  The EVL core is a real-time component of the Linux kernel,
+	  which delivers very short and bounded response time to
+	  interrupt and task events.  EVL runs asynchronously to the
+	  common kernel services, on the high-priority, out-of-band
+	  stage managed by the Dovetail layer.
+
+if EVL
+
+source "kernel/evl/Kconfig"
+
+if WARN_CPUFREQ_GOVERNOR
+comment "WARNING! CPU_FREQ governors other than 'performance'"
+comment "or 'powersave' may significantly increase latency"
+comment "on this platform during the frequency transitions."
+endif
+
+endif
+
+config WARN_CPUFREQ_GOVERNOR
+       def_bool n
diff --git a/kernel/Makefile b/kernel/Makefile
index daad787fb795..caac3b755a2d 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -100,8 +100,10 @@ obj-$(CONFIG_TRACE_CLOCK) += trace/
 obj-$(CONFIG_RING_BUFFER) += trace/
 obj-$(CONFIG_TRACEPOINTS) += trace/
 obj-$(CONFIG_IRQ_WORK) += irq_work.o
+obj-$(CONFIG_DOVETAIL) += dovetail.o
 obj-$(CONFIG_CPU_PM) += cpu_pm.o
 obj-$(CONFIG_BPF) += bpf/
+obj-$(CONFIG_EVL) += evl/
 
 obj-$(CONFIG_PERF_EVENTS) += events/
 
diff --git a/kernel/context_tracking.c b/kernel/context_tracking.c
index be01a4d627c9..554742481e07 100644
--- a/kernel/context_tracking.c
+++ b/kernel/context_tracking.c
@@ -114,7 +114,7 @@ void context_tracking_enter(enum ctx_state state)
 	 * helpers are enough to protect RCU uses inside the exception. So
 	 * just return immediately if we detect we are in an IRQ.
 	 */
-	if (in_interrupt())
+	if (!running_inband() || in_interrupt())
 		return;
 
 	local_irq_save(flags);
@@ -170,7 +170,7 @@ void context_tracking_exit(enum ctx_state state)
 {
 	unsigned long flags;
 
-	if (in_interrupt())
+	if (!running_inband() || in_interrupt())
 		return;
 
 	local_irq_save(flags);
diff --git a/kernel/debug/debug_core.c b/kernel/debug/debug_core.c
index f76d6f77dd5e..0b354ac9d1b9 100644
--- a/kernel/debug/debug_core.c
+++ b/kernel/debug/debug_core.c
@@ -120,8 +120,8 @@ static struct kgdb_bkpt		kgdb_break[KGDB_MAX_BREAKPOINTS] = {
  */
 atomic_t			kgdb_active = ATOMIC_INIT(-1);
 EXPORT_SYMBOL_GPL(kgdb_active);
-static DEFINE_RAW_SPINLOCK(dbg_master_lock);
-static DEFINE_RAW_SPINLOCK(dbg_slave_lock);
+static DEFINE_HARD_SPINLOCK(dbg_master_lock);
+static DEFINE_HARD_SPINLOCK(dbg_slave_lock);
 
 /*
  * We use NR_CPUs not PERCPU, in case kgdb is used to debug early
@@ -549,7 +549,7 @@ static int kgdb_cpu_enter(struct kgdb_state *ks, struct pt_regs *regs,
 	 * Interrupts will be restored by the 'trap return' code, except when
 	 * single stepping.
 	 */
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	cpu = ks->cpu;
 	kgdb_info[cpu].debuggerinfo = regs;
@@ -600,7 +600,7 @@ static int kgdb_cpu_enter(struct kgdb_state *ks, struct pt_regs *regs,
 			smp_mb__before_atomic();
 			atomic_dec(&slaves_in_kgdb);
 			dbg_touch_watchdogs();
-			local_irq_restore(flags);
+			hard_local_irq_restore(flags);
 			return 0;
 		}
 		cpu_relax();
@@ -618,7 +618,7 @@ static int kgdb_cpu_enter(struct kgdb_state *ks, struct pt_regs *regs,
 		atomic_set(&kgdb_active, -1);
 		raw_spin_unlock(&dbg_master_lock);
 		dbg_touch_watchdogs();
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 
 		goto acquirelock;
 	}
@@ -651,8 +651,11 @@ static int kgdb_cpu_enter(struct kgdb_state *ks, struct pt_regs *regs,
 		atomic_set(ks->send_ready, 1);
 
 	/* Signal the other CPUs to enter kgdb_wait() */
-	else if ((!kgdb_single_step) && kgdb_do_roundup)
+	else if ((!kgdb_single_step) && kgdb_do_roundup && running_inband()) {
+		hard_cond_local_irq_enable();
 		kgdb_roundup_cpus();
+		hard_cond_local_irq_disable();
+	}
 #endif
 
 	/*
@@ -737,7 +740,7 @@ static int kgdb_cpu_enter(struct kgdb_state *ks, struct pt_regs *regs,
 	atomic_set(&kgdb_active, -1);
 	raw_spin_unlock(&dbg_master_lock);
 	dbg_touch_watchdogs();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return kgdb_info[cpu].ret_state;
 }
@@ -855,7 +858,7 @@ static void kgdb_console_write(struct console *co, const char *s,
 	if (!kgdb_connected || atomic_read(&kgdb_active) != -1 || dbg_kdb_mode)
 		return;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	gdbstub_msg_write(s, count);
 	local_irq_restore(flags);
 }
diff --git a/kernel/dovetail.c b/kernel/dovetail.c
new file mode 100644
index 000000000000..7569ecaee6c1
--- /dev/null
+++ b/kernel/dovetail.c
@@ -0,0 +1,395 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/timekeeper_internal.h>
+#include <linux/sched/signal.h>
+#include <linux/irq_pipeline.h>
+#include <linux/dovetail.h>
+#include <linux/kvm_host.h>
+#include <asm/unistd.h>
+#include <asm/syscall.h>
+
+static bool dovetail_enabled;
+
+void __weak arch_inband_task_init(struct task_struct *p)
+{
+}
+
+void inband_task_init(struct task_struct *p)
+{
+	struct thread_info *ti = task_thread_info(p);
+
+	clear_ti_local_flags(ti, _TLF_DOVETAIL|_TLF_OOB|_TLF_OFFSTAGE);
+	arch_inband_task_init(p);
+}
+
+#ifdef CONFIG_KVM
+void oob_notify_kvm(void)
+{
+	struct kvm_oob_notifier *nfy;
+	struct irq_pipeline_data *p;
+
+	check_hard_irqs_disabled();
+	p = raw_cpu_ptr(&irq_pipeline);
+	nfy = p->vcpu_notify;
+	if (unlikely(nfy))
+		nfy->handler(nfy);
+}
+EXPORT_SYMBOL_GPL(oob_notify_kvm);
+#endif
+
+void dovetail_init_altsched(struct dovetail_altsched_context *p)
+{
+	struct task_struct *tsk = current;
+
+	check_inband_stage();
+	p->task = tsk;
+	p->active_mm = tsk->mm;
+	p->borrowed_mm = false;
+}
+EXPORT_SYMBOL_GPL(dovetail_init_altsched);
+
+void dovetail_start_altsched(void)
+{
+	check_inband_stage();
+	set_thread_local_flags(_TLF_DOVETAIL);
+}
+EXPORT_SYMBOL_GPL(dovetail_start_altsched);
+
+void dovetail_stop_altsched(void)
+{
+	clear_thread_local_flags(_TLF_DOVETAIL);
+	clear_thread_flag(TIF_MAYDAY);
+}
+EXPORT_SYMBOL_GPL(dovetail_stop_altsched);
+
+void __weak handle_oob_syscall(struct pt_regs *regs)
+{
+}
+
+int __weak handle_pipelined_syscall(struct irq_stage *stage,
+				    struct pt_regs *regs)
+{
+	return 0;
+}
+
+void __weak handle_oob_mayday(struct pt_regs *regs)
+{
+}
+
+static inline
+void call_mayday(struct thread_info *ti, struct pt_regs *regs)
+{
+	clear_ti_thread_flag(ti, TIF_MAYDAY);
+	handle_oob_mayday(regs);
+}
+
+void dovetail_call_mayday(struct thread_info *ti, struct pt_regs *regs)
+{
+	unsigned long flags;
+
+	flags = hard_local_irq_save();
+	call_mayday(ti, regs);
+	hard_local_irq_restore(flags);
+}
+
+int __pipeline_syscall(struct thread_info *ti, struct pt_regs *regs)
+{
+	struct irq_stage *caller_stage, *target_stage;
+	struct irq_stage_data *p, *this_context;
+	unsigned long flags;
+	int ret = 0;
+
+	/*
+	 * We should definitely not pipeline a syscall through the
+	 * slow path with IRQs off.
+	 */
+	WARN_ON_ONCE(dovetail_debug() && hard_irqs_disabled());
+
+	if (!dovetail_enabled)
+		return 0;
+
+	flags = hard_local_irq_save();
+	caller_stage = current_irq_stage;
+	this_context = current_irq_staged;
+	target_stage = &oob_stage;
+next:
+	p = this_staged(target_stage);
+	set_current_irq_staged(p);
+	hard_local_irq_restore(flags);
+	ret = handle_pipelined_syscall(caller_stage, regs);
+	flags = hard_local_irq_save();
+	/*
+	 * Be careful about stage switching _and_ CPU migration that
+	 * might have happened as a result of handing over the syscall
+	 * to the out-of-band handler.
+	 *
+	 * - if a stage migration is detected, fetch the new
+	 * per-stage, per-CPU context pointer.
+	 *
+	 * - if no stage migration happened, switch back to the
+	 * initial caller's stage, on a possibly different CPU though.
+	 */
+	if (current_irq_stage != target_stage)
+		this_context = current_irq_staged;
+	else {
+		p = this_staged(this_context->stage);
+		set_current_irq_staged(p);
+	}
+
+	if (this_context->stage == &inband_stage) {
+		if (target_stage != &inband_stage && ret == 0) {
+			target_stage = &inband_stage;
+			goto next;
+		}
+		p = this_inband_staged();
+		if (stage_irqs_pending(p))
+			sync_current_irq_stage();
+	} else if (test_ti_thread_flag(ti, TIF_MAYDAY))
+		call_mayday(ti, regs);
+
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+void sync_inband_irqs(void)
+{
+	struct irq_stage_data *p;
+	unsigned long flags;
+
+	flags = hard_local_irq_save();
+
+	p = this_inband_staged();
+	if (stage_irqs_pending(p))
+		sync_current_irq_stage();
+
+	hard_local_irq_restore(flags);
+}
+
+int pipeline_syscall(struct thread_info *ti,
+		     unsigned long nr, struct pt_regs *regs)
+{
+	unsigned long local_flags = READ_ONCE(ti_local_flags(ti));
+	int ret;
+
+	/*
+	 * If the syscall number is out of bounds and we are not
+	 * running in-band, this has to be a non-native system call
+	 * handled by some co-kernel from the oob stage. Hand it over
+	 * via the fast syscall handler.
+	 *
+	 * Otherwise, if the system call is out of bounds or alternate
+	 * scheduling is enabled for the current thread, propagate the
+	 * syscall through the pipeline stages. This allows:
+	 *
+	 * - the co-kernel to receive any initial - foreign - syscall
+	 * a thread should send for enabling dovetailing from the
+	 * in-band stage.
+	 *
+	 * - the co-kernel to manipulate the current execution stage
+	 * for handling the request, which includes switching the
+	 * current thread back to the in-band context if the syscall
+	 * is a native one, or promoting it to the oob stage if
+	 * handling a foreign syscall requires this.
+	 *
+	 * Native syscalls from common (non-dovetailed) threads are
+	 * ignored by this routine, flowing down to the in-band system
+	 * call handler.
+	 */
+
+	if (nr >= NR_syscalls && (local_flags & _TLF_OOB)) {
+		handle_oob_syscall(regs);
+		local_flags = READ_ONCE(ti_local_flags(ti));
+		if (local_flags & _TLF_OOB) {
+			if (test_ti_thread_flag(ti, TIF_MAYDAY))
+				dovetail_call_mayday(ti, regs);
+			return 1; /* don't pass down, no tail work. */
+		} else {
+			sync_inband_irqs();
+			return -1; /* don't pass down, do tail work. */
+		}
+	}
+
+	if ((local_flags & _TLF_DOVETAIL) || nr >= NR_syscalls) {
+		ret = __pipeline_syscall(ti, regs);
+		local_flags = READ_ONCE(ti_local_flags(ti));
+		if (local_flags & _TLF_OOB)
+			return 1; /* don't pass down, no tail work. */
+		if (ret)
+			return -1; /* don't pass down, do tail work. */
+	}
+
+	return 0; /* pass syscall down to the host. */
+}
+
+void __weak handle_oob_trap(unsigned int trapnr, struct pt_regs *regs)
+{
+}
+
+void __oob_trap_notify(unsigned int exception, struct pt_regs *regs)
+{
+	unsigned long flags;
+
+	/*
+	 * We send a notification about all traps raised over a
+	 * registered oob stage only.
+	 *
+	 * CAUTION: The out-of-band trap handler expects hard irqs off
+	 * on entry, and might demote the current context to the
+	 * in-band stage, returning with hard irqs on. So we have to
+	 * protect the call accordingly.
+	 */
+	if (dovetail_enabled) {
+		flags = hard_local_irq_save();
+		handle_oob_trap(exception, regs);
+		hard_local_irq_restore(flags);
+	}
+}
+
+void __weak handle_inband_event(enum inband_event_type event, void *data)
+{
+}
+
+void inband_event_notify(enum inband_event_type event, void *data)
+{
+	check_inband_stage();
+
+	if (dovetail_enabled)
+		handle_inband_event(event, data);
+}
+
+void __weak resume_oob_task(struct task_struct *p)
+{
+}
+
+static void finalize_oob_transition(void) /* hard IRQs off */
+{
+	struct irq_pipeline_data *pd;
+	struct irq_stage_data *p;
+	struct task_struct *t;
+
+	pd = raw_cpu_ptr(&irq_pipeline);
+	t = pd->task_inflight;
+	if (t == NULL)
+		return;
+
+	/*
+	 * @t which is in flight to the oob stage might have received
+	 * a signal while waiting in off-stage state to be actually
+	 * scheduled out. We can't act upon that signal safely from
+	 * here, we simply let the task complete the migration process
+	 * to the oob stage. The pending signal will be handled when
+	 * the task eventually exits the out-of-band context by the
+	 * converse migration.
+	 */
+	pd->task_inflight = NULL;
+
+	/*
+	 * IRQs are hard disabled, but the stage transition handler
+	 * may assume the oob stage is stalled: fix this up.
+	 */
+	p = this_oob_staged();
+	set_stage_bit(STAGE_STALL_BIT, p);
+	resume_oob_task(t);
+	clear_stage_bit(STAGE_STALL_BIT, p);
+	if (stage_irqs_pending(p))
+		/* Current stage (in-band) != p->stage (oob). */
+		sync_irq_stage(p->stage);
+}
+
+void oob_trampoline(void)
+{
+	unsigned long flags;
+
+	check_inband_stage();
+	flags = hard_local_irq_save();
+	finalize_oob_transition();
+	hard_local_irq_restore(flags);
+}
+
+int inband_switch_tail(void)
+{
+	bool oob;
+
+	check_hard_irqs_disabled();
+
+	/*
+	 * We may run this code either over the inband or oob
+	 * contexts. If inband, we may have a thread blocked in
+	 * dovetail_leave_inband(), waiting for the companion core to
+	 * schedule it back in over the oob context, in which case
+	 * finalize_oob_transition() should take care of it. If oob,
+	 * the core just switched us back, and we may update the
+	 * context markers before returning to context_switch().
+	 *
+	 * Since the preemption count does not reflect the active
+	 * stage yet upon inband -> oob transition, we figure out
+	 * which one we are on by testing _TLF_OFFSTAGE. Having this
+	 * bit set when running the inband switch tail code means that
+	 * we are completing such transition for the current task,
+	 * switched in by dovetail_context_switch() over the oob
+	 * stage. If so, update the context markers appropriately.
+	 */
+	oob = test_thread_local_flags(_TLF_OFFSTAGE);
+	if (oob) {
+		set_thread_local_flags(_TLF_OOB);
+		if (!IS_ENABLED(CONFIG_HAVE_PERCPU_PREEMPT_COUNT)) {
+			WARN_ON_ONCE(dovetail_debug() &&
+				(preempt_count() & STAGE_MASK));
+			preempt_count_add(STAGE_OFFSET);
+		}
+	} else {
+		finalize_oob_transition();
+		hard_local_irq_enable();
+	}
+
+	return oob;
+}
+
+void __weak inband_clock_was_set(void)
+{
+}
+
+void __weak install_inband_fd(unsigned int fd, struct file *file,
+			      struct files_struct *files)
+{
+}
+
+void __weak uninstall_inband_fd(unsigned int fd, struct file *file,
+				struct files_struct *files)
+{
+}
+
+void __weak replace_inband_fd(unsigned int fd, struct file *file,
+			      struct files_struct *files)
+{
+}
+
+int dovetail_start(void)
+{
+	check_inband_stage();
+
+	if (dovetail_enabled)
+		return -EBUSY;
+
+	if (!oob_stage_present())
+		return -EAGAIN;
+
+	dovetail_enabled = true;
+	smp_wmb();
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(dovetail_start);
+
+void dovetail_stop(void)
+{
+	check_inband_stage();
+
+	dovetail_enabled = false;
+	smp_wmb();
+}
+EXPORT_SYMBOL_GPL(dovetail_stop);
diff --git a/kernel/evl/.gitignore b/kernel/evl/.gitignore
new file mode 100644
index 000000000000..beea4d8a9c77
--- /dev/null
+++ b/kernel/evl/.gitignore
@@ -0,0 +1 @@
+syscall_entries.h
diff --git a/kernel/evl/Kconfig b/kernel/evl/Kconfig
new file mode 100644
index 000000000000..c61a77be71fd
--- /dev/null
+++ b/kernel/evl/Kconfig
@@ -0,0 +1,211 @@
+
+config EVL_SCHED_QUOTA
+	bool "Enable quota-based scheduling"
+	default n
+	help
+	This option enables the SCHED_QUOTA scheduling policy in the
+	EVL core.
+
+	This policy enforces a limitation on the CPU consumption of
+	threads over a globally defined period, known as the quota
+	interval. This is done by pooling threads with common
+	requirements in groups, and giving each group a share of the
+	global period.
+
+	If in doubt, say N.
+
+config EVL_SCHED_TP
+	bool "Temporal partitioning policy"
+	default n
+	help
+	This option enables the SCHED_TP scheduling policy in the
+	EVL core.
+
+	This policy runs threads which execution is confined to
+	dedicated time windows defined within a recurring time frame
+	or global period. The ARINC653 standard describes such
+	scheduling policy.
+
+	If in doubt, say N.
+
+config EVL_SCHED_TP_NR_PART
+	int "Number of partitions"
+	default 4
+	range 1 1024
+	depends on EVL_SCHED_TP
+	help
+
+	Define the maximum number of temporal partitions the TP
+	scheduler may have to handle.
+
+config EVL_RUNSTATS
+	bool "Collect runtime statistics"
+	default y
+	help
+	This option causes the EVL core to collect various
+	per-thread runtime statistics, which are accessible via
+	the /sys interface.
+
+menu "Fixed sizes and limits"
+
+config EVL_COREMEM_SIZE
+	int "Size of core memory heap (Kb)"
+	default 2048
+	help
+	The core heap is used for various internal allocations by
+	the EVL core. The size is expressed in Kilobytes.
+
+config EVL_NR_THREADS
+	int "Maximum number of threads"
+	range 1 4096
+	default 256
+	help
+
+	The maximum number of user-space threads attached to the
+	EVL core which can run concurrently in the system.
+
+config EVL_NR_MONITORS
+	int "Maximum number of monitors"
+	range 1 16384
+	default 512
+	help
+
+	The monitor is the fundamental synchronization element
+	implemented by the EVL core, which can underpin any other
+	synchronization mechanism. This value gives the maximum number
+	of monitors which can be alive concurrently in the system.
+
+config EVL_NR_CLOCKS
+	int "Maximum number of clocks"
+	range 1 16384
+	default 8
+	help
+
+	This value gives the maximum number of semaphores which can be
+	alive concurrently in the system for user-space applications.
+
+config EVL_NR_XBUFS
+	int "Maximum number of x-buffers"
+	range 1 16384
+	default 16
+	help
+
+	This value gives the maximum number of x-buffers which can be
+	alive concurrently in the system for user-space applications.
+
+config EVL_NR_PROXIES
+	int "Maximum number of proxies"
+	range 1 16384
+	default 64
+	help
+
+	This value gives the maximum number of file proxies which can
+	be alive concurrently in the system for user-space
+	applications.
+
+endmenu
+
+menu "Pre-calibrated latency"
+
+config EVL_LATENCY_USER
+	int "User scheduling latency (ns)"
+	default 0
+	help
+	The user scheduling latency is the time between the
+	termination of an interrupt handler and the execution of the
+	first instruction of the application thread this
+	handler resumes. A default value of 0 (recommended) will cause
+	a pre-calibrated value to be used.
+
+	If the latmus driver is enabled, this value will be used as the
+	factory default when running "latmus --reset".
+
+config EVL_LATENCY_KERNEL
+	int "Intra-kernel scheduling latency (ns)"
+	default 0
+	help
+	The intra-kernel scheduling latency is the time between the
+	termination of an interrupt handler and the execution of the
+	first instruction of the EVL kthread this handler
+	resumes. A default value of 0 (recommended) will cause a
+	pre-calibrated value to be used.
+
+	Intra-kernel latency is usually significantly lower than user
+	scheduling latency on MMU-enabled platforms, due to CPU cache
+	latency.
+
+	If the auto-tuner is enabled, this value will be used as the
+	factory default when running "autotune --reset".
+
+config EVL_LATENCY_IRQ
+	int "Interrupt latency (ns)"
+	default 0
+	help
+	The interrupt latency is the time between the occurrence of an
+	IRQ and the first instruction of the interrupt handler which
+	will service it. A default value of 0 (recommended) will cause
+	a pre-calibrated value to be used.
+
+	If the auto-tuner is enabled, this value will be used as the
+	factory default when running "autotune --reset".
+
+endmenu
+
+menuconfig EVL_DEBUG
+	bool "Debug support"
+	help
+	  When enabled, various debugging features can be switched
+	  on. They can help to find problems in applications, drivers,
+	  and the EVL core. EVL_DEBUG by itself does not have
+	  any impact on the generated code.
+
+if EVL_DEBUG
+
+config EVL_DEBUG_CORE
+	bool "Core runtime assertions"
+	help
+	  This option activates various assertions inside the EVL
+	  core. This option has limited overhead.
+
+config EVL_DEBUG_MEMORY
+	bool "Memory checks"
+	help
+	  This option enables memory debug checks inside the EVL
+	  core. This option may induce significant overhead with large
+	  heaps.
+
+config EVL_DEBUG_WOLI
+	bool "Enable locking consistency checks"
+	help
+	  This option enables a set of consistency checks by default
+	  for every new EVL thread for detecting wrong mutex-based
+	  locking patterns (aka T_WOLI flag), which are otherwise
+	  opted-in programmatically on a per-thread basis when this
+	  option is off. This feature may induce overhead in some
+	  cases, so you should enable it for debugging purposes only.
+
+config EVL_WATCHDOG
+	bool "Watchdog support"
+	default y
+	help
+	  This option activates a watchdog aimed at detecting runaway
+	  EVL threads. If enabled, the watchdog triggers after a
+	  given period of uninterrupted out-of-band activity has elapsed
+	  without Linux interaction in the meantime.
+
+	  In such an event, the current thread is moved out the
+	  out-of-band context, receiving a SIGDEBUG signal from the
+	  Linux kernel immediately after.
+
+	  The timeout value of the watchdog can be set using the
+	  EVL_WATCHDOG_TIMEOUT parameter.
+
+config EVL_WATCHDOG_TIMEOUT
+	depends on EVL_WATCHDOG
+	int "Watchdog timeout"
+	default 4
+	range 1 60
+	help
+	  Watchdog timeout value (in seconds).
+
+endif # EVL_DEBUG
diff --git a/kernel/evl/Makefile b/kernel/evl/Makefile
new file mode 100644
index 000000000000..05cf3e58cf26
--- /dev/null
+++ b/kernel/evl/Makefile
@@ -0,0 +1,24 @@
+obj-$(CONFIG_EVL) += evl.o sched/
+
+ccflags-y += -Ikernel
+
+evl-y :=		\
+	clock.o		\
+	control.o	\
+	factory.o	\
+	file.o		\
+	init.o		\
+	memory.o	\
+	monitor.o	\
+	mutex.o		\
+	poll.o		\
+	proxy.o		\
+	sem.o		\
+	syscall.o	\
+	thread.o	\
+	tick.o		\
+	timer.o		\
+	wait.o		\
+	xbuf.o
+
+evl-$(CONFIG_FTRACE) +=	trace.o
diff --git a/kernel/evl/clock.c b/kernel/evl/clock.c
new file mode 100644
index 000000000000..f96d878abb81
--- /dev/null
+++ b/kernel/evl/clock.c
@@ -0,0 +1,1141 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006, 2018 Philippe Gerum  <rpm@xenomai.org>
+ * Copyright Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
+ */
+
+#include <linux/kernel.h>
+#include <linux/percpu.h>
+#include <linux/errno.h>
+#include <linux/clockchips.h>
+#include <linux/interrupt.h>
+#include <linux/tick.h>
+#include <linux/kconfig.h>
+#include <linux/clocksource.h>
+#include <linux/bitmap.h>
+#include <linux/sched/signal.h>
+#include <linux/mutex.h>
+#include <linux/slab.h>
+#include <linux/anon_inodes.h>
+#include <linux/file.h>
+#include <evl/sched.h>
+#include <evl/timer.h>
+#include <evl/clock.h>
+#include <evl/timer.h>
+#include <evl/tick.h>
+#include <evl/poll.h>
+#include <evl/thread.h>
+#include <evl/factory.h>
+#include <evl/control.h>
+#include <evl/file.h>
+#include <evl/irq.h>
+#include <asm/evl/syscall.h>
+#include <uapi/evl/clock.h>
+#include <trace/events/evl.h>
+
+static const struct file_operations clock_fops;
+
+static LIST_HEAD(clock_list);
+
+static DEFINE_MUTEX(clocklist_lock);
+
+/* timer base locked */
+static void adjust_timer(struct evl_clock *clock,
+			struct evl_timer *timer, struct evl_tqueue *q,
+			ktime_t delta)
+{
+	ktime_t period, diff;
+	s64 div;
+
+	/* Apply the new offset from the master base. */
+	evl_tdate(timer) = ktime_sub(evl_tdate(timer), delta);
+
+	if (!evl_timer_is_periodic(timer))
+		goto enqueue;
+
+	timer->start_date = ktime_sub(timer->start_date, delta);
+	period = timer->interval;
+	diff = ktime_sub(evl_read_clock(clock), evl_get_timer_expiry(timer));
+
+	if (diff >= period) {
+		/*
+		 * Timer should tick several times before now, instead
+		 * of calling timer->handler several times, we change
+		 * the timer date without changing its pexpect, so
+		 * that timer will tick only once and the lost ticks
+		 * will be counted as overruns.
+		 */
+		div = ktime_divns(diff, ktime_to_ns(period));
+		timer->periodic_ticks += div;
+		evl_update_timer_date(timer);
+	} else if (ktime_to_ns(delta) < 0
+		&& (timer->status & EVL_TIMER_FIRED)
+		&& ktime_to_ns(ktime_add(diff, period)) <= 0) {
+		/*
+		 * Timer is periodic and NOT waiting for its first
+		 * shot, so we make it tick sooner than its original
+		 * date in order to avoid the case where by adjusting
+		 * time to a sooner date, real-time periodic timers do
+		 * not tick until the original date has passed.
+		 */
+		div = ktime_divns(-diff, ktime_to_ns(period));
+		timer->periodic_ticks -= div;
+		timer->pexpect_ticks -= div;
+		evl_update_timer_date(timer);
+	}
+
+enqueue:
+	evl_enqueue_timer(timer, q);
+}
+
+void evl_adjust_timers(struct evl_clock *clock, ktime_t delta)
+{
+	struct evl_timer *timer, *tmp;
+	struct evl_timerbase *tmb;
+	struct evl_tqueue *tq;
+	struct evl_tnode *tn;
+	struct list_head adjq;
+	struct evl_rq *rq;
+	unsigned long flags;
+	int cpu;
+
+	INIT_LIST_HEAD(&adjq);
+
+	for_each_online_cpu(cpu) {
+		rq = evl_cpu_rq(cpu);
+		tmb = evl_percpu_timers(clock, cpu);
+		tq = &tmb->q;
+		raw_spin_lock_irqsave(&tmb->lock, flags);
+
+		for_each_evl_tnode(tn, tq) {
+			timer = container_of(tn, struct evl_timer, node);
+			if (timer->clock == clock)
+				list_add_tail(&timer->adjlink, &adjq);
+		}
+
+		if (list_empty(&adjq))
+			goto next;
+
+		list_for_each_entry_safe(timer, tmp, &adjq, adjlink) {
+			list_del(&timer->adjlink);
+			evl_dequeue_timer(timer, tq);
+			adjust_timer(clock, timer, tq, delta);
+		}
+
+		if (rq != this_evl_rq())
+			evl_program_remote_tick(clock, rq);
+		else
+			evl_program_local_tick(clock);
+	next:
+		raw_spin_unlock_irqrestore(&tmb->lock, flags);
+	}
+}
+EXPORT_SYMBOL_GPL(evl_adjust_timers);
+
+void inband_clock_was_set(void)
+{
+	struct evl_clock *clock;
+
+	if (!evl_is_enabled())
+		return;
+
+	mutex_lock(&clocklist_lock);
+
+	list_for_each_entry(clock, &clock_list, next) {
+		if (clock->ops.adjust)
+			clock->ops.adjust(clock);
+	}
+
+	mutex_unlock(&clocklist_lock);
+}
+
+static int init_clock(struct evl_clock *clock,
+		struct evl_clock *master)
+{
+	int ret;
+
+	ret = evl_init_element(&clock->element, &evl_clock_factory);
+	if (ret)
+		return ret;
+
+	clock->master = master;
+
+	/*
+	 * Once the device appears in the filesystem, it has to be
+	 * usable. Make sure all inits have been completed before this
+	 * point.
+	 */
+	ret = evl_create_element_device(&clock->element,
+					&evl_clock_factory,
+					clock->name);
+	if (ret) {
+		evl_destroy_element(&clock->element);
+		return ret;
+	}
+
+	mutex_lock(&clocklist_lock);
+	list_add(&clock->next, &clock_list);
+	mutex_unlock(&clocklist_lock);
+
+	return 0;
+}
+
+int evl_init_clock(struct evl_clock *clock,
+		const struct cpumask *affinity)
+{
+	struct evl_timerbase *tmb;
+	int cpu, ret;
+
+	inband_context_only();
+
+	/*
+	 * A CPU affinity set may be defined for each clock,
+	 * enumerating the CPUs which can receive ticks from the
+	 * backing clock device.  When given, this set must be a
+	 * subset of the out-of-band CPU set. Otherwise, this is a
+	 * global device for which we pick a constant affinity based
+	 * on a known-to-be-always-valid CPU, i.e. the first OOB CPU
+	 * available.
+	 */
+#ifdef CONFIG_SMP
+	if (!affinity) {
+		cpumask_clear(&clock->affinity);
+		cpumask_set_cpu(cpumask_first(&evl_oob_cpus),
+				&clock->affinity);
+	} else {
+		cpumask_and(&clock->affinity, affinity, &evl_oob_cpus);
+		if (cpumask_empty(&clock->affinity))
+			return -EINVAL;
+	}
+#endif
+
+	clock->timerdata = alloc_percpu(struct evl_timerbase);
+	if (clock->timerdata == NULL)
+		return -ENOMEM;
+
+	/*
+	 * POLA: init all timer slots for the new clock, although some
+	 * of them might remain unused depending on the CPU affinity
+	 * of the event source(s). If the clock device is global
+	 * without any particular IRQ affinity, all timers will be
+	 * queued to the first OOB CPU.
+	 */
+	for_each_online_cpu(cpu) {
+		tmb = evl_percpu_timers(clock, cpu);
+		evl_init_tqueue(&tmb->q);
+		raw_spin_lock_init(&tmb->lock);
+	}
+
+	clock->offset = 0;
+
+	ret = init_clock(clock, clock);
+	if (ret)
+		goto fail;
+
+	return 0;
+
+fail:
+	for_each_online_cpu(cpu) {
+		tmb = evl_percpu_timers(clock, cpu);
+		evl_destroy_tqueue(&tmb->q);
+	}
+
+	free_percpu(clock->timerdata);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_init_clock);
+
+int evl_init_slave_clock(struct evl_clock *clock,
+			struct evl_clock *master)
+{
+	inband_context_only();
+
+	/* A slave clock shares its master's device. */
+#ifdef CONFIG_SMP
+	clock->affinity = master->affinity;
+#endif
+	clock->timerdata = master->timerdata;
+	clock->offset = evl_read_clock(clock) -
+		evl_read_clock(master);
+	init_clock(clock, master);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_init_slave_clock);
+
+static inline bool timer_needs_enqueuing(struct evl_timer *timer)
+{
+	/*
+	 * True for periodic timers which have not been requeued,
+	 * stopped or killed, false otherwise.
+	 */
+	return (timer->status &
+		(EVL_TIMER_PERIODIC|EVL_TIMER_DEQUEUED|
+			EVL_TIMER_RUNNING|EVL_TIMER_KILLED))
+		== (EVL_TIMER_PERIODIC|EVL_TIMER_DEQUEUED|
+			EVL_TIMER_RUNNING);
+}
+
+/* hard irqs off */
+static void do_clock_tick(struct evl_clock *clock, struct evl_timerbase *tmb)
+{
+	struct evl_rq *rq = this_evl_rq();
+	struct evl_timer *timer;
+	struct evl_tqueue *tq;
+	struct evl_tnode *tn;
+	ktime_t now;
+
+	if (EVL_WARN_ON_ONCE(CORE, !hard_irqs_disabled()))
+		hard_local_irq_disable();
+
+	tq = &tmb->q;
+	raw_spin_lock(&tmb->lock);
+
+	/*
+	 * Optimisation: any local timer reprogramming triggered by
+	 * invoked timer handlers can wait until we leave this tick
+	 * handler. This is a hint for the program_local_shot()
+	 * handler of the ticking clock.
+	 */
+	rq->local_flags |= RQ_TIMER;
+
+	now = evl_read_clock(clock);
+	while ((tn = evl_get_tqueue_head(tq)) != NULL) {
+		timer = container_of(tn, struct evl_timer, node);
+		if (now < evl_tdate(timer))
+			break;
+
+		trace_evl_timer_expire(timer);
+		evl_dequeue_timer(timer, tq);
+		evl_account_timer_fired(timer);
+		timer->status |= EVL_TIMER_FIRED;
+
+		/*
+		 * Propagating the proxy tick to the inband stage is a
+		 * low priority task: postpone this until the very end
+		 * of the core tick interrupt.
+		 */
+		if (unlikely(timer == &rq->inband_timer)) {
+			rq->local_flags |= RQ_TPROXY;
+			rq->local_flags &= ~RQ_TDEFER;
+			continue;
+		}
+
+		raw_spin_unlock(&tmb->lock);
+		timer->handler(timer);
+		now = evl_read_clock(clock);
+		raw_spin_lock(&tmb->lock);
+
+		if (timer_needs_enqueuing(timer)) {
+			do {
+				timer->periodic_ticks++;
+				evl_update_timer_date(timer);
+			} while (evl_tdate(timer) < now);
+			if (likely(evl_timer_on_rq(timer, rq)))
+				evl_enqueue_timer(timer, tq);
+		}
+	}
+
+	rq->local_flags &= ~RQ_TIMER;
+
+	evl_program_local_tick(clock);
+
+	raw_spin_unlock(&tmb->lock);
+}
+
+void evl_core_tick(struct clock_event_device *dummy) /* hard irqs off */
+{
+	struct evl_rq *this_rq = this_evl_rq();
+	struct evl_timerbase *tmb;
+
+	if (EVL_WARN_ON_ONCE(CORE, !is_evl_cpu(evl_rq_cpu(this_rq))))
+		return;
+
+	tmb = evl_this_cpu_timers(&evl_mono_clock);
+	do_clock_tick(&evl_mono_clock, tmb);
+
+	/*
+	 * If an EVL thread was preempted by this clock event, any
+	 * transition to the in-band context will cause a pending
+	 * in-band tick to be propagated by evl_schedule() called from
+	 * evl_exit_irq(), so we may have to propagate the in-band
+	 * tick immediately only if the in-band context was preempted.
+	 */
+	if ((this_rq->local_flags & RQ_TPROXY) && (this_rq->curr->state & T_ROOT))
+		evl_notify_proxy_tick(this_rq);
+}
+
+void evl_announce_tick(struct evl_clock *clock) /* hard irqs off */
+{
+	struct evl_timerbase *tmb;
+
+#ifdef CONFIG_SMP
+	/*
+	 * Some external clock devices may tick on any CPU, expect the
+	 * timers to be be queued to the first legit CPU for them
+	 * (i.e. global devices with no affinity).
+	 */
+	if (!cpumask_test_cpu(evl_rq_cpu(this_evl_rq()), &clock->affinity))
+		tmb = evl_percpu_timers(clock, cpumask_first(&clock->affinity));
+	else
+#endif
+		tmb = evl_this_cpu_timers(clock);
+
+	do_clock_tick(clock, tmb);
+}
+EXPORT_SYMBOL_GPL(evl_announce_tick);
+
+void evl_stop_timers(struct evl_clock *clock)
+{
+	struct evl_timerbase *tmb;
+	struct evl_timer *timer;
+	struct evl_tqueue *tq;
+	struct evl_tnode *tn;
+	unsigned long flags;
+	int cpu;
+
+	/* Deactivate all outstanding timers on the clock. */
+
+	for_each_evl_cpu(cpu) {
+		tmb = evl_percpu_timers(clock, cpu);
+		raw_spin_lock_irqsave(&tmb->lock, flags);
+		tq = &tmb->q;
+		while (!evl_tqueue_is_empty(tq)) {
+			tn = evl_get_tqueue_head(tq);
+			timer = container_of(tn, struct evl_timer, node);
+			if (EVL_WARN_ON(CORE, timer->status & EVL_TIMER_DEQUEUED))
+				continue;
+			evl_timer_deactivate(timer);
+		}
+		raw_spin_unlock_irqrestore(&tmb->lock, flags);
+	}
+}
+
+int evl_register_clock(struct evl_clock *clock,
+		const struct cpumask *affinity)
+{
+	int ret;
+
+	inband_context_only();
+
+	ret = evl_init_clock(clock, affinity);
+	if (ret)
+		return ret;
+
+	trace_evl_register_clock(clock->name);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_register_clock);
+
+void evl_unregister_clock(struct evl_clock *clock)
+{
+	inband_context_only();
+
+	trace_evl_unregister_clock(clock->name);
+	evl_put_element(&clock->element);
+}
+EXPORT_SYMBOL_GPL(evl_unregister_clock);
+
+struct evl_clock *evl_get_clock_by_fd(int efd)
+{
+	struct evl_clock *clock = NULL;
+	struct evl_file *efilp;
+
+	switch (efd) {
+	case EVL_CLOCK_MONOTONIC:
+		clock = &evl_mono_clock;
+		evl_get_element(&clock->element);
+		break;
+	case EVL_CLOCK_REALTIME:
+		clock = &evl_realtime_clock;
+		evl_get_element(&clock->element);
+		break;
+	default:
+		efilp = evl_get_file(efd);
+		if (efilp && efilp->filp->f_op == &clock_fops) {
+			clock = element_of(efilp->filp, struct evl_clock);
+			evl_get_element(&clock->element);
+			evl_put_file(efilp);
+		}
+	}
+
+	return clock;
+}
+EXPORT_SYMBOL_GPL(evl_get_clock_by_fd);
+
+static long restart_clock_sleep(struct restart_block *param)
+{
+	return -EINVAL;
+}
+
+static int clock_sleep(struct evl_clock *clock,
+		struct evl_clock_sleepreq __user *u_req)
+{
+	struct evl_clock_sleepreq req = {
+		.timeout = {
+			.tv_sec = 0, .tv_nsec = 0
+		},
+	};
+	struct evl_thread *curr = evl_current();
+	struct restart_block *restart;
+	ktime_t timeout, rem;
+	int ret;
+
+	ret = raw_copy_from_user(&req, u_req, sizeof(req));
+	if (ret)
+		return -EFAULT;
+
+	if (req.timeout.tv_sec < 0)
+		return -EINVAL;
+
+	if ((unsigned long)req.timeout.tv_nsec >= ONE_BILLION)
+		return -EINVAL;
+
+	if (curr->local_info & T_SYSRST) {
+		curr->local_info &= ~T_SYSRST;
+		restart = &current->restart_block;
+		if (restart->fn != restart_clock_sleep)
+			return -EINTR;
+		timeout = restart->nanosleep.expires;
+	} else
+		timeout = timespec_to_ktime(req.timeout);
+
+	rem = evl_delay_thread(timeout, EVL_ABS, clock);
+	if (!rem)
+		return 0;
+
+	if (signal_pending(current)) {
+		restart = &current->restart_block;
+		restart->nanosleep.expires = timeout;
+		restart->fn = restart_clock_sleep;
+		curr->local_info |= T_SYSRST;
+		return -ERESTARTSYS;
+	}
+
+	return -EINTR;
+}
+
+static int get_clock_resolution(struct evl_clock *clock,
+				struct timespec __user *u_res)
+{
+	struct timespec res;
+
+	res = ktime_to_timespec(evl_get_clock_resolution(clock));
+
+	trace_evl_clock_getres(clock, &res);
+
+	return raw_copy_to_user(u_res, &res, sizeof(res)) ? -EFAULT : 0;
+}
+
+static int get_clock_time(struct evl_clock *clock,
+			struct timespec __user *u_ts)
+{
+	struct timespec ts;
+
+	ts = ktime_to_timespec(evl_read_clock(clock));
+
+	trace_evl_clock_gettime(clock, &ts);
+
+	return raw_copy_to_user(u_ts, &ts, sizeof(ts)) ? -EFAULT : 0;
+}
+
+static int set_clock_time(struct evl_clock *clock,
+			struct timespec __user *u_ts)
+{
+	struct timespec ts;
+	int ret;
+
+	ret = raw_copy_from_user(&ts, u_ts, sizeof(ts));
+	if (ret)
+		return -EFAULT;
+
+	if ((unsigned long)ts.tv_nsec >= ONE_BILLION)
+		return -EINVAL;
+
+	trace_evl_clock_settime(clock, &ts);
+
+	return evl_set_clock_time(clock, &ts);
+}
+
+static int adjust_clock_time(struct evl_clock *clock,
+			struct timex __user *u_tx)
+{
+	struct timex tx;
+	int ret;
+
+	ret = raw_copy_from_user(&tx, u_tx, sizeof(tx));
+	if (ret)
+		return -EFAULT;
+
+	return evl_clock_adjust_time(clock, &tx);
+}
+
+static void get_timer_value(struct evl_timer *__restrict__ timer,
+			struct itimerspec *__restrict__ value)
+{
+	value->it_interval = ktime_to_timespec(timer->interval);
+
+	if (!evl_timer_is_running(timer)) {
+		value->it_value.tv_sec = 0;
+		value->it_value.tv_nsec = 0;
+	} else
+		value->it_value =
+			ktime_to_timespec(evl_get_timer_delta(timer));
+}
+
+static int set_timer_value(struct evl_timer *__restrict__ timer,
+			const struct itimerspec *__restrict__ value)
+{
+	ktime_t start, period;
+
+	if (value->it_value.tv_nsec == 0 && value->it_value.tv_sec == 0) {
+		evl_stop_timer(timer);
+		return 0;
+	}
+
+	if ((unsigned long)value->it_value.tv_nsec >= ONE_BILLION ||
+		((unsigned long)value->it_interval.tv_nsec >= ONE_BILLION &&
+			(value->it_value.tv_sec != 0 ||
+				value->it_value.tv_nsec != 0)))
+		return -EINVAL;
+
+	period = timespec_to_ktime(value->it_interval);
+	start = timespec_to_ktime(value->it_value);
+	evl_start_timer(timer, start, period);
+
+	return 0;
+}
+
+struct evl_timerfd {
+	struct evl_timer timer;
+	struct evl_wait_queue readers;
+	struct evl_poll_head poll_head;
+	struct evl_file efile;
+	bool ticked;
+};
+
+#ifdef CONFIG_SMP
+
+/* Pin @timer to the current thread rq. */
+static void pin_timer(struct evl_timer *timer)
+{
+	unsigned long flags = oob_irq_save();
+	struct evl_rq *this_rq = evl_current_rq();
+
+	if (this_rq != timer->rq)
+		evl_move_timer(timer, timer->clock, this_rq);
+
+	oob_irq_restore(flags);
+}
+
+#else
+
+static inline void pin_timer(struct evl_timer *timer)
+{ }
+
+#endif
+
+static int set_timerfd(struct evl_timerfd *timerfd,
+		const struct itimerspec *__restrict__ value,
+		struct itimerspec *__restrict__ ovalue)
+{
+	get_timer_value(&timerfd->timer, ovalue);
+	pin_timer(&timerfd->timer);
+
+	return set_timer_value(&timerfd->timer, value);
+}
+
+static void timerfd_handler(struct evl_timer *timer) /* hard IRQs off */
+{
+	struct evl_timerfd *timerfd;
+
+	timerfd = container_of(timer, struct evl_timerfd, timer);
+	timerfd->ticked = true;
+	evl_signal_poll_events(&timerfd->poll_head, POLLIN|POLLRDNORM);
+	evl_flush_wait(&timerfd->readers, 0);
+}
+
+static bool read_timerfd_event(struct evl_timerfd *timerfd)
+{
+	if (timerfd->ticked) {
+		timerfd->ticked = false;
+		return true;
+	}
+
+	return false;
+}
+
+static long timerfd_common_ioctl(struct file *filp,
+				unsigned int cmd, unsigned long arg)
+{
+	struct evl_timerfd *timerfd = filp->private_data;
+	struct evl_timerfd_setreq sreq, __user *u_sreq;
+	struct evl_timerfd_getreq greq, __user *u_greq;
+	struct itimerspec value, ovalue;
+	long ret = 0;
+
+	switch (cmd) {
+	case EVL_TFDIOC_SET:
+		u_sreq = (typeof(u_sreq))arg;
+		sreq.ovalue = NULL;
+		ret = raw_copy_from_user(&sreq, u_sreq, sizeof(sreq));
+		if (ret)
+			return -EFAULT;
+		ret = raw_copy_from_user(&value, sreq.value, sizeof(value));
+		if (ret)
+			return -EFAULT;
+		ret = set_timerfd(timerfd, &value, &ovalue);
+		if (ret)
+			return ret;
+		if (sreq.ovalue &&
+			raw_copy_to_user(sreq.ovalue, &ovalue, sizeof(ovalue)))
+			return -EFAULT;
+		break;
+	case EVL_TFDIOC_GET:
+		u_greq = (typeof(u_greq))arg;
+		ret = raw_copy_from_user(&greq, u_greq, sizeof(greq));
+		if (ret)
+			return -EFAULT;
+		get_timer_value(&timerfd->timer, &value);
+		if (raw_copy_to_user(greq.value, &value, sizeof(value)))
+			return -EFAULT;
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static ssize_t timerfd_oob_read(struct file *filp,
+				char __user *u_buf, size_t count)
+{
+	__u64 __user *u_ticks = (__u64 __user *)u_buf, ticks = 0;
+	struct evl_timerfd *timerfd = filp->private_data;
+	ktime_t timeout = EVL_INFINITE;
+	int ret;
+
+	if (count < sizeof(ticks))
+		return -EINVAL;
+
+	if (filp->f_flags & O_NONBLOCK)
+		timeout = EVL_NONBLOCK;
+
+	ret = evl_wait_event_timeout(&timerfd->readers, timeout,
+			EVL_REL, read_timerfd_event(timerfd));
+	if (ret)
+		return ret;
+
+	ticks = 1;
+	if (evl_timer_is_periodic(&timerfd->timer))
+		ticks += evl_get_timer_overruns(&timerfd->timer);
+
+	if (raw_put_user(ticks, u_ticks))
+		return -EFAULT;
+
+	return sizeof(ticks);
+}
+
+static __poll_t timerfd_oob_poll(struct file *filp,
+				struct oob_poll_wait *wait)
+{
+	struct evl_timerfd *timerfd = filp->private_data;
+
+	evl_poll_watch(&timerfd->poll_head, wait, NULL);
+
+	return timerfd->ticked ? POLLIN|POLLRDNORM : 0;
+}
+
+static int timerfd_release(struct inode *inode, struct file *filp)
+{
+	struct evl_timerfd *timerfd = filp->private_data;
+
+	evl_stop_timer(&timerfd->timer);
+	evl_flush_wait(&timerfd->readers, T_RMID);
+	evl_release_file(&timerfd->efile);
+	evl_put_element(&timerfd->timer.clock->element);
+	kfree(timerfd);
+
+	return 0;
+}
+
+static const struct file_operations timerfd_fops = {
+	.release	= timerfd_release,
+	.oob_ioctl	= timerfd_common_ioctl,
+	.oob_read	= timerfd_oob_read,
+	.oob_poll	= timerfd_oob_poll,
+	.unlocked_ioctl	= timerfd_common_ioctl,
+};
+
+static int new_timerfd(struct evl_clock *clock)
+{
+	struct evl_timerfd *timerfd;
+	struct file *filp;
+	int ret, fd;
+
+	timerfd = kzalloc(sizeof(*timerfd), GFP_KERNEL);
+	if (timerfd == NULL)
+		return -ENOMEM;
+
+	filp = anon_inode_getfile("[evl-timerfd]", &timerfd_fops,
+				timerfd, O_RDWR|O_CLOEXEC);
+	if (IS_ERR(filp)) {
+		kfree(timerfd);
+		return PTR_ERR(filp);
+	}
+
+	/*
+	 * From that point, timerfd_release() might be called for
+	 * cleaning up on error via filp_close(). So initialize
+	 * everything we need for a graceful cleanup.
+	 */
+	evl_get_element(&clock->element);
+	evl_init_timer_on_rq(&timerfd->timer, clock, timerfd_handler,
+			NULL, EVL_TIMER_UGRAVITY);
+	evl_init_wait(&timerfd->readers, clock, EVL_WAIT_PRIO);
+	evl_init_poll_head(&timerfd->poll_head);
+
+	ret = evl_open_file(&timerfd->efile, filp);
+	if (ret)
+		goto fail_open;
+
+	fd = get_unused_fd_flags(O_RDWR|O_CLOEXEC);
+	if (fd < 0) {
+		ret = fd;
+		goto fail_getfd;
+	}
+
+	fd_install(fd, filp);
+
+	return fd;
+
+fail_getfd:
+	evl_release_file(&timerfd->efile);
+fail_open:
+	filp_close(filp, current->files);
+
+	return ret;
+}
+
+static long clock_common_ioctl(struct evl_clock *clock,
+			unsigned int cmd, unsigned long arg)
+{
+	int ret;
+
+	switch (cmd) {
+	case EVL_CLKIOC_GET_RES:
+		ret = get_clock_resolution(clock,
+					(struct timespec __user *)arg);
+		break;
+	case EVL_CLKIOC_GET_TIME:
+		ret = get_clock_time(clock,
+				(struct timespec __user *)arg);
+		break;
+	case EVL_CLKIOC_SET_TIME:
+		ret = set_clock_time(clock,
+				(struct timespec __user *)arg);
+		break;
+	case EVL_CLKIOC_ADJ_TIME:
+		ret = adjust_clock_time(clock,
+					(struct timex __user *)arg);
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static long clock_oob_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_clock *clock = element_of(filp, struct evl_clock);
+	int ret;
+
+	switch (cmd) {
+	case EVL_CLKIOC_SLEEP:
+		ret = clock_sleep(clock,
+				(struct evl_clock_sleepreq __user *)arg);
+		break;
+	default:
+		ret = clock_common_ioctl(clock, cmd, arg);
+	}
+
+	return ret;
+}
+
+static long clock_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_clock *clock = element_of(filp, struct evl_clock);
+	int __user *u_fd;
+	int ret;
+
+	switch (cmd) {
+	case EVL_CLKIOC_NEW_TIMER:
+		ret = new_timerfd(clock);
+		if (ret >= 0) {
+			u_fd = (typeof(u_fd))arg;
+			ret = put_user(ret, u_fd);
+		}
+		break;
+	default:
+		ret = clock_common_ioctl(clock, cmd, arg);
+	}
+
+	return ret;
+}
+
+static const struct file_operations clock_fops = {
+	.open		= evl_open_element,
+	.release	= evl_release_element,
+	.unlocked_ioctl	= clock_ioctl,
+	.oob_ioctl	= clock_oob_ioctl,
+};
+
+/*
+ * Once created, a clock must be deleted by dropping the last
+ * reference to it via a call to evl_put_element(), so that we
+ * remove the factory device and properly synchronize. No direct call
+ * to destroy_clock() except from the element disposal routine,
+ * please.
+ */
+static void destroy_clock(struct evl_clock *clock)
+{
+	struct evl_timerbase *tmb;
+	int cpu;
+
+	inband_context_only();
+
+	/*
+	 * Slave clocks use the timer queues from their master.
+	 */
+	if (clock->master != clock)
+		return;
+
+	for_each_online_cpu(cpu) {
+		tmb = evl_percpu_timers(clock, cpu);
+		EVL_WARN_ON(CORE, !evl_tqueue_is_empty(&tmb->q));
+		evl_destroy_tqueue(&tmb->q);
+	}
+
+	free_percpu(clock->timerdata);
+	mutex_lock(&clocklist_lock);
+	list_del(&clock->next);
+	mutex_unlock(&clocklist_lock);
+
+	evl_destroy_element(&clock->element);
+
+	if (clock->dispose)
+		clock->dispose(clock);
+}
+
+static void clock_factory_dispose(struct evl_element *e)
+{
+	struct evl_clock *clock;
+
+	clock = container_of(e, struct evl_clock, element);
+	destroy_clock(clock);
+}
+
+static ssize_t gravity_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_clock *clock;
+	ssize_t ret;
+
+	clock = evl_get_element_by_dev(dev, struct evl_clock);
+	ret = snprintf(buf, PAGE_SIZE, "%Ldi %Ldk %Ldu\n",
+		ktime_to_ns(evl_get_clock_gravity(clock, irq)),
+		ktime_to_ns(evl_get_clock_gravity(clock, kernel)),
+		ktime_to_ns(evl_get_clock_gravity(clock, user)));
+	evl_put_element(&clock->element);
+
+	return ret;
+}
+
+static ssize_t gravity_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	struct evl_clock_gravity gravity;
+	struct evl_clock *clock;
+	char *dups, *args, *p;
+	ssize_t ret;
+	long ns;
+
+	if (!*buf)
+		return 0;
+
+	dups = args = kstrdup(buf, GFP_KERNEL);
+
+	clock = evl_get_element_by_dev(dev, struct evl_clock);
+
+	gravity = clock->gravity;
+
+	while ((p = strsep(&args, " \t:/,")) != NULL) {
+		if (*p == '\0')
+			continue;
+		ns = simple_strtol(p, &p, 10);
+		switch (*p) {
+		case 'i':
+			gravity.irq = ns;
+			break;
+		case 'k':
+			gravity.kernel = ns;
+			break;
+		case 'u':
+		case '\0':
+			gravity.user = ns;
+			break;
+		default:
+			ret = -EINVAL;
+			goto out;
+		}
+	}
+
+	ret = evl_set_clock_gravity(clock, &gravity) ?: count;
+out:
+	evl_put_element(&clock->element);
+
+	kfree(dups);
+
+	return ret;
+}
+
+static DEVICE_ATTR_RW(gravity);
+
+static struct attribute *clock_attrs[] = {
+	&dev_attr_gravity.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(clock);
+
+struct evl_factory evl_clock_factory = {
+	.name	=	EVL_CLOCK_DEV,
+	.fops	=	&clock_fops,
+	.nrdev	=	CONFIG_EVL_NR_CLOCKS,
+	.attrs	=	clock_groups,
+	.dispose =	clock_factory_dispose,
+};
+
+static int set_coreclk_gravity(struct evl_clock *clock,
+			const struct evl_clock_gravity *p)
+{
+	clock->gravity = *p;
+
+	return 0;
+}
+
+static void get_default_gravity(struct evl_clock_gravity *p)
+{
+	unsigned int ulat = 3000; /* ns, decent default. */
+
+#if CONFIG_EVL_LATENCY_USER != 0
+	ulat = CONFIG_XENO_OPT_TIMING_SCHEDLAT;
+#endif
+	p->user = ulat;
+	p->kernel = CONFIG_EVL_LATENCY_KERNEL;
+	p->irq = CONFIG_EVL_LATENCY_IRQ;
+}
+
+static void reset_coreclk_gravity(struct evl_clock *clock)
+{
+	struct evl_clock_gravity gravity;
+
+	get_default_gravity(&gravity);
+
+	if (gravity.kernel == 0)
+		gravity.kernel = gravity.user;
+
+	set_coreclk_gravity(clock, &gravity);
+}
+
+static ktime_t read_mono_clock(struct evl_clock *clock)
+{
+	return evl_ktime_monotonic();
+}
+
+static u64 read_mono_clock_cycles(struct evl_clock *clock)
+{
+	return read_mono_clock(clock);
+}
+
+static ktime_t read_realtime_clock(struct evl_clock *clock)
+{
+	return ktime_get_real_fast();
+}
+
+static u64 read_realtime_clock_cycles(struct evl_clock *clock)
+{
+	return read_realtime_clock(clock);
+}
+
+static void adjust_realtime_clock(struct evl_clock *clock)
+{
+	ktime_t old_offset = clock->offset;
+
+	clock->offset = evl_read_clock(clock) -
+		evl_read_clock(&evl_mono_clock);
+
+	evl_adjust_timers(clock, clock->offset - old_offset);
+}
+
+struct evl_clock evl_mono_clock = {
+	.name = EVL_CLOCK_MONOTONIC_DEV,
+	.resolution = 1,	/* nanosecond. */
+	.ops = {
+		.read = read_mono_clock,
+		.read_cycles = read_mono_clock_cycles,
+		.program_local_shot = evl_program_proxy_tick,
+#ifdef CONFIG_SMP
+		.program_remote_shot = evl_send_timer_ipi,
+#endif
+		.set_gravity = set_coreclk_gravity,
+		.reset_gravity = reset_coreclk_gravity,
+	},
+};
+EXPORT_SYMBOL_GPL(evl_mono_clock);
+
+struct evl_clock evl_realtime_clock = {
+	.name = EVL_CLOCK_REALTIME_DEV,
+	.resolution = 1,	/* nanosecond. */
+	.ops = {
+		.read = read_realtime_clock,
+		.read_cycles = read_realtime_clock_cycles,
+		.set_gravity = set_coreclk_gravity,
+		.reset_gravity = reset_coreclk_gravity,
+		.adjust = adjust_realtime_clock,
+	},
+};
+EXPORT_SYMBOL_GPL(evl_realtime_clock);
+
+int __init evl_clock_init(void)
+{
+	int ret;
+
+	evl_reset_clock_gravity(&evl_mono_clock);
+	evl_reset_clock_gravity(&evl_realtime_clock);
+
+	ret = evl_init_clock(&evl_mono_clock, &evl_oob_cpus);
+	if (ret)
+		return ret;
+
+	ret = evl_init_slave_clock(&evl_realtime_clock,
+				&evl_mono_clock);
+	if (ret)
+		evl_put_element(&evl_mono_clock.element);
+
+	return ret;
+}
+
+void __init evl_clock_cleanup(void)
+{
+	evl_put_element(&evl_realtime_clock.element);
+	evl_put_element(&evl_mono_clock.element);
+}
diff --git a/kernel/evl/control.c b/kernel/evl/control.c
new file mode 100644
index 000000000000..0c0642716a6d
--- /dev/null
+++ b/kernel/evl/control.c
@@ -0,0 +1,419 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/mm.h>
+#include <linux/sched/isolation.h>
+#include <evl/memory.h>
+#include <evl/thread.h>
+#include <evl/factory.h>
+#include <evl/tick.h>
+#include <evl/sched.h>
+#include <evl/control.h>
+#include <asm/evl/syscall.h>
+#include <asm/evl/fptest.h>
+#include <uapi/evl/control.h>
+
+static BLOCKING_NOTIFIER_HEAD(state_notifier_list);
+
+atomic_t evl_runstate = ATOMIC_INIT(EVL_STATE_WARMUP);
+EXPORT_SYMBOL_GPL(evl_runstate);
+
+void evl_add_state_chain(struct notifier_block *nb)
+{
+	blocking_notifier_chain_register(&state_notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(evl_add_state_chain);
+
+void evl_remove_state_chain(struct notifier_block *nb)
+{
+	blocking_notifier_chain_unregister(&state_notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(evl_remove_state_chain);
+
+static inline void call_state_chain(enum evl_run_states newstate)
+{
+	blocking_notifier_call_chain(&state_notifier_list, newstate, NULL);
+}
+
+static int start_services(void)
+{
+	enum evl_run_states state;
+	int ret = 0;
+
+	state = atomic_cmpxchg(&evl_runstate,
+			EVL_STATE_STOPPED,
+			EVL_STATE_WARMUP);
+	switch (state) {
+	case EVL_STATE_RUNNING:
+		break;
+	case EVL_STATE_STOPPED:
+		ret = evl_enable_tick();
+		if (ret) {
+			atomic_set(&evl_runstate, EVL_STATE_STOPPED);
+			return ret;
+		}
+		call_state_chain(EVL_STATE_WARMUP);
+		set_evl_state(EVL_STATE_RUNNING);
+		printk(EVL_INFO "core started\n");
+		break;
+	default:
+		ret = -EINPROGRESS;
+	}
+
+	return ret;
+}
+
+static int stop_services(void)
+{
+	enum evl_run_states state;
+	int ret = 0;
+
+	state = atomic_cmpxchg(&evl_runstate,
+			EVL_STATE_RUNNING,
+			EVL_STATE_TEARDOWN);
+	switch (state) {
+	case EVL_STATE_STOPPED:
+		break;
+	case EVL_STATE_RUNNING:
+		ret = evl_killall(T_USER);
+		if (ret) {
+			set_evl_state(state);
+			return ret;
+		}
+		call_state_chain(EVL_STATE_TEARDOWN);
+		ret = evl_killall(0);
+		evl_disable_tick();
+		set_evl_state(EVL_STATE_STOPPED);
+		printk(EVL_INFO "core stopped\n");
+		break;
+	default:
+		ret = -EINPROGRESS;
+	}
+
+	return ret;
+}
+
+#ifdef CONFIG_EVL_SCHED_QUOTA
+
+static int do_quota_control(struct evl_sched_ctlreq *ctl)
+{
+	union evl_sched_ctlparam param, __user *u_ctlp;
+	union evl_sched_ctlinfo info, __user *u_infp;
+	int ret;
+
+	u_ctlp = (typeof(u_ctlp))ctl->param;
+	ret = raw_copy_from_user(&param.quota, &u_ctlp->quota,
+				sizeof(param.quota));
+	if (ret)
+		return -EFAULT;
+
+	ret = evl_sched_quota.sched_control(ctl->cpu, &param, &info);
+	if (ret || ctl->info == NULL)
+		return ret;
+
+	u_infp = (typeof(u_infp))ctl->info;
+	ret = raw_copy_to_user(&u_infp->quota, &info.quota,
+			sizeof(info.quota));
+	if (ret)
+		return -EFAULT;
+
+	return 0;
+}
+
+#else
+
+static int do_quota_control(struct evl_sched_ctlreq *ctl)
+{
+	return -EINVAL;
+}
+
+#endif
+
+#ifdef CONFIG_EVL_SCHED_TP
+
+static int do_tp_control(struct evl_sched_ctlreq *ctl)
+{
+	union evl_sched_ctlinfo *info = NULL, __user *u_infp;
+	union evl_sched_ctlparam param, __user *u_ctlp;
+	size_t len;
+	int ret;
+
+	u_ctlp = (typeof(u_ctlp))ctl->param;
+	ret = raw_copy_from_user(&param.tp, &u_ctlp->tp, sizeof(param.tp));
+	if (ret)
+		return -EFAULT;
+
+	if (ctl->info) {
+		/* Quick check to prevent creepy memalloc. */
+		if (param.tp.nr_windows > CONFIG_EVL_SCHED_TP_NR_PART)
+			return -EINVAL;
+
+		len = evl_tp_paramlen(&param.tp);
+		info = evl_alloc(len);
+		if (info == NULL)
+			return -ENOMEM;
+	}
+
+	ret = evl_sched_tp.sched_control(ctl->cpu, &param, info);
+	if (ret || info == NULL)
+		goto out;
+
+	u_infp = (typeof(u_infp))ctl->info;
+	len = evl_tp_paramlen(&info->tp);
+	ret = raw_copy_to_user(&u_infp->tp, &info->tp, len);
+	if (ret)
+		ret = -EFAULT;
+out:
+	if (info)
+		evl_free(info);
+
+	return ret;
+}
+
+#else
+
+static int do_tp_control(struct evl_sched_ctlreq *ctl)
+{
+	return -EINVAL;
+}
+
+#endif
+
+static int do_sched_control(struct evl_sched_ctlreq *ctl)
+{
+	int ret;
+
+	switch (ctl->policy) {
+	case SCHED_QUOTA:
+		ret = do_quota_control(ctl);
+		break;
+	case SCHED_TP:
+		ret = do_tp_control(ctl);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	return ret;
+}
+
+static int do_cpu_state(struct evl_cpu_state *cpst)
+{
+	int cpu = cpst->cpu;
+	__u32 state = 0;
+
+	if (cpst->cpu >= num_possible_cpus() || !cpu_present(cpu))
+		return -EINVAL;
+
+	if (!cpu_online(cpu))
+		state |= EVL_CPU_OFFLINE;
+
+	if (is_evl_cpu(cpu))
+		state |= EVL_CPU_OOB;
+
+	if (!housekeeping_cpu(cpu, HK_FLAG_DOMAIN))
+		state |= EVL_CPU_ISOL;
+
+	return raw_copy_to_user(cpst->state, &state, sizeof(state)) ?
+		-EFAULT : 0;
+}
+
+static long control_common_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_cpu_state cpst = { .state = 0 }, __user *u_cpst;
+	struct evl_sched_ctlreq ctl, __user *u_ctl;
+	long ret;
+
+	switch (cmd) {
+	case EVL_CTLIOC_SCHEDCTL:
+		u_ctl = (typeof(u_ctl))arg;
+		ret = raw_copy_from_user(&ctl, u_ctl, sizeof(ctl));
+		if (ret)
+			return -EFAULT;
+		ret = do_sched_control(&ctl);
+		break;
+	case EVL_CTLIOC_GET_CPUSTATE:
+		u_cpst = (typeof(u_cpst))arg;
+		ret = raw_copy_from_user(&cpst, u_cpst, sizeof(cpst));
+		if (ret)
+			return -EFAULT;
+		ret = do_cpu_state(&cpst);
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static long control_oob_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	return control_common_ioctl(filp, cmd, arg);
+}
+
+static long control_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_core_info info;
+	long ret;
+
+	switch (cmd) {
+	case EVL_CTLIOC_GET_COREINFO:
+		info.abi_level = EVL_ABI_LEVEL;
+		info.fpu_features = evl_detect_fpu();
+		info.shm_size = evl_shm_size;
+		ret = raw_copy_to_user((struct evl_core_info __user *)arg,
+				&info, sizeof(info)) ? -EFAULT : 0;
+		break;
+	default:
+		ret = control_common_ioctl(filp, cmd, arg);
+	}
+
+	return ret;
+}
+
+static int control_mmap(struct file *filp, struct vm_area_struct *vma)
+{
+	void *p = evl_get_heap_base(&evl_shared_heap);
+	unsigned long pfn = __pa(p) >> PAGE_SHIFT;
+	size_t len = vma->vm_end - vma->vm_start;
+
+	if (len != evl_shm_size)
+		return -EINVAL;
+
+	return remap_pfn_range(vma, vma->vm_start, pfn, len, PAGE_SHARED);
+}
+
+static const struct file_operations control_fops = {
+	.oob_ioctl	=	control_oob_ioctl,
+	.unlocked_ioctl	=	control_ioctl,
+	.mmap		=	control_mmap,
+};
+
+static const char *state_labels[] = {
+	[EVL_STATE_DISABLED] = "disabled",
+	[EVL_STATE_RUNNING] = "running",
+	[EVL_STATE_STOPPED] = "stopped",
+	[EVL_STATE_TEARDOWN] = "teardown",
+	[EVL_STATE_WARMUP] = "warmup",
+};
+
+static ssize_t state_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	int st = atomic_read(&evl_runstate);
+
+	return snprintf(buf, PAGE_SIZE, "%s\n", state_labels[st]);
+}
+
+static ssize_t state_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	size_t len = count;
+
+	if (len && buf[len - 1] == '\n')
+		len--;
+
+	if (!strncmp(buf, "start", len))
+		return start_services() ?: count;
+
+	if (!strncmp(buf, "stop", len))
+		return stop_services() ?: count;
+
+	return -EINVAL;
+}
+static DEVICE_ATTR_RW(state);
+
+static ssize_t abi_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", EVL_ABI_LEVEL);
+}
+static DEVICE_ATTR_RO(abi);
+
+static ssize_t cpus_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	return scnprintf(buf, PAGE_SIZE, "%*pbl\n",
+			cpumask_pr_args(&evl_oob_cpus));
+}
+static DEVICE_ATTR_RO(cpus);
+
+#ifdef CONFIG_EVL_SCHED_QUOTA
+
+static ssize_t quota_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%Lu\n",
+			ktime_to_ns(evl_get_quota_period()));
+}
+
+static ssize_t quota_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
+{
+	unsigned long long period;
+	int ret;
+
+	ret = kstrtoull(buf, 10, &period);
+	if (ret < 0)
+		return -EINVAL;
+
+	/*
+	 * If the quota period is shorter than the monotonic clock
+	 * gravity for user-targeted timers, assume PEBKAC.
+	 */
+	if (period < evl_get_clock_gravity(&evl_mono_clock, user))
+		return -EINVAL;
+
+	evl_set_quota_period(ns_to_ktime(period));
+
+	return count;
+}
+static DEVICE_ATTR_RW(quota);
+
+#endif
+
+#ifdef CONFIG_EVL_SCHED_TP
+
+static ssize_t tp_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "%d\n", CONFIG_EVL_SCHED_TP_NR_PART);
+}
+static DEVICE_ATTR_RO(tp);
+
+#endif
+
+static struct attribute *control_attrs[] = {
+	&dev_attr_state.attr,
+	&dev_attr_abi.attr,
+	&dev_attr_cpus.attr,
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	&dev_attr_quota.attr,
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	&dev_attr_tp.attr,
+#endif
+	NULL,
+};
+ATTRIBUTE_GROUPS(control);
+
+struct evl_factory evl_control_factory = {
+	.name	=	"control",
+	.fops	=	&control_fops,
+	.attrs	=	control_groups,
+	.flags	=	EVL_FACTORY_SINGLE,
+};
diff --git a/kernel/evl/factory.c b/kernel/evl/factory.c
new file mode 100644
index 000000000000..632cfb3370ac
--- /dev/null
+++ b/kernel/evl/factory.c
@@ -0,0 +1,780 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/kernel.h>
+#include <linux/bitmap.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/module.h>
+#include <linux/rcupdate.h>
+#include <linux/uidgid.h>
+#include <linux/irq_work.h>
+#include <linux/uaccess.h>
+#include <linux/hashtable.h>
+#include <linux/stringhash.h>
+#include <evl/assert.h>
+#include <evl/file.h>
+#include <evl/control.h>
+#include <evl/syscall.h>
+#include <evl/factory.h>
+#include <uapi/evl/factory.h>
+
+static struct class *evl_class;
+
+static struct evl_factory *early_factories[] = {
+	&evl_clock_factory,
+};
+
+static struct evl_factory *factories[] = {
+	&evl_control_factory,
+	&evl_thread_factory,
+	&evl_monitor_factory,
+	&evl_poll_factory,
+	&evl_xbuf_factory,
+	&evl_proxy_factory,
+#ifdef CONFIG_FTRACE
+	&evl_trace_factory,
+#endif
+};
+
+#define NR_FACTORIES	\
+	(ARRAY_SIZE(early_factories) + ARRAY_SIZE(factories))
+
+static dev_t factory_rdev;
+
+int evl_init_element(struct evl_element *e, struct evl_factory *fac)
+{
+	int minor;
+
+	do {
+		minor = find_first_zero_bit(fac->minor_map, fac->nrdev);
+		if (minor >= fac->nrdev) {
+			printk_ratelimited(EVL_WARNING "out of %ss",
+					fac->name);
+			return -EAGAIN;
+		}
+	} while (test_and_set_bit(minor, fac->minor_map));
+
+	e->factory = fac;
+	e->minor = minor;
+	e->refs = 1;
+	e->zombie = false;
+	e->fundle = EVL_NO_HANDLE;
+	e->devname = NULL;
+	raw_spin_lock_init(&e->ref_lock);
+
+	return 0;
+}
+
+void evl_destroy_element(struct evl_element *e)
+{
+	clear_bit(e->minor, e->factory->minor_map);
+	if (e->devname)
+		putname(e->devname);
+}
+
+void evl_get_element(struct evl_element *e)
+{
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&e->ref_lock, flags);
+	EVL_WARN_ON(CORE, e->refs == 0);
+	e->refs++;
+	raw_spin_unlock_irqrestore(&e->ref_lock, flags);
+}
+
+int evl_open_element(struct inode *inode, struct file *filp)
+{
+	struct evl_file_binding *fbind;
+	struct evl_element *e;
+	unsigned long flags;
+	int ret = 0;
+
+	e = container_of(inode->i_cdev, struct evl_element, cdev);
+
+	rcu_read_lock();
+
+	raw_spin_lock_irqsave(&e->ref_lock, flags);
+
+	if (e->zombie) {
+		ret = -ESTALE;
+	} else {
+		EVL_WARN_ON(CORE, e->refs == 0);
+		e->refs++;
+	}
+
+	raw_spin_unlock_irqrestore(&e->ref_lock, flags);
+
+	rcu_read_unlock();
+
+	if (ret)
+		return ret;
+
+	fbind = kmalloc(sizeof(*fbind), GFP_KERNEL);
+	if (fbind == NULL)
+		return -ENOMEM;
+
+	ret = evl_open_file(&fbind->efile, filp);
+	if (ret) {
+		kfree(fbind);
+		return ret;
+	}
+
+	fbind->element = e;
+	filp->private_data = fbind;
+
+	return 0;
+}
+
+static void __put_element(struct evl_element *e)
+{
+	struct evl_factory *fac = e->factory;
+
+	/*
+	 * e->minor won't be free for use until evl_destroy_element()
+	 * is called from the disposal handler, so there is no risk of
+	 * reusing it too early.
+	 */
+	evl_remove_element_device(e);
+	/*
+	 * Serialize with evl_open_element().
+	 */
+	synchronize_rcu();
+	/*
+	 * CAUTION: the disposal handler should delay the release of
+	 * e's container at the next rcu idle period via kfree_rcu(),
+	 * because the embedded e->cdev is still needed ahead for
+	 * completing the file release process (see __fput()).
+	 */
+	fac->dispose(e);
+}
+
+static void put_element_work(struct work_struct *work)
+{
+	struct evl_element *e;
+
+	e = container_of(work, struct evl_element, work);
+	__put_element(e);
+}
+
+static void put_element_irq(struct irq_work *work)
+{
+	struct evl_element *e;
+
+	e = container_of(work, struct evl_element, irq_work);
+	INIT_WORK(&e->work, put_element_work);
+	schedule_work(&e->work);
+}
+
+static void put_element(struct evl_element *e)
+{
+	/*
+	 * These trampolines may look like a bit cheesy but we have no
+	 * choice but offloading the disposal to an in-band task
+	 * context. In (the rare) case the last ref. to an element was
+	 * dropped from OOB(-protected) context, we need to go via an
+	 * irq_work->workqueue chain in order to run __put_element()
+	 * eventually.
+	 */
+	if (unlikely(running_oob() || oob_irqs_disabled())) {
+		init_irq_work(&e->irq_work, put_element_irq);
+		irq_work_queue(&e->irq_work);
+	} else
+		__put_element(e);
+}
+
+void evl_put_element(struct evl_element *e) /* in-band or OOB */
+{
+	unsigned long flags;
+
+	/*
+	 * Multiple files may reference a single element on
+	 * open(). The element release logic competes with
+	 * evl_open_element() as follows:
+	 *
+	 * a) evl_put_element() grabs the ->ref_lock first and raises
+	 * the zombie flag iff the refcount drops to zero, or
+	 * evl_open_element() gets it first.
+
+	 * b) evl_open_element() races with evl_put_element() and
+	 * detects an ongoing deletion of @ent, returning -ESTALE.
+
+	 * c) evl_open_element() is first and increments the refcount
+	 * which should lead us to skip the whole release process
+	 * in evl_put_element() when it runs next.
+	 *
+	 * In any case, evl_open_element() is protected against
+	 * referencing stale @ent memory by a read-side RCU
+	 * section. Meanwhile we wait for all read-sides to complete
+	 * after calling cdev_del().  Once cdev_del() returns, the
+	 * device cannot be opened anymore, without affecting the
+	 * files that might still be opened on this device though.
+	 *
+	 * In the c) case, the last file release will dispose of the
+	 * element eventually.
+	 */
+	raw_spin_lock_irqsave(&e->ref_lock, flags);
+
+	if (EVL_WARN_ON(CORE, e->refs == 0))
+		goto out;
+
+	if (--e->refs == 0) {
+		e->zombie = true;
+		raw_spin_unlock_irqrestore(&e->ref_lock, flags);
+		put_element(e);
+		return;
+	}
+out:
+	raw_spin_unlock_irqrestore(&e->ref_lock, flags);
+}
+
+int evl_release_element(struct inode *inode, struct file *filp)
+{
+	struct evl_file_binding *fbind = filp->private_data;
+	struct evl_element *e = fbind->element;
+
+	evl_release_file(&fbind->efile);
+	kfree(fbind);
+	evl_put_element(e);
+
+	return 0;
+}
+
+static void release_device(struct device *dev)
+{
+	kfree(dev);
+}
+
+static struct device *create_device(dev_t rdev, struct evl_factory *fac,
+				void *drvdata, const char *name)
+{
+	struct device *dev;
+	int ret;
+
+	dev = kzalloc(sizeof(*dev), GFP_KERNEL);
+	if (dev == NULL)
+		return ERR_PTR(-ENOMEM);
+
+	dev->devt = rdev;
+	dev->class = fac->class;
+	dev->type = &fac->type;
+	dev->groups = fac->attrs;
+	dev->release = release_device;
+	dev_set_drvdata(dev, drvdata);
+	ret = dev_set_name(dev, "%s", name);
+	if (ret)
+		goto fail;
+
+	ret = device_register(dev);
+	if (ret)
+		goto fail;
+
+	return dev;
+
+fail:
+	put_device(dev); /* ->release_device() */
+
+	return ERR_PTR(ret);
+}
+
+static int create_named_element_device(struct evl_element *e,
+				struct evl_factory *fac)
+{
+	struct evl_element *n;
+	struct device *dev;
+	dev_t rdev;
+	u64 hlen;
+	int ret;
+
+	/*
+	 * Do a quick hash check on the new device name, to make sure
+	 * device_register() won't trigger a kernel log splash because
+	 * of a naming conflict.
+	 */
+	hlen = hashlen_string("EVL", e->devname->name);
+	mutex_lock(&fac->hash_lock);
+
+	hash_for_each_possible(fac->name_hash, n, hash, hlen)
+		if (!strcmp(n->devname->name, e->devname->name)) {
+			mutex_unlock(&fac->hash_lock);
+			return -EEXIST;
+		}
+
+	hash_add(fac->name_hash, &e->hash, hlen);
+
+	mutex_unlock(&fac->hash_lock);
+
+	rdev = MKDEV(MAJOR(fac->sub_rdev), e->minor);
+	cdev_init(&e->cdev, fac->fops);
+	ret = cdev_add(&e->cdev, rdev, 1);
+	if (ret)
+		goto fail_cdev;
+
+	dev = create_device(rdev, fac, e, evl_element_name(e));
+	if (IS_ERR(dev)) {
+		ret = PTR_ERR(dev);
+		goto fail_dev;
+	}
+
+	e->dev = dev;
+
+	return 0;
+
+fail_dev:
+	cdev_del(&e->cdev);
+fail_cdev:
+	mutex_lock(&fac->hash_lock);
+	hash_del(&e->hash);
+	mutex_unlock(&fac->hash_lock);
+
+	return ret;
+}
+
+int evl_create_element_device(struct evl_element *e,
+			struct evl_factory *fac,
+			const char *name)
+{
+	struct filename *devname;
+
+	devname = getname_kernel(name);
+	if (devname == NULL)
+		return PTR_ERR(devname);
+
+	e->devname = devname;
+
+	return create_named_element_device(e, fac);
+}
+
+void evl_remove_element_device(struct evl_element *e)
+{
+	struct evl_factory *fac = e->factory;
+	struct device *dev = e->dev;
+
+	device_unregister(dev);
+	cdev_del(&e->cdev);
+	mutex_lock(&fac->hash_lock);
+	hash_del(&e->hash);
+	mutex_unlock(&fac->hash_lock);
+}
+
+static long ioctl_clone_device(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_element *e = filp->private_data;
+	struct evl_clone_req req, __user *u_req;
+	struct filename *devname = NULL;
+	__u32 val, state_offset = -1U;
+	struct evl_factory *fac;
+	char tmpbuf[16];
+	int ret;
+
+	if (cmd != EVL_IOC_CLONE)
+		return -ENOTTY;
+
+	if (!evl_is_running())
+		return -ENXIO;
+
+	if (e)
+		return -EBUSY;
+
+	u_req = (typeof(u_req))arg;
+	ret = copy_from_user(&req, u_req, sizeof(req));
+	if (ret)
+		return -EFAULT;
+
+	if (req.name) {
+		devname = getname(req.name);
+		if (IS_ERR(devname))
+			return PTR_ERR(devname);
+	}
+
+	fac = container_of(filp->f_inode->i_cdev, struct evl_factory, cdev);
+	e = fac->build(fac, devname ? devname->name : NULL,
+		req.attrs, &state_offset);
+	if (IS_ERR(e)) {
+		if (devname)
+			putname(devname);
+		return PTR_ERR(e);
+	}
+
+	if (!devname) {
+		/* If no name specified, default to device minor. */
+		snprintf(tmpbuf, sizeof(tmpbuf), "%d", e->minor);
+		devname = getname_kernel(tmpbuf);
+		if (IS_ERR(devname)) {
+			fac->dispose(e);
+			return PTR_ERR(devname);
+		}
+	}
+
+	/* The device name is valid throughout the element's lifetime. */
+	e->devname = devname;
+
+	/* This must be set before the device appears. */
+	filp->private_data = e;
+	barrier();
+
+	ret = create_named_element_device(e, fac);
+	if (ret) {
+		/* release_clone_device() must skip cleanup. */
+		filp->private_data = NULL;
+		fac->dispose(e);
+		return ret;
+	}
+
+	val = e->minor;
+	ret |= put_user(val, &u_req->eids.minor) ? -EFAULT : 0;
+	val = e->fundle;
+	ret |= put_user(val, &u_req->eids.fundle) ? -EFAULT : 0;
+	ret |= put_user(state_offset, &u_req->eids.state_offset) ? -EFAULT : 0;
+
+	return ret ? -EFAULT : 0;
+}
+
+static int release_clone_device(struct inode *inode, struct file *filp)
+{
+	struct evl_element *e = filp->private_data;
+
+	if (e)
+		evl_put_element(e);
+
+	return 0;
+}
+
+static int open_clone_device(struct inode *inode, struct file *filp)
+{
+	struct evl_factory *fac;
+
+	fac = container_of(filp->f_inode->i_cdev, struct evl_factory, cdev);
+	fac->kuid = inode->i_uid;
+	fac->kgid = inode->i_gid;
+
+	return 0;
+}
+
+static const struct file_operations clone_fops = {
+	.open		= open_clone_device,
+	.release	= release_clone_device,
+	.unlocked_ioctl	= ioctl_clone_device,
+};
+
+static int index_element_at(struct evl_element *e, fundle_t fundle)
+{
+	struct evl_index *map = &e->factory->index;
+	struct rb_node **rbp, *parent;
+	struct evl_element *tmp;
+
+	parent = NULL;
+	rbp = &map->root.rb_node;
+	while (*rbp) {
+		tmp = rb_entry(*rbp, struct evl_element, index_node);
+		parent = *rbp;
+		if (fundle < tmp->fundle)
+			rbp = &(*rbp)->rb_left;
+		else if (fundle > tmp->fundle)
+			rbp = &(*rbp)->rb_right;
+		else
+			return -EEXIST;
+	}
+
+	e->fundle = fundle;
+	rb_link_node(&e->index_node, parent, rbp);
+	rb_insert_color(&e->index_node, &map->root);
+
+	return 0;
+}
+
+int evl_index_element_at(struct evl_element *e, fundle_t fundle)
+{
+	struct evl_index *map = &e->factory->index;
+	unsigned long flags;
+	int ret;
+
+	raw_spin_lock_irqsave(&map->lock, flags);
+	ret = index_element_at(e, fundle);
+	raw_spin_unlock_irqrestore(&map->lock, flags);
+
+	return ret;
+}
+
+void evl_index_element(struct evl_element *e)
+{
+	struct evl_index *map = &e->factory->index;
+	fundle_t fundle, guard = 0;
+	unsigned long flags;
+	int ret;
+
+	do {
+		if (evl_get_index(++guard) == 0) { /* Paranoid. */
+			e->fundle = EVL_NO_HANDLE;
+			WARN_ON_ONCE("out of fundle index space");
+			return;
+		}
+
+		raw_spin_lock_irqsave(&map->lock, flags);
+
+		fundle = evl_get_index(++map->generator);
+		if (!fundle)		/* Exclude EVL_NO_HANDLE */
+			fundle = map->generator = 1;
+
+		ret = index_element_at(e, fundle);
+
+		raw_spin_unlock_irqrestore(&map->lock, flags);
+	} while (ret);
+}
+
+void evl_unindex_element(struct evl_element *e)
+{
+	struct evl_index *map = &e->factory->index;
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&map->lock, flags);
+	rb_erase(&e->index_node, &map->root);
+	raw_spin_unlock_irqrestore(&map->lock, flags);
+}
+
+struct evl_element *
+__evl_get_element_by_fundle(struct evl_factory *fac, fundle_t fundle)
+{
+	struct evl_index *map = &fac->index;
+	struct evl_element *e;
+	unsigned long flags;
+	struct rb_node *rb;
+
+	raw_spin_lock_irqsave(&map->lock, flags);
+
+	rb = map->root.rb_node;
+	while (rb) {
+		e = rb_entry(rb, struct evl_element, index_node);
+		if (fundle < e->fundle)
+			rb = rb->rb_left;
+		else if (fundle > e->fundle)
+			rb = rb->rb_right;
+		else {
+			raw_spin_lock(&e->ref_lock);
+			if (unlikely(e->zombie))
+				e = NULL;
+			else {
+				EVL_WARN_ON(CORE, e->refs == 0);
+				e->refs++;
+			}
+			raw_spin_unlock(&e->ref_lock);
+			raw_spin_unlock_irqrestore(&map->lock, flags);
+			return e;
+		}
+	}
+
+	raw_spin_unlock_irqrestore(&map->lock, flags);
+
+	return NULL;
+}
+
+static char *factory_type_devnode(struct device *dev, umode_t *mode,
+			kuid_t *uid, kgid_t *gid)
+{
+	struct evl_element *e;
+
+	/*
+	 * Inherit the ownership of a new element device from the
+	 * clone device which has instantiated it.
+	 */
+	e = dev_get_drvdata(dev);
+	if (e) {
+		if (uid)
+			*uid = e->factory->kuid;
+		if (gid)
+			*gid = e->factory->kgid;
+	}
+
+	return kasprintf(GFP_KERNEL, "evl/%s/%s",
+			dev->type->name, dev_name(dev));
+}
+
+static int create_element_class(struct evl_factory *fac)
+{
+	struct class *class;
+	int ret = -ENOMEM;
+
+	fac->minor_map = bitmap_zalloc(fac->nrdev, GFP_KERNEL);
+	if (fac->minor_map == NULL)
+		return ret;
+
+	class = class_create(THIS_MODULE, fac->name);
+	if (IS_ERR(class)) {
+		ret = PTR_ERR(class);
+		goto cleanup_minor;
+	}
+
+	fac->class = class;
+	fac->type.name = fac->name;
+	fac->type.devnode = factory_type_devnode;
+	fac->kuid = GLOBAL_ROOT_UID;
+	fac->kgid = GLOBAL_ROOT_GID;
+
+	ret = alloc_chrdev_region(&fac->sub_rdev, 0, fac->nrdev, fac->name);
+	if (ret)
+		goto cleanup_class;
+
+	return 0;
+
+cleanup_class:
+	class_destroy(class);
+cleanup_minor:
+	bitmap_free(fac->minor_map);
+
+	return ret;
+}
+
+static void delete_element_class(struct evl_factory *fac)
+{
+	unregister_chrdev_region(fac->sub_rdev, fac->nrdev);
+	class_destroy(fac->class);
+	bitmap_free(fac->minor_map);
+}
+
+static int create_factory(struct evl_factory *fac, dev_t rdev)
+{
+	const char *idevname = "clone"; /* Initial device in factory. */
+	struct device *dev = NULL;
+	int ret;
+
+	if (fac->flags & EVL_FACTORY_SINGLE) {
+		idevname = fac->name;
+		fac->class = evl_class;
+		fac->minor_map = NULL;
+		fac->sub_rdev = MKDEV(0, 0);
+		cdev_init(&fac->cdev, fac->fops);
+	} else {
+		ret = create_element_class(fac);
+		if (ret)
+			return ret;
+		if (fac->flags & EVL_FACTORY_CLONE)
+			cdev_init(&fac->cdev, &clone_fops);
+	}
+
+	if (fac->flags & (EVL_FACTORY_CLONE|EVL_FACTORY_SINGLE)) {
+		ret = cdev_add(&fac->cdev, rdev, 1);
+		if (ret)
+			goto fail_cdev;
+
+		dev = create_device(rdev, fac, NULL, idevname);
+		if (IS_ERR(dev))
+			goto fail_dev;
+	}
+
+	fac->dev = dev;
+	raw_spin_lock_init(&fac->index.lock);
+	fac->index.root = RB_ROOT;
+	fac->index.generator = EVL_NO_HANDLE;
+	hash_init(fac->name_hash);
+	mutex_init(&fac->hash_lock);
+
+	return 0;
+
+fail_dev:
+	cdev_del(&fac->cdev);
+fail_cdev:
+	if (!(fac->flags & EVL_FACTORY_SINGLE))
+		delete_element_class(fac);
+
+	return ret;
+}
+
+static void delete_factory(struct evl_factory *fac)
+{
+	struct device *dev = fac->dev;
+
+	if (dev) {
+		device_unregister(dev);
+		cdev_del(&fac->cdev);
+	}
+
+	if (!(fac->flags & EVL_FACTORY_SINGLE))
+		delete_element_class(fac);
+}
+
+static char *evl_devnode(struct device *dev, umode_t *mode)
+{
+	return kasprintf(GFP_KERNEL, "evl/%s", dev_name(dev));
+}
+
+static int __init
+create_factories(struct evl_factory **factories, int nr)
+{
+	int ret, n;
+
+	for (n = 0; n < nr; n++) {
+		ret = create_factory(factories[n],
+				MKDEV(MAJOR(factory_rdev), n));
+		if (ret)
+			goto fail;
+	}
+
+	return 0;
+fail:
+	while (n-- > 0)
+		delete_factory(factories[n]);
+
+	return ret;
+}
+
+static void __init
+remove_factories(struct evl_factory **factories, int nr)
+{
+	int n;
+
+	for (n = 0; n < nr; n++)
+		delete_factory(factories[n]);
+}
+
+int __init evl_early_init_factories(void)
+{
+	int ret;
+
+	evl_class = class_create(THIS_MODULE, "evl");
+	if (IS_ERR(evl_class))
+		return PTR_ERR(evl_class);
+
+	evl_class->devnode = evl_devnode;
+
+	ret = alloc_chrdev_region(&factory_rdev, 0, NR_FACTORIES,
+				"evl_factory");
+	if (ret) {
+		class_destroy(evl_class);
+		return ret;
+	}
+
+	ret = create_factories(early_factories,
+			ARRAY_SIZE(early_factories));
+	if (ret) {
+		unregister_chrdev_region(factory_rdev, NR_FACTORIES);
+		class_destroy(evl_class);
+	}
+
+	return ret;
+}
+
+void __init evl_early_cleanup_factories(void)
+{
+	remove_factories(early_factories, ARRAY_SIZE(early_factories));
+	unregister_chrdev_region(factory_rdev, NR_FACTORIES);
+	class_destroy(evl_class);
+}
+
+int __init evl_late_init_factories(void)
+{
+	return create_factories(factories, ARRAY_SIZE(factories));
+}
+
+void __init evl_cleanup_factories(void)
+{
+	remove_factories(factories, ARRAY_SIZE(factories));
+	evl_early_cleanup_factories();
+}
diff --git a/kernel/evl/file.c b/kernel/evl/file.c
new file mode 100644
index 000000000000..0593211fe4e8
--- /dev/null
+++ b/kernel/evl/file.c
@@ -0,0 +1,288 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <stdarg.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/completion.h>
+#include <linux/irq_work.h>
+#include <linux/spinlock.h>
+#include <evl/file.h>
+#include <evl/memory.h>
+#include <evl/assert.h>
+#include <evl/sched.h>
+#include <evl/poll.h>
+
+static struct rb_root fd_tree = RB_ROOT;
+
+static DEFINE_EVL_SPINLOCK(fdt_lock);
+
+/*
+ * We could have a per-files_struct table of OOB fds, but this looks
+ * overkill at the moment. So we only have a single rb-tree for now,
+ * indexing our file descriptors on a composite key which pairs the
+ * the in-band fd and the originating files struct pointer.
+ */
+
+static inline bool lean_left(struct evl_fd *lh, struct evl_fd *rh)
+{
+	if (lh->files == rh->files)
+		return lh->fd < rh->fd;
+
+	return lh->files < rh->files;
+}
+
+static inline bool lean_right(struct evl_fd *lh, struct evl_fd *rh)
+{
+	if (lh->files == rh->files)
+		return lh->fd > rh->fd;
+
+	return lh->files > rh->files;
+}
+
+static inline int index_efd(struct evl_fd *efd, struct file *filp)
+{
+	struct rb_node **rbp, *parent = NULL;
+	struct evl_fd *tmp;
+
+	rbp = &fd_tree.rb_node;
+	while (*rbp) {
+		tmp = rb_entry(*rbp, struct evl_fd, rb);
+		parent = *rbp;
+		if (lean_left(efd, tmp))
+			rbp = &(*rbp)->rb_left;
+		else if (lean_right(efd, tmp))
+			rbp = &(*rbp)->rb_right;
+		else
+			return -EEXIST;
+	}
+
+	rb_link_node(&efd->rb, parent, rbp);
+	rb_insert_color(&efd->rb, &fd_tree);
+
+	return 0;
+}
+
+static inline
+struct evl_fd *lookup_efd(unsigned int fd,
+			struct files_struct *files)
+{
+	struct evl_fd *efd, tmp;
+	struct rb_node *rb;
+
+	tmp.fd = fd;
+	tmp.files = files;
+	rb = fd_tree.rb_node;
+	while (rb) {
+		efd = rb_entry(rb, struct evl_fd, rb);
+		if (lean_left(&tmp, efd))
+			rb = rb->rb_left;
+		else if (lean_right(&tmp, efd))
+			rb = rb->rb_right;
+		else
+			return efd;
+	}
+
+	return NULL;
+}
+
+static inline
+struct evl_fd *unindex_efd(unsigned int fd,
+			struct files_struct *files)
+{
+	struct evl_fd *efd = lookup_efd(fd, files);
+
+	if (efd)
+		rb_erase(&efd->rb, &fd_tree);
+
+	return efd;
+}
+
+/* in-band, caller may hold files->file_lock */
+void install_inband_fd(unsigned int fd, struct file *filp,
+		struct files_struct *files)
+{
+	unsigned long flags;
+	struct evl_fd *efd;
+	int ret = -ENOMEM;
+
+	if (filp->oob_data == NULL)
+		return;
+
+	efd = evl_alloc(sizeof(struct evl_fd));
+	if (efd) {
+		efd->fd = fd;
+		efd->files = files;
+		efd->efilp = filp->oob_data;
+		INIT_LIST_HEAD(&efd->poll_nodes);
+		evl_spin_lock_irqsave(&fdt_lock, flags);
+		ret = index_efd(efd, filp);
+		evl_spin_unlock_irqrestore(&fdt_lock, flags);
+	}
+
+	EVL_WARN_ON(CORE, ret);
+}
+
+/* fdt_lock held, irqs off. CAUTION: resched required on exit. */
+static void drop_watchpoints(struct evl_fd *efd)
+{
+	if (!list_empty(&efd->poll_nodes))
+		evl_drop_watchpoints(&efd->poll_nodes);
+}
+
+/* in-band, caller holds files->file_lock */
+void uninstall_inband_fd(unsigned int fd, struct file *filp,
+			struct files_struct *files)
+{
+	unsigned long flags;
+	struct evl_fd *efd;
+
+	if (filp->oob_data == NULL)
+		return;
+
+	evl_spin_lock_irqsave(&fdt_lock, flags);
+	efd = unindex_efd(fd, files);
+	if (efd)
+		drop_watchpoints(efd);
+	evl_spin_unlock_irqrestore(&fdt_lock, flags);
+	evl_schedule();
+
+	if (efd)
+		evl_free(efd);
+}
+
+/* in-band, caller holds files->file_lock */
+void replace_inband_fd(unsigned int fd, struct file *filp,
+		struct files_struct *files)
+{
+	unsigned long flags;
+	struct evl_fd *efd;
+
+	if (filp->oob_data == NULL)
+		return;
+
+	evl_spin_lock_irqsave(&fdt_lock, flags);
+
+	efd = lookup_efd(fd, files);
+	if (efd) {
+		drop_watchpoints(efd);
+		efd->efilp = filp->oob_data;
+		evl_spin_unlock_irqrestore(&fdt_lock, flags);
+		evl_schedule();
+		return;
+	}
+
+	evl_spin_unlock_irqrestore(&fdt_lock, flags);
+
+	install_inband_fd(fd, filp, files);
+}
+
+struct evl_file *evl_get_file(unsigned int fd)
+{
+	struct evl_file *efilp = NULL;
+	unsigned long flags;
+	struct evl_fd *efd;
+
+	evl_spin_lock_irqsave(&fdt_lock, flags);
+	efd = lookup_efd(fd, current->files);
+	if (efd) {
+		efilp = efd->efilp;
+		evl_get_fileref(efilp);
+	}
+	evl_spin_unlock_irqrestore(&fdt_lock, flags);
+
+	return efilp;
+}
+EXPORT_SYMBOL_GPL(evl_get_file);
+
+static void release_oob_ref(struct irq_work *work)
+{
+	struct evl_file *efilp;
+
+	efilp = container_of(work, struct evl_file, oob_work);
+	complete(&efilp->oob_done);
+}
+
+void __evl_put_file(struct evl_file *efilp)
+{
+	init_irq_work(&efilp->oob_work, release_oob_ref);
+	irq_work_queue(&efilp->oob_work);
+}
+EXPORT_SYMBOL_GPL(__evl_put_file);
+
+struct evl_file *evl_watch_fd(unsigned int fd,
+			struct evl_poll_node *node)
+{
+	struct evl_file *efilp = NULL;
+	unsigned long flags;
+	struct evl_fd *efd;
+
+	evl_spin_lock_irqsave(&fdt_lock, flags);
+	efd = lookup_efd(fd, current->files);
+	if (efd) {
+		efilp = efd->efilp;
+		evl_get_fileref(efilp);
+		list_add(&node->next, &efd->poll_nodes);
+	}
+	evl_spin_unlock_irqrestore(&fdt_lock, flags);
+
+	return efilp;
+}
+
+void evl_ignore_fd(struct evl_poll_node *node)
+{
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&fdt_lock, flags);
+	list_del(&node->next);
+	evl_spin_unlock_irqrestore(&fdt_lock, flags);
+}
+
+/**
+ * evl_open_file - Open new file with OOB capabilities
+ *
+ * Called by chrdev with OOB capabilities when a new @efilp is
+ * opened. @efilp is paired with the in-band file struct at @filp.
+ */
+int evl_open_file(struct evl_file *efilp, struct file *filp)
+{
+	efilp->filp = filp;
+	filp->oob_data = efilp;	/* mark filp as OOB-capable. */
+	atomic_set(&efilp->oob_refs, 1);
+	init_completion(&efilp->oob_done);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_open_file);
+
+/**
+ * evl_release_file - Drop an OOB-capable file
+ *
+ * Called by chrdev with OOB capabilities when @efilp is about to be
+ * released. Must be called from a fops->release() handler, and paired
+ * with a previous call to evl_open_file() from the fops->open()
+ * handler.
+ */
+void evl_release_file(struct evl_file *efilp)
+{
+	/*
+	 * Release the original reference on @efilp. If OOB references
+	 * are still pending (e.g. some thread is still blocked in
+	 * fops->oob_read()), we must wait for them to be dropped
+	 * before allowing the in-band code to dismantle @efilp->filp.
+	 *
+	 * NOTE: In-band and OOB fds are working together in lockstep
+	 * mode via dovetail_install/uninstall_fd() calls.  Therefore,
+	 * we can't livelock with evl_get_file() as @efilp was
+	 * removed from the fd tree before fops->release() called us.
+	 */
+	if (atomic_dec_return(&efilp->oob_refs) > 0)
+		wait_for_completion(&efilp->oob_done);
+}
+EXPORT_SYMBOL_GPL(evl_release_file);
diff --git a/kernel/evl/init.c b/kernel/evl/init.c
new file mode 100644
index 000000000000..442e3d1f3d10
--- /dev/null
+++ b/kernel/evl/init.c
@@ -0,0 +1,195 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <evl/init.h>
+#include <evl/sched.h>
+#include <evl/clock.h>
+#include <evl/timer.h>
+#include <evl/tick.h>
+#include <evl/memory.h>
+#include <evl/file.h>
+#include <evl/factory.h>
+#include <evl/control.h>
+#define CREATE_TRACE_POINTS
+#include <trace/events/evl.h>
+
+static char *oobcpus_arg;
+module_param_named(oobcpus, oobcpus_arg, charp, 0444);
+
+static char init_state_arg[16] = "enabled";
+module_param_string(state, init_state_arg, sizeof(init_state_arg), 0444);
+
+struct cpumask evl_oob_cpus;
+EXPORT_SYMBOL_GPL(evl_oob_cpus);
+
+DEFINE_PER_CPU(struct evl_machine_cpudata, evl_machine_cpudata);
+EXPORT_PER_CPU_SYMBOL_GPL(evl_machine_cpudata);
+
+#ifdef CONFIG_EVL_DEBUG
+#define boot_debug_notice "[DEBUG]"
+#else
+#define boot_debug_notice ""
+#endif
+
+#ifdef CONFIG_ENABLE_DEFAULT_TRACERS
+#define boot_trace_notice "[TRACE]"
+#else
+#define boot_trace_notice ""
+#endif
+
+#define boot_state_notice				\
+	({						\
+		evl_is_stopped() ? "[STOPPED]" : "";	\
+	})
+
+static struct {
+	const char *label;
+	enum evl_run_states state;
+} init_states[] __initdata = {
+	{ "disabled", EVL_STATE_DISABLED },
+	{ "stopped", EVL_STATE_STOPPED },
+	{ "enabled", EVL_STATE_WARMUP },
+};
+
+static void __init setup_init_state(void)
+{
+	static char warn_bad_state[] __initdata =
+		EVL_WARNING "invalid init state '%s'\n";
+	int n;
+
+	for (n = 0; n < ARRAY_SIZE(init_states); n++)
+		if (strcmp(init_states[n].label, init_state_arg) == 0) {
+			set_evl_state(init_states[n].state);
+			return;
+		}
+
+	printk(warn_bad_state, init_state_arg);
+}
+
+#ifdef CONFIG_EVL_DEBUG
+
+void __init evl_warn_init(const char *fn, int level, int status)
+{
+	printk(EVL_ERR "FAILED: %s => [%d]\n", fn, status);
+}
+
+#endif
+
+static __init int init_core(void)
+{
+	int ret;
+
+	enable_oob_stage("EVL");
+
+	ret = evl_init_memory();
+	if (ret)
+		goto cleanup_stage;
+
+	ret = evl_early_init_factories();
+	if (ret)
+		goto cleanup_memory;
+
+	ret = evl_clock_init();
+	if (ret)
+		goto cleanup_early_factories;
+
+	ret = evl_init_sched();
+	if (ret)
+		goto cleanup_clock;
+
+	/*
+	 * If starting in stopped mode, do all initializations, but do
+	 * not enable the core timer.
+	 */
+	if (evl_is_warming()) {
+		ret = evl_enable_tick();
+		if (ret)
+			goto cleanup_sched;
+		set_evl_state(EVL_STATE_RUNNING);
+	}
+
+	ret = dovetail_start();
+	if (ret)
+		goto cleanup_tick;
+
+	/*
+	 * Other factories can clone elements, which would allow users
+	 * to issue Dovetail requests afterwards, so let's expose them
+	 * last.
+	 */
+	ret = evl_late_init_factories();
+	if (ret)
+		goto cleanup_dovetail;
+
+	return 0;
+
+cleanup_dovetail:
+	dovetail_stop();
+cleanup_tick:
+	if (evl_is_running())
+		evl_disable_tick();
+cleanup_sched:
+	evl_cleanup_sched();
+cleanup_clock:
+	evl_clock_cleanup();
+cleanup_early_factories:
+	evl_early_cleanup_factories();
+cleanup_memory:
+	evl_cleanup_memory();
+cleanup_stage:
+	disable_oob_stage();
+	set_evl_state(EVL_STATE_STOPPED);
+
+	return ret;
+}
+
+static int __init evl_init(void)
+{
+	int ret;
+
+	setup_init_state();
+
+	if (!evl_is_enabled()) {
+		printk(EVL_WARNING "disabled on kernel command line\n");
+		return 0;
+	}
+
+	/*
+	 * Set of CPUs the core knows about and which should run an
+	 * in-band proxy timer. This set includes the subset of CPUs
+	 * which may run EVL threads, aka evl_cpu_affinity.
+	 */
+	if (oobcpus_arg && *oobcpus_arg) {
+		if (cpulist_parse(oobcpus_arg, &evl_oob_cpus)) {
+			printk(EVL_WARNING "invalid set of OOB cpus\n");
+			cpumask_copy(&evl_oob_cpus, cpu_online_mask);
+		}
+	} else
+		cpumask_copy(&evl_oob_cpus, cpu_online_mask);
+
+	/* Threads may run on any out-of-band CPU by default. */
+	evl_cpu_affinity = evl_oob_cpus;
+
+	ret = EVL_INIT_CALL(0, init_core());
+	if (ret)
+		goto fail;
+
+	printk(EVL_INFO "core started %s%s%s\n",
+		boot_debug_notice,
+		boot_trace_notice,
+		boot_state_notice);
+
+	return 0;
+fail:
+	set_evl_state(EVL_STATE_DISABLED);
+
+	printk(EVL_ERR "disabling.\n");
+
+	return ret;
+}
+device_initcall(evl_init);
diff --git a/kernel/evl/memory.c b/kernel/evl/memory.c
new file mode 100644
index 000000000000..7d60bc7ae068
--- /dev/null
+++ b/kernel/evl/memory.c
@@ -0,0 +1,710 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/mman.h>
+#include <linux/mm.h>
+#include <linux/gfp.h>
+#include <linux/slab.h>
+#include <linux/log2.h>
+#include <linux/bitops.h>
+#include <linux/vmalloc.h>
+#include <linux/uaccess.h>
+#include <evl/memory.h>
+#include <evl/factory.h>
+#include <evl/assert.h>
+#include <evl/init.h>
+#include <uapi/evl/thread.h>
+#include <uapi/evl/monitor.h>
+
+static unsigned long sysheap_size_arg;
+module_param_named(sysheap_size, sysheap_size_arg, ulong, 0444);
+
+struct evl_heap evl_system_heap;
+EXPORT_SYMBOL_GPL(evl_system_heap);
+
+struct evl_heap evl_shared_heap;
+
+size_t evl_shm_size;
+
+enum evl_heap_pgtype {
+	page_free =0,
+	page_cont =1,
+	page_list =2
+};
+
+static inline u32 __always_inline
+gen_block_mask(int log2size)
+{
+	return -1U >> (32 - (EVL_HEAP_PAGE_SIZE >> log2size));
+}
+
+static inline  __always_inline
+int addr_to_pagenr(struct evl_heap *heap, void *p)
+{
+	return ((void *)p - heap->membase) >> EVL_HEAP_PAGE_SHIFT;
+}
+
+static inline  __always_inline
+void *pagenr_to_addr(struct evl_heap *heap, int pg)
+{
+	return heap->membase + (pg << EVL_HEAP_PAGE_SHIFT);
+}
+
+#ifdef CONFIG_EVL_DEBUG_MEMORY
+/*
+ * Setting page_cont/page_free in the page map is only required for
+ * enabling full checking of the block address in free requests, which
+ * may be extremely time-consuming when deallocating huge blocks
+ * spanning thousands of pages. We only do such marking when running
+ * in memory debug mode.
+ */
+static inline bool
+page_is_valid(struct evl_heap *heap, int pg)
+{
+	switch (heap->pagemap[pg].type) {
+	case page_free:
+	case page_cont:
+		return false;
+	case page_list:
+	default:
+		return true;
+	}
+}
+
+static void mark_pages(struct evl_heap *heap,
+		int pg, int nrpages,
+		enum evl_heap_pgtype type)
+{
+	while (nrpages-- > 0)
+		heap->pagemap[pg].type = type;
+}
+
+#else
+
+static inline bool
+page_is_valid(struct evl_heap *heap, int pg)
+{
+	return true;
+}
+
+static void mark_pages(struct evl_heap *heap,
+		int pg, int nrpages,
+		enum evl_heap_pgtype type)
+{ }
+
+#endif
+
+static struct evl_heap_range *
+search_size_ge(struct rb_root *t, size_t size)
+{
+	struct rb_node *rb, *deepest = NULL;
+	struct evl_heap_range *r;
+
+	/*
+	 * We first try to find an exact match. If that fails, we walk
+	 * the tree in logical order by increasing size value from the
+	 * deepest node traversed until we find the first successor to
+	 * that node, or nothing beyond it, whichever comes first.
+	 */
+	rb = t->rb_node;
+	while (rb) {
+		deepest = rb;
+		r = rb_entry(rb, struct evl_heap_range, size_node);
+		if (size < r->size) {
+			rb = rb->rb_left;
+			continue;
+		}
+		if (size > r->size) {
+			rb = rb->rb_right;
+			continue;
+		}
+		return r;
+	}
+
+	rb = deepest;
+	while (rb) {
+		r = rb_entry(rb, struct evl_heap_range, size_node);
+		if (size <= r->size)
+			return r;
+		rb = rb_next(rb);
+	}
+
+	return NULL;
+}
+
+static struct evl_heap_range *
+search_left_mergeable(struct evl_heap *heap, struct evl_heap_range *r)
+{
+	struct rb_node *node = heap->addr_tree.rb_node;
+	struct evl_heap_range *p;
+
+	while (node) {
+		p = rb_entry(node, struct evl_heap_range, addr_node);
+		if ((void *)p + p->size == (void *)r)
+			return p;
+		if (&r->addr_node < node)
+			node = node->rb_left;
+		else
+			node = node->rb_right;
+	}
+
+	return NULL;
+}
+
+static struct evl_heap_range *
+search_right_mergeable(struct evl_heap *heap, struct evl_heap_range *r)
+{
+	struct rb_node *node = heap->addr_tree.rb_node;
+	struct evl_heap_range *p;
+
+	while (node) {
+		p = rb_entry(node, struct evl_heap_range, addr_node);
+		if ((void *)r + r->size == (void *)p)
+			return p;
+		if (&r->addr_node < node)
+			node = node->rb_left;
+		else
+			node = node->rb_right;
+	}
+
+	return NULL;
+}
+
+static void insert_range_bysize(struct evl_heap *heap, struct evl_heap_range *r)
+{
+	struct rb_node **new = &heap->size_tree.rb_node, *parent = NULL;
+	struct evl_heap_range *p;
+
+	while (*new) {
+		p = container_of(*new, struct evl_heap_range, size_node);
+		parent = *new;
+		if (r->size <= p->size)
+			new = &((*new)->rb_left);
+		else
+			new = &((*new)->rb_right);
+	}
+
+	rb_link_node(&r->size_node, parent, new);
+	rb_insert_color(&r->size_node, &heap->size_tree);
+}
+
+static void insert_range_byaddr(struct evl_heap *heap, struct evl_heap_range *r)
+{
+	struct rb_node **new = &heap->addr_tree.rb_node, *parent = NULL;
+	struct evl_heap_range *p;
+
+	while (*new) {
+		p = container_of(*new, struct evl_heap_range, addr_node);
+		parent = *new;
+		if (r < p)
+			new = &((*new)->rb_left);
+		else
+			new = &((*new)->rb_right);
+	}
+
+	rb_link_node(&r->addr_node, parent, new);
+	rb_insert_color(&r->addr_node, &heap->addr_tree);
+}
+
+static int reserve_page_range(struct evl_heap *heap, size_t size)
+{
+	struct evl_heap_range *new, *splitr;
+
+	/* Find a suitable range of pages covering 'size'. */
+	new = search_size_ge(&heap->size_tree, size);
+	if (new == NULL)
+		return -1;
+
+	rb_erase(&new->size_node, &heap->size_tree);
+	if (new->size == size) {
+		rb_erase(&new->addr_node, &heap->addr_tree);
+		return addr_to_pagenr(heap, new);
+	}
+
+	/*
+	 * The free range fetched is larger than what we need: split
+	 * it in two, the upper part is returned to the caller, the
+	 * lower part is sent back to the free list, which makes
+	 * reindexing by address pointless.
+	 */
+	splitr = new;
+	splitr->size -= size;
+	new = (struct evl_heap_range *)((void *)new + splitr->size);
+	insert_range_bysize(heap, splitr);
+
+	return addr_to_pagenr(heap, new);
+}
+
+static void release_page_range(struct evl_heap *heap,
+			void *page, size_t size)
+{
+	struct evl_heap_range *freed = page, *left, *right;
+	bool addr_linked = false;
+
+	freed->size = size;
+
+	left = search_left_mergeable(heap, freed);
+	if (left) {
+		rb_erase(&left->size_node, &heap->size_tree);
+		left->size += freed->size;
+		freed = left;
+		addr_linked = true;
+	}
+
+	right = search_right_mergeable(heap, freed);
+	if (right) {
+		rb_erase(&right->size_node, &heap->size_tree);
+		freed->size += right->size;
+		if (addr_linked)
+			rb_erase(&right->addr_node, &heap->addr_tree);
+		else
+			rb_replace_node(&right->addr_node, &freed->addr_node,
+					&heap->addr_tree);
+	} else if (!addr_linked)
+		insert_range_byaddr(heap, freed);
+
+	insert_range_bysize(heap, freed);
+	mark_pages(heap, addr_to_pagenr(heap, page),
+		size >> EVL_HEAP_PAGE_SHIFT, page_free);
+}
+
+static void add_page_front(struct evl_heap *heap,
+			int pg, int log2size)
+{
+	struct evl_heap_pgentry *new, *head, *next;
+	int ilog;
+
+	/* Insert page at front of the per-bucket page list. */
+
+	ilog = log2size - EVL_HEAP_MIN_LOG2;
+	new = &heap->pagemap[pg];
+	if (heap->buckets[ilog] == -1U) {
+		heap->buckets[ilog] = pg;
+		new->prev = new->next = pg;
+	} else {
+		head = &heap->pagemap[heap->buckets[ilog]];
+		new->prev = heap->buckets[ilog];
+		new->next = head->next;
+		next = &heap->pagemap[new->next];
+		next->prev = pg;
+		head->next = pg;
+		heap->buckets[ilog] = pg;
+	}
+}
+
+static void remove_page(struct evl_heap *heap,
+			int pg, int log2size)
+{
+	struct evl_heap_pgentry *old, *prev, *next;
+	int ilog = log2size - EVL_HEAP_MIN_LOG2;
+
+	/* Remove page from the per-bucket page list. */
+
+	old = &heap->pagemap[pg];
+	if (pg == old->next)
+		heap->buckets[ilog] = -1U;
+	else {
+		if (pg == heap->buckets[ilog])
+			heap->buckets[ilog] = old->next;
+		prev = &heap->pagemap[old->prev];
+		prev->next = old->next;
+		next = &heap->pagemap[old->next];
+		next->prev = old->prev;
+	}
+}
+
+static void move_page_front(struct evl_heap *heap,
+			int pg, int log2size)
+{
+	int ilog = log2size - EVL_HEAP_MIN_LOG2;
+
+	/* Move page at front of the per-bucket page list. */
+
+	if (heap->buckets[ilog] == pg)
+		return;	 /* Already at front, no move. */
+
+	remove_page(heap, pg, log2size);
+	add_page_front(heap, pg, log2size);
+}
+
+static void move_page_back(struct evl_heap *heap,
+			int pg, int log2size)
+{
+	struct evl_heap_pgentry *old, *last, *head, *next;
+	int ilog;
+
+	/* Move page at end of the per-bucket page list. */
+
+	old = &heap->pagemap[pg];
+	if (pg == old->next) /* Singleton, no move. */
+		return;
+
+	remove_page(heap, pg, log2size);
+
+	ilog = log2size - EVL_HEAP_MIN_LOG2;
+	head = &heap->pagemap[heap->buckets[ilog]];
+	last = &heap->pagemap[head->prev];
+	old->prev = head->prev;
+	old->next = last->next;
+	next = &heap->pagemap[old->next];
+	next->prev = pg;
+	last->next = pg;
+}
+
+static void *add_free_range(struct evl_heap *heap,
+			size_t bsize, int log2size)
+{
+	int pg;
+
+	pg = reserve_page_range(heap, ALIGN(bsize, EVL_HEAP_PAGE_SIZE));
+	if (pg < 0)
+		return NULL;
+
+	/*
+	 * Update the page entry.  If @log2size is non-zero
+	 * (i.e. bsize < EVL_HEAP_PAGE_SIZE), bsize is (1 << log2Size)
+	 * between 2^EVL_HEAP_MIN_LOG2 and 2^(EVL_HEAP_PAGE_SHIFT -
+	 * 1).  Save the log2 power into entry.type, then update the
+	 * per-page allocation bitmap to reserve the first block.
+	 *
+	 * Otherwise, we have a larger block which may span multiple
+	 * pages: set entry.type to page_list, indicating the start of
+	 * the page range, and entry.bsize to the overall block size.
+	 */
+	if (log2size) {
+		heap->pagemap[pg].type = log2size;
+		/*
+		 * Mark the first object slot (#0) as busy, along with
+		 * the leftmost bits we won't use for this log2 size.
+		 */
+		heap->pagemap[pg].map = ~gen_block_mask(log2size) | 1;
+		/*
+		 * Insert the new page at front of the per-bucket page
+		 * list, enforcing the assumption that pages with free
+		 * space live close to the head of this list.
+		 */
+		add_page_front(heap, pg, log2size);
+	} else {
+		heap->pagemap[pg].type = page_list;
+		heap->pagemap[pg].bsize = (u32)bsize;
+		mark_pages(heap, pg + 1,
+			(bsize >> EVL_HEAP_PAGE_SHIFT) - 1, page_cont);
+	}
+
+	heap->used_size += bsize;
+
+	return pagenr_to_addr(heap, pg);
+}
+
+int evl_init_heap(struct evl_heap *heap, void *membase, size_t size)
+{
+	int n, nrpages;
+
+	inband_context_only();
+
+	if (size > EVL_HEAP_MAX_HEAPSZ || !PAGE_ALIGNED(size))
+		return -EINVAL;
+
+	/* Reset bucket page lists, all empty. */
+	for (n = 0; n < EVL_HEAP_MAX_BUCKETS; n++)
+		heap->buckets[n] = -1U;
+
+	raw_spin_lock_init(&heap->lock);
+
+	nrpages = size >> EVL_HEAP_PAGE_SHIFT;
+	heap->pagemap = kzalloc(sizeof(struct evl_heap_pgentry) * nrpages,
+				GFP_KERNEL);
+	if (heap->pagemap == NULL)
+		return -ENOMEM;
+
+	heap->membase = membase;
+	heap->usable_size = size;
+	heap->used_size = 0;
+
+	/*
+	 * The free page pool is maintained as a set of ranges of
+	 * contiguous pages indexed by address and size in rbtrees.
+	 * Initially, we have a single range in those trees covering
+	 * the whole memory we have been given for the heap. Over
+	 * time, that range will be split then possibly re-merged back
+	 * as allocations and deallocations take place.
+	 */
+	heap->size_tree = RB_ROOT;
+	heap->addr_tree = RB_ROOT;
+	release_page_range(heap, membase, size);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_init_heap);
+
+void evl_destroy_heap(struct evl_heap *heap)
+{
+	inband_context_only();
+
+	kfree(heap->pagemap);
+}
+EXPORT_SYMBOL_GPL(evl_destroy_heap);
+
+void *evl_alloc_chunk(struct evl_heap *heap, size_t size)
+{
+	int log2size, ilog, pg, b = -1;
+	unsigned long flags;
+	size_t bsize;
+	void *block;
+
+	if (size == 0)
+		return NULL;
+
+	if (size < EVL_HEAP_MIN_ALIGN) {
+		bsize = size = EVL_HEAP_MIN_ALIGN;
+		log2size = EVL_HEAP_MIN_LOG2;
+	} else {
+		log2size = ilog2(size);
+		if (log2size < EVL_HEAP_PAGE_SHIFT) {
+			if (size & (size - 1))
+				log2size++;
+			bsize = 1 << log2size;
+		} else
+			bsize = ALIGN(size, EVL_HEAP_PAGE_SIZE);
+	}
+
+	/*
+	 * Allocate entire pages directly from the pool whenever the
+	 * block is larger or equal to EVL_HEAP_PAGE_SIZE.  Otherwise,
+	 * use bucketed memory.
+	 *
+	 * NOTE: Fully busy pages from bucketed memory are moved back
+	 * at the end of the per-bucket page list, so that we may
+	 * always assume that either the heading page has some room
+	 * available, or no room is available from any page linked to
+	 * this list, in which case we should immediately add a fresh
+	 * page.
+	 */
+	raw_spin_lock_irqsave(&heap->lock, flags);
+
+	if (bsize >= EVL_HEAP_PAGE_SIZE)
+		/* Add a range of contiguous free pages. */
+		block = add_free_range(heap, bsize, 0);
+	else {
+		ilog = log2size - EVL_HEAP_MIN_LOG2;
+		EVL_WARN_ON(MEMORY, ilog < 0 || ilog >= EVL_HEAP_MAX_BUCKETS);
+		pg = heap->buckets[ilog];
+		/*
+		 * Find a block in the heading page if any. If there
+		 * is none, there won't be any down the list: add a
+		 * new page right away.
+		 */
+		if (pg < 0 || heap->pagemap[pg].map == -1U)
+			block = add_free_range(heap, bsize, log2size);
+		else {
+			b = ffs(~heap->pagemap[pg].map) - 1;
+			/*
+			 * Got one block from the heading per-bucket
+			 * page, tag it as busy in the per-page
+			 * allocation map.
+			 */
+			heap->pagemap[pg].map |= (1U << b);
+			heap->used_size += bsize;
+			block = heap->membase +
+				(pg << EVL_HEAP_PAGE_SHIFT) +
+				(b << log2size);
+			if (heap->pagemap[pg].map == -1U)
+				move_page_back(heap, pg, log2size);
+		}
+	}
+
+	raw_spin_unlock_irqrestore(&heap->lock, flags);
+
+	return block;
+}
+EXPORT_SYMBOL_GPL(evl_alloc_chunk);
+
+void evl_free_chunk(struct evl_heap *heap, void *block)
+{
+	unsigned long pgoff, boff;
+	int log2size, pg, n;
+	unsigned long flags;
+	size_t bsize;
+	u32 oldmap;
+
+	raw_spin_lock_irqsave(&heap->lock, flags);
+
+	/* Compute the heading page number in the page map. */
+	pgoff = block - heap->membase;
+	pg = pgoff >> EVL_HEAP_PAGE_SHIFT;
+
+	if (!page_is_valid(heap, pg))
+		goto bad;
+
+	switch (heap->pagemap[pg].type) {
+	case page_list:
+		bsize = heap->pagemap[pg].bsize;
+		EVL_WARN_ON(MEMORY, (bsize & (EVL_HEAP_PAGE_SIZE - 1)) != 0);
+		release_page_range(heap, pagenr_to_addr(heap, pg), bsize);
+		break;
+
+	default:
+		log2size = heap->pagemap[pg].type;
+		bsize = (1 << log2size);
+		EVL_WARN_ON(MEMORY, bsize >= EVL_HEAP_PAGE_SIZE);
+		boff = pgoff & ~EVL_HEAP_PAGE_MASK;
+		if ((boff & (bsize - 1)) != 0) /* Not at block start? */
+			goto bad;
+
+		n = boff >> log2size; /* Block position in page. */
+		oldmap = heap->pagemap[pg].map;
+		heap->pagemap[pg].map &= ~(1U << n);
+
+		/*
+		 * If the page the block was sitting on is fully idle,
+		 * return it to the pool. Otherwise, check whether
+		 * that page is transitioning from fully busy to
+		 * partially busy state, in which case it should move
+		 * toward the front of the per-bucket page list.
+		 */
+		if (heap->pagemap[pg].map == ~gen_block_mask(log2size)) {
+			remove_page(heap, pg, log2size);
+			release_page_range(heap, pagenr_to_addr(heap, pg),
+					EVL_HEAP_PAGE_SIZE);
+		} else if (oldmap == -1U)
+			move_page_front(heap, pg, log2size);
+	}
+
+	heap->used_size -= bsize;
+
+	raw_spin_unlock_irqrestore(&heap->lock, flags);
+
+	return;
+bad:
+	raw_spin_unlock_irqrestore(&heap->lock, flags);
+
+	EVL_WARN(MEMORY, 1, "invalid block %p in heap %s",
+		block, heap == &evl_shared_heap ?
+		"shared" : "system");
+}
+EXPORT_SYMBOL_GPL(evl_free_chunk);
+
+ssize_t evl_check_chunk(struct evl_heap *heap, void *block)
+{
+	unsigned long pg, pgoff, boff;
+	ssize_t ret = -EINVAL;
+	unsigned long flags;
+	size_t bsize;
+
+	raw_spin_lock_irqsave(&heap->lock, flags);
+
+	/* Calculate the page number from the block address. */
+	pgoff = block - heap->membase;
+	pg = pgoff >> EVL_HEAP_PAGE_SHIFT;
+	if (page_is_valid(heap, pg)) {
+		if (heap->pagemap[pg].type == page_list)
+			bsize = heap->pagemap[pg].bsize;
+		else {
+			bsize = (1 << heap->pagemap[pg].type);
+			boff = pgoff & ~EVL_HEAP_PAGE_MASK;
+			if ((boff & (bsize - 1)) != 0) /* Not at block start? */
+				goto out;
+		}
+		ret = (ssize_t)bsize;
+	}
+out:
+	raw_spin_unlock_irqrestore(&heap->lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_check_chunk);
+
+static int init_shared_heap(void)
+{
+	size_t size;
+	void *mem;
+	int ret;
+
+	size = CONFIG_EVL_NR_THREADS *
+		sizeof(struct evl_user_window) +
+		CONFIG_EVL_NR_MONITORS *
+		sizeof(struct evl_monitor_state);
+	size = PAGE_ALIGN(size);
+	mem = kzalloc(size, GFP_KERNEL);
+	if (mem == NULL)
+		return -ENOMEM;
+
+	ret = evl_init_heap(&evl_shared_heap, mem, size);
+	if (ret) {
+		kfree(mem);
+		return ret;
+	}
+
+	evl_shm_size = size;
+
+	return 0;
+}
+
+static void cleanup_shared_heap(void)
+{
+	void *membase = evl_get_heap_base(&evl_shared_heap);
+
+	evl_destroy_heap(&evl_shared_heap);
+	kfree(membase);
+}
+
+static int init_system_heap(void)
+{
+	size_t size = sysheap_size_arg;
+	void *sysmem;
+	int ret;
+
+	if (size == 0)
+		size = CONFIG_EVL_COREMEM_SIZE * 1024;
+
+	sysmem = vmalloc(size);
+	if (sysmem == NULL)
+		return -ENOMEM;
+
+	ret = evl_init_heap(&evl_system_heap, sysmem, size);
+	if (ret) {
+		vfree(sysmem);
+		return -ENOMEM;
+	}
+
+	return 0;
+}
+
+static void cleanup_system_heap(void)
+{
+	void *membase = evl_get_heap_base(&evl_system_heap);
+
+	evl_destroy_heap(&evl_system_heap);
+	vfree(membase);
+}
+
+int __init evl_init_memory(void)
+{
+	int ret;
+
+	ret = EVL_INIT_CALL(1, init_system_heap());
+	if (ret)
+		return ret;
+
+	ret = EVL_INIT_CALL(1, init_shared_heap());
+	if (ret) {
+		cleanup_system_heap();
+		return ret;
+	}
+
+	return 0;
+}
+
+void evl_cleanup_memory(void)
+{
+	cleanup_shared_heap();
+	cleanup_system_heap();
+}
diff --git a/kernel/evl/monitor.c b/kernel/evl/monitor.c
new file mode 100644
index 000000000000..f36a9e4c1175
--- /dev/null
+++ b/kernel/evl/monitor.c
@@ -0,0 +1,951 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+#include <evl/thread.h>
+#include <evl/wait.h>
+#include <evl/mutex.h>
+#include <evl/clock.h>
+#include <evl/monitor.h>
+#include <evl/thread.h>
+#include <evl/memory.h>
+#include <evl/lock.h>
+#include <evl/sched.h>
+#include <evl/factory.h>
+#include <evl/syscall.h>
+#include <evl/poll.h>
+#include <asm/evl/syscall.h>
+#include <uapi/evl/monitor.h>
+#include <trace/events/evl.h>
+
+struct evl_monitor {
+	struct evl_element element;
+	struct evl_monitor_state *state;
+	int type : 2,
+	    protocol : 4;
+	union {
+		struct {
+			struct evl_mutex mutex;
+			struct list_head events;
+			evl_spinlock_t lock;
+		};
+		struct {
+			struct evl_wait_queue wait_queue;
+			struct evl_monitor *gate;
+			struct evl_poll_head poll_head;
+			struct list_head next; /* in ->events */
+			struct list_head next_poll;
+		};
+	};
+};
+
+static const struct file_operations monitor_fops;
+
+struct evl_monitor *get_monitor_by_fd(int efd, struct evl_file **efilpp)
+{
+	struct evl_file *efilp = evl_get_file(efd);
+
+	if (efilp && efilp->filp->f_op == &monitor_fops) {
+		*efilpp = efilp;
+		return element_of(efilp->filp, struct evl_monitor);
+	}
+
+	return NULL;
+}
+
+int evl_signal_monitor_targeted(struct evl_thread *target, int monfd)
+{
+	struct evl_monitor *event;
+	struct evl_file *efilp;
+	unsigned long flags;
+	int ret = 0;
+
+	event = get_monitor_by_fd(monfd, &efilp);
+	if (event == NULL)
+		return -EINVAL;
+
+	if (event->type != EVL_MONITOR_EVENT) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	/*
+	 * Current ought to hold the gate lock before calling us; if
+	 * not, we might race updating the state flags, possibly
+	 * loosing events. Too bad.
+	 */
+	if (target->wchan == &event->wait_queue.wchan) {
+		evl_spin_lock_irqsave(&event->wait_queue.lock, flags);
+		event->state->flags |= (EVL_MONITOR_TARGETED|
+					EVL_MONITOR_SIGNALED);
+		evl_spin_lock(&target->lock);
+		evl_spin_lock(&target->rq->lock);
+		target->info |= T_SIGNAL;
+		evl_spin_unlock(&target->rq->lock);
+		evl_spin_unlock(&target->lock);
+		evl_spin_unlock_irqrestore(&event->wait_queue.lock, flags);
+	}
+out:
+	evl_put_file(efilp);
+
+	return ret;
+}
+
+void __evl_commit_monitor_ceiling(void)
+{
+	struct evl_thread *curr = evl_current();
+	struct evl_monitor *gate;
+
+	/*
+	 * curr->u_window has to be valid since curr bears T_USER.  If
+	 * pp_pending is a bad handle, just skip ceiling.
+	 */
+	gate = evl_get_element_by_fundle(&evl_monitor_factory,
+					curr->u_window->pp_pending,
+					struct evl_monitor);
+	if (gate == NULL)
+		goto out;
+
+	if (gate->protocol == EVL_GATE_PP)
+		evl_commit_mutex_ceiling(&gate->mutex);
+
+	evl_put_element(&gate->element);
+out:
+	curr->u_window->pp_pending = EVL_NO_HANDLE;
+}
+
+/* event->gate->lock and event->wait_queue.lock held, irqs off */
+static void __untrack_event(struct evl_monitor *event)
+{
+	/*
+	 * If no more waiter is pending on this event, have the gate
+	 * stop tracking it.
+	 */
+	if (!evl_wait_active(&event->wait_queue)) {
+		list_del(&event->next);
+		event->gate = NULL;
+		event->state->u.event.gate_offset = EVL_MONITOR_NOGATE;
+	}
+}
+
+static void untrack_event(struct evl_monitor *event)
+{
+	struct evl_monitor *gate = event->gate;
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&gate->lock, flags);
+	evl_spin_lock(&event->wait_queue.lock);
+	__untrack_event(event);
+	evl_spin_unlock(&event->wait_queue.lock);
+	evl_spin_unlock_irqrestore(&gate->lock, flags);
+}
+
+/* event->gate->lock and event->wait_queue.lock held, irqs off */
+static void wakeup_waiters(struct evl_monitor *event)
+{
+	struct evl_monitor_state *state = event->state;
+	struct evl_thread *waiter, *n;
+	bool bcast;
+
+	bcast = !!(state->flags & EVL_MONITOR_BROADCAST);
+
+	/*
+	 * We are called upon exiting a gate which serializes access
+	 * to a signaled event. Unblock the thread(s) satisfied by the
+	 * signal, either all, some or only one of them, depending on
+	 * whether this is due to a broadcast, targeted or regular
+	 * notification.
+	 *
+	 * Precedence order for event delivery is as follows:
+	 * broadcast > targeted > regular.  This means that a
+	 * broadcast notification is considered first and applied if
+	 * detected. Otherwise, and in presence of a targeted wake up
+	 * request, only the target thread(s) are woken up. Otherwise,
+	 * the thread heading the wait queue is readied.
+	 */
+	if (evl_wait_active(&event->wait_queue)) {
+		if (bcast)
+			evl_flush_wait_locked(&event->wait_queue, 0);
+		else if (state->flags & EVL_MONITOR_TARGETED) {
+			evl_for_each_waiter_safe(waiter, n,
+						&event->wait_queue) {
+				if (waiter->info & T_SIGNAL)
+					evl_wake_up(&event->wait_queue, waiter);
+			}
+		} else
+			evl_wake_up_head(&event->wait_queue);
+
+		__untrack_event(event);
+	} /* Otherwise, spurious wakeup (fine, might happen). */
+
+	state->flags &= ~(EVL_MONITOR_SIGNALED|
+			EVL_MONITOR_BROADCAST|
+			EVL_MONITOR_TARGETED);
+}
+
+static int __enter_monitor(struct evl_monitor *gate,
+			struct evl_monitor_lockreq *req)
+{
+	ktime_t timeout = EVL_INFINITE;
+	enum evl_tmode tmode;
+
+	if (req) {
+		if ((unsigned long)req->timeout.tv_nsec >= ONE_BILLION)
+			return -EINVAL;
+		timeout = timespec_to_ktime(req->timeout);
+	}
+
+	tmode = timeout ? EVL_ABS : EVL_REL;
+
+	return evl_lock_mutex_timeout(&gate->mutex, timeout, tmode);
+}
+
+static int enter_monitor(struct evl_monitor *gate,
+			struct evl_monitor_lockreq *req)
+{
+	struct evl_thread *curr = evl_current();
+
+	if (gate->type != EVL_MONITOR_GATE)
+		return -EINVAL;
+
+	if (evl_is_mutex_owner(gate->mutex.fastlock, fundle_of(curr)))
+		return -EDEADLK; /* Deny recursive locking. */
+
+	evl_commit_monitor_ceiling();
+
+	return __enter_monitor(gate, req);
+}
+
+static int tryenter_monitor(struct evl_monitor *gate)
+{
+	if (gate->type != EVL_MONITOR_GATE)
+		return -EINVAL;
+
+	evl_commit_monitor_ceiling();
+
+	return evl_trylock_mutex(&gate->mutex);
+}
+
+static void __exit_monitor(struct evl_monitor *gate,
+			struct evl_thread *curr)
+{
+	/*
+	 * If we are about to release the lock which is still pending
+	 * PP (i.e. we never got scheduled out while holding it),
+	 * clear the lazy handle.
+	 */
+	if (fundle_of(gate) == curr->u_window->pp_pending)
+		curr->u_window->pp_pending = EVL_NO_HANDLE;
+
+	__evl_unlock_mutex(&gate->mutex);
+}
+
+static int exit_monitor(struct evl_monitor *gate)
+{
+	struct evl_monitor_state *state = gate->state;
+	struct evl_thread *curr = evl_current();
+	struct evl_monitor *event, *n;
+	unsigned long flags;
+
+	if (gate->type != EVL_MONITOR_GATE)
+		return -EINVAL;
+
+	if (!evl_is_mutex_owner(gate->mutex.fastlock, fundle_of(curr)))
+		return -EPERM;
+
+	/*
+	 * Locking order is gate lock first, depending event lock(s)
+	 * next.
+	 */
+	evl_spin_lock_irqsave(&gate->lock, flags);
+
+	__exit_monitor(gate, curr);
+
+	if (state->flags & EVL_MONITOR_SIGNALED) {
+		/*
+		 * gate.mutex is held by current, so we are covered
+		 * against races with userland manipulating the flags.
+		 */
+		state->flags &= ~EVL_MONITOR_SIGNALED;
+		list_for_each_entry_safe(event, n, &gate->events, next) {
+			evl_spin_lock(&event->wait_queue.lock);
+			if (event->state->flags & EVL_MONITOR_SIGNALED)
+				wakeup_waiters(event);
+			evl_spin_unlock(&event->wait_queue.lock);
+		}
+	}
+
+	evl_spin_unlock_irqrestore(&gate->lock, flags);
+
+	evl_schedule();
+
+	return 0;
+}
+
+static inline bool test_event_mask(struct evl_monitor_state *state,
+				s32 *r_value)
+{
+	int val;
+
+	/* Read and reset the event mask, unblocking if non-zero. */
+	for (;;) {
+		val = atomic_read(&state->u.event.value);
+		if (!val)
+			return false;
+		if (atomic_cmpxchg(&state->u.event.value, val, 0) == val) {
+			*r_value = val;
+			return true;
+		}
+	}
+}
+
+/*
+ * Special forms of the wait operation which are not protected by a
+ * lock but behave either as a semaphore P operation based on the
+ * signedness of the event value, or as a bitmask of discrete events.
+ * Userland is expected to implement a fast atomic path if possible
+ * and deal with signal-vs-wait races in its own way.
+ */
+static int wait_monitor_ungated(struct file *filp,
+				struct evl_monitor_waitreq *req,
+				s32 *r_value)
+{
+	struct evl_monitor *event = element_of(filp, struct evl_monitor);
+	struct evl_monitor_state *state = event->state;
+	enum evl_tmode tmode;
+	unsigned long flags;
+	int ret = 0, val;
+	ktime_t timeout;
+	atomic_t *at;
+
+	timeout = timespec_to_ktime(req->timeout);
+	tmode = timeout ? EVL_ABS : EVL_REL;
+
+	switch (event->protocol) {
+	case EVL_EVENT_COUNT:
+		at = &state->u.event.value;
+		if (filp->f_flags & O_NONBLOCK) {
+			val = atomic_read(at);
+			/* atomic_dec_unless_zero_or_negative */
+			do {
+				if (unlikely(val <= 0)) {
+					ret = -EAGAIN;
+					break;
+				}
+			} while (!atomic_try_cmpxchg(at, &val, val - 1));
+		} else {
+			evl_spin_lock_irqsave(&event->wait_queue.lock, flags);
+			if (atomic_dec_return(at) < 0) {
+				evl_add_wait_queue(&event->wait_queue,
+						timeout, tmode);
+				evl_spin_unlock_irqrestore(&event->wait_queue.lock,
+							flags);
+				ret = evl_wait_schedule(&event->wait_queue);
+				if (ret) /* Rollback decrement if failed. */
+					atomic_inc(at);
+			} else
+				evl_spin_unlock_irqrestore(&event->wait_queue.lock,
+							flags);
+		}
+		break;
+	case EVL_EVENT_MASK:
+		if (filp->f_flags & O_NONBLOCK)
+			timeout = EVL_NONBLOCK;
+		ret = evl_wait_event_timeout(&event->wait_queue,
+					timeout, tmode,
+					test_event_mask(state, r_value));
+		if (!ret) { /* POLLOUT if flags have been received. */
+			evl_signal_poll_events(&event->poll_head,
+					POLLOUT|POLLWRNORM);
+			evl_schedule();
+		}
+		break;
+	default:
+		ret = -EINVAL;	/* uh? brace for rollercoaster. */
+	}
+
+	return ret;
+}
+
+static inline s32 set_event_mask(struct evl_monitor_state *state,
+				s32 addval)
+{
+	int prev, val, next;
+
+	val = atomic_read(&state->u.event.value);
+	do {
+		prev = val;
+		next = prev | (int)addval;
+		val = atomic_cmpxchg(&state->u.event.value, prev, next);
+	} while (val != prev);
+
+	return next;
+}
+
+static int signal_monitor_ungated(struct evl_monitor *event, s32 sigval)
+{
+	struct evl_monitor_state *state = event->state;
+	bool pollable = true;
+	unsigned long flags;
+	int ret = 0, val;
+
+	if (event->type != EVL_MONITOR_EVENT)
+		return -EINVAL;
+
+	/*
+	 * We might receive a null sigval for the purpose of
+	 * triggering a wakeup check and/or poll notification without
+	 * changing the event value.
+	 *
+	 * In any case, we serialize against the read side not to lose
+	 * wake up events.
+	 */
+	switch (event->protocol) {
+	case EVL_EVENT_COUNT:
+		if (!sigval)
+			break;
+		evl_spin_lock_irqsave(&event->wait_queue.lock, flags);
+		if (atomic_inc_return(&state->u.event.value) <= 0) {
+			evl_wake_up_head(&event->wait_queue);
+			pollable = false;
+		}
+		evl_spin_unlock_irqrestore(&event->wait_queue.lock, flags);
+		break;
+	case EVL_EVENT_MASK:
+		evl_spin_lock_irqsave(&event->wait_queue.lock, flags);
+		val = set_event_mask(state, (int)sigval);
+		if (val)
+			evl_flush_wait_locked(&event->wait_queue, 0);
+		else
+			pollable = false;
+		evl_spin_unlock_irqrestore(&event->wait_queue.lock, flags);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	if (pollable)
+		evl_signal_poll_events(&event->poll_head,
+				POLLIN|POLLRDNORM);
+
+	evl_schedule();
+
+	return ret;
+}
+
+static int wait_monitor(struct file *filp,
+			struct evl_monitor_waitreq *req,
+			s32 *r_op_ret,
+			s32 *r_value)
+{
+	struct evl_monitor *event = element_of(filp, struct evl_monitor);
+	struct evl_thread *curr = evl_current();
+	struct evl_monitor *gate;
+	int ret = 0, op_ret = 0;
+	struct evl_file *efilp;
+	enum evl_tmode tmode;
+	unsigned long flags;
+	ktime_t timeout;
+
+	if (event->type != EVL_MONITOR_EVENT) {
+		op_ret = -EINVAL;
+		goto out;
+	}
+
+	if ((unsigned long)req->timeout.tv_nsec >= ONE_BILLION) {
+		op_ret = -EINVAL;
+		goto out;
+	}
+
+	timeout = timespec_to_ktime(req->timeout);
+	tmode = timeout ? EVL_ABS : EVL_REL;
+
+	if (req->gatefd < 0) {
+		ret = wait_monitor_ungated(filp, req, r_value);
+		*r_op_ret = ret;
+		return ret;
+	}
+
+	/* Find the gate monitor protecting us. */
+	gate = get_monitor_by_fd(req->gatefd, &efilp);
+	if (gate == NULL) {
+		op_ret = -EINVAL;
+		goto out;
+	}
+
+	if (gate->type != EVL_MONITOR_GATE) {
+		op_ret = -EINVAL;
+		goto put;
+	}
+
+	/* Make sure we actually passed the gate. */
+	if (!evl_is_mutex_owner(gate->mutex.fastlock, fundle_of(curr))) {
+		op_ret = -EPERM;
+		goto put;
+	}
+
+	evl_spin_lock_irqsave(&gate->lock, flags);
+	evl_spin_lock(&event->wait_queue.lock);
+
+	/*
+	 * Track event monitors the gate protects. When multiple
+	 * threads issue concurrent wait requests on the same event
+	 * monitor, they must use the same gate to serialize. Don't
+	 * trust userland for maintaining sane tracking info in
+	 * gate_offset, keep event->gate on the kernel side for this.
+	 */
+	if (event->gate == NULL) {
+		list_add_tail(&event->next, &gate->events);
+		event->gate = gate;
+		event->state->u.event.gate_offset = evl_shared_offset(gate->state);
+	} else if (event->gate != gate) {
+		evl_spin_unlock(&event->wait_queue.lock);
+		evl_spin_unlock_irqrestore(&gate->lock, flags);
+		op_ret = -EBADFD;
+		goto put;
+	}
+
+	evl_add_wait_queue(&event->wait_queue, timeout, tmode);
+
+	evl_spin_lock(&curr->lock);
+	evl_spin_lock(&curr->rq->lock);
+	curr->info &= ~T_SIGNAL;
+	evl_spin_unlock(&curr->rq->lock);
+	evl_spin_unlock(&curr->lock);
+	evl_spin_unlock(&event->wait_queue.lock);
+	__exit_monitor(gate, curr);
+	evl_spin_unlock_irqrestore(&gate->lock, flags);
+
+	/*
+	 * Actually wait on the event. If a break condition is raised
+	 * such as an inband signal pending, do not attempt to
+	 * reacquire the gate lock just yet as this might block
+	 * indefinitely (in theory) and we want the inband signal to
+	 * be handled asap. So exit to user mode, allowing any pending
+	 * signal to be handled during the transition, then expect
+	 * userland to issue UNWAIT to recover (or exit, whichever
+	 * comes first).
+	 */
+	ret = evl_wait_schedule(&event->wait_queue);
+	if (ret) {
+		untrack_event(event);
+		if (ret == -EINTR)
+			goto put;
+		op_ret = ret;
+	}
+
+	if (ret != -EIDRM)	/* Success or -ETIMEDOUT */
+		ret = __enter_monitor(gate, NULL);
+put:
+	evl_put_file(efilp);
+out:
+	*r_op_ret = op_ret;
+
+	return ret;
+}
+
+static int unwait_monitor(struct evl_monitor *event,
+			struct evl_monitor_unwaitreq *req)
+{
+	struct evl_monitor *gate;
+	struct evl_file *efilp;
+	int ret;
+
+	if (event->type != EVL_MONITOR_EVENT)
+		return -EINVAL;
+
+	/* Find the gate monitor we need to re-acquire. */
+	gate = get_monitor_by_fd(req->gatefd, &efilp);
+	if (gate == NULL)
+		return -EINVAL;
+
+	ret = enter_monitor(gate, NULL);
+
+	evl_put_file(efilp);
+
+	return ret;
+}
+
+static long monitor_common_ioctl(struct file *filp, unsigned int cmd,
+				unsigned long arg)
+{
+	struct evl_monitor *mon = element_of(filp, struct evl_monitor);
+	__s32 sigval;
+	int ret;
+
+	switch (cmd) {
+	case EVL_MONIOC_SIGNAL:
+		if (raw_get_user(sigval, (__s32 __user *)arg))
+			return -EFAULT;
+		ret = signal_monitor_ungated(mon, sigval);
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static long monitor_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_monitor *mon = element_of(filp, struct evl_monitor);
+	struct evl_monitor_binding bind, __user *u_bind;
+
+	if (cmd != EVL_MONIOC_BIND)
+		return monitor_common_ioctl(filp, cmd, arg);
+
+	bind.type = mon->type;
+	bind.protocol = mon->protocol;
+	bind.eids.minor = mon->element.minor;
+	bind.eids.state_offset = evl_shared_offset(mon->state);
+	bind.eids.fundle = fundle_of(mon);
+	u_bind = (typeof(u_bind))arg;
+
+	return copy_to_user(u_bind, &bind, sizeof(bind)) ? -EFAULT : 0;
+}
+
+static long monitor_oob_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_monitor *mon = element_of(filp, struct evl_monitor);
+	struct evl_monitor_unwaitreq uwreq, __user *u_uwreq;
+	struct evl_monitor_waitreq wreq, __user *u_wreq;
+	struct evl_monitor_lockreq lreq, __user *u_lreq;
+	s32 op_ret, value = 0;
+	long ret;
+
+	if (cmd == EVL_MONIOC_WAIT) {
+		u_wreq = (typeof(u_wreq))arg;
+		ret = raw_copy_from_user(&wreq, u_wreq, sizeof(wreq));
+		if (ret)
+			return -EFAULT;
+		ret = wait_monitor(filp, &wreq, &op_ret, &value);
+		raw_put_user(op_ret, &u_wreq->status);
+		if (!ret && !op_ret)
+			raw_put_user(value, &u_wreq->value);
+		return ret;
+	}
+
+	if (cmd == EVL_MONIOC_UNWAIT) {
+		u_uwreq = (typeof(u_uwreq))arg;
+		ret = raw_copy_from_user(&uwreq, u_uwreq, sizeof(uwreq));
+		if (ret)
+			return -EFAULT;
+		return unwait_monitor(mon, &uwreq);
+	}
+
+	switch (cmd) {
+	case EVL_MONIOC_ENTER:
+		u_lreq = (typeof(u_lreq))arg;
+		ret = raw_copy_from_user(&lreq, u_lreq, sizeof(lreq));
+		if (ret)
+			return -EFAULT;
+		ret = enter_monitor(mon, &lreq);
+		break;
+	case EVL_MONIOC_TRYENTER:
+		ret = tryenter_monitor(mon);
+		break;
+	case EVL_MONIOC_EXIT:
+		ret = exit_monitor(mon);
+		break;
+	default:
+		ret = monitor_common_ioctl(filp, cmd, arg);
+	}
+
+	return ret;
+}
+
+static void monitor_unwatch(struct file *filp)
+{
+	struct evl_monitor *mon = element_of(filp, struct evl_monitor);
+
+	atomic_dec(&mon->state->u.event.pollrefs);
+}
+
+static __poll_t monitor_oob_poll(struct file *filp,
+				struct oob_poll_wait *wait)
+{
+	struct evl_monitor *mon = element_of(filp, struct evl_monitor);
+	struct evl_monitor_state *state = mon->state;
+	__poll_t ret = 0;
+
+	/*
+	 * NOTE: for ungated events, we close a race window by queuing
+	 * the caller into the poll queue _before_ incrementing the
+	 * pollrefs count which userland checks.
+	 */
+	switch (mon->type) {
+	case EVL_MONITOR_EVENT:
+		switch (mon->protocol) {
+		case EVL_EVENT_COUNT:
+			evl_poll_watch(&mon->poll_head, wait, monitor_unwatch);
+			atomic_inc(&state->u.event.pollrefs);
+			if (atomic_read(&state->u.event.value) > 0)
+				ret = POLLIN|POLLRDNORM;
+			break;
+		case EVL_EVENT_MASK:
+			evl_poll_watch(&mon->poll_head, wait, monitor_unwatch);
+			atomic_inc(&state->u.event.pollrefs);
+			if (atomic_read(&state->u.event.value))
+				ret = POLLIN|POLLRDNORM;
+			else
+				ret = POLLOUT|POLLWRNORM;
+			break;
+		case EVL_EVENT_GATED:
+			/*
+			 * The poll interface does not cope with the
+			 * gated event semantics, since we could not
+			 * release the gate protecting the event and
+			 * enter a poll wait atomically to prevent
+			 * missed wakeups.  Therefore, polling a gated
+			 * event leads to an error.
+			 */
+			ret = POLLERR;
+			break;
+		}
+		break;
+	case EVL_MONITOR_GATE:
+		/*
+		 * A mutex should be held only for a short period of
+		 * time, with the locked state appearing as a discrete
+		 * event to users. Assume a gate lock is always
+		 * readable (as "unlocked") then. If this is about
+		 * probing for a mutex state from userland then
+		 * trylock() should be used instead of poll().
+		 */
+		ret = POLLIN|POLLRDNORM;
+		break;
+	}
+
+	return ret;
+}
+
+static int monitor_release(struct inode *inode, struct file *filp)
+{
+	struct evl_monitor *mon = element_of(filp, struct evl_monitor);
+
+	if (mon->type == EVL_MONITOR_EVENT)
+		evl_flush_wait(&mon->wait_queue, T_RMID);
+	else
+		evl_flush_mutex(&mon->mutex, T_RMID);
+
+	return evl_release_element(inode, filp);
+}
+
+static const struct file_operations monitor_fops = {
+	.open		= evl_open_element,
+	.release	= monitor_release,
+	.unlocked_ioctl	= monitor_ioctl,
+	.oob_ioctl	= monitor_oob_ioctl,
+	.oob_poll	= monitor_oob_poll,
+};
+
+static struct evl_element *
+monitor_factory_build(struct evl_factory *fac, const char *name,
+		void __user *u_attrs, u32 *state_offp)
+{
+	struct evl_monitor_state *state;
+	struct evl_monitor_attrs attrs;
+	struct evl_monitor *mon;
+	struct evl_clock *clock;
+	int ret;
+
+	ret = copy_from_user(&attrs, u_attrs, sizeof(attrs));
+	if (ret)
+		return ERR_PTR(-EFAULT);
+
+	switch (attrs.type) {
+	case EVL_MONITOR_GATE:
+		switch (attrs.protocol) {
+		case EVL_GATE_PP:
+			if (attrs.initval == 0 ||
+				attrs.initval > EVL_FIFO_MAX_PRIO)
+				return ERR_PTR(-EINVAL);
+			break;
+		case EVL_GATE_PI:
+			if (attrs.initval)
+				return ERR_PTR(-EINVAL);
+			break;
+		default:
+			return ERR_PTR(-EINVAL);
+		}
+		break;
+	case EVL_MONITOR_EVENT:
+		switch (attrs.protocol) {
+		case EVL_EVENT_GATED:
+		case EVL_EVENT_COUNT:
+		case EVL_EVENT_MASK:
+			break;
+		default:
+			return ERR_PTR(-EINVAL);
+		}
+		break;
+	default:
+		return ERR_PTR(-EINVAL);
+	}
+
+	clock = evl_get_clock_by_fd(attrs.clockfd);
+	if (clock == NULL)
+		return ERR_PTR(-EINVAL);
+
+	mon = kzalloc(sizeof(*mon), GFP_KERNEL);
+	if (mon == NULL) {
+		ret = -ENOMEM;
+		goto fail_alloc;
+	}
+
+	ret = evl_init_element(&mon->element, &evl_monitor_factory);
+	if (ret)
+		goto fail_element;
+
+	state = evl_zalloc_chunk(&evl_shared_heap, sizeof(*state));
+	if (state == NULL) {
+		ret = -ENOMEM;
+		goto fail_heap;
+	}
+
+	switch (attrs.type) {
+	case EVL_MONITOR_GATE:
+		switch (attrs.protocol) {
+		case EVL_GATE_PP:
+			state->u.gate.ceiling = attrs.initval;
+			evl_init_mutex_pp(&mon->mutex, clock,
+					&state->u.gate.owner,
+					&state->u.gate.ceiling);
+			INIT_LIST_HEAD(&mon->events);
+			break;
+		case EVL_GATE_PI:
+			evl_init_mutex_pi(&mon->mutex, clock,
+					&state->u.gate.owner);
+			INIT_LIST_HEAD(&mon->events);
+			break;
+		}
+		evl_spin_lock_init(&mon->lock);
+		break;
+	case EVL_MONITOR_EVENT:
+		evl_init_wait(&mon->wait_queue, clock, EVL_WAIT_PRIO);
+		state->u.event.gate_offset = EVL_MONITOR_NOGATE;
+		atomic_set(&state->u.event.value, attrs.initval);
+		evl_init_poll_head(&mon->poll_head);
+	}
+
+	/*
+	 * The type information is critical for the kernel sanity,
+	 * don't allow userland to mess with it, so don't trust the
+	 * shared state for this.
+	 */
+	mon->type = attrs.type;
+	mon->protocol = attrs.protocol;
+	mon->state = state;
+	*state_offp = evl_shared_offset(state);
+	evl_index_element(&mon->element);
+
+	return &mon->element;
+
+fail_heap:
+	evl_destroy_element(&mon->element);
+fail_element:
+	kfree(mon);
+fail_alloc:
+	evl_put_clock(clock);
+
+	return ERR_PTR(ret);
+}
+
+static void monitor_factory_dispose(struct evl_element *e)
+{
+	struct evl_monitor *mon;
+	unsigned long flags;
+
+	mon = container_of(e, struct evl_monitor, element);
+
+	evl_unindex_element(&mon->element);
+
+	if (mon->type == EVL_MONITOR_EVENT) {
+		evl_put_clock(mon->wait_queue.clock);
+		evl_destroy_wait(&mon->wait_queue);
+		if (mon->gate) {
+			evl_spin_lock_irqsave(&mon->gate->lock, flags);
+			list_del(&mon->next);
+			evl_spin_unlock_irqrestore(&mon->gate->lock, flags);
+		}
+	} else {
+		evl_put_clock(mon->mutex.clock);
+		evl_destroy_mutex(&mon->mutex);
+	}
+
+	evl_free_chunk(&evl_shared_heap, mon->state);
+	evl_destroy_element(&mon->element);
+	kfree_rcu(mon, element.rcu);
+}
+
+static ssize_t state_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_monitor_state *state;
+	struct evl_thread *owner = NULL;
+	struct evl_monitor *mon;
+	ssize_t ret = 0;
+	fundle_t fun;
+
+	mon = evl_get_element_by_dev(dev, struct evl_monitor);
+	state = mon->state;
+
+	if (mon->type == EVL_MONITOR_EVENT) {
+		switch (mon->protocol) {
+		case EVL_EVENT_MASK:
+			ret = snprintf(buf, PAGE_SIZE, "%#x\n",
+				atomic_read(&state->u.event.value));
+			break;
+		case EVL_EVENT_COUNT:
+			ret = snprintf(buf, PAGE_SIZE, "%d\n",
+				atomic_read(&state->u.event.value));
+			break;
+		case EVL_EVENT_GATED:
+			ret = snprintf(buf, PAGE_SIZE, "%#x\n",
+				state->flags);
+			break;
+		}
+	} else {
+		fun = atomic_read(&state->u.gate.owner);
+		if (fun != EVL_NO_HANDLE)
+			owner = evl_get_element_by_fundle(&evl_thread_factory,
+							evl_get_index(fun),
+							struct evl_thread);
+		ret = snprintf(buf, PAGE_SIZE, "%d %u %u\n",
+			owner ? evl_get_inband_pid(owner) : -1,
+			state->u.gate.ceiling,
+			owner ? (state->u.gate.recursive ?
+				state->u.gate.nesting : 1) : 0);
+		if (owner)
+			evl_put_element(&owner->element);
+	}
+
+	evl_put_element(&mon->element);
+
+	return ret;
+}
+static DEVICE_ATTR_RO(state);
+
+static struct attribute *monitor_attrs[] = {
+	&dev_attr_state.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(monitor);
+
+struct evl_factory evl_monitor_factory = {
+	.name	=	EVL_MONITOR_DEV,
+	.fops	=	&monitor_fops,
+	.build =	monitor_factory_build,
+	.dispose =	monitor_factory_dispose,
+	.nrdev	=	CONFIG_EVL_NR_MONITORS,
+	.attrs	=	monitor_groups,
+	.flags	=	EVL_FACTORY_CLONE,
+};
diff --git a/kernel/evl/mutex.c b/kernel/evl/mutex.c
new file mode 100644
index 000000000000..59d0ed658504
--- /dev/null
+++ b/kernel/evl/mutex.c
@@ -0,0 +1,1117 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/kernel.h>
+#include <evl/timer.h>
+#include <evl/clock.h>
+#include <evl/sched.h>
+#include <evl/thread.h>
+#include <evl/mutex.h>
+#include <evl/monitor.h>
+#include <evl/wait.h>
+#include <uapi/evl/signal.h>
+#include <trace/events/evl.h>
+
+#define for_each_evl_mutex_waiter(__pos, __mutex) \
+	list_for_each_entry(__pos, &(__mutex)->wchan.wait_list, wait_next)
+
+static inline int get_ceiling_value(struct evl_mutex *mutex)
+{
+	/*
+	 * The ceiling priority value is stored in user-writable
+	 * memory, make sure to constrain it within valid bounds for
+	 * evl_sched_fifo before using it.
+	 */
+	return clamp(*mutex->ceiling_ref, 1U, (u32)EVL_FIFO_MAX_PRIO);
+}
+
+static inline void disable_inband_switch(struct evl_thread *curr)
+{
+	/*
+	 * Track mutex locking depth: 1) to prevent weak threads from
+	 * being switched back to in-band context on return from OOB
+	 * syscalls, 2) when locking consistency is being checked.
+	 */
+	if (curr->state & (T_WEAK|T_WOLI))
+		atomic_inc(&curr->inband_disable_count);
+}
+
+static inline bool enable_inband_switch(struct evl_thread *curr)
+{
+	if (likely(!(curr->state & (T_WEAK|T_WOLI))))
+		return true;
+
+	if (likely(atomic_dec_return(&curr->inband_disable_count) >= 0))
+		return true;
+
+	atomic_set(&curr->inband_disable_count, 0);
+	if (curr->state & T_WOLI)
+		evl_signal_thread(curr, SIGDEBUG, SIGDEBUG_MUTEX_IMBALANCE);
+
+	return false;
+}
+
+/* owner->lock held, irqs off. */
+static void raise_boost_flag(struct evl_thread *owner)
+{
+	assert_evl_lock(&owner->lock);
+
+	evl_spin_lock(&owner->rq->lock);
+
+	/* Backup the base priority at first boost only. */
+	if (!(owner->state & T_BOOST)) {
+		owner->bprio = owner->cprio;
+		owner->state |= T_BOOST;
+	}
+
+	evl_spin_unlock(&owner->rq->lock);
+}
+
+/* owner->lock + contender->lock held, irqs off */
+static int inherit_thread_priority(struct evl_thread *owner,
+				struct evl_thread *contender,
+				struct evl_thread *originator)
+{
+	struct evl_wait_channel *wchan;
+	int ret = 0;
+
+	assert_evl_lock(&owner->lock);
+	assert_evl_lock(&contender->lock);
+
+	/* Apply the scheduling policy of @contender to @owner */
+	evl_track_thread_policy(owner, contender);
+
+	/*
+	 * @owner may be blocked on a mutex, the reordering handler
+	 * propagates the priority update along the PI chain if so.
+	 */
+	wchan = owner->wchan;
+	if (wchan)
+		ret = wchan->reorder_wait(owner, originator);
+
+	return ret;
+}
+
+/* Perform a locking op. to non-origin mutex only. */
+#define cond_lock_op(__op, __this_mutex, __origin_mutex)		\
+	do {								\
+		if ((__this_mutex) != (__origin_mutex))			\
+			evl_spin_ ## __op(&(__this_mutex)->lock);	\
+	} while (0)
+
+/* owner->lock + origin_mutex->lock held, irqs off */
+static int adjust_boost(struct evl_thread *owner,
+			struct evl_thread *contender,
+			struct evl_mutex *origin,
+			struct evl_thread *originator)
+{
+	struct evl_wait_channel *wchan;
+	struct evl_mutex *mutex;
+	int pprio, ret = 0;
+
+	/*
+	 * Adjust the priority of the @owner of @mutex as a result of
+	 * a new @contender sleeping on it. If @contender is NULL, the
+	 * thread with the highest priority amongst those waiting for
+	 * some mutex held by @owner is picked instead. @originator is
+	 * the thread which initially triggered this PI walk
+	 * originally targeting the @origin mutex - we use this
+	 * information specifically for deadlock detection, making
+	 * sure that @originator never appears in the dependency chain
+	 * more than once.
+	 *
+	 * The safe locking order during the PI chain traversal is:
+	 *
+	 * originator->lock
+	 * ... (start of traversal) ...
+	 * +-> owner->lock
+	 * |     mutex->lock
+	 * |
+	 * |  owner := mutex->owner
+	 * |  mutex := owner->wchan -+
+	 * |                         |
+	 * +-------------------------+
+	 *
+	 * At each stage, wchan->reorder_wait() fixes up the priority
+	 * for @owner before walking deeper into PI chain.
+	 */
+	assert_evl_lock(&owner->lock);
+	assert_evl_lock(&origin->lock);
+
+	/*
+	 * CAUTION: we may have PI and PP-enabled mutexes among the
+	 * boosters, considering the leader of mutex->wchan.wait_list
+	 * is therefore NOT enough for determining the next boost
+	 * priority, since PP is tracked lazily on acquisition, not
+	 * immediately when a contention is detected. Check the head
+	 * of the booster list instead.
+	 */
+	mutex = list_first_entry(&owner->boosters,
+				struct evl_mutex, next_booster);
+	cond_lock_op(lock, mutex, origin);
+	if (mutex->wprio == owner->wprio) {
+		cond_lock_op(unlock, mutex, origin);
+		return 0;
+	}
+
+	if (mutex->flags & EVL_MUTEX_PP) {
+		pprio = get_ceiling_value(mutex);
+		/*
+		 * Raise @owner priority to the ceiling value, this
+		 * implicitly switches it to SCHED_FIFO if need be.
+		 */
+		evl_protect_thread_priority(owner, pprio);
+		wchan = owner->wchan;
+		if (wchan)
+			ret = wchan->reorder_wait(owner, originator);
+		cond_lock_op(unlock, mutex, origin);
+	} else {
+		if (EVL_WARN_ON(CORE, list_empty(&mutex->wchan.wait_list))) {
+			cond_lock_op(unlock, mutex, origin);
+			return 0;
+		}
+		if (contender == NULL) {
+			contender = list_first_entry(&mutex->wchan.wait_list,
+						struct evl_thread, wait_next);
+			evl_spin_lock(&contender->lock);
+			ret = inherit_thread_priority(owner, contender,
+						originator);
+			evl_spin_unlock(&contender->lock);
+		} else { /* Otherwise @contender is already locked. */
+			ret = inherit_thread_priority(owner, contender,
+						originator);
+		}
+		cond_lock_op(unlock, mutex, origin);
+	}
+
+	return ret;
+}
+
+/* mutex->lock held, irqs off */
+static void ceil_owner_priority(struct evl_mutex *mutex,
+				struct evl_thread *originator)
+{
+	struct evl_thread *owner = mutex->owner;
+	int wprio;
+
+	assert_evl_lock(&mutex->lock);
+
+	/* PP ceiling values are implicitly based on the FIFO class. */
+	wprio = evl_calc_weighted_prio(&evl_sched_fifo,
+				get_ceiling_value(mutex));
+	mutex->wprio = wprio;
+
+	/*
+	 * If the ceiling value is lower than the current effective
+	 * priority, we must not adjust the latter.  BEWARE: not only
+	 * this restriction is required to keep the PP logic right,
+	 * but this is also a basic assumption made by all callers of
+	 * evl_commit_monitor_ceiling() which won't check for any
+	 * rescheduling opportunity upon return.
+	 *
+	 * However we do want the mutex to be linked to the booster
+	 * list, and T_BOOST must appear in the current thread status.
+	 *
+	 * This way, setparam() won't be allowed to decrease the
+	 * current weighted priority below the ceiling value, until we
+	 * eventually release this mutex.
+	 */
+	evl_spin_lock(&owner->lock);
+
+	list_add_priff(mutex, &owner->boosters, wprio, next_booster);
+	raise_boost_flag(owner);
+	mutex->flags |= EVL_MUTEX_CEILING;
+
+	if (wprio > owner->wprio)
+		adjust_boost(owner, NULL, mutex, originator);
+
+	evl_spin_unlock(&owner->lock);
+}
+
+/* mutex->lock held, irqs off */
+static void untrack_owner(struct evl_mutex *mutex)
+{
+	struct evl_thread *prev = mutex->owner;
+	unsigned long flags;
+
+	assert_evl_lock(&mutex->lock);
+
+	if (prev) {
+		raw_spin_lock_irqsave(&prev->tracking_lock, flags);
+		list_del(&mutex->next_tracker);
+		raw_spin_unlock_irqrestore(&prev->tracking_lock, flags);
+		evl_put_element(&prev->element);
+		mutex->owner = NULL;
+	}
+}
+
+/* mutex->lock held, irqs off. */
+static void track_owner(struct evl_mutex *mutex,
+			struct evl_thread *owner)
+{
+	struct evl_thread *prev = mutex->owner;
+	unsigned long flags;
+
+	assert_evl_lock(&mutex->lock);
+
+	if (EVL_WARN_ON_ONCE(CORE, prev == owner))
+		return;
+
+	raw_spin_lock_irqsave(&owner->tracking_lock, flags);
+	if (prev) {
+		list_del(&mutex->next_tracker);
+		smp_wmb();
+		evl_put_element(&prev->element);
+	}
+	list_add(&mutex->next_tracker, &owner->trackers);
+	raw_spin_unlock_irqrestore(&owner->tracking_lock, flags);
+	mutex->owner = owner;
+}
+
+/* mutex->lock held, irqs off. */
+static inline void ref_and_track_owner(struct evl_mutex *mutex,
+				struct evl_thread *owner)
+{
+	assert_evl_lock(&mutex->lock);
+
+	if (mutex->owner != owner) {
+		evl_get_element(&owner->element);
+		track_owner(mutex, owner);
+	}
+}
+
+static inline int fast_mutex_is_claimed(fundle_t handle)
+{
+	return (handle & EVL_MUTEX_FLCLAIM) != 0;
+}
+
+static inline fundle_t mutex_fast_claim(fundle_t handle)
+{
+	return handle | EVL_MUTEX_FLCLAIM;
+}
+
+static inline fundle_t mutex_fast_ceil(fundle_t handle)
+{
+	return handle | EVL_MUTEX_FLCEIL;
+}
+
+/* mutex->lock held, irqs off */
+static void set_current_owner_locked(struct evl_mutex *mutex,
+				struct evl_thread *owner)
+{
+	assert_evl_lock(&mutex->lock);
+
+	/*
+	 * Update the owner information, and apply priority protection
+	 * for PP mutexes. We may only get there if owner is current,
+	 * or blocked.
+	 */
+	ref_and_track_owner(mutex, owner);
+	if (mutex->flags & EVL_MUTEX_PP)
+		ceil_owner_priority(mutex, owner);
+}
+
+/* mutex->lock held, irqs off */
+static inline
+void set_current_owner(struct evl_mutex *mutex,
+		struct evl_thread *owner)
+{
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&mutex->lock, flags);
+	set_current_owner_locked(mutex, owner);
+	evl_spin_unlock_irqrestore(&mutex->lock, flags);
+}
+
+static inline
+fundle_t get_owner_handle(fundle_t ownerh, struct evl_mutex *mutex)
+{
+	/*
+	 * On acquisition from kernel space, the fast lock handle
+	 * should bear the FLCEIL bit for PP mutexes, so that userland
+	 * takes the slow path on release, jumping to the kernel for
+	 * dropping the ceiling priority boost.
+	 */
+	if (mutex->flags & EVL_MUTEX_PP)
+		ownerh = mutex_fast_ceil(ownerh);
+
+	return ownerh;
+}
+
+/* mutex->lock + owner->lock held, irqs off */
+static void clear_boost_locked(struct evl_mutex *mutex,
+			struct evl_thread *owner,
+			int flag)
+{
+	assert_evl_lock(&mutex->lock);
+	assert_evl_lock(&owner->lock);
+
+	mutex->flags &= ~flag;
+
+	list_del(&mutex->next_booster);	/* owner->boosters */
+	if (list_empty(&owner->boosters)) {
+		evl_spin_lock(&owner->rq->lock);
+		owner->state &= ~T_BOOST;
+		evl_spin_unlock(&owner->rq->lock);
+		inherit_thread_priority(owner, owner, owner);
+	} else
+		adjust_boost(owner, NULL, mutex, owner);
+}
+
+/* mutex->lock held, irqs off */
+static void clear_boost(struct evl_mutex *mutex,
+			struct evl_thread *owner,
+			int flag)
+{
+	assert_evl_lock(&mutex->lock);
+
+	evl_spin_lock(&owner->lock);
+	clear_boost_locked(mutex, owner, flag);
+	evl_spin_unlock(&owner->lock);
+}
+
+/*
+ * Detect when an out-of-band thread is about to sleep on a mutex
+ * currently owned by another thread running in-band.
+ *
+ * mutex->lock held, irqs off
+ */
+static void detect_inband_owner(struct evl_mutex *mutex,
+				struct evl_thread *curr)
+{
+	struct evl_thread *owner = mutex->owner;
+
+	/*
+	 * @curr == this_evl_rq()->curr so no need to grab
+	 * @curr->lock.
+	 */
+	evl_spin_lock(&curr->rq->lock);
+
+	if (curr->info & T_PIALERT) {
+		curr->info &= ~T_PIALERT;
+	} else if (owner->state & T_INBAND) {
+		curr->info |= T_PIALERT;
+		evl_spin_unlock(&curr->rq->lock);
+		evl_signal_thread(curr, SIGDEBUG, SIGDEBUG_MIGRATE_PRIOINV);
+		return;
+	}
+
+	evl_spin_unlock(&curr->rq->lock);
+}
+
+/*
+ * Detect when a thread is about to switch in-band while holding a
+ * mutex which is causing an active PI or PP boost. Since this would
+ * cause a priority inversion, any thread waiting for this mutex
+ * bearing the T_WOLI bit receives a SIGDEBUG notification in this
+ * case.
+ */
+void evl_detect_boost_drop(struct evl_thread *owner)
+{
+	struct evl_thread *waiter;
+	struct evl_mutex *mutex;
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&owner->lock, flags);
+
+	/*
+	 * Iterate over waiters of each mutex we got boosted for due
+	 * to PI/PP.
+	 */
+	for_each_evl_booster(mutex, owner) {
+		evl_spin_lock(&mutex->lock);
+		for_each_evl_mutex_waiter(waiter, mutex) {
+			if (waiter->state & T_WOLI) {
+				evl_spin_lock(&waiter->rq->lock);
+				waiter->info |= T_PIALERT;
+				evl_spin_unlock(&waiter->rq->lock);
+				evl_signal_thread(waiter, SIGDEBUG,
+						SIGDEBUG_MIGRATE_PRIOINV);
+			}
+		}
+		evl_spin_unlock(&mutex->lock);
+	}
+
+	evl_spin_unlock_irqrestore(&owner->lock, flags);
+}
+
+void __evl_init_mutex(struct evl_mutex *mutex,
+		struct evl_clock *clock,
+		atomic_t *fastlock, u32 *ceiling_ref)
+{
+	int type = ceiling_ref ? EVL_MUTEX_PP : EVL_MUTEX_PI;
+
+	mutex->fastlock = fastlock;
+	atomic_set(fastlock, EVL_NO_HANDLE);
+	mutex->flags = type & ~EVL_MUTEX_CLAIMED;
+	mutex->owner = NULL;
+	mutex->wprio = -1;
+	mutex->ceiling_ref = ceiling_ref;
+	mutex->clock = clock;
+	mutex->wchan.reorder_wait = evl_reorder_mutex_wait;
+	mutex->wchan.follow_depend = evl_follow_mutex_depend;
+	INIT_LIST_HEAD(&mutex->wchan.wait_list);
+	evl_spin_lock_init(&mutex->lock);
+}
+EXPORT_SYMBOL_GPL(__evl_init_mutex);
+
+/* mutex->lock held, irqs off */
+static void flush_mutex_locked(struct evl_mutex *mutex, int reason)
+{
+	struct evl_thread *waiter, *tmp;
+
+	assert_evl_lock(&mutex->lock);
+
+	if (list_empty(&mutex->wchan.wait_list))
+		EVL_WARN_ON(CORE, mutex->flags & EVL_MUTEX_CLAIMED);
+	else {
+		list_for_each_entry_safe(waiter, tmp,
+					&mutex->wchan.wait_list, wait_next) {
+			list_del_init(&waiter->wait_next);
+			evl_wakeup_thread(waiter, T_PEND, reason);
+		}
+
+		if (mutex->flags & EVL_MUTEX_CLAIMED)
+			clear_boost(mutex, mutex->owner, EVL_MUTEX_CLAIMED);
+	}
+}
+
+void evl_flush_mutex(struct evl_mutex *mutex, int reason)
+{
+	unsigned long flags;
+
+	trace_evl_mutex_flush(mutex);
+	evl_spin_lock_irqsave(&mutex->lock, flags);
+	flush_mutex_locked(mutex, reason);
+	evl_spin_unlock_irqrestore(&mutex->lock, flags);
+}
+
+void evl_destroy_mutex(struct evl_mutex *mutex)
+{
+	unsigned long flags;
+
+	trace_evl_mutex_destroy(mutex);
+	evl_spin_lock_irqsave(&mutex->lock, flags);
+	untrack_owner(mutex);
+	flush_mutex_locked(mutex, T_RMID);
+	evl_spin_unlock_irqrestore(&mutex->lock, flags);
+}
+EXPORT_SYMBOL_GPL(evl_destroy_mutex);
+
+int evl_trylock_mutex(struct evl_mutex *mutex)
+{
+	struct evl_thread *curr = evl_current();
+	atomic_t *lockp = mutex->fastlock;
+	fundle_t h;
+
+	oob_context_only();
+
+	trace_evl_mutex_trylock(mutex);
+
+	h = atomic_cmpxchg(lockp, EVL_NO_HANDLE,
+			get_owner_handle(fundle_of(curr), mutex));
+	if (h != EVL_NO_HANDLE)
+		return evl_get_index(h) == fundle_of(curr) ?
+			-EDEADLK : -EBUSY;
+
+	set_current_owner(mutex, curr);
+	disable_inband_switch(curr);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_trylock_mutex);
+
+static int wait_mutex_schedule(struct evl_mutex *mutex)
+{
+	struct evl_thread *curr = evl_current();
+	unsigned long flags;
+	int ret = 0, info;
+
+	evl_schedule();
+
+	info = evl_current()->info;
+	if (info & T_RMID)
+		return -EIDRM;
+
+	if (info & (T_TIMEO|T_BREAK)) {
+		evl_spin_lock_irqsave(&mutex->lock, flags);
+		if (!list_empty(&curr->wait_next)) {
+			list_del_init(&curr->wait_next);
+			if (info & T_TIMEO)
+				ret = -ETIMEDOUT;
+			else if (info & T_BREAK)
+				ret = -EINTR;
+		}
+		evl_spin_unlock_irqrestore(&mutex->lock, flags);
+	} else if (IS_ENABLED(CONFIG_EVL_DEBUG_CORE)) {
+		bool empty;
+		evl_spin_lock_irqsave(&mutex->lock, flags);
+		empty = list_empty(&curr->wait_next);
+		evl_spin_unlock_irqrestore(&mutex->lock, flags);
+		EVL_WARN_ON_ONCE(CORE, !empty);
+	}
+
+	return ret;
+}
+
+/* mutex->lock held, irqs off */
+static void finish_mutex_wait(struct evl_mutex *mutex)
+{
+	struct evl_thread *owner, *contender;
+
+	/*
+	 * Do all the necessary housekeeping chores to stop current
+	 * from waiting on a mutex. Doing so may require to update a
+	 * PI chain.
+	 */
+	assert_evl_lock(&mutex->lock);
+
+	/*
+	 * Only a waiter leaving a PI chain triggers an update.
+	 * NOTE: PP mutexes never bear the CLAIMED bit.
+	 */
+	if (!(mutex->flags & EVL_MUTEX_CLAIMED))
+		return;
+
+	owner = mutex->owner;
+
+	if (list_empty(&mutex->wchan.wait_list)) {
+		/* No more waiters: clear the PI boost. */
+		clear_boost(mutex, owner, EVL_MUTEX_CLAIMED);
+		return;
+	}
+
+	/*
+	 * Reorder the booster queue of current after we left the wait
+	 * list, then set its priority to the new required minimum
+	 * required to prevent priority inversion.
+	 */
+	contender = list_first_entry(&mutex->wchan.wait_list,
+				struct evl_thread, wait_next);
+
+	evl_spin_lock(&owner->lock);
+	evl_spin_lock(&contender->lock);
+	mutex->wprio = contender->wprio;
+	list_del(&mutex->next_booster);	/* owner->boosters */
+	list_add_priff(mutex, &owner->boosters, wprio, next_booster);
+	adjust_boost(owner, contender, mutex, owner);
+	evl_spin_unlock(&contender->lock);
+	evl_spin_unlock(&owner->lock);
+}
+
+/* owner->lock + originator->lock held, irqs off */
+static int check_lock_chain(struct evl_thread *owner,
+			struct evl_thread *originator)
+{
+	struct evl_wait_channel *wchan;
+
+	assert_evl_lock(&owner->lock);
+	assert_evl_lock(&originator->lock);
+
+	wchan = owner->wchan;
+	if (wchan)
+		return wchan->follow_depend(wchan, originator);
+
+	return 0;
+}
+
+int evl_lock_mutex_timeout(struct evl_mutex *mutex, ktime_t timeout,
+			enum evl_tmode timeout_mode)
+{
+	struct evl_thread *curr = evl_current(), *owner;
+	atomic_t *lockp = mutex->fastlock;
+	fundle_t currh, h, oldh;
+	unsigned long flags;
+	int ret;
+
+	oob_context_only();
+
+	currh = fundle_of(curr);
+	trace_evl_mutex_lock(mutex);
+redo:
+	/* Basic form of evl_trylock_mutex(). */
+	h = atomic_cmpxchg(lockp, EVL_NO_HANDLE,
+			get_owner_handle(currh, mutex));
+	if (likely(h == EVL_NO_HANDLE)) {
+		set_current_owner(mutex, curr);
+		disable_inband_switch(curr);
+		return 0;
+	}
+
+	if (unlikely(evl_get_index(h) == currh))
+		return -EDEADLK;
+
+	ret = 0;
+	evl_spin_lock_irqsave(&mutex->lock, flags);
+	evl_spin_lock(&curr->lock);
+
+	/*
+	 * Set claimed bit.  In case it appears to be set already,
+	 * re-read its state under mutex->lock so that we don't miss
+	 * any change between the lock-less read and here. But also
+	 * try to avoid cmpxchg where possible. Only if it appears not
+	 * to be set, start with cmpxchg directly.
+	 */
+	if (fast_mutex_is_claimed(h)) {
+		oldh = atomic_read(lockp);
+		goto test_no_owner;
+	}
+
+	do {
+		oldh = atomic_cmpxchg(lockp, h, mutex_fast_claim(h));
+		if (likely(oldh == h))
+			break;
+	test_no_owner:
+		if (oldh == EVL_NO_HANDLE) {
+			/* Lock released from another cpu. */
+			evl_spin_unlock(&curr->lock);
+			evl_spin_unlock_irqrestore(&mutex->lock, flags);
+			goto redo;
+		}
+		h = oldh;
+	} while (!fast_mutex_is_claimed(h));
+
+	owner = evl_get_element_by_fundle(&evl_thread_factory,
+					evl_get_index(h),
+					struct evl_thread);
+	/*
+	 * The tracked owner disappeared, clear the stale tracking
+	 * data, then fail with -EOWNERDEAD. There is no point in
+	 * trying to clean up that mess any further for userland, the
+	 * logic protected by that lock is dead in the water anyway.
+	 */
+	if (owner == NULL) {
+		untrack_owner(mutex);
+		evl_spin_unlock(&curr->lock);
+		evl_spin_unlock_irqrestore(&mutex->lock, flags);
+		return -EOWNERDEAD;
+	}
+
+	/*
+	 * This is the contended path. We just detected an earlier
+	 * syscall-less fast locking, fix up the state information
+	 * accordingly.
+	 *
+	 * The consistency of such information is guaranteed, because
+	 * we just raised the claim bit atomically for this contended
+	 * lock, therefore userland will have to jump to the kernel
+	 * when releasing it, instead of doing a fast unlock. Since we
+	 * currently own the mutex lock, consistency wrt
+	 * transfer_ownership() is guaranteed through serialization.
+	 *
+	 * CAUTION: in this particular case, the only assumptions we
+	 * can safely make is that *owner is valid but not current on
+	 * this CPU.
+	 */
+	if (mutex->owner != owner)
+		track_owner(mutex, owner);
+	else
+		/*
+		 * evl_get_element_by_fundle() got us an extraneous
+		 * reference on @owner which an earlier call to
+		 * track_owner() already obtained, drop the former.
+		 */
+		evl_put_element(&owner->element);
+
+	evl_spin_lock(&owner->lock);
+
+	if (unlikely(curr->state & T_WOLI))
+		detect_inband_owner(mutex, curr);
+
+	if (curr->wprio > owner->wprio) {
+		if ((owner->info & T_WAKEN) && owner->wwake == &mutex->wchan) {
+			/* Ownership is still pending, steal the resource. */
+			set_current_owner_locked(mutex, curr);
+			evl_spin_lock(&owner->rq->lock);
+			owner->info |= T_ROBBED;
+			evl_spin_unlock(&owner->rq->lock);
+			evl_spin_unlock(&owner->lock);
+			goto grab;
+		}
+
+		list_add_priff(curr, &mutex->wchan.wait_list, wprio, wait_next);
+
+		if (mutex->flags & EVL_MUTEX_PI) {
+			raise_boost_flag(owner);
+
+			if (mutex->flags & EVL_MUTEX_CLAIMED)
+				list_del(&mutex->next_booster); /* owner->boosters */
+			else
+				mutex->flags |= EVL_MUTEX_CLAIMED;
+
+			mutex->wprio = curr->wprio;
+			list_add_priff(mutex, &owner->boosters, wprio, next_booster);
+			/*
+			 * curr->wprio > owner->wprio implies that
+			 * mutex must be leading the booster list
+			 * after insertion, so we may call
+			 * inherit_thread_priority() for tracking
+			 * current's priority directly without going
+			 * through adjust_boost().
+			 */
+			ret = inherit_thread_priority(owner, curr, curr);
+		} else {
+			ret = check_lock_chain(owner, curr);
+		}
+	} else {
+		list_add_priff(curr, &mutex->wchan.wait_list, wprio, wait_next);
+		ret = check_lock_chain(owner, curr);
+	}
+
+	evl_spin_unlock(&owner->lock);
+
+	if (likely(!ret)) {
+		evl_spin_lock(&curr->rq->lock);
+		evl_sleep_on_locked(timeout, timeout_mode, mutex->clock, &mutex->wchan);
+		evl_spin_unlock(&curr->rq->lock);
+		evl_spin_unlock(&curr->lock);
+		evl_spin_unlock_irqrestore(&mutex->lock, flags);
+		ret = wait_mutex_schedule(mutex);
+		evl_spin_lock_irqsave(&mutex->lock, flags);
+	} else
+		evl_spin_unlock(&curr->lock);
+
+	finish_mutex_wait(mutex);
+	evl_spin_lock(&curr->lock);
+	curr->wwake = NULL;
+	evl_spin_lock(&curr->rq->lock);
+	curr->info &= ~T_WAKEN;
+
+	if (ret) {
+		evl_spin_unlock(&curr->rq->lock);
+		goto out;
+	}
+
+	if (curr->info & T_ROBBED) {
+		/*
+		 * Kind of spurious wakeup: we were given the
+		 * ownership but somebody stole it away from us while
+		 * we were waiting for the CPU: we should redo waiting
+		 * for the mutex, unless we know for sure it's too
+		 * late.
+		 */
+		evl_spin_unlock(&curr->rq->lock);
+		if (timeout_mode != EVL_REL ||
+			timeout_infinite(timeout) ||
+			evl_get_stopped_timer_delta(&curr->rtimer) != 0) {
+			evl_spin_unlock(&curr->lock);
+			evl_spin_unlock_irqrestore(&mutex->lock, flags);
+			goto redo;
+		}
+		ret = -ETIMEDOUT;
+		goto out;
+	}
+
+	evl_spin_unlock(&curr->rq->lock);
+grab:
+	disable_inband_switch(curr);
+
+	if (!list_empty(&mutex->wchan.wait_list)) /* any waiters? */
+		currh = mutex_fast_claim(currh);
+
+	atomic_set(lockp, get_owner_handle(currh, mutex));
+out:
+	evl_spin_unlock(&curr->lock);
+	evl_spin_unlock_irqrestore(&mutex->lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_lock_mutex_timeout);
+
+/* mutex->lock + lastowner->lock held, irqs off */
+static void transfer_ownership(struct evl_mutex *mutex,
+			struct evl_thread *lastowner)
+{
+	atomic_t *lockp = mutex->fastlock;
+	struct evl_thread *n_owner;
+	fundle_t n_ownerh;
+
+	assert_evl_lock(&mutex->lock);
+
+	if (list_empty(&mutex->wchan.wait_list)) {
+		untrack_owner(mutex);
+		atomic_set(lockp, EVL_NO_HANDLE);
+		return;
+	}
+
+	n_owner = list_first_entry(&mutex->wchan.wait_list,
+				struct evl_thread, wait_next);
+	/*
+	 * We clear the wait channel early on - instead of waiting for
+	 * evl_wakeup_thread() to do so - because we want to hide
+	 * n_owner from the PI/PP adjustment which takes place over
+	 * set_current_owner_locked(). NOTE: we do want
+	 * set_current_owner_locked() to run before
+	 * evl_wakeup_thread() is called.
+	 */
+	evl_spin_lock(&n_owner->lock);
+	n_owner->wwake = &mutex->wchan;
+	n_owner->wchan = NULL;
+	evl_spin_unlock(&n_owner->lock);
+	list_del_init(&n_owner->wait_next);
+	set_current_owner_locked(mutex, n_owner);
+	evl_wakeup_thread(n_owner, T_PEND, T_WAKEN);
+
+	if (mutex->flags & EVL_MUTEX_CLAIMED)
+		clear_boost_locked(mutex, lastowner, EVL_MUTEX_CLAIMED);
+
+	n_ownerh = get_owner_handle(fundle_of(n_owner), mutex);
+	if (!list_empty(&mutex->wchan.wait_list)) /* any waiters? */
+		n_ownerh = mutex_fast_claim(n_ownerh);
+
+	atomic_set(lockp, n_ownerh);
+}
+
+void __evl_unlock_mutex(struct evl_mutex *mutex)
+{
+	struct evl_thread *curr = evl_current();
+	unsigned long flags;
+	fundle_t currh, h;
+	atomic_t *lockp;
+
+	trace_evl_mutex_unlock(mutex);
+
+	if (!enable_inband_switch(curr))
+		return;
+
+	lockp = mutex->fastlock;
+	currh = fundle_of(curr);
+
+	/*
+	 * FLCEIL may only be raised by the owner, or when the owner
+	 * is blocked waiting for the mutex (ownership transfer). In
+	 * addition, only the current owner of a mutex may release it,
+	 * therefore we can't race while testing FLCEIL locklessly.
+	 * All updates to FLCLAIM are covered by the mutex lock.
+	 *
+	 * Therefore, clearing the fastlock racelessly in this routine
+	 * without leaking FLCEIL/FLCLAIM updates can be achieved
+	 * locklessly.
+	 */
+	evl_spin_lock_irqsave(&mutex->lock, flags);
+	evl_spin_lock(&curr->lock);
+
+	if (mutex->flags & EVL_MUTEX_CEILING)
+		clear_boost_locked(mutex, curr, EVL_MUTEX_CEILING);
+
+	h = atomic_read(lockp);
+	h = atomic_cmpxchg(lockp, h, EVL_NO_HANDLE);
+	if ((h & ~EVL_MUTEX_FLCEIL) != currh) {
+		/* FLCLAIM set, mutex is contended. */
+		transfer_ownership(mutex, curr);
+	} else {
+		if (h != currh)	/* FLCEIL set, FLCLAIM clear. */
+			atomic_set(lockp, EVL_NO_HANDLE);
+		untrack_owner(mutex);
+	}
+
+	evl_spin_unlock(&curr->lock);
+	evl_spin_unlock_irqrestore(&mutex->lock, flags);
+}
+
+void evl_unlock_mutex(struct evl_mutex *mutex)
+{
+	struct evl_thread *curr = evl_current();
+	fundle_t currh = fundle_of(curr), h;
+
+	oob_context_only();
+
+	h = evl_get_index(atomic_read(mutex->fastlock));
+	if (EVL_WARN_ON_ONCE(CORE, h != currh))
+		return;
+
+	__evl_unlock_mutex(mutex);
+	evl_schedule();
+}
+EXPORT_SYMBOL_GPL(evl_unlock_mutex);
+
+void evl_drop_tracking_mutexes(struct evl_thread *curr)
+{
+	struct evl_mutex *mutex;
+	unsigned long flags;
+	fundle_t h;
+
+	raw_spin_lock_irqsave(&curr->tracking_lock, flags);
+
+	/* Release all mutexes tracking @curr. */
+	while (!list_empty(&curr->trackers)) {
+		/*
+		 * Either __evl_unlock_mutex() or untrack_owner() will
+		 * unlink @mutex from the curr's tracker list.
+		 */
+		mutex = list_first_entry(&curr->trackers,
+					struct evl_mutex, next_tracker);
+		raw_spin_unlock_irqrestore(&curr->tracking_lock, flags);
+		h = evl_get_index(atomic_read(mutex->fastlock));
+		if (h == fundle_of(curr)) {
+			__evl_unlock_mutex(mutex);
+		} else {
+			evl_spin_lock_irqsave(&mutex->lock, flags);
+			if (mutex->owner == curr)
+				untrack_owner(mutex);
+			evl_spin_unlock_irqrestore(&mutex->lock, flags);
+		}
+		raw_spin_lock_irqsave(&curr->tracking_lock, flags);
+	}
+
+	raw_spin_unlock_irqrestore(&curr->tracking_lock, flags);
+}
+
+static inline struct evl_mutex *
+wchan_to_mutex(struct evl_wait_channel *wchan)
+{
+	return container_of(wchan, struct evl_mutex, wchan);
+}
+
+/* thread->lock held, irqs off */
+int evl_reorder_mutex_wait(struct evl_thread *waiter,
+			struct evl_thread *originator)
+{
+	struct evl_mutex *mutex = wchan_to_mutex(waiter->wchan);
+	struct evl_thread *owner;
+	int ret;
+
+	assert_evl_lock(&waiter->lock);
+	assert_evl_lock(&originator->lock);
+
+	evl_spin_lock(&mutex->lock);
+
+	owner = mutex->owner;
+	if (owner == originator) {
+		ret = -EDEADLK;
+		goto out;
+	}
+
+	/*
+	 * Update the position in the wait list of a thread waiting
+	 * for a lock. This routine propagates the change throughout
+	 * the PI chain if required.
+	 */
+	list_del(&waiter->wait_next);
+	list_add_priff(waiter, &mutex->wchan.wait_list, wprio, wait_next);
+
+	if (!(mutex->flags & EVL_MUTEX_PI)) {
+		evl_spin_unlock(&mutex->lock);
+		return 0;
+	}
+
+	/* Update the PI chain. */
+
+	mutex->wprio = waiter->wprio;
+	evl_spin_lock(&owner->lock);
+
+	if (mutex->flags & EVL_MUTEX_CLAIMED) {
+		list_del(&mutex->next_booster);
+	} else {
+		mutex->flags |= EVL_MUTEX_CLAIMED;
+		raise_boost_flag(owner);
+	}
+
+	list_add_priff(mutex, &owner->boosters, wprio, next_booster);
+	ret = adjust_boost(owner, waiter, mutex, originator);
+	evl_spin_unlock(&owner->lock);
+out:
+	evl_spin_unlock(&mutex->lock);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_reorder_mutex_wait);
+
+/* originator->lock held, irqs off */
+int evl_follow_mutex_depend(struct evl_wait_channel *wchan,
+			struct evl_thread *originator)
+{
+	struct evl_mutex *mutex = wchan_to_mutex(wchan);
+	struct evl_wait_channel *depend;
+	struct evl_thread *waiter;
+	int ret = 0;
+
+	assert_evl_lock(&originator->lock);
+
+	evl_spin_lock(&mutex->lock);
+
+	if (mutex->owner == originator) {
+		ret = -EDEADLK;
+		goto out;
+	}
+
+	for_each_evl_mutex_waiter(waiter, mutex) {
+		evl_spin_lock(&waiter->lock);
+		/*
+		 * Yes, this is no flat traversal, we do eat stack as
+		 * we progress in the dependency chain. Overflowing
+		 * because of that means that such chain is just
+		 * crazy.
+		 */
+		depend = waiter->wchan;
+		if (depend)
+			ret = depend->follow_depend(depend, originator);
+		evl_spin_unlock(&waiter->lock);
+		if (ret)
+			break;
+	}
+out:
+	evl_spin_unlock(&mutex->lock);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_follow_mutex_depend);
+
+void evl_commit_mutex_ceiling(struct evl_mutex *mutex)
+{
+	struct evl_thread *curr = evl_current();
+	atomic_t *lockp = mutex->fastlock;
+	unsigned long flags;
+	fundle_t oldh, h;
+
+	evl_spin_lock_irqsave(&mutex->lock, flags);
+
+	/*
+	 * For PP locks, userland does, in that order:
+	 *
+	 * -- LOCK
+	 * 1. curr->u_window->pp_pending = fundle_of(mutex)
+	 *    barrier();
+	 * 2. atomic_cmpxchg(lockp, EVL_NO_HANDLE, fundle_of(curr));
+	 *
+	 * -- UNLOCK
+	 * 1. atomic_cmpxchg(lockp, fundle_of(curr), EVL_NO_HANDLE); [unclaimed]
+	 *    barrier();
+	 * 2. curr->u_window->pp_pending = EVL_NO_HANDLE
+	 *
+	 * Make sure we have not been caught in a rescheduling in
+	 * between those steps. If we did, then we won't be holding
+	 * the lock as we schedule away, therefore no priority update
+	 * must take place.
+	 *
+	 * We might be called multiple times for committing a lazy
+	 * ceiling for the same mutex, e.g. if userland is preempted
+	 * in the middle of a recursive locking sequence.
+	 *
+	 * This would stem from the fact that userland has to update
+	 * ->pp_pending prior to trying to grab the lock atomically,
+	 * at which point it can figure out whether a recursive
+	 * locking happened. We get out of this trap by testing the
+	 * EVL_MUTEX_CEILING flag.
+	 */
+	if (!evl_is_mutex_owner(lockp, fundle_of(curr)) ||
+		(mutex->flags & EVL_MUTEX_CEILING))
+		goto out;
+
+	ref_and_track_owner(mutex, curr);
+	ceil_owner_priority(mutex, curr);
+	/*
+	 * Raise FLCEIL, which indicates a kernel entry will be
+	 * required for releasing this resource.
+	 */
+	do {
+		h = atomic_read(lockp);
+		oldh = atomic_cmpxchg(lockp, h, mutex_fast_ceil(h));
+	} while (oldh != h);
+out:
+	evl_spin_unlock_irqrestore(&mutex->lock, flags);
+}
diff --git a/kernel/evl/poll.c b/kernel/evl/poll.c
new file mode 100644
index 000000000000..5e2b785e100d
--- /dev/null
+++ b/kernel/evl/poll.c
@@ -0,0 +1,643 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/fs.h>
+#include <linux/slab.h>
+#include <linux/rbtree.h>
+#include <linux/poll.h>
+#include <linux/module.h>
+#include <linux/spinlock.h>
+#include <evl/file.h>
+#include <evl/thread.h>
+#include <evl/memory.h>
+#include <evl/poll.h>
+#include <evl/sched.h>
+#include <evl/flag.h>
+#include <evl/mutex.h>
+#include <asm/evl/syscall.h>
+
+struct poll_group {
+	struct rb_root item_index;  /* struct poll_item */
+	struct list_head item_list; /* struct poll_item */
+	struct list_head waiter_list; /* struct poll_waiter */
+	evl_spinlock_t wait_lock;
+	struct evl_file efile;
+	struct evl_kmutex item_lock;
+	int nr_items;
+	unsigned int generation;
+};
+
+struct poll_item {
+	unsigned int fd;
+	int events_polled;
+	struct rb_node rb;	    /* in group->item_index */
+	struct list_head next;	    /* in group->item_list */
+};
+
+struct poll_waiter {
+	struct evl_flag flag;
+	struct list_head next;
+};
+
+/* Maximum nesting depth (poll group watching other group(s)) */
+#define POLLER_NEST_MAX  4
+
+static const struct file_operations poll_fops;
+
+void evl_poll_watch(struct evl_poll_head *head,
+		struct oob_poll_wait *wait,
+		void (*unwatch)(struct file *filp))
+{
+	struct evl_poll_watchpoint *wpt;
+	unsigned long flags;
+
+	wpt = container_of(wait, struct evl_poll_watchpoint, wait);
+	/* Add to driver's poll head. */
+	evl_spin_lock_irqsave(&head->lock, flags);
+	wpt->head = head;
+	wpt->events_received = 0;
+	wpt->unwatch = unwatch;	/* must NOT reschedule. */
+	list_add(&wait->next, &head->watchpoints);
+	evl_spin_unlock_irqrestore(&head->lock, flags);
+}
+EXPORT_SYMBOL_GPL(evl_poll_watch);
+
+void __evl_signal_poll_events(struct evl_poll_head *head,
+			int events)
+{
+	struct evl_poll_watchpoint *wpt;
+	unsigned long flags;
+	int ready;
+
+	evl_spin_lock_irqsave(&head->lock, flags);
+
+	list_for_each_entry(wpt, &head->watchpoints, wait.next) {
+		ready = events & wpt->events_polled;
+		if (ready) {
+			wpt->events_received |= ready;
+			evl_raise_flag_nosched(wpt->flag);
+		}
+	}
+
+	evl_spin_unlock_irqrestore(&head->lock, flags);
+}
+EXPORT_SYMBOL_GPL(__evl_signal_poll_events);
+
+void evl_drop_poll_table(struct evl_thread *thread)
+{
+	struct evl_poll_watchpoint *table;
+
+	table = thread->poll_context.table;
+	if (table)
+		evl_free(table);
+}
+
+static inline
+int index_item(struct rb_root *root, struct poll_item *item)
+{
+	struct rb_node **rbp, *parent = NULL;
+	struct poll_item *tmp;
+
+	rbp = &root->rb_node;
+	while (*rbp) {
+		tmp = rb_entry(*rbp, struct poll_item, rb);
+		parent = *rbp;
+		if (item->fd < tmp->fd)
+			rbp = &(*rbp)->rb_left;
+		else if (item->fd > tmp->fd)
+			rbp = &(*rbp)->rb_right;
+		else
+			return -EEXIST;
+	}
+
+	rb_link_node(&item->rb, parent, rbp);
+	rb_insert_color(&item->rb, root);
+
+	return 0;
+}
+
+static inline void new_generation(struct poll_group *group)
+{
+	if (++group->generation == 0) /* Keep zero for init state. */
+		group->generation = 1;
+}
+
+static int check_no_loop_deeper(struct poll_group *origin,
+				struct poll_item *item,
+				int depth)
+{
+	struct poll_group *group;
+	struct poll_item *_item;
+	struct evl_file *efilp;
+	struct file *filp;
+	int ret = 0;
+
+	if (depth >= POLLER_NEST_MAX)
+		return -ELOOP;
+
+	efilp = evl_get_file(item->fd);
+	if (efilp == NULL)
+		return 0;
+
+	filp = efilp->filp;
+	if (filp->f_op != &poll_fops)
+		goto out;
+
+	group = filp->private_data;
+	if (group == origin) {
+		ret = -ELOOP;
+		goto out;
+	}
+
+	evl_lock_kmutex(&group->item_lock);
+
+	list_for_each_entry(_item, &group->item_list, next) {
+		ret = check_no_loop_deeper(origin, _item, depth + 1);
+		if (ret)
+			break;
+	}
+
+	evl_unlock_kmutex(&group->item_lock);
+out:
+	evl_put_file(efilp);
+
+	return ret;
+}
+
+static int check_no_loop(struct poll_group *group,
+			struct poll_item *item)
+{
+	return check_no_loop_deeper(group, item, 0);
+}
+
+static int add_item(struct file *filp, struct poll_group *group,
+		struct evl_poll_ctlreq *creq)
+{
+	struct poll_item *item;
+	struct evl_file *efilp;
+	int ret, events;
+
+	item = evl_alloc(sizeof(*item));
+	if (item == NULL)
+		return -ENOMEM;
+
+	item->fd = creq->fd;
+	events = creq->events & ~POLLNVAL;
+	item->events_polled = events | POLLERR | POLLHUP;
+
+	efilp = evl_get_file(creq->fd);
+	if (efilp == NULL) {
+		ret = -EBADF;
+		goto fail_get;
+	}
+
+	evl_lock_kmutex(&group->item_lock);
+
+	/* Check for cyclic deps. */
+	ret = check_no_loop(group, item);
+	if (ret)
+		goto fail_add;
+
+	ret = index_item(&group->item_index, item);
+	if (ret)
+		goto fail_add;
+
+	list_add(&item->next, &group->item_list);
+	group->nr_items++;
+	new_generation(group);
+
+	evl_unlock_kmutex(&group->item_lock);
+	evl_put_file(efilp);
+
+	return 0;
+
+fail_add:
+	evl_unlock_kmutex(&group->item_lock);
+	evl_put_file(efilp);
+fail_get:
+	evl_free(item);
+
+	return ret;
+}
+
+static struct poll_item *
+lookup_item(struct rb_root *root, unsigned int fd)
+{
+	struct poll_item *item;
+	struct rb_node *rb;
+
+	rb = root->rb_node;
+	while (rb) {
+		item = rb_entry(rb, struct poll_item, rb);
+		if (fd < item->fd)
+			rb = rb->rb_left;
+		else if (fd > item->fd)
+			rb = rb->rb_right;
+		else
+			return item;
+	}
+
+	return NULL;
+}
+
+static int del_item(struct poll_group *group,
+		struct evl_poll_ctlreq *creq)
+{
+	struct poll_item *item;
+
+	evl_lock_kmutex(&group->item_lock);
+
+	item = lookup_item(&group->item_index, creq->fd);
+	if (item == NULL) {
+		evl_unlock_kmutex(&group->item_lock);
+		return -ENOENT;
+	}
+
+	rb_erase(&item->rb, &group->item_index);
+	list_del(&item->next);
+	group->nr_items--;
+	new_generation(group);
+
+	evl_unlock_kmutex(&group->item_lock);
+
+	evl_free(item);
+
+	return 0;
+}
+
+/* fdt_lock held, irqs off. */
+void evl_drop_watchpoints(struct list_head *drop_list)
+{
+	struct evl_poll_watchpoint *wpt;
+	struct evl_poll_node *node;
+
+	/*
+	 * Drop the watchpoints attached to a closed file descriptor
+	 * upon release from inband. A watchpoint found in @drop_list
+	 * was registered via a call to evl_watch_fd() from
+	 * wait_events() but not unregistered by calling
+	 * evl_ignore_fd() from clear_wait() yet, so we know it is
+	 * still valid. Since a polled EVL fd has to be passed to this
+	 * routine before the file it references can be dismantled, we
+	 * may keep and use a direct pointer to this file in the
+	 * watchpoint struct until we return.
+	 */
+	list_for_each_entry(node, drop_list, next) {
+		wpt = container_of(node, struct evl_poll_watchpoint, node);
+		evl_spin_lock(&wpt->head->lock);
+		wpt->events_received |= POLLNVAL;
+		if (wpt->unwatch)
+			wpt->unwatch(wpt->filp);
+		evl_raise_flag_nosched(wpt->flag);
+		evl_spin_unlock(&wpt->head->lock);
+		wpt->filp = NULL;
+	}
+}
+
+static inline
+int mod_item(struct poll_group *group,
+	struct evl_poll_ctlreq *creq)
+{
+	struct poll_item *item;
+	int events;
+
+	events = creq->events & ~POLLNVAL;
+
+	evl_lock_kmutex(&group->item_lock);
+
+	item = lookup_item(&group->item_index, creq->fd);
+	if (item == NULL) {
+		evl_unlock_kmutex(&group->item_lock);
+		return -ENOENT;
+	}
+
+	item->events_polled = events | POLLERR | POLLHUP;
+	new_generation(group);
+
+	evl_unlock_kmutex(&group->item_lock);
+
+	return 0;
+}
+
+static inline
+int setup_item(struct file *filp, struct poll_group *group,
+	struct evl_poll_ctlreq *creq)
+{
+	int ret;
+
+	switch (creq->action) {
+	case EVL_POLL_CTLADD:
+		ret = add_item(filp, group, creq);
+		break;
+	case EVL_POLL_CTLDEL:
+		ret = del_item(group, creq);
+		break;
+	case EVL_POLL_CTLMOD:
+		ret = mod_item(group, creq);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	return ret;
+}
+
+static int collect_events(struct poll_group *group,
+			struct evl_poll_event __user *u_set,
+			int maxevents, struct evl_flag *flag)
+{
+	struct evl_thread *curr = evl_current();
+	struct evl_poll_watchpoint *wpt, *table;
+	int ret, n, nr, count = 0, ready;
+	struct evl_poll_event ev;
+	unsigned int generation;
+	struct poll_item *item;
+	struct evl_file *efilp;
+	struct file *filp;
+
+	evl_lock_kmutex(&group->item_lock);
+
+	nr = group->nr_items;
+	if (nr == 0) {
+		evl_unlock_kmutex(&group->item_lock);
+		return -EINVAL;
+	}
+
+	/*
+	 * Check whether the registered items are in sync with the
+	 * caller's registered watchpoints (if any). Go polling
+	 * directly using those watchpoints if so, otherwise resync.
+	 */
+	table = curr->poll_context.table;
+	if (flag == NULL)
+		goto collect;
+
+	generation = group->generation;
+	if (likely(generation == curr->poll_context.generation))
+		goto collect;
+
+	/* Need to resync. */
+	do {
+		generation = group->generation;
+		evl_unlock_kmutex(&group->item_lock);
+		evl_drop_poll_table(curr);
+		table = evl_alloc(sizeof(*wpt) * nr);
+		if (table == NULL) {
+			curr->poll_context.nr = 0;
+			curr->poll_context.table = NULL;
+			curr->poll_context.generation = 0;
+			return -ENOMEM;
+		}
+		evl_lock_kmutex(&group->item_lock);
+	} while (generation != group->generation);
+
+	curr->poll_context.table = table;
+	curr->poll_context.nr = nr;
+	curr->poll_context.generation = generation;
+
+	/* Build the poll table. */
+	wpt = table;
+	list_for_each_entry(item, &group->item_list, next) {
+		wpt->fd = item->fd;
+		wpt->events_polled = item->events_polled;
+		wpt++;
+	}
+
+collect:
+	evl_unlock_kmutex(&group->item_lock);
+
+	for (n = 0, wpt = table; n < nr; n++, wpt++) {
+		if (flag) {
+			wpt->flag = flag;
+			INIT_LIST_HEAD(&wpt->wait.next);
+			/* If oob_poll() is absent, default to all events ready. */
+			ready = POLLIN|POLLOUT|POLLRDNORM|POLLWRNORM;
+			efilp = evl_watch_fd(wpt->fd, &wpt->node);
+			if (efilp == NULL)
+				goto stale;
+			filp = efilp->filp;
+			wpt->filp = filp;
+			if (filp->f_op->oob_poll)
+				ready = filp->f_op->oob_poll(filp, &wpt->wait);
+			evl_put_file(efilp);
+		} else
+			ready = wpt->events_received;
+
+		ready &= wpt->events_polled | POLLNVAL;
+		if (ready) {
+			ev.fd = wpt->fd;
+			ev.events = ready;
+			ret = raw_copy_to_user(u_set, &ev, sizeof(ev));
+			if (ret)
+				return -EFAULT;
+			u_set++;
+			if (++count >= maxevents)
+				break;
+		}
+	}
+
+	return count;
+stale:
+	/*
+	 * We have a stale fd in the table, force regeneration next
+	 * time we collect events then bail out on error.
+	 */
+	evl_lock_kmutex(&group->item_lock);
+	new_generation(group);
+	evl_unlock_kmutex(&group->item_lock);
+
+	return -EBADF;
+}
+
+static inline void clear_wait(void)
+{
+	struct evl_thread *curr = evl_current();
+	struct evl_poll_watchpoint *wpt;
+	unsigned long flags;
+	int n;
+
+	/*
+	 * Current stopped waiting for events, remove the watchpoints
+	 * we have been monitoring so far from their poll heads.
+	 * wpt->head->lock serializes with __evl_signal_poll_events().
+	 * Any watchpoint which does not bear the POLLNVAL bit is
+	 * monitoring a still valid file by construction.
+	 *
+	 * A watchpoint might no be attached to any poll head in case
+	 * oob_poll() is undefined for the device, or the related fd
+	 * is stale. Since only the caller may update the linkage of
+	 * its watchpoints, using list_empty() locklessly is safe
+	 * here.
+	 */
+	for (n = 0, wpt = curr->poll_context.table;
+	     n < curr->poll_context.nr; n++, wpt++) {
+		evl_ignore_fd(&wpt->node);
+		/* Remove from driver's poll head. */
+		if (!list_empty(&wpt->wait.next)) {
+			evl_spin_lock_irqsave(&wpt->head->lock, flags);
+			list_del(&wpt->wait.next);
+			if (!(wpt->events_received & POLLNVAL) && wpt->unwatch)
+				wpt->unwatch(wpt->filp);
+			evl_spin_unlock_irqrestore(&wpt->head->lock, flags);
+		}
+	}
+}
+
+static inline
+int wait_events(struct file *filp,
+		struct poll_group *group,
+		struct evl_poll_waitreq *wreq)
+{
+	struct poll_waiter waiter;
+	enum evl_tmode tmode;
+	unsigned long flags;
+	ktime_t timeout;
+	int ret, count;
+
+	if (wreq->nrset < 0)
+		return -EINVAL;
+
+	if ((unsigned long)wreq->timeout.tv_nsec >= ONE_BILLION)
+		return -EINVAL;
+
+	if (wreq->nrset == 0)
+		return 0;
+
+	evl_init_flag(&waiter.flag);
+
+	count = collect_events(group, wreq->pollset, wreq->nrset, &waiter.flag);
+	if (count > 0 || (count == -EFAULT || count == -EBADF))
+		goto unwait;
+	if (count < 0)
+		goto out;
+
+	if (filp->f_flags & O_NONBLOCK) {
+		count = -EAGAIN;
+		goto unwait;
+	}
+
+	timeout = timespec_to_ktime(wreq->timeout);
+	tmode = timeout ? EVL_ABS : EVL_REL;
+
+	evl_spin_lock_irqsave(&group->wait_lock, flags);
+	list_add(&waiter.next, &group->waiter_list);
+	evl_spin_unlock_irqrestore(&group->wait_lock, flags);
+	ret = evl_wait_flag_timeout(&waiter.flag, timeout, tmode);
+	evl_spin_lock_irqsave(&group->wait_lock, flags);
+	list_del(&waiter.next);
+	evl_spin_unlock_irqrestore(&group->wait_lock, flags);
+
+	count = ret;
+	if (count == 0)	/* Re-collect events after successful wait. */
+		count = collect_events(group, wreq->pollset,
+				wreq->nrset, NULL);
+unwait:
+	clear_wait();
+out:
+	evl_destroy_flag(&waiter.flag);
+
+	return count;
+}
+
+static int poll_open(struct inode *inode, struct file *filp)
+{
+	struct poll_group *group;
+	int ret;
+
+	group = kzalloc(sizeof(*group), GFP_KERNEL);
+	if (group == NULL)
+		return -ENOMEM;
+
+	ret = evl_open_file(&group->efile, filp);
+	if (ret) {
+		kfree(group);
+		return ret;
+	}
+
+	group->item_index = RB_ROOT;
+	INIT_LIST_HEAD(&group->item_list);
+	INIT_LIST_HEAD(&group->waiter_list);
+	evl_init_kmutex(&group->item_lock);
+	evl_spin_lock_init(&group->wait_lock);
+	filp->private_data = group;
+
+	return ret;
+}
+
+static inline void flush_items(struct poll_group *group)
+{
+	struct poll_item *item, *n;
+
+	list_for_each_entry_safe(item, n, &group->item_list, next)
+		evl_free(item);
+}
+
+static int poll_release(struct inode *inode, struct file *filp)
+{
+	struct poll_group *group = filp->private_data;
+	struct poll_waiter *waiter;
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&group->wait_lock, flags);
+	list_for_each_entry(waiter, &group->waiter_list, next)
+		evl_flush_flag_nosched(&waiter->flag, T_RMID);
+	evl_spin_unlock_irqrestore(&group->wait_lock, flags);
+	evl_schedule();
+
+	flush_items(group);
+	evl_release_file(&group->efile);
+	kfree(group);
+
+	return 0;
+}
+
+static long poll_oob_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct poll_group *group = filp->private_data;
+	struct evl_poll_waitreq wreq, __user *u_wreq;
+	struct evl_poll_ctlreq creq, __user *u_creq;
+	int ret;
+
+	switch (cmd) {
+	case EVL_POLIOC_CTL:
+		u_creq = (typeof(u_creq))arg;
+		ret = raw_copy_from_user(&creq, u_creq, sizeof(creq));
+		if (ret)
+			return -EFAULT;
+		ret = setup_item(filp, group, &creq);
+		break;
+	case EVL_POLIOC_WAIT:
+		u_wreq = (typeof(u_wreq))arg;
+		ret = raw_copy_from_user(&wreq, u_wreq, sizeof(wreq));
+		if (ret)
+			return -EFAULT;
+		ret = wait_events(filp, group, &wreq);
+		if (ret < 0)
+			return ret;
+		if (raw_put_user(ret, &u_wreq->nrset))
+			return -EFAULT;
+		ret = 0;
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static const struct file_operations poll_fops = {
+	.open		= poll_open,
+	.release	= poll_release,
+	.oob_ioctl	= poll_oob_ioctl,
+};
+
+struct evl_factory evl_poll_factory = {
+	.name	=	EVL_POLL_DEV,
+	.fops	=	&poll_fops,
+	.flags	=	EVL_FACTORY_SINGLE,
+};
diff --git a/kernel/evl/proxy.c b/kernel/evl/proxy.c
new file mode 100644
index 000000000000..9e86292ceb80
--- /dev/null
+++ b/kernel/evl/proxy.c
@@ -0,0 +1,396 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/uaccess.h>
+#include <linux/file.h>
+#include <linux/wait.h>
+#include <linux/fs.h>
+#include <linux/log2.h>
+#include <linux/irq_work.h>
+#include <linux/workqueue.h>
+#include <linux/atomic.h>
+#include <evl/factory.h>
+#include <evl/flag.h>
+#include <evl/poll.h>
+#include <uapi/evl/proxy.h>
+
+struct proxy_ring {
+	void *bufmem;
+	atomic_t fillsz;
+	int wrpending;
+	unsigned int bufsz;
+	unsigned int rdoff;
+	unsigned int wroff;
+	unsigned int fillrsvd;
+	unsigned int granularity;
+};
+
+struct proxy_out {		/* oob_write->write */
+	struct evl_flag oob_drained;
+	wait_queue_head_t inband_drained;
+	bool release_pending;
+	struct irq_work irq_work;
+	struct work_struct work;
+	hard_spinlock_t lock;
+	struct evl_poll_head poll_head;
+	struct proxy_ring ring;
+};
+
+struct evl_proxy {
+	struct file *filp;
+	struct proxy_out output;
+	struct evl_element element;
+};
+
+static void relay_output(struct work_struct *work)
+{
+	struct evl_proxy *proxy = container_of(work, struct evl_proxy, output.work);
+	struct proxy_out *out = &proxy->output;
+	struct proxy_ring *ring = &out->ring;
+	unsigned int rdoff, count, len, n;
+	struct file *filp = proxy->filp;
+	loff_t pos, *ppos;
+	ssize_t ret = 0;
+
+	count = atomic_read(&ring->fillsz);
+	rdoff = ring->rdoff;
+
+	ppos = NULL;
+	if (!(filp->f_mode & FMODE_STREAM)) {
+		mutex_lock(&filp->f_pos_lock);
+		ppos = &pos;
+		pos = filp->f_pos;
+	}
+
+	while (count > 0 && ret >= 0) {
+		len = count;
+		do {
+			if (rdoff + len > ring->bufsz)
+				n = ring->bufsz - rdoff;
+			else
+				n = len;
+
+			if (ring->granularity > 0)
+				n = min(n, ring->granularity);
+
+			ret = kernel_write(filp, ring->bufmem + rdoff, n, ppos);
+			if (ret >= 0 && ppos)
+				filp->f_pos = *ppos;
+			len -= n;
+			rdoff = (rdoff + n) % ring->bufsz;
+		} while (len > 0 && ret > 0);
+		count = atomic_sub_return(count, &ring->fillsz);
+	}
+
+	if (ppos)
+		mutex_unlock(&filp->f_pos_lock);
+
+	ring->rdoff = rdoff;
+
+	if (count == 0)
+		evl_signal_poll_events(&out->poll_head, POLLOUT|POLLWRNORM);
+
+	/* Give precedence to oob waiters for wakeups. */
+	if (count < ring->bufsz) {
+		evl_raise_flag(&out->oob_drained); /* Reschedules. */
+		wake_up(&out->inband_drained);
+	} else
+		evl_schedule();	/* Covers evl_signal_poll_events() */
+}
+
+static void relay_output_irq(struct irq_work *work)
+{
+	struct evl_proxy *proxy;
+
+	proxy = container_of(work, struct evl_proxy, output.irq_work);
+	schedule_work(&proxy->output.work);
+}
+
+static bool can_write_buffer(struct proxy_out *out, size_t size)
+{
+	struct proxy_ring *ring = &out->ring;
+
+	return atomic_read(&ring->fillsz) +
+		ring->fillrsvd + size <= ring->bufsz;
+}
+
+static ssize_t do_proxy_write(struct file *filp,
+			const char __user *u_buf, size_t count)
+{
+	struct evl_proxy *proxy = element_of(filp, struct evl_proxy);
+	struct proxy_out *out = &proxy->output;
+	struct proxy_ring *ring = &out->ring;
+	unsigned int wroff, wbytes, n;
+	unsigned long flags;
+	ssize_t ret;
+	int xret;
+
+	if (count == 0)
+		return 0;
+
+	if (count > ring->bufsz)
+		return -EFBIG;
+
+	if (ring->granularity > 1 && count % ring->granularity > 0)
+		return -EINVAL;
+
+	raw_spin_lock_irqsave(&out->lock, flags);
+
+	/* No short or scattered writes. */
+	if (!can_write_buffer(out, count)) {
+		ret = -EAGAIN;
+		goto out;
+	}
+
+	/* Reserve a write slot into the circular buffer. */
+	wroff = ring->wroff;
+	ring->wroff = (wroff + count) % ring->bufsz;
+	ring->wrpending++;
+	ring->fillrsvd += count;
+	wbytes = ret = count;
+
+	do {
+		if (wroff + wbytes > ring->bufsz)
+			n = ring->bufsz - wroff;
+		else
+			n = wbytes;
+
+		raw_spin_unlock_irqrestore(&out->lock, flags);
+		xret = raw_copy_from_user(ring->bufmem + wroff, u_buf, n);
+		raw_spin_lock_irqsave(&out->lock, flags);
+		if (xret) {
+			memset(ring->bufmem + wroff + n - xret, 0, xret);
+			ret = -EFAULT;
+			break;
+		}
+
+		u_buf += n;
+		wbytes -= n;
+		wroff = (wroff + n) % ring->bufsz;
+	} while (wbytes > 0);
+
+	if (--ring->wrpending == 0) {
+		n = atomic_add_return(ring->fillrsvd, &ring->fillsz);
+		ring->fillrsvd = 0;
+		if (n == count) /* empty -> non-empty transition */
+			irq_work_queue(&out->irq_work);
+	}
+out:
+	raw_spin_unlock_irqrestore(&out->lock, flags);
+
+	return ret;
+}
+
+static ssize_t proxy_oob_write(struct file *filp,
+			const char __user *u_buf, size_t count)
+{
+	struct evl_proxy *proxy = element_of(filp, struct evl_proxy);
+	struct proxy_out *out = &proxy->output;
+	ssize_t ret;
+
+	do {
+		ret = do_proxy_write(filp, u_buf, count);
+		if (ret != -EAGAIN || filp->f_flags & O_NONBLOCK)
+			break;
+		ret = evl_wait_flag(&out->oob_drained);
+	} while (!ret);
+
+	return ret == -EIDRM ? -EBADF : ret;
+}
+
+static ssize_t proxy_write(struct file *filp, const char __user *u_buf,
+			size_t count, loff_t *ppos)
+{
+	struct evl_proxy *proxy = element_of(filp, struct evl_proxy);
+	struct proxy_out *out = &proxy->output;
+	ssize_t ret;
+
+	do {
+		ret = do_proxy_write(filp, u_buf, count);
+		if (ret != -EAGAIN || filp->f_flags & O_NONBLOCK)
+			break;
+		ret = wait_event_interruptible(out->inband_drained,
+					can_write_buffer(out, count) ||
+					out->release_pending);
+		if (!ret && out->release_pending)
+			ret = -EBADF;
+	} while (ret != -ERESTARTSYS);
+
+	return ret;
+}
+
+static __poll_t proxy_oob_poll(struct file *filp,
+			struct oob_poll_wait *wait)
+{
+	struct evl_proxy *proxy = element_of(filp, struct evl_proxy);
+	struct proxy_out *out = &proxy->output;
+	struct proxy_ring *ring = &out->ring;
+
+	evl_poll_watch(&out->poll_head, wait, NULL);
+
+	return atomic_read(&ring->fillsz) < ring->bufsz ?
+		POLLOUT|POLLWRNORM : 0;
+}
+
+static int proxy_mmap(struct file *filp, struct vm_area_struct *vma)
+{
+	struct evl_proxy *proxy = element_of(filp, struct evl_proxy);
+	struct file *mapfilp = proxy->filp;
+	int ret;
+
+	if (mapfilp->f_op->mmap == NULL)
+		return -ENODEV;
+
+	vma->vm_file = get_file(mapfilp);
+
+	/*
+	 * Since the mapper element impersonates a different file, we
+	 * need to swap references: if the mapping call fails, we have
+	 * to drop the reference on the target file we just took on
+	 * entry; if it succeeds, then we have to drop the reference
+	 * on the mapper file do_mmap_pgoff() acquired before calling
+	 * us.
+	 */
+	ret = call_mmap(mapfilp, vma);
+	if (ret)
+		fput(mapfilp);
+	else
+		fput(filp);
+
+	return ret;
+}
+
+static int proxy_release(struct inode *inode, struct file *filp)
+{
+	struct evl_proxy *proxy = element_of(filp, struct evl_proxy);
+	struct proxy_out *out = &proxy->output;
+
+	out->release_pending = true;
+	evl_flush_flag(&out->oob_drained, T_RMID);
+	wake_up(&out->inband_drained);
+
+	return evl_release_element(inode, filp);
+}
+
+static const struct file_operations proxy_fops = {
+	.open		= evl_open_element,
+	.release	= proxy_release,
+	.oob_write	= proxy_oob_write,
+	.oob_poll	= proxy_oob_poll,
+	.write		= proxy_write,
+	.mmap		= proxy_mmap,
+};
+
+static struct evl_element *
+proxy_factory_build(struct evl_factory *fac, const char *name,
+		void __user *u_attrs, u32 *state_offp)
+{
+	struct evl_proxy_attrs attrs;
+	struct evl_proxy *proxy;
+	struct proxy_out *out;
+	void *bufmem = NULL;
+	struct file *filp;
+	size_t bufsz;
+	int ret;
+
+	ret = copy_from_user(&attrs, u_attrs, sizeof(attrs));
+	if (ret)
+		return ERR_PTR(-EFAULT);
+
+	bufsz = attrs.bufsz;
+	if (order_base_2(bufsz) > 30) /* LART */
+		return ERR_PTR(-EINVAL);
+
+	/*
+	 * If a granularity is set, the buffer size must be a multiple
+	 * of the granule size.
+	 */
+	if (attrs.granularity > 1 && bufsz % attrs.granularity > 0)
+		return ERR_PTR(-EINVAL);
+
+	filp = fget(attrs.fd);
+	if (filp == NULL)
+		return ERR_PTR(-EINVAL);
+
+	proxy = kzalloc(sizeof(*proxy), GFP_KERNEL);
+	if (proxy == NULL) {
+		ret = -ENOMEM;
+		goto fail_proxy;
+	}
+
+	/*
+	 * Buffer size is optional as we may need the mapping facility
+	 * only, without any provision for writing to the proxied
+	 * file.
+	 */
+	if (bufsz > 0) {
+		bufmem = kzalloc(bufsz, GFP_KERNEL);
+		if (bufmem == NULL) {
+			ret = -ENOMEM;
+			goto fail_bufmem;
+		}
+	}
+
+	ret = evl_init_element(&proxy->element, &evl_proxy_factory);
+	if (ret)
+		goto fail_element;
+
+	proxy->filp = filp;
+	out = &proxy->output;
+	out->ring.bufmem = bufmem;
+	out->ring.bufsz = bufsz;
+	out->ring.granularity = attrs.granularity;
+	raw_spin_lock_init(&out->lock);
+	init_irq_work(&out->irq_work, relay_output_irq);
+	INIT_WORK(&out->work, relay_output);
+	evl_init_poll_head(&out->poll_head);
+	evl_init_flag(&out->oob_drained);
+	init_waitqueue_head(&out->inband_drained);
+	evl_index_element(&proxy->element);
+
+	return &proxy->element;
+
+fail_element:
+	kfree(bufmem);
+fail_bufmem:
+	kfree(proxy);
+fail_proxy:
+	fput(filp);
+
+	return ERR_PTR(ret);
+}
+
+static void proxy_factory_dispose(struct evl_element *e)
+{
+	struct evl_proxy *proxy;
+	struct proxy_out *out;
+
+	proxy = container_of(e, struct evl_proxy, element);
+	out = &proxy->output;
+	irq_work_sync(&out->irq_work);
+	cancel_work_sync(&out->work);
+	fput(proxy->filp);
+	evl_destroy_flag(&out->oob_drained);
+	evl_unindex_element(&proxy->element);
+	evl_destroy_element(&proxy->element);
+
+	if (out->ring.bufmem)
+		kfree(out->ring.bufmem);
+
+	kfree_rcu(proxy, element.rcu);
+}
+
+struct evl_factory evl_proxy_factory = {
+	.name	=	EVL_PROXY_DEV,
+	.fops	=	&proxy_fops,
+	.build =	proxy_factory_build,
+	.dispose =	proxy_factory_dispose,
+	.nrdev	=	CONFIG_EVL_NR_PROXIES,
+	.flags	=	EVL_FACTORY_CLONE,
+};
diff --git a/kernel/evl/sched/Makefile b/kernel/evl/sched/Makefile
new file mode 100644
index 000000000000..5d9245823f45
--- /dev/null
+++ b/kernel/evl/sched/Makefile
@@ -0,0 +1,12 @@
+obj-$(CONFIG_EVL) += evl.o
+
+ccflags-y += -Ikernel
+
+evl-y :=	\
+	core.o	\
+	fifo.o	\
+	idle.o	\
+	weak.o
+
+evl-$(CONFIG_EVL_SCHED_QUOTA) += quota.o
+evl-$(CONFIG_EVL_SCHED_TP) += tp.o
diff --git a/kernel/evl/sched/core.c b/kernel/evl/sched/core.c
new file mode 100644
index 000000000000..266640de28fd
--- /dev/null
+++ b/kernel/evl/sched/core.c
@@ -0,0 +1,1245 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/signal.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/cpuidle.h>
+#include <linux/mmu_context.h>
+#include <asm/div64.h>
+#include <asm/switch_to.h>
+#include <evl/sched.h>
+#include <evl/thread.h>
+#include <evl/timer.h>
+#include <evl/memory.h>
+#include <evl/clock.h>
+#include <evl/tick.h>
+#include <evl/monitor.h>
+#include <evl/mutex.h>
+#include <uapi/evl/signal.h>
+#include <trace/events/evl.h>
+
+DEFINE_PER_CPU(struct evl_rq, evl_runqueues);
+EXPORT_PER_CPU_SYMBOL_GPL(evl_runqueues);
+
+struct cpumask evl_cpu_affinity = CPU_MASK_ALL;
+EXPORT_SYMBOL_GPL(evl_cpu_affinity);
+
+static struct evl_sched_class *evl_sched_highest;
+
+#define for_each_evl_sched_class(p)			\
+	for (p = evl_sched_highest; p; p = p->next)
+
+static void register_one_class(struct evl_sched_class *sched_class)
+{
+	sched_class->next = evl_sched_highest;
+	evl_sched_highest = sched_class;
+
+	/*
+	 * Classes shall be registered by increasing priority order,
+	 * idle first and up.
+	 */
+	EVL_WARN_ON(CORE, sched_class->next &&
+		sched_class->next->weight > sched_class->weight);
+}
+
+static void register_classes(void)
+{
+	register_one_class(&evl_sched_idle);
+	register_one_class(&evl_sched_weak);
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	register_one_class(&evl_sched_quota);
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	register_one_class(&evl_sched_tp);
+#endif
+	register_one_class(&evl_sched_fifo);
+}
+
+#ifdef CONFIG_EVL_WATCHDOG
+
+static unsigned long wd_timeout_arg = CONFIG_EVL_WATCHDOG_TIMEOUT;
+module_param_named(watchdog_timeout, wd_timeout_arg, ulong, 0644);
+
+static inline ktime_t get_watchdog_timeout(void)
+{
+	return ns_to_ktime(wd_timeout_arg * 1000000000ULL);
+}
+
+static void watchdog_handler(struct evl_timer *timer) /* oob stage stalled */
+{
+	struct evl_rq *this_rq = this_evl_rq();
+	struct evl_thread *curr = this_rq->curr;
+
+	trace_evl_watchdog_signal(curr);
+
+	/*
+	 * CAUTION: The watchdog tick might have been delayed while we
+	 * were busy switching the CPU to in-band context at the
+	 * trigger date eventually. Make sure that we are not about to
+	 * kick the incoming root thread.
+	 */
+	if (curr->state & T_ROOT)
+		return;
+
+	if (curr->state & T_USER) {
+		evl_spin_lock(&curr->lock);
+		evl_spin_lock(&this_rq->lock);
+		curr->info |= T_KICKED;
+		evl_spin_unlock(&this_rq->lock);
+		evl_spin_unlock(&curr->lock);
+		evl_signal_thread(curr, SIGDEBUG, SIGDEBUG_WATCHDOG);
+		dovetail_send_mayday(current);
+		printk(EVL_WARNING "watchdog triggered on CPU #%d -- runaway thread "
+			"'%s' signaled\n", evl_rq_cpu(this_rq), curr->name);
+	} else {
+		printk(EVL_WARNING "watchdog triggered on CPU #%d -- runaway thread "
+			"'%s' canceled\n", evl_rq_cpu(this_rq), curr->name);
+		/*
+		 * On behalf on an IRQ handler, evl_cancel_thread()
+		 * would go half way cancelling the preempted
+		 * thread. Therefore we manually raise T_KICKED to
+		 * cause the next blocking call to return early in
+		 * T_BREAK condition, and T_CANCELD so that @curr
+		 * exits next time it invokes evl_test_cancel().
+		 */
+		evl_spin_lock(&curr->lock);
+		evl_spin_lock(&this_rq->lock);
+		curr->info |= (T_KICKED|T_CANCELD);
+		evl_spin_unlock(&this_rq->lock);
+		evl_spin_unlock(&curr->lock);
+	}
+}
+
+#endif /* CONFIG_EVL_WATCHDOG */
+
+static void roundrobin_handler(struct evl_timer *timer) /* hard irqs off */
+{
+	struct evl_rq *this_rq;
+
+	this_rq = container_of(timer, struct evl_rq, rrbtimer);
+	evl_spin_lock(&this_rq->lock);
+	evl_sched_tick(this_rq);
+	evl_spin_unlock(&this_rq->lock);
+}
+
+static void init_rq(struct evl_rq *rq, int cpu)
+{
+	struct evl_sched_class *sched_class;
+	struct evl_init_thread_attr iattr;
+	const char *name_fmt;
+
+#ifdef CONFIG_SMP
+	rq->cpu = cpu;
+	name_fmt = "ROOT/%u";
+	rq->proxy_timer_name = kasprintf(GFP_KERNEL, "[proxy-timer/%u]", cpu);
+	rq->rrb_timer_name = kasprintf(GFP_KERNEL, "[rrb-timer/%u]", cpu);
+	cpumask_clear(&rq->resched_cpus);
+#else
+	name_fmt = "ROOT";
+	rq->proxy_timer_name = kstrdup("[proxy-timer]", GFP_KERNEL);
+	rq->rrb_timer_name = kstrdup("[rrb-timer]", GFP_KERNEL);
+#endif
+	evl_spin_lock_init(&rq->lock);
+
+	for_each_evl_sched_class(sched_class) {
+		if (sched_class->sched_init)
+			sched_class->sched_init(rq);
+	}
+
+	rq->flags = 0;
+	rq->local_flags = RQ_IDLE;
+	rq->curr = &rq->root_thread;
+
+	/*
+	 * No handler needed for the inband timer since proxy timer
+	 * events are handled specifically by the generic timer code
+	 * (do_clock_tick()).
+	 */
+	evl_init_timer_on_rq(&rq->inband_timer, &evl_mono_clock, NULL,
+			rq, EVL_TIMER_IGRAVITY);
+	evl_set_timer_priority(&rq->inband_timer, EVL_TIMER_LOPRIO);
+	evl_set_timer_name(&rq->inband_timer, rq->proxy_timer_name);
+	evl_init_timer_on_rq(&rq->rrbtimer, &evl_mono_clock, roundrobin_handler,
+			rq, EVL_TIMER_IGRAVITY);
+	evl_set_timer_name(&rq->rrbtimer, rq->rrb_timer_name);
+	evl_set_timer_priority(&rq->rrbtimer, EVL_TIMER_LOPRIO);
+#ifdef CONFIG_EVL_WATCHDOG
+	evl_init_timer_on_rq(&rq->wdtimer, &evl_mono_clock, watchdog_handler,
+			rq, EVL_TIMER_IGRAVITY);
+	evl_set_timer_name(&rq->wdtimer, "[watchdog]");
+	evl_set_timer_priority(&rq->wdtimer, EVL_TIMER_LOPRIO);
+#endif /* CONFIG_EVL_WATCHDOG */
+
+	evl_set_current_account(rq, &rq->root_thread.stat.account);
+
+	/*
+	 * Postpone evl_init_thread() - which sets RQ_SCHED upon
+	 * setting the schedparams for the root thread - until we have
+	 * enough of the runqueue initialized, so that attempting to
+	 * reschedule from evl_exit_irq() later on is harmless.
+	 */
+	iattr.flags = T_ROOT;
+	iattr.affinity = *cpumask_of(cpu);
+	iattr.sched_class = &evl_sched_idle;
+	iattr.sched_param.idle.prio = EVL_IDLE_PRIO;
+	evl_init_thread(&rq->root_thread, &iattr, rq, name_fmt, cpu);
+
+	dovetail_init_altsched(&rq->root_thread.altsched);
+
+	list_add_tail(&rq->root_thread.next, &evl_thread_list);
+	evl_nrthreads++;
+}
+
+static void destroy_rq(struct evl_rq *rq)
+{
+	evl_destroy_timer(&rq->inband_timer);
+	evl_destroy_timer(&rq->rrbtimer);
+	kfree(rq->proxy_timer_name);
+	kfree(rq->rrb_timer_name);
+	evl_destroy_timer(&rq->root_thread.ptimer);
+	evl_destroy_timer(&rq->root_thread.rtimer);
+#ifdef CONFIG_EVL_WATCHDOG
+	evl_destroy_timer(&rq->wdtimer);
+#endif /* CONFIG_EVL_WATCHDOG */
+}
+
+#ifdef CONFIG_EVL_DEBUG_CORE
+
+void evl_disable_preempt(void)
+{
+	__evl_disable_preempt();
+}
+EXPORT_SYMBOL(evl_disable_preempt);
+
+void evl_enable_preempt(void)
+{
+	__evl_enable_preempt();
+}
+EXPORT_SYMBOL(evl_enable_preempt);
+
+#endif /* CONFIG_EVL_DEBUG_CORE */
+
+#ifdef CONFIG_SMP
+
+static inline
+void evl_double_rq_lock(struct evl_rq *rq1, struct evl_rq *rq2)
+{
+	EVL_WARN_ON_ONCE(CORE, !oob_irqs_disabled());
+
+	/* Prevent ABBA deadlock, always lock rqs in address order. */
+
+	if (rq1 == rq2) {
+		evl_spin_lock(&rq1->lock);
+	} else if (rq1 < rq2) {
+		evl_spin_lock(&rq1->lock);
+		evl_spin_lock_nested(&rq2->lock, SINGLE_DEPTH_NESTING);
+	} else {
+		evl_spin_lock(&rq2->lock);
+		evl_spin_lock_nested(&rq1->lock, SINGLE_DEPTH_NESTING);
+	}
+}
+
+static inline
+void evl_double_rq_unlock(struct evl_rq *rq1, struct evl_rq *rq2)
+{
+	evl_spin_unlock(&rq1->lock);
+	if (rq1 != rq2)
+		evl_spin_unlock(&rq2->lock);
+}
+
+static void migrate_rq(struct evl_thread *thread, struct evl_rq *dst_rq)
+{
+	struct evl_sched_class *sched_class = thread->sched_class;
+	struct evl_rq *src_rq = thread->rq;
+
+	evl_double_rq_lock(src_rq, dst_rq);
+
+	if (thread->state & T_READY) {
+		evl_dequeue_thread(thread);
+		thread->state &= ~T_READY;
+	}
+
+	if (sched_class->sched_migrate)
+		sched_class->sched_migrate(thread, dst_rq);
+	/*
+	 * WARNING: the scheduling class may have just changed as a
+	 * result of calling the per-class migration hook.
+	 */
+	thread->rq = dst_rq;
+
+	if (!(thread->state & EVL_THREAD_BLOCK_BITS)) {
+		evl_requeue_thread(thread);
+		thread->state |= T_READY;
+		evl_set_resched(dst_rq);
+		evl_set_resched(src_rq);
+	}
+
+	evl_double_rq_unlock(src_rq, dst_rq);
+}
+
+/* thread->lock held, oob stalled. @thread must not be running oob. */
+void evl_migrate_thread(struct evl_thread *thread, struct evl_rq *dst_rq)
+{
+	assert_evl_lock(&thread->lock);
+
+	if (thread->rq == dst_rq)
+		return;
+
+	trace_evl_thread_migrate(thread, evl_rq_cpu(dst_rq));
+
+	/*
+	 * Timer migration is postponed until the next timeout happens
+	 * for the periodic and rrb timers. The resource/periodic
+	 * timer will be moved to the right CPU next time
+	 * evl_prepare_timed_wait() is called for it (via
+	 * evl_sleep_on()).
+	 */
+	migrate_rq(thread, dst_rq);
+
+	evl_reset_account(&thread->stat.lastperiod);
+}
+
+static bool check_cpu_affinity(struct task_struct *p) /* inband, oob stage stalled */
+{
+	struct evl_thread *thread = evl_thread_from_task(p);
+	int cpu = task_cpu(p);
+	struct evl_rq *rq = evl_cpu_rq(cpu);
+	bool ret = true;
+
+	evl_spin_lock(&thread->lock);
+
+	/*
+	 * To maintain consistency between both the EVL and in-band
+	 * schedulers, reflecting a thread migration to another CPU
+	 * into EVL's scheduler state must happen from in-band context
+	 * only, on behalf of the migrated thread itself once it runs
+	 * on the target CPU.
+	 *
+	 * This means that the EVL scheduler state regarding the CPU
+	 * information lags behind the in-band scheduler state until
+	 * the migrated thread switches back to OOB context
+	 * (i.e. task_cpu(p) !=
+	 * evl_rq_cpu(evl_thread_from_task(p)->rq)).  This is ok since
+	 * EVL will not schedule such thread until then.
+	 *
+	 * check_cpu_affinity() detects when a EVL thread switching back to
+	 * OOB context did move to another CPU earlier while running
+	 * in-band. If so, do the fixups to reflect the change.
+	 */
+	if (unlikely(!is_threading_cpu(cpu))) {
+		printk(EVL_WARNING "thread %s[%d] switched to non-rt CPU%d, aborted.\n",
+			thread->name, evl_get_inband_pid(thread), cpu);
+		/*
+		 * Can't call evl_cancel_thread() from a CPU migration
+		 * point, that would break. Since we are on the wakeup
+		 * path to OOB context, just raise T_CANCELD to catch
+		 * it in evl_switch_oob().
+		 */
+		evl_spin_lock(&thread->rq->lock);
+		thread->info |= T_CANCELD;
+		evl_spin_unlock(&thread->rq->lock);
+		ret = false;
+		goto out;
+	}
+
+	if (likely(rq == thread->rq))
+		goto out;
+
+	/*
+	 * If the current thread moved to a supported out-of-band CPU,
+	 * which is not part of its original affinity mask, assume
+	 * user wants to extend this mask.
+	 */
+	if (!cpumask_test_cpu(cpu, &thread->affinity))
+		cpumask_set_cpu(cpu, &thread->affinity);
+
+	evl_migrate_thread(thread, rq);
+out:
+	evl_spin_unlock(&thread->lock);
+
+	return ret;
+}
+
+#else
+
+#define evl_double_rq_lock(__rq1, __rq2)  \
+	EVL_WARN_ON_ONCE(CORE, !oob_irqs_disabled());
+
+#define evl_double_rq_unlock(__rq1, __rq2)  do { } while (0)
+
+static inline bool check_cpu_affinity(struct task_struct *p)
+{
+	return true;
+}
+
+#endif	/* CONFIG_SMP */
+
+/* thread->lock + thread->rq->lock held, irqs off. */
+void evl_putback_thread(struct evl_thread *thread)
+{
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&thread->rq->lock);
+
+	if (thread->state & T_READY)
+		evl_dequeue_thread(thread);
+	else
+		thread->state |= T_READY;
+
+	evl_enqueue_thread(thread);
+	evl_set_resched(thread->rq);
+}
+
+/* thread->lock + thread->rq->lock held, irqs off. */
+int evl_set_thread_policy_locked(struct evl_thread *thread,
+				struct evl_sched_class *sched_class,
+				const union evl_sched_param *p)
+{
+	struct evl_sched_class *orig_effective_class __maybe_unused;
+	bool effective;
+	int ret;
+
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&thread->rq->lock);
+
+	/* Check parameters early on. */
+	ret = evl_check_schedparams(sched_class, thread, p);
+	if (ret)
+		return ret;
+
+	/*
+	 * Declaring a thread to a new scheduling class may fail, so
+	 * we do that early, while the thread is still a member of the
+	 * previous class. However, this also means that the
+	 * declaration callback shall not do anything that might
+	 * affect the previous class (such as touching thread->rq_next
+	 * for instance).
+	 */
+	if (sched_class != thread->base_class) {
+		ret = evl_declare_thread(sched_class, thread, p);
+		if (ret)
+			return ret;
+	}
+
+	/*
+	 * As a special case, we may be called from evl_init_thread()
+	 * with no previous scheduling class at all.
+	 */
+	if (likely(thread->base_class != NULL)) {
+		if (thread->state & T_READY)
+			evl_dequeue_thread(thread);
+
+		if (sched_class != thread->base_class)
+			evl_forget_thread(thread);
+	}
+
+	/*
+	 * Set the base and effective scheduling parameters. However,
+	 * evl_set_schedparam() will deny lowering the effective
+	 * priority if a boost is undergoing, only recording the
+	 * change into the base priority field in such situation.
+	 */
+	thread->base_class = sched_class;
+	/*
+	 * Referring to the effective class from a setparam() handler
+	 * is wrong: make sure to break if so.
+	 */
+	if (EVL_DEBUG(CORE)) {
+		orig_effective_class = thread->sched_class;
+		thread->sched_class = NULL;
+	}
+
+	/*
+	 * This is the ONLY place where calling
+	 * evl_set_schedparam() is legit, sane and safe.
+	 */
+	effective = evl_set_schedparam(thread, p);
+	if (effective) {
+		thread->sched_class = sched_class;
+		thread->wprio = evl_calc_weighted_prio(sched_class, thread->cprio);
+	} else if (EVL_DEBUG(CORE))
+		thread->sched_class = orig_effective_class;
+
+	if (thread->state & T_READY)
+		evl_enqueue_thread(thread);
+
+	/*
+	 * Make sure not to raise RQ_SCHED when setting up the root
+	 * thread, so that we can't start rescheduling from
+	 * evl_exit_irq() before all CPUs have their runqueue fully
+	 * built. Filtering on T_ROOT here is correct because the root
+	 * thread enters the idle class once as part of the runqueue
+	 * setup process and never leaves it afterwards.
+	 */
+	if (!(thread->state & (T_DORMANT|T_ROOT)))
+		evl_set_resched(thread->rq);
+	else
+		EVL_WARN_ON(CORE, (thread->state & T_ROOT) &&
+			sched_class != &evl_sched_idle);
+	return 0;
+}
+
+int evl_set_thread_policy(struct evl_thread *thread,
+			struct evl_sched_class *sched_class,
+			const union evl_sched_param *p)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+	int ret;
+
+	rq = evl_get_thread_rq(thread, flags);
+	ret = evl_set_thread_policy_locked(thread, sched_class, p);
+	evl_put_thread_rq(thread, rq, flags);
+
+	return ret;
+}
+
+/* thread->lock + thread->rq->lock held, irqs off. */
+bool evl_set_effective_thread_priority(struct evl_thread *thread, int prio)
+{
+	int wprio = evl_calc_weighted_prio(thread->base_class, prio);
+
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&thread->rq->lock);
+
+	thread->bprio = prio;
+	if (wprio == thread->wprio)
+		return true;
+
+	/*
+	 * We may not lower the effective/current priority of a
+	 * boosted thread when changing the base scheduling
+	 * parameters. Only evl_track_thread_policy() and
+	 * evl_protect_thread_priority() may do so when dealing with PI
+	 * and PP synchs resp.
+	 */
+	if (wprio < thread->wprio && (thread->state & T_BOOST))
+		return false;
+
+	thread->cprio = prio;
+
+	trace_evl_thread_set_current_prio(thread);
+
+	return true;
+}
+
+/* thread->lock + target->lock held, irqs off */
+void evl_track_thread_policy(struct evl_thread *thread,
+			struct evl_thread *target)
+{
+	union evl_sched_param param;
+
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&target->lock);
+
+	evl_double_rq_lock(thread->rq, target->rq);
+
+	/*
+	 * Inherit (or reset) the effective scheduling class and
+	 * priority of a thread. Unlike evl_set_thread_policy(), this
+	 * routine is allowed to lower the weighted priority with no
+	 * restriction, even if a boost is undergoing.
+	 */
+	if (thread->state & T_READY)
+		evl_dequeue_thread(thread);
+	/*
+	 * Self-targeting means to reset the scheduling policy and
+	 * parameters to the base settings. Otherwise, make thread
+	 * inherit the scheduling parameters from target.
+	 */
+	if (target == thread) {
+		thread->sched_class = thread->base_class;
+		evl_track_priority(thread, NULL);
+		/*
+		 * Per SuSv2, resetting the base scheduling parameters
+		 * should not move the thread to the tail of its
+		 * priority group, which makes sense.
+		 */
+		if (thread->state & T_READY)
+			evl_requeue_thread(thread);
+
+	} else {
+		evl_get_schedparam(target, &param);
+		thread->sched_class = target->sched_class;
+		evl_track_priority(thread, &param);
+		if (thread->state & T_READY)
+			evl_enqueue_thread(thread);
+	}
+
+	trace_evl_thread_set_current_prio(thread);
+
+	evl_set_resched(thread->rq);
+
+	evl_double_rq_unlock(thread->rq, target->rq);
+}
+
+/* thread->lock, irqs off */
+void evl_protect_thread_priority(struct evl_thread *thread, int prio)
+{
+	assert_evl_lock(&thread->lock);
+
+	evl_spin_lock(&thread->rq->lock);
+
+	/*
+	 * Apply a PP boost by changing the effective priority of a
+	 * thread, forcing it to the FIFO class. Like
+	 * evl_track_thread_policy(), this routine is allowed to lower
+	 * the weighted priority with no restriction, even if a boost
+	 * is undergoing.
+	 *
+	 * This routine only deals with active boosts, resetting the
+	 * base priority when leaving a PP boost is obtained by a call
+	 * to evl_track_thread_policy().
+	 */
+	if (thread->state & T_READY)
+		evl_dequeue_thread(thread);
+
+	thread->sched_class = &evl_sched_fifo;
+	evl_ceil_priority(thread, prio);
+
+	if (thread->state & T_READY)
+		evl_enqueue_thread(thread);
+
+	trace_evl_thread_set_current_prio(thread);
+
+	evl_set_resched(thread->rq);
+
+	evl_spin_unlock(&thread->rq->lock);
+}
+
+void evl_init_schedq(struct evl_multilevel_queue *q)
+{
+	int prio;
+
+	q->elems = 0;
+	bitmap_zero(q->prio_map, EVL_MLQ_LEVELS);
+
+	for (prio = 0; prio < EVL_MLQ_LEVELS; prio++)
+		INIT_LIST_HEAD(q->heads + prio);
+}
+
+struct evl_thread *evl_get_schedq(struct evl_multilevel_queue *q)
+{
+	struct evl_thread *thread;
+	struct list_head *head;
+	int idx;
+
+	if (evl_schedq_is_empty(q))
+		return NULL;
+
+	idx = evl_get_schedq_weight(q);
+	head = q->heads + idx;
+	thread = list_first_entry(head, struct evl_thread, rq_next);
+	__evl_del_schedq(q, &thread->rq_next, idx);
+
+	return thread;
+}
+
+struct evl_thread *
+evl_lookup_schedq(struct evl_multilevel_queue *q, int prio)
+{
+	struct list_head *head;
+	int idx;
+
+	idx = get_qindex(q, prio);
+	head = q->heads + idx;
+	if (list_empty(head))
+		return NULL;
+
+	return list_first_entry(head, struct evl_thread, rq_next);
+}
+
+struct evl_thread *evl_fifo_pick(struct evl_rq *rq)
+{
+	struct evl_multilevel_queue *q = &rq->fifo.runnable;
+	struct evl_thread *thread;
+	struct list_head *head;
+	int idx;
+
+	if (evl_schedq_is_empty(q))
+		return NULL;
+
+	/*
+	 * Some scheduling policies may be implemented as variants of
+	 * the core SCHED_FIFO class, sharing its runqueue
+	 * (e.g. SCHED_QUOTA). This means that we have to do some
+	 * cascading to call the right pick handler eventually.
+	 */
+	idx = evl_get_schedq_weight(q);
+	head = q->heads + idx;
+
+	/*
+	 * The active class (i.e. ->sched_class) is the one currently
+	 * queuing the thread, reflecting any priority boost due to
+	 * PI.
+	 */
+	thread = list_first_entry(head, struct evl_thread, rq_next);
+	if (unlikely(thread->sched_class != &evl_sched_fifo))
+		return thread->sched_class->sched_pick(rq);
+
+	__evl_del_schedq(q, &thread->rq_next, idx);
+
+	return thread;
+}
+
+static inline void enter_inband(struct evl_thread *root)
+{
+#ifdef CONFIG_EVL_WATCHDOG
+	evl_stop_timer(&evl_thread_rq(root)->wdtimer);
+#endif
+}
+
+static inline void leave_inband(struct evl_thread *root)
+{
+#ifdef CONFIG_EVL_WATCHDOG
+	evl_start_timer(&evl_thread_rq(root)->wdtimer,
+			evl_abs_timeout(&evl_thread_rq(root)->wdtimer,
+					get_watchdog_timeout()),
+			EVL_INFINITE);
+#endif
+}
+
+/* oob stalled. */
+static irqreturn_t reschedule_interrupt(int irq, void *dev_id)
+{
+	trace_evl_reschedule_ipi(this_evl_rq());
+
+	/* Will reschedule from evl_exit_irq(). */
+
+	return IRQ_HANDLED;
+}
+
+static inline void set_next_running(struct evl_rq *rq,
+				struct evl_thread *next)
+{
+	next->state &= ~T_READY;
+	if (next->state & T_RRB)
+		evl_start_timer(&rq->rrbtimer,
+				evl_abs_timeout(&rq->rrbtimer, next->rrperiod),
+				EVL_INFINITE);
+	else
+		evl_stop_timer(&rq->rrbtimer);
+}
+
+/* rq->curr->lock + rq->lock held, irqs off. */
+static struct evl_thread *pick_next_thread(struct evl_rq *rq)
+{
+	struct evl_sched_class *sched_class;
+	struct evl_thread *curr = rq->curr;
+	struct evl_thread *next;
+
+	/*
+	 * We have to switch the current thread out if a blocking
+	 * condition is raised for it. Otherwise, check whether
+	 * preemption is allowed.
+	 */
+	if (!(curr->state & (EVL_THREAD_BLOCK_BITS | T_ZOMBIE))) {
+		if (evl_preempt_count() > 0) {
+			evl_set_self_resched(rq);
+			return curr;
+		}
+		/*
+		 * Push the current thread back to the run queue of
+		 * the scheduling class it belongs to, if not yet
+		 * linked to it (T_READY tells us if it is).
+		 */
+		if (!(curr->state & T_READY)) {
+			evl_requeue_thread(curr);
+			curr->state |= T_READY;
+		}
+	}
+
+	/*
+	 * Find the next runnable thread having the highest priority
+	 * amongst all scheduling classes, scanned by decreasing
+	 * priority.
+	 */
+	for_each_evl_sched_class(sched_class) {
+		next = sched_class->sched_pick(rq);
+		if (likely(next)) {
+			set_next_running(rq, next);
+			return next;
+		}
+	}
+
+	return NULL; /* NOT REACHED (idle class). */
+}
+
+static inline void prepare_rq_switch(struct evl_rq *this_rq,
+				struct evl_thread *next)
+{
+	if (irq_pipeline_debug_locking())
+		spin_release(&this_rq->lock._lock.rlock.dep_map,
+			1, _THIS_IP_);
+#ifdef CONFIG_DEBUG_SPINLOCK
+	this_rq->lock._lock.rlock.owner = next->altsched.task;
+#endif
+}
+
+static inline void finish_rq_switch(bool inband_tail, unsigned long flags)
+{
+	struct evl_rq *this_rq = this_evl_rq();
+
+	EVL_WARN_ON(CORE, this_rq->curr->state & EVL_THREAD_BLOCK_BITS);
+
+	/*
+	 * Check whether we are completing a transition to the inband
+	 * stage for the current task, i.e.:
+	 *
+	 * irq_work_queue() ->
+	 *        IRQ:wake_up_process() ->
+	 *                         schedule() ->
+	 *                               back from dovetail_context_switch()
+	 */
+	if (likely(!inband_tail)) {
+		if (irq_pipeline_debug_locking())
+			spin_acquire(&this_rq->lock._lock.rlock.dep_map,
+				0, 0, _THIS_IP_);
+		evl_spin_unlock_irqrestore(&this_rq->lock, flags);
+	}
+}
+
+static inline void finish_rq_switch_from_inband(void)
+{
+	struct evl_rq *this_rq = this_evl_rq();
+
+	assert_evl_lock(&this_rq->lock);
+
+	if (irq_pipeline_debug_locking())
+		spin_acquire(&this_rq->lock._lock.rlock.dep_map,
+			0, 0, _THIS_IP_);
+
+	evl_spin_unlock_irq(&this_rq->lock);
+}
+
+/* oob stalled. */
+static inline bool test_resched(struct evl_rq *this_rq)
+{
+	bool need_resched = evl_need_resched(this_rq);
+
+#ifdef CONFIG_SMP
+	/* Send resched IPI to remote CPU(s). */
+	if (unlikely(!cpumask_empty(&this_rq->resched_cpus))) {
+		irq_pipeline_send_remote(RESCHEDULE_OOB_IPI,
+					&this_rq->resched_cpus);
+		cpumask_clear(&this_rq->resched_cpus);
+		this_rq->local_flags &= ~RQ_SCHED;
+	}
+#endif
+	if (need_resched)
+		this_rq->flags &= ~RQ_SCHED;
+
+	return need_resched;
+}
+
+/*
+ * CAUTION: curr->altsched.task may be unsynced and even stale if curr
+ * == &this_rq->root_thread, since the task logged by leave_inband()
+ * may not still be the current one. Use "current" for disambiguating
+ * if you need to refer to the underlying inband task.
+ */
+void __evl_schedule(void) /* oob or oob stalled (CPU migration-safe) */
+{
+	struct evl_rq *this_rq = this_evl_rq();
+	struct evl_thread *prev, *next, *curr;
+	bool leaving_inband, inband_tail;
+	unsigned long flags;
+
+	if (EVL_WARN_ON_ONCE(CORE, running_inband() && !oob_irqs_disabled()))
+		return;
+
+	trace_evl_schedule(this_rq);
+
+	flags = oob_irq_save();
+
+	/*
+	 * Check whether we have a pending priority ceiling request to
+	 * commit before putting the current thread to sleep.
+	 * evl_current() may differ from rq->curr only if rq->curr ==
+	 * &rq->root_thread. Testing T_USER eliminates this case since
+	 * a root thread never bears this bit.
+	 */
+	curr = this_rq->curr;
+	if (curr->state & T_USER)
+		evl_commit_monitor_ceiling();
+
+	/*
+	 * Only holding this_rq->lock is required for test_resched(),
+	 * but we grab curr->lock in advance in order to keep the
+	 * locking order safe from ABBA deadlocking.
+	 */
+	evl_spin_lock(&curr->lock);
+	evl_spin_lock(&this_rq->lock);
+
+	if (unlikely(!test_resched(this_rq))) {
+		evl_spin_unlock(&this_rq->lock);
+		evl_spin_unlock_irqrestore(&curr->lock, flags);
+		return;
+	}
+
+	next = pick_next_thread(this_rq);
+	if (next == curr) {
+		if (unlikely(next->state & T_ROOT)) {
+			if (this_rq->local_flags & RQ_TPROXY)
+				evl_notify_proxy_tick(this_rq);
+			if (this_rq->local_flags & RQ_TDEFER)
+				evl_program_local_tick(&evl_mono_clock);
+		}
+		evl_spin_unlock(&this_rq->lock);
+		evl_spin_unlock_irqrestore(&curr->lock, flags);
+		return;
+	}
+
+	prev = curr;
+	trace_evl_switch_context(prev, next);
+	this_rq->curr = next;
+	leaving_inband = false;
+
+	if (prev->state & T_ROOT) {
+		leave_inband(prev);
+		leaving_inband = true;
+	} else if (next->state & T_ROOT) {
+		if (this_rq->local_flags & RQ_TPROXY)
+			evl_notify_proxy_tick(this_rq);
+		if (this_rq->local_flags & RQ_TDEFER)
+			evl_program_local_tick(&evl_mono_clock);
+		enter_inband(next);
+	}
+
+	evl_switch_account(this_rq, &next->stat.account);
+	evl_inc_counter(&next->stat.csw);
+	evl_spin_unlock(&prev->lock);
+
+	prepare_rq_switch(this_rq, next);
+	inband_tail = dovetail_context_switch(&prev->altsched,
+					&next->altsched, leaving_inband);
+	finish_rq_switch(inband_tail, flags);
+}
+EXPORT_SYMBOL_GPL(__evl_schedule);
+
+void resume_oob_task(struct task_struct *p) /* inband, oob stage stalled */
+{
+	struct evl_thread *thread = evl_thread_from_task(p);
+
+	if (check_cpu_affinity(p))
+		evl_release_thread(thread, T_INBAND, 0);
+
+	evl_schedule();
+}
+
+int evl_switch_oob(void)
+{
+	struct task_struct *p = current;
+	struct evl_thread *curr;
+	int ret;
+
+	inband_context_only();
+
+	curr = evl_current();
+	if (curr == NULL)
+		return -EPERM;
+
+	if (signal_pending(p))
+		return -ERESTARTSYS;
+
+	trace_evl_switching_oob(curr);
+
+	evl_clear_sync_uwindow(curr, T_INBAND);
+
+	ret = dovetail_leave_inband();
+	if (ret) {
+		evl_test_cancel();
+		evl_set_sync_uwindow(curr, T_INBAND);
+		return ret;
+	}
+
+	/*
+	 * The current task is now running on the out-of-band
+	 * execution stage, scheduled in by the latest call to
+	 * __evl_schedule() on this CPU: we must be holding the
+	 * runqueue lock and the oob stage must be stalled.
+	 */
+	oob_context_only();
+	finish_rq_switch_from_inband();
+	evl_test_cancel();
+
+	trace_evl_switched_oob(curr);
+
+	/*
+	 * Recheck pending signals once again. As we block task
+	 * wakeups during the stage transition and handle_sigwake_event()
+	 * ignores signals until T_INBAND is cleared, any signal in
+	 * between is just silently queued up to here.
+	 */
+	if (signal_pending(p)) {
+		evl_switch_inband(!(curr->state & T_SSTEP) ?
+				SIGDEBUG_MIGRATE_SIGNAL:
+				SIGDEBUG_NONE);
+		return -ERESTARTSYS;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_switch_oob);
+
+void evl_switch_inband(int cause)
+{
+	struct evl_thread *curr = evl_current();
+	struct task_struct *p = current;
+	struct kernel_siginfo si;
+	struct evl_rq *rq;
+
+	oob_context_only();
+
+	trace_evl_switching_inband(cause);
+
+	/*
+	 * This is the only location where we may assert T_INBAND for
+	 * a thread. Basic assumption: switching to the inband stage
+	 * only applies to the current thread running out-of-band on
+	 * this CPU.
+	 *
+	 * CAVEAT: dovetail_leave_oob() must run _before_ the in-band
+	 * kernel is allowed to take interrupts again, so that
+	 * try_to_wake_up() does not block the wake up request for the
+	 * switching thread as a result of testing task_is_off_stage().
+	 */
+	oob_irq_disable();
+	irq_work_queue(&curr->inband_work);
+	evl_spin_lock(&curr->lock);
+	rq = curr->rq;
+	evl_spin_lock(&rq->lock);
+	if (curr->state & T_READY) {
+		evl_dequeue_thread(curr);
+		curr->state &= ~T_READY;
+	}
+	curr->info &= ~EVL_THREAD_INFO_MASK;
+	curr->state |= T_INBAND;
+	curr->local_info &= ~T_SYSRST;
+	evl_set_resched(rq);
+	dovetail_leave_oob();
+	evl_spin_unlock(&rq->lock);
+	evl_spin_unlock(&curr->lock);
+	__evl_schedule();
+	/*
+	 * this_rq()->lock was released when the root thread resumed
+	 * from __evl_schedule() (i.e. inband_tail path).
+	 */
+	oob_irq_enable();
+	dovetail_resume_inband();
+
+	/*
+	 * Basic sanity check after an expected transition to in-band
+	 * context.
+	 */
+	EVL_WARN(CORE, !running_inband(),
+		"evl_switch_inband() failed for thread %s[%d]",
+		curr->name, evl_get_inband_pid(curr));
+
+	/* Account for switch to in-band context. */
+	evl_inc_counter(&curr->stat.isw);
+
+	trace_evl_switched_inband(curr);
+
+	/*
+	 * When switching to in-band context, we check for propagating
+	 * the current EVL schedparams that might have been set for
+	 * current while running in OOB context.
+	 *
+	 * CAUTION: This obviously won't update the schedparams cached
+	 * by the glibc for the caller in user-space, but this is the
+	 * deal: we don't switch threads which issue
+	 * EVL_THRIOC_SET_SCHEDPARAM to in-band mode, but then only
+	 * the kernel side will be aware of the change, and glibc
+	 * might cache obsolete information.
+	 */
+	evl_propagate_schedparam_change(curr);
+
+	if ((curr->state & T_USER) && cause != SIGDEBUG_NONE) {
+		/*
+		 * Help debugging spurious stage switches by sending
+		 * SIGDEBUG. We are running inband on the context of
+		 * the receiver, so we may bypass evl_signal_thread()
+		 * for this.
+		 */
+		if (curr->state & T_WOSS) {
+			memset(&si, 0, sizeof(si));
+			si.si_signo = SIGDEBUG;
+			si.si_code = SI_QUEUE;
+			si.si_int = cause | sigdebug_marker;
+			send_sig_info(SIGDEBUG, &si, p);
+		}
+		/* May check for locking inconsistency too. */
+		if (curr->state & T_WOLI)
+			evl_detect_boost_drop(curr);
+	}
+
+	/* @curr is now running inband. */
+	evl_sync_uwindow(curr);
+}
+EXPORT_SYMBOL_GPL(evl_switch_inband);
+
+struct evl_sched_class *
+evl_find_sched_class(union evl_sched_param *param,
+		const struct evl_sched_attrs *attrs,
+		ktime_t *tslice_r)
+{
+	struct evl_sched_class *sched_class;
+	int prio, policy;
+	ktime_t tslice;
+
+	policy = attrs->sched_policy;
+	prio = attrs->sched_priority;
+	tslice = EVL_INFINITE;
+	sched_class = &evl_sched_fifo;
+	param->fifo.prio = prio;
+
+	switch (policy) {
+	case SCHED_NORMAL:
+		if (prio)
+			return NULL;
+		/* fall-through */
+	case SCHED_WEAK:
+		if (prio < EVL_WEAK_MIN_PRIO ||	prio > EVL_WEAK_MAX_PRIO)
+			return NULL;
+		param->weak.prio = prio;
+		sched_class = &evl_sched_weak;
+		break;
+	case SCHED_RR:
+		/* if unspecified, use current one. */
+		tslice = timespec_to_ktime(attrs->sched_rr_quantum);
+		if (timeout_infinite(tslice) && tslice_r)
+			tslice = *tslice_r;
+		/* fall-through */
+	case SCHED_FIFO:
+		/*
+		 * This routine handles requests submitted from
+		 * user-space exclusively, so a SCHED_FIFO priority
+		 * must be in the [FIFO_MIN..FIFO_MAX] range.
+		 */
+		if (prio < EVL_FIFO_MIN_PRIO ||	prio > EVL_FIFO_MAX_PRIO)
+			return NULL;
+		break;
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	case SCHED_QUOTA:
+		param->quota.prio = attrs->sched_priority;
+		param->quota.tgid = attrs->sched_quota_group;
+		sched_class = &evl_sched_quota;
+		break;
+#endif
+#ifdef CONFIG_EVL_SCHED_TP
+	case SCHED_TP:
+		param->tp.prio = attrs->sched_priority;
+		param->tp.ptid = attrs->sched_tp_partition;
+		sched_class = &evl_sched_tp;
+		break;
+#endif
+	default:
+		return NULL;
+	}
+
+	*tslice_r = tslice;
+
+	return sched_class;
+}
+
+#ifdef CONFIG_TRACING
+
+const char *evl_trace_sched_attrs(struct trace_seq *p,
+				struct evl_sched_attrs *attrs)
+{
+	const char *ret = trace_seq_buffer_ptr(p);
+
+	switch (attrs->sched_policy) {
+	case SCHED_QUOTA:
+		trace_seq_printf(p, "priority=%d, group=%d",
+				attrs->sched_priority,
+				attrs->sched_quota_group);
+		break;
+	case SCHED_TP:
+		trace_seq_printf(p, "priority=%d, partition=%d",
+				attrs->sched_priority,
+				attrs->sched_tp_partition);
+	case SCHED_NORMAL:
+		break;
+	case SCHED_RR:
+	case SCHED_FIFO:
+	case SCHED_WEAK:
+	default:
+		trace_seq_printf(p, "priority=%d", attrs->sched_priority);
+		break;
+	}
+	trace_seq_putc(p, '\0');
+
+	return ret;
+}
+
+#endif /* CONFIG_TRACING */
+
+/* in-band stage, hard_irqs_disabled() */
+bool irq_cpuidle_control(struct cpuidle_device *dev,
+			struct cpuidle_state *state)
+{
+	/*
+	 * Deny entering sleep state if this entails stopping the
+	 * timer (i.e. C3STOP misfeature).
+	 */
+	if (state && (state->flags & CPUIDLE_FLAG_TIMER_STOP))
+		return false;
+
+	return true;
+}
+
+int __init evl_init_sched(void)
+{
+	struct evl_rq *rq;
+	int ret, cpu;
+
+	register_classes();
+
+	for_each_online_cpu(cpu) {
+		rq = &per_cpu(evl_runqueues, cpu);
+		init_rq(rq, cpu);
+	}
+
+	if (IS_ENABLED(CONFIG_SMP)) {
+		ret = __request_percpu_irq(RESCHEDULE_OOB_IPI,
+					reschedule_interrupt,
+					IRQF_OOB,
+					"EVL reschedule",
+					&evl_machine_cpudata);
+		if (ret)
+			goto cleanup_rq;
+	}
+
+	return 0;
+
+cleanup_rq:
+	for_each_online_cpu(cpu) {
+		rq = evl_cpu_rq(cpu);
+		destroy_rq(rq);
+	}
+
+	return ret;
+}
+
+void __init evl_cleanup_sched(void)
+{
+	struct evl_rq *rq;
+	int cpu;
+
+	if (IS_ENABLED(CONFIG_SMP))
+		free_percpu_irq(RESCHEDULE_OOB_IPI, &evl_machine_cpudata);
+
+	for_each_online_cpu(cpu) {
+		rq = evl_cpu_rq(cpu);
+		destroy_rq(rq);
+	}
+}
diff --git a/kernel/evl/sched/fifo.c b/kernel/evl/sched/fifo.c
new file mode 100644
index 000000000000..c4ddc0572bdc
--- /dev/null
+++ b/kernel/evl/sched/fifo.c
@@ -0,0 +1,106 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <evl/sched.h>
+
+static void evl_fifo_init(struct evl_rq *rq)
+{
+	evl_init_schedq(&rq->fifo.runnable);
+}
+
+static void evl_fifo_rotate(struct evl_rq *rq,
+			const union evl_sched_param *p)
+{
+	struct evl_thread *thread, *curr;
+
+	if (evl_schedq_is_empty(&rq->fifo.runnable))
+		return;	/* No runnable thread in this class. */
+
+	curr = rq->curr;
+	thread = evl_lookup_schedq(&rq->fifo.runnable, p->fifo.prio);
+	if (thread == NULL)
+		return;
+
+	/*
+	 * In case we picked the current thread, we have to make sure
+	 * not to move it back to the run queue if it was blocked
+	 * before we were called. The same goes if the current thread
+	 * holds the scheduler lock.
+	 */
+	if (thread != curr ||
+		(!(curr->state & EVL_THREAD_BLOCK_BITS) &&
+			evl_preempt_count() == 0))
+		evl_putback_thread(thread);
+}
+
+static void evl_fifo_tick(struct evl_rq *rq)
+{
+	/*
+	 * The round-robin time credit is only consumed by a running
+	 * thread that neither holds the scheduler lock nor was
+	 * blocked before entering this callback. As the time slice is
+	 * exhausted for the running thread, move it back to the
+	 * run queue at the end of its priority group.
+	 */
+	evl_putback_thread(rq->curr);
+}
+
+static int evl_fifo_chkparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	return __evl_chk_fifo_schedparam(thread, p);
+}
+
+static bool evl_fifo_setparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	return __evl_set_fifo_schedparam(thread, p);
+}
+
+static void evl_fifo_getparam(struct evl_thread *thread,
+			union evl_sched_param *p)
+{
+	__evl_get_fifo_schedparam(thread, p);
+}
+
+static void evl_fifo_trackprio(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	__evl_track_fifo_priority(thread, p);
+}
+
+static void evl_fifo_ceilprio(struct evl_thread *thread, int prio)
+{
+	__evl_ceil_fifo_priority(thread, prio);
+}
+
+static ssize_t evl_fifo_show(struct evl_thread *thread,
+			char *buf, ssize_t count)
+{
+	if (thread->state & T_RRB)
+		return snprintf(buf, count, "%Ld\n",
+				ktime_to_ns(thread->rrperiod));
+
+	return 0;
+}
+
+struct evl_sched_class evl_sched_fifo = {
+	.sched_init		=	evl_fifo_init,
+	.sched_pick		=	evl_fifo_pick,
+	.sched_tick		=	evl_fifo_tick,
+	.sched_rotate		=	evl_fifo_rotate,
+	.sched_chkparam		=	evl_fifo_chkparam,
+	.sched_setparam		=	evl_fifo_setparam,
+	.sched_trackprio	=	evl_fifo_trackprio,
+	.sched_ceilprio		=	evl_fifo_ceilprio,
+	.sched_getparam		=	evl_fifo_getparam,
+	.sched_show		=	evl_fifo_show,
+	.weight			=	EVL_CLASS_WEIGHT(4),
+	.policy			=	SCHED_FIFO,
+	.name			=	"fifo"
+};
+EXPORT_SYMBOL_GPL(evl_sched_fifo);
diff --git a/kernel/evl/sched/idle.c b/kernel/evl/sched/idle.c
new file mode 100644
index 000000000000..90e5f71bd06e
--- /dev/null
+++ b/kernel/evl/sched/idle.c
@@ -0,0 +1,47 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <evl/sched.h>
+
+static struct evl_thread *evl_idle_pick(struct evl_rq *rq)
+{
+	return &rq->root_thread;
+}
+
+static bool evl_idle_setparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	return __evl_set_idle_schedparam(thread, p);
+}
+
+static void evl_idle_getparam(struct evl_thread *thread,
+			union evl_sched_param *p)
+{
+	__evl_get_idle_schedparam(thread, p);
+}
+
+static void evl_idle_trackprio(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	__evl_track_idle_priority(thread, p);
+}
+
+static void evl_idle_ceilprio(struct evl_thread *thread, int prio)
+{
+	__evl_ceil_idle_priority(thread, prio);
+}
+
+struct evl_sched_class evl_sched_idle = {
+	.sched_pick		=	evl_idle_pick,
+	.sched_setparam		=	evl_idle_setparam,
+	.sched_getparam		=	evl_idle_getparam,
+	.sched_trackprio	=	evl_idle_trackprio,
+	.sched_ceilprio		=	evl_idle_ceilprio,
+	.weight			=	EVL_CLASS_WEIGHT(0),
+	.policy			=	SCHED_IDLE,
+	.name			=	"idle"
+};
diff --git a/kernel/evl/sched/quota.c b/kernel/evl/sched/quota.c
new file mode 100644
index 000000000000..694986b3e567
--- /dev/null
+++ b/kernel/evl/sched/quota.c
@@ -0,0 +1,751 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2013, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/bitmap.h>
+#include <asm/div64.h>
+#include <evl/sched.h>
+#include <evl/memory.h>
+#include <uapi/evl/sched.h>
+
+/*
+ * With this policy, each per-CPU runqueue maintains a list of active
+ * thread groups for the sched_fifo class.
+ *
+ * Each time a thread is picked from the runqueue, we check whether we
+ * still have budget for running it, looking at the group it belongs
+ * to. If so, a timer is armed to elapse when that group has no more
+ * budget, would the incoming thread run unpreempted until then
+ * (i.e. evl_quota->limit_timer).
+ *
+ * Otherwise, if no budget remains in the group for running the
+ * candidate thread, we move the latter to a local expiry queue
+ * maintained by the group. This process is done on the fly as we pull
+ * from the runqueue.
+ *
+ * Updating the remaining budget is done each time the EVL core asks
+ * for replacing the current thread with the next runnable one,
+ * i.e. evl_quota_pick(). There we charge the elapsed run time of the
+ * outgoing thread to the relevant group, and conversely, we check
+ * whether the incoming thread has budget.
+ *
+ * Finally, a per-CPU timer (evl_quota->refill_timer) periodically
+ * ticks in the background, in accordance to the defined quota
+ * interval. Thread group budgets get replenished by its handler in
+ * accordance to their respective share, pushing all expired threads
+ * back to the run queue in the same move.
+ *
+ * NOTE: since the core logic enforcing the budget entirely happens in
+ * evl_quota_pick(), applying a budget change can be done as simply as
+ * forcing the rescheduling procedure to be invoked asap. As a result
+ * of this, the EVL core will ask for the next thread to run, which
+ * means calling evl_quota_pick() eventually.
+ *
+ * CAUTION: evl_quota_group->nr_active does count both the threads
+ * from that group linked to the sched_fifo runqueue, _and_ the
+ * threads moved to the local expiry queue. As a matter of fact, the
+ * expired threads - those for which we consumed all the per-group
+ * budget - are still seen as runnable (i.e. not blocked/suspended) by
+ * the EVL core. This only means that the SCHED_QUOTA policy won't
+ * pick them until the corresponding budget is replenished.
+ */
+
+#define MAX_QUOTA_GROUPS  1024
+
+static ktime_t quota_period = 1000000000UL; /* 1s */
+
+static DECLARE_BITMAP(group_map, MAX_QUOTA_GROUPS);
+
+static LIST_HEAD(group_list);
+
+static inline int group_is_active(struct evl_quota_group *tg)
+{
+	struct evl_thread *curr = tg->rq->curr;
+
+	if (tg->nr_active)
+		return 1;
+
+	/*
+	 * Check whether the current thread belongs to the group, and
+	 * is still in running state (T_READY denotes a thread linked
+	 * to the runqueue, in which case tg->nr_active already
+	 * accounts for it).
+	 */
+	if (curr->quota == tg &&
+		(curr->state & (T_READY|EVL_THREAD_BLOCK_BITS)) == 0)
+		return 1;
+
+	return 0;
+}
+
+static inline void replenish_budget(struct evl_sched_quota *qs,
+				struct evl_quota_group *tg)
+{
+	ktime_t budget, credit;
+
+	if (tg->quota == tg->quota_peak) {
+		/*
+		 * Fast path: we don't accumulate runtime credit.
+		 * This includes groups with no runtime limit
+		 * (i.e. quota off: quota >= period && quota == peak).
+		 */
+		tg->run_budget = tg->quota;
+		return;
+	}
+
+	/*
+	 * We have to deal with runtime credit accumulation, as the
+	 * group may consume more than its base quota during a single
+	 * interval, up to a peak duration though (not to monopolize
+	 * the CPU).
+	 *
+	 * - In the simplest case, a group is allotted a new full
+	 * budget plus the unconsumed portion of the previous budget,
+	 * provided the sum does not exceed the peak quota.
+	 *
+	 * - When there is too much budget for a single interval
+	 * (i.e. above peak quota), we spread the extra time over
+	 * multiple intervals through a credit accumulation mechanism.
+	 *
+	 * - The accumulated credit is dropped whenever a group has no
+	 * runnable threads.
+	 */
+	if (!group_is_active(tg)) {
+		/* Drop accumulated credit. */
+		tg->run_credit = 0;
+		tg->run_budget = tg->quota;
+		return;
+	}
+
+	budget = ktime_add(tg->run_budget, tg->quota);
+	if (budget > tg->quota_peak) {
+		/* Too much budget, spread it over intervals. */
+		tg->run_credit =
+			ktime_add(tg->run_credit,
+				ktime_sub(budget, tg->quota_peak));
+		tg->run_budget = tg->quota_peak;
+	} else if (tg->run_credit) {
+		credit = ktime_sub(tg->quota_peak, budget);
+		/* Consume the accumulated credit. */
+		if (tg->run_credit >= credit)
+			tg->run_credit =
+				ktime_sub(tg->run_credit, credit);
+		else {
+			credit = tg->run_credit;
+			tg->run_credit = 0;
+		}
+		/* Allot extended budget, limited to peak quota. */
+		tg->run_budget = ktime_add(budget, credit);
+	} else
+		/* No credit, budget was below peak quota. */
+		tg->run_budget = budget;
+}
+
+static void quota_refill_handler(struct evl_timer *timer) /* oob stage stalled */
+{
+	struct evl_quota_group *tg;
+	struct evl_thread *thread, *tmp;
+	struct evl_sched_quota *qs;
+	struct evl_rq *rq;
+
+	qs = container_of(timer, struct evl_sched_quota, refill_timer);
+	rq = container_of(qs, struct evl_rq, quota);
+
+	evl_spin_lock(&rq->lock);
+
+	list_for_each_entry(tg, &qs->groups, next) {
+		/* Allot a new runtime budget for the group. */
+		replenish_budget(qs, tg);
+
+		if (tg->run_budget == 0 || list_empty(&tg->expired))
+			continue;
+		/*
+		 * For each group living on this CPU, move all expired
+		 * threads back to the runqueue. Since those threads
+		 * were moved out of the runqueue as we were
+		 * considering them for execution, we push them back
+		 * in LIFO order to their respective priority group.
+		 * The expiry queue is FIFO to keep ordering right
+		 * among expired threads.
+		 */
+		list_for_each_entry_safe_reverse(thread, tmp, &tg->expired, quota_expired) {
+			list_del_init(&thread->quota_expired);
+			evl_add_schedq(&rq->fifo.runnable, thread);
+		}
+	}
+
+	evl_set_self_resched(evl_get_timer_rq(timer));
+
+	evl_spin_unlock(&rq->lock);
+}
+
+static void quota_limit_handler(struct evl_timer *timer) /* oob stage stalled */
+{
+	struct evl_rq *rq;
+
+	rq = container_of(timer, struct evl_rq, quota.limit_timer);
+	/*
+	 * Force a rescheduling on the return path of the current
+	 * interrupt, so that the budget is re-evaluated for the
+	 * current group in evl_quota_pick().
+	 */
+	evl_spin_lock(&rq->lock);
+	evl_set_self_resched(rq);
+	evl_spin_unlock(&rq->lock);
+}
+
+static int quota_sum_all(struct evl_sched_quota *qs)
+{
+	struct evl_quota_group *tg;
+	int sum;
+
+	if (list_empty(&qs->groups))
+		return 0;
+
+	sum = 0;
+	list_for_each_entry(tg, &qs->groups, next)
+		sum += tg->quota_percent;
+
+	return sum;
+}
+
+static void quota_init(struct evl_rq *rq)
+{
+	struct evl_sched_quota *qs = &rq->quota;
+
+	qs->period = quota_period;
+	INIT_LIST_HEAD(&qs->groups);
+
+	evl_init_timer_on_rq(&qs->refill_timer,
+			&evl_mono_clock, quota_refill_handler, rq,
+			EVL_TIMER_IGRAVITY);
+	evl_set_timer_name(&qs->refill_timer, "[quota-refill]");
+
+	evl_init_timer_on_rq(&qs->limit_timer,
+			&evl_mono_clock, quota_limit_handler, rq,
+			EVL_TIMER_IGRAVITY);
+	evl_set_timer_name(&qs->limit_timer, "[quota-limit]");
+}
+
+static bool quota_setparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	struct evl_quota_group *tg;
+	struct evl_sched_quota *qs;
+	bool effective;
+
+	thread->state &= ~T_WEAK;
+	effective = evl_set_effective_thread_priority(thread, p->quota.prio);
+
+	qs = &thread->rq->quota;
+	list_for_each_entry(tg, &qs->groups, next) {
+		if (tg->tgid != p->quota.tgid)
+			continue;
+		if (thread->quota) {
+			/* Dequeued earlier by our caller. */
+			list_del(&thread->quota_next);
+			thread->quota->nr_threads--;
+		}
+		thread->quota = tg;
+		list_add(&thread->quota_next, &tg->members);
+		tg->nr_threads++;
+		return effective;
+	}
+
+	return false;		/* not reached. */
+}
+
+static void quota_getparam(struct evl_thread *thread,
+			union evl_sched_param *p)
+{
+	p->quota.prio = thread->cprio;
+	p->quota.tgid = thread->quota->tgid;
+}
+
+static void quota_trackprio(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	if (p) {
+		/* We should not cross groups during PI boost. */
+		EVL_WARN_ON(CORE,
+			thread->base_class == &evl_sched_quota &&
+			thread->quota->tgid != p->quota.tgid);
+		thread->cprio = p->quota.prio;
+	} else
+		thread->cprio = thread->bprio;
+}
+
+static void quota_ceilprio(struct evl_thread *thread, int prio)
+{
+	if (prio > EVL_QUOTA_MAX_PRIO)
+		prio = EVL_QUOTA_MAX_PRIO;
+
+	thread->cprio = prio;
+}
+
+static int quota_chkparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	struct evl_quota_group *tg;
+	struct evl_sched_quota *qs;
+	int tgid;
+
+	if (p->quota.prio < EVL_QUOTA_MIN_PRIO ||
+		p->quota.prio > EVL_QUOTA_MAX_PRIO)
+		return -EINVAL;
+
+	tgid = p->quota.tgid;
+	if (tgid < 0 || tgid >= MAX_QUOTA_GROUPS)
+		return -EINVAL;
+
+	/*
+	 * The group must be managed on the same CPU the thread
+	 * currently runs on.
+	 */
+	qs = &thread->rq->quota;
+	list_for_each_entry(tg, &qs->groups, next) {
+		if (tg->tgid == tgid)
+			return 0;
+	}
+
+	/*
+	 * If that group exists nevertheless, we give userland a
+	 * specific error code.
+	 */
+	if (test_bit(tgid, group_map))
+		return -EPERM;
+
+	return -EINVAL;
+}
+
+static void quota_forget(struct evl_thread *thread)
+{
+	thread->quota->nr_threads--;
+	EVL_WARN_ON_ONCE(CORE, thread->quota->nr_threads < 0);
+	list_del(&thread->quota_next);
+	thread->quota = NULL;
+}
+
+static void quota_kick(struct evl_thread *thread)
+{
+	struct evl_quota_group *tg = thread->quota;
+	struct evl_rq *rq = thread->rq;
+
+	/*
+	 * Allow a kicked thread to be elected for running until it
+	 * switches to in-band context, even if the group it belongs
+	 * to lacks runtime budget.
+	 */
+	if (tg->run_budget == 0 && !list_empty(&thread->quota_expired)) {
+		list_del_init(&thread->quota_expired);
+		evl_add_schedq_tail(&rq->fifo.runnable, thread);
+	}
+}
+
+static inline int thread_is_runnable(struct evl_thread *thread)
+{
+	return thread->quota->run_budget > 0 || (thread->info & T_KICKED);
+}
+
+static void quota_enqueue(struct evl_thread *thread)
+{
+	struct evl_quota_group *tg = thread->quota;
+	struct evl_rq *rq = thread->rq;
+
+	if (!thread_is_runnable(thread))
+		list_add_tail(&thread->quota_expired, &tg->expired);
+	else
+		evl_add_schedq_tail(&rq->fifo.runnable, thread);
+
+	tg->nr_active++;
+}
+
+static void quota_dequeue(struct evl_thread *thread)
+{
+	struct evl_quota_group *tg = thread->quota;
+	struct evl_rq *rq = thread->rq;
+
+	if (!list_empty(&thread->quota_expired))
+		list_del_init(&thread->quota_expired);
+	else
+		evl_del_schedq(&rq->fifo.runnable, thread);
+
+	tg->nr_active--;
+}
+
+static void quota_requeue(struct evl_thread *thread)
+{
+	struct evl_quota_group *tg = thread->quota;
+	struct evl_rq *rq = thread->rq;
+
+	if (!thread_is_runnable(thread))
+		list_add(&thread->quota_expired, &tg->expired);
+	else
+		evl_add_schedq(&rq->fifo.runnable, thread);
+
+	tg->nr_active++;
+}
+
+static struct evl_thread *quota_pick(struct evl_rq *rq)
+{
+	struct evl_thread *next, *curr = rq->curr;
+	struct evl_sched_quota *qs = &rq->quota;
+	struct evl_quota_group *otg, *tg;
+	ktime_t now, elapsed;
+
+	now = evl_read_clock(&evl_mono_clock);
+	otg = curr->quota;
+	if (otg == NULL)
+		goto pick;
+	/*
+	 * Charge the time consumed by the outgoing thread to the
+	 * group it belongs to.
+	 */
+	elapsed = ktime_sub(now, otg->run_start);
+	if (elapsed < otg->run_budget)
+		otg->run_budget = ktime_sub(otg->run_budget, elapsed);
+	else
+		otg->run_budget = 0;
+pick:
+	next = evl_get_schedq(&rq->fifo.runnable);
+	if (next == NULL) {
+		evl_stop_timer(&qs->limit_timer);
+		return NULL;
+	}
+
+	/*
+	 * As we basically piggyback on the SCHED_FIFO runqueue, make
+	 * sure to detect non-quota threads.
+	 */
+	tg = next->quota;
+	if (tg == NULL)
+		return next;
+
+	tg->run_start = now;
+
+	/*
+	 * Don't consider budget if kicked, we have to allow this
+	 * thread to run until it eventually switches to in-band
+	 * context.
+	 */
+	if (next->info & T_KICKED) {
+		evl_stop_timer(&qs->limit_timer);
+		goto out;
+	}
+
+	if (ktime_to_ns(tg->run_budget) == 0) {
+		/* Flush expired group members as we go. */
+		list_add_tail(&next->quota_expired, &tg->expired);
+		goto pick;
+	}
+
+	if (otg == tg && evl_timer_is_running(&qs->limit_timer))
+		/* Same group, leave the running timer untouched. */
+		goto out;
+
+	/* Arm limit timer for the new running group. */
+	evl_start_timer(&qs->limit_timer,
+			ktime_add(now, tg->run_budget),
+			EVL_INFINITE);
+out:
+	tg->nr_active--;
+
+	return next;
+}
+
+static void quota_migrate(struct evl_thread *thread, struct evl_rq *rq)
+{
+	union evl_sched_param param;
+	/*
+	 * Runtime quota groups are defined per-CPU, so leaving the
+	 * current CPU means exiting the group. We do this by moving
+	 * the target thread to the FIFO class.
+	 */
+	param.fifo.prio = thread->cprio;
+	evl_set_thread_schedparam_locked(thread, &evl_sched_fifo, &param);
+}
+
+static ssize_t quota_show(struct evl_thread *thread,
+			char *buf, ssize_t count)
+{
+	return snprintf(buf, count, "%d\n",
+			thread->quota->tgid);
+}
+
+static int quota_create_group(struct evl_quota_group *tg,
+			struct evl_rq *rq,
+			int *quota_sum_r)
+{
+	int tgid, nr_groups = MAX_QUOTA_GROUPS;
+	struct evl_sched_quota *qs = &rq->quota;
+
+	assert_evl_lock(&rq->lock);
+
+	tgid = find_first_zero_bit(group_map, nr_groups);
+	if (tgid >= nr_groups)
+		return -EAGAIN;
+
+	__set_bit(tgid, group_map);
+	tg->tgid = tgid;
+	tg->rq = rq;
+	tg->run_budget = qs->period;
+	tg->run_credit = 0;
+	tg->quota_percent = 100;
+	tg->quota_peak_percent = 100;
+	tg->quota = qs->period;
+	tg->quota_peak = qs->period;
+	tg->nr_active = 0;
+	tg->nr_threads = 0;
+	INIT_LIST_HEAD(&tg->members);
+	INIT_LIST_HEAD(&tg->expired);
+
+	if (list_empty(&qs->groups))
+		evl_start_timer(&qs->refill_timer,
+				evl_abs_timeout(&qs->refill_timer, qs->period),
+				qs->period);
+
+	list_add(&tg->next, &qs->groups);
+	*quota_sum_r = quota_sum_all(qs);
+
+	return 0;
+}
+
+static int quota_destroy_group(struct evl_quota_group *tg,
+			bool force, int *quota_sum_r)
+{
+	struct evl_sched_quota *qs = &tg->rq->quota;
+	struct evl_thread *thread, *tmp;
+	union evl_sched_param param;
+
+	assert_evl_lock(&tg->rq->lock);
+
+	if (!list_empty(&tg->members)) {
+		if (!force)
+			return -EBUSY;
+		/* Move group members to the fifo class. */
+		list_for_each_entry_safe(thread, tmp,
+					&tg->members, quota_next) {
+			param.fifo.prio = thread->cprio;
+			evl_set_thread_schedparam_locked(thread,
+						&evl_sched_fifo, &param);
+		}
+	}
+
+	list_del(&tg->next);
+	__clear_bit(tg->tgid, group_map);
+
+	if (list_empty(&qs->groups))
+		evl_stop_timer(&qs->refill_timer);
+
+	*quota_sum_r = quota_sum_all(qs);
+
+	return 0;
+}
+
+static void quota_set_limit(struct evl_quota_group *tg,
+			int quota_percent, int quota_peak_percent,
+			int *quota_sum_r)
+{
+	struct evl_sched_quota *qs = &tg->rq->quota;
+	ktime_t now, elapsed, consumed;
+	ktime_t old_quota = tg->quota;
+	u64 n;
+
+	assert_evl_lock(&tg->rq->lock);
+
+	if (quota_percent < 0 || quota_percent > 100) { /* Quota off. */
+		quota_percent = 100;
+		tg->quota = qs->period;
+	} else {
+		n = qs->period * quota_percent;
+		do_div(n, 100);
+		tg->quota = n;
+	}
+
+	if (quota_peak_percent < quota_percent)
+		quota_peak_percent = quota_percent;
+
+	if (quota_peak_percent < 0 || quota_peak_percent > 100) {
+		quota_peak_percent = 100;
+		tg->quota_peak = qs->period;
+	} else {
+		n = qs->period * quota_peak_percent;
+		do_div(n, 100);
+		tg->quota_peak = n;
+	}
+
+	tg->quota_percent = quota_percent;
+	tg->quota_peak_percent = quota_peak_percent;
+
+	if (group_is_active(tg)) {
+		now = evl_read_clock(&evl_mono_clock);
+
+		elapsed = now - tg->run_start;
+		if (elapsed < tg->run_budget)
+			tg->run_budget -= elapsed;
+		else
+			tg->run_budget = 0;
+
+		tg->run_start = now;
+		evl_stop_timer(&qs->limit_timer);
+	}
+
+	if (tg->run_budget <= old_quota)
+		consumed = old_quota - tg->run_budget;
+	else
+		consumed = 0;
+
+	if (tg->quota >= consumed)
+		tg->run_budget = tg->quota - consumed;
+	else
+		tg->run_budget = 0;
+
+	tg->run_credit = 0;	/* Drop accumulated credit. */
+
+	*quota_sum_r = quota_sum_all(qs);
+
+	/*
+	 * Apply the new budget immediately, in case a member of this
+	 * group is currently running.
+	 */
+	evl_set_resched(tg->rq);
+}
+
+static struct evl_quota_group *
+find_quota_group(struct evl_rq *rq, int tgid)
+{
+	struct evl_quota_group *tg;
+
+	assert_evl_lock(&rq->lock);
+
+	if (list_empty(&rq->quota.groups))
+		return NULL;
+
+	list_for_each_entry(tg, &rq->quota.groups, next) {
+		if (tg->tgid == tgid)
+			return tg;
+	}
+
+	return NULL;
+}
+
+static int quota_control(int cpu, union evl_sched_ctlparam *ctlp,
+			union evl_sched_ctlinfo *infp)
+{
+	struct evl_quota_ctlparam *pq = &ctlp->quota;
+	struct evl_quota_ctlinfo *iq = &infp->quota;
+	struct evl_sched_group *group;
+	struct evl_quota_group *tg;
+	unsigned long flags;
+	int ret, quota_sum;
+	struct evl_rq *rq;
+
+	if (cpu < 0 || !cpu_present(cpu) || !is_threading_cpu(cpu))
+		return -EINVAL;
+
+	switch (pq->op) {
+	case evl_quota_add:
+		group = evl_alloc(sizeof(*group));
+		if (group == NULL)
+			return -ENOMEM;
+		tg = &group->quota;
+		rq = evl_cpu_rq(cpu);
+		evl_spin_lock_irqsave(&rq->lock, flags);
+		ret = quota_create_group(tg, rq, &quota_sum);
+		if (ret) {
+			evl_spin_unlock_irqrestore(&rq->lock, flags);
+			evl_free(group);
+			return ret;
+		}
+		list_add(&group->next, &group_list);
+		break;
+	case evl_quota_remove:
+	case evl_quota_force_remove:
+		rq = evl_cpu_rq(cpu);
+		evl_spin_lock_irqsave(&rq->lock, flags);
+		tg = find_quota_group(rq, pq->u.remove.tgid);
+		if (tg == NULL)
+			goto bad_tgid;
+		group = container_of(tg, struct evl_sched_group, quota);
+		ret = quota_destroy_group(tg,
+					pq->op == evl_quota_force_remove,
+					&quota_sum);
+		if (ret) {
+			evl_spin_unlock_irqrestore(&rq->lock, flags);
+			return ret;
+		}
+		list_del(&group->next);
+		evl_spin_unlock_irqrestore(&rq->lock, flags);
+		evl_free(group);
+		return 0;
+	case evl_quota_set:
+		rq = evl_cpu_rq(cpu);
+		evl_spin_lock_irqsave(&rq->lock, flags);
+		tg = find_quota_group(rq, pq->u.set.tgid);
+		if (tg == NULL)
+			goto bad_tgid;
+		group = container_of(tg, struct evl_sched_group, quota);
+		quota_set_limit(tg, pq->u.set.quota, pq->u.set.quota_peak,
+				&quota_sum);
+		break;
+	case evl_quota_get:
+		rq = evl_cpu_rq(cpu);
+		evl_spin_lock_irqsave(&rq->lock, flags);
+		tg = find_quota_group(rq, pq->u.get.tgid);
+		if (tg == NULL)
+			goto bad_tgid;
+		quota_sum = quota_sum_all(&rq->quota);
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	iq->tgid = tg->tgid;
+	iq->quota = tg->quota_percent;
+	iq->quota_peak = tg->quota_peak_percent;
+	evl_spin_unlock_irqrestore(&rq->lock, flags);
+	iq->quota_sum = quota_sum;
+
+	evl_schedule();
+
+	return 0;
+bad_tgid:
+	evl_spin_unlock_irqrestore(&rq->lock, flags);
+
+	return -EINVAL;
+}
+
+void evl_set_quota_period(ktime_t period)
+{
+	quota_period = period;
+}
+
+ktime_t evl_get_quota_period(void)
+{
+	return quota_period;
+}
+
+struct evl_sched_class evl_sched_quota = {
+	.sched_init		=	quota_init,
+	.sched_enqueue		=	quota_enqueue,
+	.sched_dequeue		=	quota_dequeue,
+	.sched_requeue		=	quota_requeue,
+	.sched_pick		=	quota_pick,
+	.sched_migrate		=	quota_migrate,
+	.sched_chkparam		=	quota_chkparam,
+	.sched_setparam		=	quota_setparam,
+	.sched_getparam		=	quota_getparam,
+	.sched_trackprio	=	quota_trackprio,
+	.sched_ceilprio		=	quota_ceilprio,
+	.sched_forget		=	quota_forget,
+	.sched_kick		=	quota_kick,
+	.sched_show		=	quota_show,
+	.sched_control		=	quota_control,
+	.weight			=	EVL_CLASS_WEIGHT(2),
+	.policy			=	SCHED_QUOTA,
+	.name			=	"quota"
+};
+EXPORT_SYMBOL_GPL(evl_sched_quota);
diff --git a/kernel/evl/sched/tp.c b/kernel/evl/sched/tp.c
new file mode 100644
index 000000000000..e2338518d6be
--- /dev/null
+++ b/kernel/evl/sched/tp.c
@@ -0,0 +1,452 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2008, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <evl/sched.h>
+#include <evl/memory.h>
+#include <uapi/evl/sched.h>
+
+static void tp_schedule_next(struct evl_sched_tp *tp)
+{
+	struct evl_tp_window *w;
+	struct evl_rq *rq;
+	ktime_t t, now;
+	int p_next;
+
+	rq = container_of(tp, struct evl_rq, tp);
+	assert_evl_lock(&rq->lock);
+
+	for (;;) {
+		/*
+		 * Switch to the next partition. Time holes in a
+		 * global time frame are defined as partition windows
+		 * assigned to part# -1, in which case the (always
+		 * empty) idle queue will be polled for runnable
+		 * threads.  Therefore, we may assume that a window
+		 * begins immediately after the previous one ends,
+		 * which simplifies the implementation a lot.
+		 */
+		w = &tp->gps->pwins[tp->wnext];
+		p_next = w->w_part;
+		tp->tps = p_next < 0 ? &tp->idle : &tp->partitions[p_next];
+
+		/* Schedule tick to advance to the next window. */
+		tp->wnext = (tp->wnext + 1) % tp->gps->pwin_nr;
+		w = &tp->gps->pwins[tp->wnext];
+		t = ktime_add(tp->tf_start, w->w_offset);
+
+		/*
+		 * If we are late, make sure to remain within the
+		 * bounds of a valid time frame before advancing to
+		 * the next window. Otherwise, fix up by advancing to
+		 * the next time frame immediately.
+		 */
+		now = evl_read_clock(&evl_mono_clock);
+		if (ktime_compare(now, t) > 0) {
+			t = ktime_add(tp->tf_start, tp->gps->tf_duration);
+			if (ktime_compare(now, t) > 0) {
+				tp->tf_start = t;
+				tp->wnext = 0;
+			}
+		}
+		evl_start_timer(&tp->tf_timer, t, EVL_INFINITE);
+	}
+
+	evl_set_resched(rq);
+}
+
+static void tp_tick_handler(struct evl_timer *timer)
+{
+	struct evl_rq *rq = container_of(timer, struct evl_rq, tp.tf_timer);
+	struct evl_sched_tp *tp = &rq->tp;
+
+	evl_spin_lock(&rq->lock);
+
+	/*
+	 * Advance beginning date of time frame by a full period if we
+	 * are processing the last window.
+	 */
+	if (tp->wnext + 1 == tp->gps->pwin_nr)
+		tp->tf_start = ktime_add(tp->tf_start, tp->gps->tf_duration);
+
+	tp_schedule_next(tp);
+
+	evl_spin_unlock(&rq->lock);
+}
+
+static void tp_init(struct evl_rq *rq)
+{
+	struct evl_sched_tp *tp = &rq->tp;
+	int n;
+
+	for (n = 0; n < CONFIG_EVL_SCHED_TP_NR_PART; n++)
+		evl_init_schedq(&tp->partitions[n].runnable);
+
+	tp->tps = NULL;
+	tp->gps = NULL;
+	INIT_LIST_HEAD(&tp->threads);
+	evl_init_schedq(&tp->idle.runnable);
+	evl_init_timer_on_rq(&tp->tf_timer, &evl_mono_clock, tp_tick_handler,
+			rq, EVL_TIMER_IGRAVITY);
+	evl_set_timer_name(&tp->tf_timer, "[tp-tick]");
+}
+
+static bool tp_setparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	struct evl_rq *rq = evl_thread_rq(thread);
+
+	thread->tps = &rq->tp.partitions[p->tp.ptid];
+	thread->state &= ~T_WEAK;
+
+	return evl_set_effective_thread_priority(thread, p->tp.prio);
+}
+
+static void tp_getparam(struct evl_thread *thread,
+			union evl_sched_param *p)
+{
+	p->tp.prio = thread->cprio;
+	p->tp.ptid = thread->tps - evl_thread_rq(thread)->tp.partitions;
+}
+
+static void tp_trackprio(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	/*
+	 * The assigned partition never changes internally due to PI
+	 * (see evl_track_thread_policy()), since this would be pretty
+	 * wrong with respect to TP scheduling: i.e. we may not allow
+	 * a thread from another partition to consume CPU time from
+	 * the current one, despite this would help enforcing PI (see
+	 * note). In any case, introducing resource contention between
+	 * threads that belong to different partitions is utterly
+	 * wrong in the first place.  Only an explicit call to
+	 * evl_set_thread_policy() may change the partition assigned
+	 * to a thread. For that reason, a policy reset action only
+	 * boils down to reinstating the base priority.
+	 *
+	 * NOTE: we do allow threads from lower scheduling classes to
+	 * consume CPU time from the current window as a result of a
+	 * PI boost, since this is aimed at speeding up the release of
+	 * a synchronization object a TP thread needs.
+	 */
+	if (p) {
+		/* We should never cross partition boundaries. */
+		EVL_WARN_ON(CORE,
+			thread->base_class == &evl_sched_tp &&
+			thread->tps - evl_thread_rq(thread)->tp.partitions
+			!= p->tp.ptid);
+		thread->cprio = p->tp.prio;
+	} else
+		thread->cprio = thread->bprio;
+}
+
+static void tp_ceilprio(struct evl_thread *thread, int prio)
+{
+  	if (prio > EVL_TP_MAX_PRIO)
+		prio = EVL_TP_MAX_PRIO;
+
+	thread->cprio = prio;
+}
+
+static int tp_chkparam(struct evl_thread *thread,
+		const union evl_sched_param *p)
+{
+	struct evl_sched_tp *tp = &evl_thread_rq(thread)->tp;
+
+	if (tp->gps == NULL ||
+		p->tp.prio < EVL_TP_MIN_PRIO ||
+		p->tp.prio > EVL_TP_MAX_PRIO ||
+		p->tp.ptid < 0 ||
+		p->tp.ptid >= CONFIG_EVL_SCHED_TP_NR_PART)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int tp_declare(struct evl_thread *thread,
+		const union evl_sched_param *p)
+{
+	struct evl_rq *rq = evl_thread_rq(thread);
+
+	list_add_tail(&thread->tp_link, &rq->tp.threads);
+
+	return 0;
+}
+
+static void tp_forget(struct evl_thread *thread)
+{
+	list_del(&thread->tp_link);
+	thread->tps = NULL;
+}
+
+static void tp_enqueue(struct evl_thread *thread)
+{
+	evl_add_schedq_tail(&thread->tps->runnable, thread);
+}
+
+static void tp_dequeue(struct evl_thread *thread)
+{
+	evl_del_schedq(&thread->tps->runnable, thread);
+}
+
+static void tp_requeue(struct evl_thread *thread)
+{
+	evl_add_schedq(&thread->tps->runnable, thread);
+}
+
+static struct evl_thread *tp_pick(struct evl_rq *rq)
+{
+	/* Never pick a thread if we don't schedule partitions. */
+	if (!evl_timer_is_running(&rq->tp.tf_timer))
+		return NULL;
+
+	return evl_get_schedq(&rq->tp.tps->runnable);
+}
+
+static void tp_migrate(struct evl_thread *thread, struct evl_rq *rq)
+{
+	union evl_sched_param param;
+	/*
+	 * Since our partition schedule is a per-rq property, it
+	 * cannot apply to a thread that moves to another CPU
+	 * anymore. So we upgrade that thread to the FIFO class when a
+	 * CPU migration occurs. A subsequent call to
+	 * evl_set_thread_schedparam_locked() may move it back to TP
+	 * scheduling, with a partition assignment that fits the
+	 * remote CPU's partition schedule.
+	 */
+	param.fifo.prio = thread->cprio;
+	evl_set_thread_schedparam_locked(thread, &evl_sched_fifo, &param);
+}
+
+static ssize_t tp_show(struct evl_thread *thread,
+		char *buf, ssize_t count)
+{
+	int ptid = thread->tps - evl_thread_rq(thread)->tp.partitions;
+
+	return snprintf(buf, count, "%d\n", ptid);
+}
+
+static void start_tp_schedule(struct evl_rq *rq)
+{
+	struct evl_sched_tp *tp = &rq->tp;
+
+	assert_evl_lock(&rq->lock);
+
+	if (tp->gps == NULL)
+		return;
+
+	tp->wnext = 0;
+	tp->tf_start = evl_read_clock(&evl_mono_clock);
+	tp_schedule_next(tp);
+}
+
+static void stop_tp_schedule(struct evl_rq *rq)
+{
+	struct evl_sched_tp *tp = &rq->tp;
+
+	assert_evl_lock(&rq->lock);
+
+	if (tp->gps)
+		evl_stop_timer(&tp->tf_timer);
+}
+
+static struct evl_tp_schedule *
+set_tp_schedule(struct evl_rq *rq, struct evl_tp_schedule *gps)
+{
+	struct evl_sched_tp *tp = &rq->tp;
+	struct evl_thread *thread, *tmp;
+	struct evl_tp_schedule *old_gps;
+	union evl_sched_param param;
+
+	assert_evl_lock(&rq->lock);
+
+	if (EVL_WARN_ON(CORE, gps != NULL &&
+		(gps->pwin_nr <= 0 || gps->pwins[0].w_offset != 0)))
+		return tp->gps;
+
+	stop_tp_schedule(rq);
+
+	/*
+	 * Move all TP threads on this scheduler to the FIFO class,
+	 * until we call evl_set_thread_schedparam_locked() for them again.
+	 */
+	if (list_empty(&tp->threads))
+		goto done;
+
+	list_for_each_entry_safe(thread, tmp, &tp->threads, tp_link) {
+		param.fifo.prio = thread->cprio;
+		evl_set_thread_schedparam_locked(thread, &evl_sched_fifo, &param);
+	}
+done:
+	old_gps = tp->gps;
+	tp->gps = gps;
+
+	return old_gps;
+}
+
+static struct evl_tp_schedule *
+get_tp_schedule(struct evl_rq *rq)
+{
+	struct evl_tp_schedule *gps = rq->tp.gps;
+
+	if (gps == NULL)
+		return NULL;
+
+	atomic_inc(&gps->refcount);
+
+	return gps;
+}
+
+static void put_tp_schedule(struct evl_tp_schedule *gps)
+{
+	if (atomic_dec_and_test(&gps->refcount))
+		evl_free(gps);
+}
+
+static int tp_control(int cpu, union evl_sched_ctlparam *ctlp,
+		union evl_sched_ctlinfo *infp)
+{
+	struct evl_tp_ctlparam *pt = &ctlp->tp;
+	ktime_t offset, duration, next_offset;
+	struct evl_tp_schedule *gps, *ogps;
+	struct __sched_tp_window *p, *pp;
+	struct evl_tp_window *w, *pw;
+	struct evl_tp_ctlinfo *it;
+	unsigned long flags;
+	struct evl_rq *rq;
+	int n;
+
+	if (cpu < 0 || !cpu_present(cpu) || !is_threading_cpu(cpu))
+		return -EINVAL;
+
+	rq = evl_cpu_rq(cpu);
+
+	evl_spin_lock_irqsave(&rq->lock, flags);
+
+	switch (pt->op) {
+	case evl_install_tp:
+		if (pt->nr_windows > 0)
+			goto install_schedule;
+		/* fall-through. */
+	case evl_uninstall_tp:
+		gps = NULL;
+		goto switch_schedule;
+	case evl_start_tp:
+		start_tp_schedule(rq);
+		evl_spin_unlock_irqrestore(&rq->lock, flags);
+		return 0;
+	case evl_stop_tp:
+		stop_tp_schedule(rq);
+		evl_spin_unlock_irqrestore(&rq->lock, flags);
+		return 0;
+	case evl_get_tp:
+		break;
+	default:
+		return -EINVAL;
+	}
+
+	gps = get_tp_schedule(rq);
+	evl_spin_unlock_irqrestore(&rq->lock, flags);
+	if (gps == NULL)
+		return 0;
+
+	if (infp == NULL) {
+		put_tp_schedule(gps);
+		return -EINVAL;
+	}
+
+	it = &infp->tp;
+	if (it->nr_windows < gps->pwin_nr) {
+		put_tp_schedule(gps);
+		return -ENOSPC;
+	}
+
+	it->nr_windows = gps->pwin_nr;
+	for (n = 0, pp = p = it->windows, pw = w = gps->pwins;
+	     n < gps->pwin_nr; pp = p, p++, pw = w, w++, n++) {
+		p->offset = ktime_to_timespec(w->w_offset);
+		pp->duration = ktime_to_timespec(ktime_sub(w->w_offset, pw->w_offset));
+		p->ptid = w->w_part;
+	}
+
+	pp->duration = ktime_to_timespec(ktime_sub(gps->tf_duration, pw->w_offset));
+
+	put_tp_schedule(gps);
+
+	return 0;
+
+install_schedule:
+	evl_spin_unlock_irqrestore(&rq->lock, flags);
+
+	gps = evl_alloc(sizeof(*gps) + pt->nr_windows * sizeof(*w));
+	if (gps == NULL)
+		return -ENOMEM;
+
+	for (n = 0, p = pt->windows, w = gps->pwins, next_offset = 0;
+	     n < pt->nr_windows; n++, p++, w++) {
+		/*
+		 * Time windows must be strictly contiguous. Holes may
+		 * be defined using windows assigned to the pseudo
+		 * partition #-1.
+		 */
+		offset = timespec_to_ktime(p->offset);
+		if (offset != next_offset)
+			goto fail;
+
+		duration = timespec_to_ktime(p->duration);
+		if (duration <= 0)
+			goto fail;
+
+		if (p->ptid < -1 ||
+		    p->ptid >= CONFIG_EVL_SCHED_TP_NR_PART)
+			goto fail;
+
+		w->w_offset = next_offset;
+		w->w_part = p->ptid;
+		next_offset = ktime_add(next_offset, duration);
+	}
+
+	atomic_set(&gps->refcount, 1);
+	gps->pwin_nr = n;
+	gps->tf_duration = next_offset;
+switch_schedule:
+	evl_spin_lock_irqsave(&rq->lock, flags);
+	ogps = set_tp_schedule(rq, gps);
+	evl_spin_unlock_irqrestore(&rq->lock, flags);
+
+	if (ogps)
+		put_tp_schedule(ogps);
+
+	return 0;
+fail:
+	evl_free(gps);
+
+	return -EINVAL;
+}
+
+struct evl_sched_class evl_sched_tp = {
+	.sched_init		=	tp_init,
+	.sched_enqueue		=	tp_enqueue,
+	.sched_dequeue		=	tp_dequeue,
+	.sched_requeue		=	tp_requeue,
+	.sched_pick		=	tp_pick,
+	.sched_migrate		=	tp_migrate,
+	.sched_chkparam		=	tp_chkparam,
+	.sched_setparam		=	tp_setparam,
+	.sched_getparam		=	tp_getparam,
+	.sched_trackprio	=	tp_trackprio,
+	.sched_ceilprio		=	tp_ceilprio,
+	.sched_declare		=	tp_declare,
+	.sched_forget		=	tp_forget,
+	.sched_show		=	tp_show,
+	.sched_control		=	tp_control,
+	.weight			=	EVL_CLASS_WEIGHT(3),
+	.policy			=	SCHED_TP,
+	.name			=	"tp"
+};
+EXPORT_SYMBOL_GPL(evl_sched_tp);
diff --git a/kernel/evl/sched/weak.c b/kernel/evl/sched/weak.c
new file mode 100644
index 000000000000..c94d7215a05c
--- /dev/null
+++ b/kernel/evl/sched/weak.c
@@ -0,0 +1,104 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2013, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <evl/sched.h>
+#include <uapi/evl/sched.h>
+
+static void weak_init(struct evl_rq *rq)
+{
+	evl_init_schedq(&rq->weak.runnable);
+}
+
+static void weak_requeue(struct evl_thread *thread)
+{
+	evl_add_schedq(&thread->rq->weak.runnable, thread);
+}
+
+static void weak_enqueue(struct evl_thread *thread)
+{
+	evl_add_schedq_tail(&thread->rq->weak.runnable, thread);
+}
+
+static void weak_dequeue(struct evl_thread *thread)
+{
+	evl_del_schedq(&thread->rq->weak.runnable, thread);
+}
+
+static struct evl_thread *weak_pick(struct evl_rq *rq)
+{
+	return evl_get_schedq(&rq->weak.runnable);
+}
+
+static int weak_chkparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	if (p->weak.prio < EVL_WEAK_MIN_PRIO ||
+		p->weak.prio > EVL_WEAK_MAX_PRIO)
+		return -EINVAL;
+
+	return 0;
+}
+
+static bool weak_setparam(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	if (!(thread->state & T_BOOST))
+		thread->state |= T_WEAK;
+
+	return evl_set_effective_thread_priority(thread, p->weak.prio);
+}
+
+static void weak_getparam(struct evl_thread *thread,
+			union evl_sched_param *p)
+{
+	p->weak.prio = thread->cprio;
+}
+
+static void weak_trackprio(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	if (p)
+		thread->cprio = p->weak.prio;
+	else
+		thread->cprio = thread->bprio;
+}
+
+static void weak_ceilprio(struct evl_thread *thread, int prio)
+{
+	if (prio > EVL_WEAK_MAX_PRIO)
+		prio = EVL_WEAK_MAX_PRIO;
+
+	thread->cprio = prio;
+}
+
+static int weak_declare(struct evl_thread *thread,
+			const union evl_sched_param *p)
+{
+	if (p->weak.prio < EVL_WEAK_MIN_PRIO ||
+		p->weak.prio > EVL_WEAK_MAX_PRIO)
+		return -EINVAL;
+
+	return 0;
+}
+
+struct evl_sched_class evl_sched_weak = {
+	.sched_init		=	weak_init,
+	.sched_enqueue		=	weak_enqueue,
+	.sched_dequeue		=	weak_dequeue,
+	.sched_requeue		=	weak_requeue,
+	.sched_pick		=	weak_pick,
+	.sched_declare		=	weak_declare,
+	.sched_chkparam		=	weak_chkparam,
+	.sched_setparam		=	weak_setparam,
+	.sched_trackprio	=	weak_trackprio,
+	.sched_ceilprio		=	weak_ceilprio,
+	.sched_getparam		=	weak_getparam,
+	.weight			=	EVL_CLASS_WEIGHT(1),
+	.policy			=	SCHED_WEAK,
+	.name			=	"weak"
+};
+EXPORT_SYMBOL_GPL(evl_sched_weak);
diff --git a/kernel/evl/sem.c b/kernel/evl/sem.c
new file mode 100644
index 000000000000..ac7381e4fc09
--- /dev/null
+++ b/kernel/evl/sem.c
@@ -0,0 +1,62 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <evl/timer.h>
+#include <evl/wait.h>
+#include <evl/clock.h>
+#include <evl/sched.h>
+#include <evl/sem.h>
+
+static bool down_ksem(struct evl_ksem *ksem)
+{
+	if (ksem->value > 0) {
+		--ksem->value;
+		return true;
+	}
+
+	return false;
+}
+
+int evl_down_timeout(struct evl_ksem *ksem, ktime_t timeout)
+{
+	return evl_wait_event_timeout(&ksem->wait, timeout,
+				EVL_ABS, down_ksem(ksem));
+}
+EXPORT_SYMBOL_GPL(evl_down_timeout);
+
+int evl_down(struct evl_ksem *ksem)
+{
+	return evl_wait_event_timeout(&ksem->wait, EVL_INFINITE,
+				EVL_REL, down_ksem(ksem));
+}
+EXPORT_SYMBOL_GPL(evl_down);
+
+int evl_trydown(struct evl_ksem *ksem)
+{
+	unsigned long flags;
+	bool ret;
+
+	evl_spin_lock_irqsave(&ksem->wait.lock, flags);
+	ret = down_ksem(ksem);
+	evl_spin_unlock_irqrestore(&ksem->wait.lock, flags);
+
+	return ret ? 0 : -EAGAIN;
+}
+EXPORT_SYMBOL_GPL(evl_trydown);
+
+void evl_up(struct evl_ksem *ksem)
+{
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&ksem->wait.lock, flags);
+
+	if (!evl_wake_up_head(&ksem->wait))
+		ksem->value++;
+
+	evl_spin_unlock_irqrestore(&ksem->wait.lock, flags);
+	evl_schedule();
+}
+EXPORT_SYMBOL_GPL(evl_up);
diff --git a/kernel/evl/syscall.c b/kernel/evl/syscall.c
new file mode 100644
index 000000000000..20630358d3bd
--- /dev/null
+++ b/kernel/evl/syscall.c
@@ -0,0 +1,342 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2005, 2018 Philippe Gerum  <rpm@xenomai.org>
+ * Copyright (C) 2005 Gilles Chanteperdrix  <gilles.chanteperdrix@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/dovetail.h>
+#include <linux/kconfig.h>
+#include <linux/atomic.h>
+#include <linux/sched/task_stack.h>
+#include <linux/sched/signal.h>
+#include <evl/control.h>
+#include <evl/thread.h>
+#include <evl/timer.h>
+#include <evl/monitor.h>
+#include <evl/clock.h>
+#include <evl/sched.h>
+#include <evl/file.h>
+#include <trace/events/evl.h>
+#include <uapi/evl/syscall.h>
+#include <asm/evl/syscall.h>
+
+#define EVL_SYSCALL(__name, __args)	\
+	long EVL_ ## __name __args
+
+#define SYSCALL_PROPAGATE   0
+#define SYSCALL_STOP        1
+
+typedef long (*evl_syshand)(unsigned long arg1, unsigned long arg2,
+			unsigned long arg3, unsigned long arg4,
+			unsigned long arg5);
+
+static const evl_syshand evl_syscalls[__NR_EVL_SYSCALLS];
+
+static inline void do_oob_request(int nr, struct pt_regs *regs)
+{
+	evl_syshand handler;
+	long ret;
+
+	handler = evl_syscalls[nr];
+	ret = handler(oob_arg1(regs),
+		oob_arg2(regs),
+		oob_arg3(regs),
+		oob_arg4(regs),
+		oob_arg5(regs));
+
+	set_oob_retval(regs, ret);
+}
+
+static void prepare_for_signal(struct task_struct *p,
+			struct evl_thread *curr,
+			struct pt_regs *regs)
+{
+	int cause = SIGDEBUG_NONE;
+	unsigned long flags;
+
+	/*
+	 * FIXME: no restart mode flag for setting -EINTR instead of
+	 * -ERESTARTSYS should be obtained from curr->local_info on a
+	 * per-invocation basis, not on a per-call one (since we have
+	 * 3 generic calls only).
+	 */
+
+	/*
+	 * @curr == this_evl_rq()->curr over oob so no need to grab
+	 * @curr->lock.
+	 */
+	evl_spin_lock_irqsave(&curr->rq->lock, flags);
+
+	if (curr->info & T_KICKED) {
+		if (signal_pending(p)) {
+			set_oob_error(regs, -ERESTARTSYS);
+			if (!(curr->state & T_SSTEP))
+				cause = SIGDEBUG_MIGRATE_SIGNAL;
+			curr->info &= ~T_BREAK;
+		}
+		curr->info &= ~T_KICKED;
+	}
+
+	evl_spin_unlock_irqrestore(&curr->rq->lock, flags);
+
+	evl_test_cancel();
+
+	evl_switch_inband(cause);
+}
+
+static int do_oob_syscall(struct irq_stage *stage, struct pt_regs *regs)
+{
+	struct evl_thread *curr;
+	struct task_struct *p;
+	unsigned int nr;
+
+	if (!is_oob_syscall(regs))
+		goto do_inband;
+
+	nr = oob_syscall_nr(regs);
+	curr = evl_current();
+	if (curr == NULL || !cap_raised(current_cap(), CAP_SYS_NICE)) {
+		if (EVL_DEBUG(CORE))
+			printk(EVL_WARNING
+				"OOB syscall <%d> denied to %s[%d]\n",
+				nr, current->comm, task_pid_nr(current));
+		set_oob_error(regs, -EPERM);
+		return SYSCALL_STOP;
+	}
+
+	if (nr >= ARRAY_SIZE(evl_syscalls))
+		goto bad_syscall;
+
+	/*
+	 * If the syscall originates from in-band context, hand it
+	 * over to handle_inband_syscall() where the caller would be
+	 * switched to OOB context prior to handling the request.
+	 */
+	if (stage != &oob_stage)
+		return SYSCALL_PROPAGATE;
+
+	trace_evl_oob_sysentry(nr);
+
+	do_oob_request(nr, regs);
+
+	/* Syscall might have switched in-band, recheck. */
+	if (!evl_is_inband()) {
+		p = current;
+		if (signal_pending(p) || (curr->info & T_KICKED))
+			prepare_for_signal(p, curr, regs);
+		else if ((curr->state & T_WEAK) &&
+			!atomic_read(&curr->inband_disable_count))
+			evl_switch_inband(SIGDEBUG_NONE);
+	}
+
+	/* Update the stats and user visible info. */
+	evl_inc_counter(&curr->stat.sc);
+	evl_sync_uwindow(curr);
+
+	trace_evl_oob_sysexit(oob_retval(regs));
+
+	return SYSCALL_STOP;
+
+do_inband:
+	if (evl_is_inband())
+		return SYSCALL_PROPAGATE;
+
+	/*
+	 * If this is a legit in-band syscall issued from OOB context,
+	 * switch to in-band mode before propagating the syscall down
+	 * the pipeline.
+	 */
+	if (inband_syscall_nr(regs, &nr)) {
+		evl_switch_inband(SIGDEBUG_MIGRATE_SYSCALL);
+		return SYSCALL_PROPAGATE;
+	}
+
+bad_syscall:
+	printk(EVL_WARNING "bad OOB syscall <%#x>\n", nr);
+
+	set_oob_error(regs, -ENOSYS);
+
+	return SYSCALL_STOP;
+}
+
+static int do_inband_syscall(struct irq_stage *stage, struct pt_regs *regs)
+{
+	struct evl_thread *curr = evl_current(); /* Always valid. */
+	struct task_struct *p;
+	unsigned int nr;
+	int ret;
+
+	/*
+	 * Catch cancellation requests pending for threads undergoing
+	 * the weak scheduling policy, which won't cross
+	 * prepare_for_signal() frequently as they run mostly in-band.
+	 */
+	evl_test_cancel();
+
+	/* Handle lazy schedparam updates before switching. */
+	evl_propagate_schedparam_change(curr);
+
+	/* Propagate in-band syscalls. */
+	if (!is_oob_syscall(regs))
+		return SYSCALL_PROPAGATE;
+
+	/*
+	 * Process an OOB syscall after switching current to OOB
+	 * context.  do_oob_syscall() already checked the syscall
+	 * number.
+	 */
+	nr = oob_syscall_nr(regs);
+
+	trace_evl_inband_sysentry(nr);
+
+	ret = evl_switch_oob();
+	if (ret) {
+		set_oob_error(regs, ret);
+		goto done;
+	}
+
+	do_oob_request(nr, regs);
+
+	if (!evl_is_inband()) {
+		p = current;
+		if (signal_pending(p))
+			prepare_for_signal(p, curr, regs);
+		else if ((curr->state & T_WEAK) &&
+			!atomic_read(&curr->inband_disable_count))
+			evl_switch_inband(SIGDEBUG_NONE);
+	}
+done:
+	curr->local_info &= ~T_HICCUP;
+	evl_inc_counter(&curr->stat.sc);
+	evl_sync_uwindow(curr);
+
+	trace_evl_inband_sysexit(oob_retval(regs));
+
+	return SYSCALL_STOP;
+}
+
+int handle_pipelined_syscall(struct irq_stage *stage, struct pt_regs *regs)
+{
+	if (unlikely(running_inband()))
+		return do_inband_syscall(stage, regs);
+
+	return do_oob_syscall(stage, regs);
+}
+
+int handle_oob_syscall(struct pt_regs *regs)
+{
+	int ret;
+
+	ret = do_oob_syscall(&oob_stage, regs);
+	if (EVL_WARN_ON(CORE, ret == SYSCALL_PROPAGATE))
+		ret = SYSCALL_STOP;
+
+	return ret;
+}
+
+static EVL_SYSCALL(read, (int fd, char __user *u_buf, size_t size))
+{
+	struct evl_file *efilp = evl_get_file(fd);
+	struct file *filp;
+	ssize_t ret;
+
+	if (efilp == NULL)
+		return -EBADF;
+
+	filp = efilp->filp;
+	if (!(filp->f_mode & FMODE_READ)) {
+		ret = -EBADF;
+		goto out;
+	}
+
+	if (filp->f_op->oob_read == NULL) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = filp->f_op->oob_read(filp, u_buf, size);
+out:
+	evl_put_file(efilp);
+
+	return ret;
+}
+
+static EVL_SYSCALL(write, (int fd, const char __user *u_buf, size_t size))
+{
+	struct evl_file *efilp = evl_get_file(fd);
+	struct file *filp;
+	ssize_t ret;
+
+	if (efilp == NULL)
+		return -EBADF;
+
+	filp = efilp->filp;
+	if (!(filp->f_mode & FMODE_WRITE)) {
+		ret = -EBADF;
+		goto out;
+	}
+
+	if (filp->f_op->oob_write == NULL) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = filp->f_op->oob_write(filp, u_buf, size);
+out:
+	evl_put_file(efilp);
+
+	return ret;
+}
+
+static EVL_SYSCALL(ioctl, (int fd, unsigned int request, unsigned long arg))
+{
+	struct evl_file *efilp = evl_get_file(fd);
+	struct file *filp;
+	long ret;
+
+	if (efilp == NULL)
+		return -EBADF;
+
+	filp = efilp->filp;
+	if (filp->f_op->oob_ioctl) {
+		ret = filp->f_op->oob_ioctl(filp, request, arg);
+		if (ret == -ENOIOCTLCMD)
+			ret = -ENOTTY;
+	} else
+		ret = -ENOTTY;
+
+	evl_put_file(efilp);
+
+	return ret;
+}
+
+static int EVL_ni(void)
+{
+	return -ENOSYS;
+}
+
+#define __syshand__(__name)	((evl_syshand)(EVL_ ## __name))
+
+#define __EVL_CALL_ENTRIES			\
+	__EVL_CALL_ENTRY(read)		\
+		__EVL_CALL_ENTRY(write)	\
+		__EVL_CALL_ENTRY(ioctl)
+
+#define __EVL_NI	__syshand__(ni)
+
+#define __EVL_CALL_NI					\
+	[0 ... __NR_EVL_SYSCALLS-1] = __EVL_NI,
+
+#define __EVL_CALL_ENTRY(__name)				\
+	[sys_evl_ ## __name] = __syshand__(__name),
+
+static const evl_syshand evl_syscalls[] = {
+	__EVL_CALL_NI
+	__EVL_CALL_ENTRIES
+};
diff --git a/kernel/evl/thread.c b/kernel/evl/thread.c
new file mode 100644
index 000000000000..357234462d61
--- /dev/null
+++ b/kernel/evl/thread.c
@@ -0,0 +1,2267 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2006, 2016 Gilles Chanteperdrix <gilles.chanteperdrix@xenomai.org>
+ * Copyright (C) 2001, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <stdarg.h>
+#include <linux/kernel.h>
+#include <linux/kthread.h>
+#include <linux/wait.h>
+#include <linux/slab.h>
+#include <linux/signal.h>
+#include <linux/sched.h>
+#include <linux/irq_work.h>
+#include <linux/sched/signal.h>
+#include <linux/sched/types.h>
+#include <linux/sched/task.h>
+#include <linux/jiffies.h>
+#include <linux/cred.h>
+#include <linux/err.h>
+#include <linux/ptrace.h>
+#include <linux/math64.h>
+#include <uapi/linux/sched/types.h>
+#include <evl/sched.h>
+#include <evl/timer.h>
+#include <evl/wait.h>
+#include <evl/clock.h>
+#include <evl/stat.h>
+#include <evl/assert.h>
+#include <evl/lock.h>
+#include <evl/thread.h>
+#include <evl/sched.h>
+#include <evl/memory.h>
+#include <evl/file.h>
+#include <evl/factory.h>
+#include <evl/monitor.h>
+#include <evl/mutex.h>
+#include <evl/poll.h>
+#include <asm/evl/syscall.h>
+#include <trace/events/evl.h>
+
+int evl_nrthreads;
+
+LIST_HEAD(evl_thread_list);
+
+static DEFINE_HARD_SPINLOCK(thread_list_lock);
+
+static DECLARE_WAIT_QUEUE_HEAD(join_all);
+
+static void inband_task_wakeup(struct irq_work *work);
+
+static void timeout_handler(struct evl_timer *timer) /* oob stage stalled */
+{
+	struct evl_thread *thread = container_of(timer, struct evl_thread, rtimer);
+
+	evl_wakeup_thread(thread, T_DELAY|T_PEND, T_TIMEO);
+}
+
+static void periodic_handler(struct evl_timer *timer) /* oob stage stalled */
+{
+	struct evl_thread *thread =
+		container_of(timer, struct evl_thread, ptimer);
+
+	evl_wakeup_thread(thread, T_WAIT, T_TIMEO);
+}
+
+static inline void enqueue_new_thread(struct evl_thread *thread)
+{
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&thread_list_lock, flags);
+	list_add_tail(&thread->next, &evl_thread_list);
+	evl_nrthreads++;
+	raw_spin_unlock_irqrestore(&thread_list_lock, flags);
+}
+
+static inline void dequeue_old_thread(struct evl_thread *thread)
+{
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&thread_list_lock, flags);
+	if (!list_empty(&thread->next)) {
+		list_del(&thread->next);
+		evl_nrthreads--;
+	}
+	raw_spin_unlock_irqrestore(&thread_list_lock, flags);
+}
+
+static inline void set_oob_threadinfo(struct evl_thread *thread)
+{
+	struct oob_thread_state *p;
+
+	p = dovetail_current_state();
+	p->thread = thread;
+}
+
+static inline void add_u_cap(struct evl_thread *thread,
+			struct cred *newcap,
+			int cap)
+{
+	if (!capable(cap)) {
+		cap_raise(newcap->cap_effective, cap);
+		cap_raise(thread->raised_cap, cap);
+	}
+}
+
+static inline void drop_u_cap(struct evl_thread *thread,
+			struct cred *newcap,
+			int cap)
+{
+	if (cap_raised(thread->raised_cap, cap)) {
+		cap_lower(newcap->cap_effective, cap);
+		cap_lower(thread->raised_cap, cap);
+	}
+}
+
+static void pin_to_initial_cpu(struct evl_thread *thread)
+{
+	struct task_struct *p = current;
+	unsigned long flags;
+	struct evl_rq *rq;
+	int cpu;
+
+	/*
+	 * @thread is the EVL extension of the current in-band
+	 * task. If the current CPU is part of the affinity mask of
+	 * this thread, pin the latter on this CPU. Otherwise pin it
+	 * to the first CPU of that mask.
+	 */
+	cpu = task_cpu(p);
+	if (!cpumask_test_cpu(cpu, &thread->affinity))
+		cpu = cpumask_first(&thread->affinity);
+
+	set_cpus_allowed_ptr(p, cpumask_of(cpu));
+	/*
+	 * @thread is still unstarted EVL-wise, we are in the process
+	 * of mapping the current in-band task to it. Therefore
+	 * evl_migrate_thread() can be called for pinning it on an
+	 * out-of-band CPU.
+	 */
+	rq = evl_cpu_rq(cpu);
+	evl_spin_lock_irqsave(&thread->lock, flags);
+	evl_migrate_thread(thread, rq);
+	evl_spin_unlock_irqrestore(&thread->lock, flags);
+}
+
+int evl_init_thread(struct evl_thread *thread,
+		const struct evl_init_thread_attr *iattr,
+		struct evl_rq *rq,
+		const char *fmt, ...)
+{
+	int flags = iattr->flags & ~T_SUSP, ret, gravity;
+	cpumask_var_t affinity;
+	va_list args;
+
+	inband_context_only();
+
+	if (!(flags & T_ROOT))
+		flags |= T_DORMANT | T_INBAND;
+
+	if ((flags & T_USER) && IS_ENABLED(CONFIG_EVL_DEBUG_WOLI))
+		flags |= T_WOLI;
+
+	/*
+	 * If no rq was given, pick an initial CPU for the new thread
+	 * which is part of its affinity mask, and therefore also part
+	 * of the supported CPUs. This CPU may change in
+	 * pin_to_initial_cpu().
+	 */
+	if (!rq) {
+		if (!alloc_cpumask_var(&affinity, GFP_KERNEL))
+			return -ENOMEM;
+		cpumask_and(affinity, &iattr->affinity, &evl_cpu_affinity);
+		if (!cpumask_empty(affinity))
+			rq = evl_cpu_rq(cpumask_first(affinity));
+		free_cpumask_var(affinity);
+		if (!rq)
+			return -EINVAL;
+	}
+
+	va_start(args, fmt);
+	thread->name = kvasprintf(GFP_KERNEL, fmt, args);
+	va_end(args);
+	if (thread->name == NULL)
+		return -ENOMEM;
+
+	cpumask_and(&thread->affinity, &iattr->affinity, &evl_cpu_affinity);
+	thread->rq = rq;
+	thread->state = flags;
+	thread->info = 0;
+	thread->local_info = 0;
+	thread->wprio = EVL_IDLE_PRIO;
+	thread->cprio = EVL_IDLE_PRIO;
+	thread->bprio = EVL_IDLE_PRIO;
+	thread->rrperiod = EVL_INFINITE;
+	thread->wchan = NULL;
+	thread->wwake = NULL;
+	thread->wait_data = NULL;
+	thread->u_window = NULL;
+	atomic_set(&thread->inband_disable_count, 0);
+	memset(&thread->poll_context, 0, sizeof(thread->poll_context));
+	memset(&thread->stat, 0, sizeof(thread->stat));
+	memset(&thread->altsched, 0, sizeof(thread->altsched));
+	init_irq_work(&thread->inband_work, inband_task_wakeup);
+
+	INIT_LIST_HEAD(&thread->next);
+	INIT_LIST_HEAD(&thread->boosters);
+	INIT_LIST_HEAD(&thread->trackers);
+	raw_spin_lock_init(&thread->tracking_lock);
+	evl_spin_lock_init(&thread->lock);
+	init_completion(&thread->exited);
+
+	gravity = flags & T_USER ? EVL_TIMER_UGRAVITY : EVL_TIMER_KGRAVITY;
+	evl_init_timer_on_rq(&thread->rtimer, &evl_mono_clock, timeout_handler,
+			rq, gravity);
+	evl_set_timer_name(&thread->rtimer, thread->name);
+	evl_set_timer_priority(&thread->rtimer, EVL_TIMER_HIPRIO);
+	evl_init_timer_on_rq(&thread->ptimer, &evl_mono_clock, periodic_handler,
+			rq, gravity);
+	evl_set_timer_name(&thread->ptimer, thread->name);
+	evl_set_timer_priority(&thread->ptimer, EVL_TIMER_HIPRIO);
+
+	thread->base_class = NULL; /* evl_set_thread_policy() sets it. */
+	ret = evl_init_rq_thread(thread);
+	if (ret)
+		goto err_out;
+
+	ret = evl_set_thread_policy(thread, iattr->sched_class,
+				&iattr->sched_param);
+	if (ret)
+		goto err_out;
+
+	trace_evl_init_thread(thread, iattr, ret);
+
+	return 0;
+
+err_out:
+	evl_destroy_timer(&thread->rtimer);
+	evl_destroy_timer(&thread->ptimer);
+	trace_evl_init_thread(thread, iattr, ret);
+	kfree(thread->name);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_init_thread);
+
+/* Undoes evl_init_thread(), and only that. */
+static void uninit_thread(struct evl_thread *thread)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	evl_destroy_timer(&thread->rtimer);
+	evl_destroy_timer(&thread->ptimer);
+
+	rq = evl_get_thread_rq(thread, flags);
+	evl_forget_thread(thread);
+	evl_put_thread_rq(thread, rq, flags);
+
+	kfree(thread->name);
+}
+
+static void do_cleanup_current(struct evl_thread *curr)
+{
+	struct cred *newcap;
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	/*
+	 * Drop trackers first since this may alter the rq state for
+	 * current.
+	 */
+	evl_drop_tracking_mutexes(curr);
+
+	evl_unindex_element(&curr->element);
+
+	if (curr->state & T_USER) {
+		evl_free_chunk(&evl_shared_heap, curr->u_window);
+		curr->u_window = NULL;
+		evl_drop_poll_table(curr);
+		newcap = prepare_creds();
+		if (newcap) {
+			drop_u_cap(curr, newcap, CAP_SYS_NICE);
+			drop_u_cap(curr, newcap, CAP_IPC_LOCK);
+			drop_u_cap(curr, newcap, CAP_SYS_RAWIO);
+			commit_creds(newcap);
+		}
+	}
+
+	dequeue_old_thread(curr);
+
+	rq = evl_get_thread_rq(curr, flags);
+
+	if (curr->state & T_READY) {
+		EVL_WARN_ON(CORE, (curr->state & EVL_THREAD_BLOCK_BITS));
+		evl_dequeue_thread(curr);
+		curr->state &= ~T_READY;
+	}
+
+	curr->state |= T_ZOMBIE;
+
+	evl_put_thread_rq(curr, rq, flags);
+	uninit_thread(curr);
+}
+
+static void cleanup_current_thread(void)
+{
+	struct oob_thread_state *p = dovetail_current_state();
+	struct evl_thread *curr = evl_current();
+
+	/*
+	 * We are called for exiting kernel and user threads over the
+	 * in-band context.
+	 */
+	trace_evl_thread_unmap(curr);
+	dovetail_stop_altsched();
+	do_cleanup_current(curr);
+
+	p->thread = NULL;	/* evl_current() <- NULL */
+}
+
+static void put_current_thread(void)
+{
+	struct evl_thread *curr = evl_current();
+
+	cleanup_current_thread();
+	evl_put_element(&curr->element);
+}
+
+static void wakeup_kthread_parent(struct irq_work *irq_work)
+{
+	struct evl_kthread *kthread;
+	kthread = container_of(irq_work, struct evl_kthread, irq_work);
+	complete(&kthread->done);
+}
+
+static int map_kthread_self(struct evl_kthread *kthread)
+{
+	struct evl_thread *curr = &kthread->thread;
+
+	pin_to_initial_cpu(curr);
+
+	dovetail_init_altsched(&curr->altsched);
+	set_oob_threadinfo(curr);
+	dovetail_start_altsched();
+	evl_release_thread(curr, T_DORMANT, 0);
+
+	trace_evl_thread_map(curr);
+
+	/*
+	 * Upon -weird- error from evl_switch_oob() for an emerging
+	 * kernel thread, we still finalize the registration but the
+	 * caller should self-cancel eventually.
+	 */
+	kthread->status = evl_switch_oob();
+
+	/*
+	 * We are now running OOB, therefore __evl_run_kthread() can't
+	 * start us before we enter the dormant state because
+	 * irq_work_queue() schedules the in-band wakeup request on
+	 * the current CPU. If we fail switching to OOB context,
+	 * kthread->status tells __evl_run_kthread() not to start but
+	 * cancel us instead.
+	 */
+	init_irq_work(&kthread->irq_work, wakeup_kthread_parent);
+	irq_work_queue(&kthread->irq_work);
+
+	enqueue_new_thread(curr);
+	evl_hold_thread(curr, T_DORMANT);
+
+	return kthread->status;
+}
+
+static int kthread_trampoline(void *arg)
+{
+	struct evl_kthread *kthread = arg;
+	struct evl_thread *curr = &kthread->thread;
+	struct sched_param param;
+	int policy, prio, ret;
+
+	/*
+	 * It makes sense to schedule EVL kthreads either in the
+	 * SCHED_FIFO or SCHED_NORMAL policy only. So anything that is
+	 * not based on EVL's FIFO class is assumed to belong to the
+	 * in-band SCHED_NORMAL class.
+	 */
+	if (curr->sched_class != &evl_sched_fifo) {
+		policy = SCHED_NORMAL;
+		prio = 0;
+	} else {
+		policy = SCHED_FIFO;
+		prio = curr->cprio;
+		/* Normalize priority linux-wise. */
+		if (prio >= MAX_RT_PRIO)
+			prio = MAX_RT_PRIO - 1;
+	}
+
+	param.sched_priority = prio;
+	sched_setscheduler(current, policy, &param);
+
+	ret = map_kthread_self(kthread);
+	if (!ret) {
+		trace_evl_kthread_entry(curr);
+		kthread->threadfn(kthread);
+	}
+
+	/* Handles nitty-gritty details like in-band switch. */
+	evl_cancel_thread(curr);
+
+	return 0;
+}
+
+int __evl_run_kthread(struct evl_kthread *kthread)
+{
+	struct evl_thread *thread = &kthread->thread;
+	struct task_struct *p;
+	int ret;
+
+	ret = evl_init_element(&thread->element, &evl_thread_factory);
+	if (ret)
+		goto fail_element;
+
+	ret = evl_create_element_device(&thread->element,
+					&evl_thread_factory,
+					thread->name);
+	if (ret)
+		goto fail_device;
+
+	p = kthread_run(kthread_trampoline, kthread, "%s", thread->name);
+	if (IS_ERR(p)) {
+		ret = PTR_ERR(p);
+		goto fail_spawn;
+	}
+
+	evl_index_element(&thread->element);
+	wait_for_completion(&kthread->done);
+	if (kthread->status)
+		return kthread->status;
+
+	evl_release_thread(thread, T_DORMANT, 0);
+	evl_schedule();
+
+	return 0;
+
+fail_spawn:
+	evl_remove_element_device(&thread->element);
+fail_device:
+	evl_destroy_element(&thread->element);
+fail_element:
+	uninit_thread(thread);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(__evl_run_kthread);
+
+/* evl_current()->lock + evl_current()->rq->lock held, oob stalled. */
+void evl_sleep_on_locked(ktime_t timeout, enum evl_tmode timeout_mode,
+		struct evl_clock *clock,
+		struct evl_wait_channel *wchan)
+{
+	struct evl_thread *curr = evl_current();
+	struct evl_rq *rq = curr->rq;
+	unsigned long oldstate;
+
+	assert_evl_lock(&curr->lock);
+	assert_evl_lock(&rq->lock);
+	
+	trace_evl_sleep_on(timeout, timeout_mode, clock, wchan);
+
+	oldstate = curr->state;
+
+	/*
+	 * If a request to switch to in-band context is pending
+	 * (T_KICKED), raise T_BREAK then return immediately.
+	 */
+	if (likely(!(oldstate & EVL_THREAD_BLOCK_BITS))) {
+		if (curr->info & T_KICKED) {
+			curr->info &= ~(T_RMID|T_TIMEO);
+			curr->info |= T_BREAK;
+			return;
+		}
+		curr->info &= ~EVL_THREAD_INFO_MASK;
+	}
+
+	/*
+	 *  wchan + timeout: timed wait for a resource (T_PEND|T_DELAY)
+	 *  wchan + !timeout: unbounded sleep on resource (T_PEND)
+	 * !wchan + timeout: timed sleep (T_DELAY)
+	 * !wchan + !timeout: periodic wait (T_WAIT)
+	 */
+	if (timeout_mode != EVL_REL || !timeout_infinite(timeout)) {
+		evl_prepare_timed_wait(&curr->rtimer, clock,
+				evl_thread_rq(curr));
+		if (timeout_mode == EVL_REL)
+			timeout = evl_abs_timeout(&curr->rtimer, timeout);
+		else if (timeout <= evl_read_clock(clock)) {
+			curr->info |= T_TIMEO;
+			return;
+		}
+		evl_start_timer(&curr->rtimer, timeout, EVL_INFINITE);
+		curr->state |= T_DELAY;
+	} else if (!wchan) {
+		evl_prepare_timed_wait(&curr->ptimer, clock,
+				evl_thread_rq(curr));
+		curr->state |= T_WAIT;
+	}
+
+	if (oldstate & T_READY) {
+		evl_dequeue_thread(curr);
+		curr->state &= ~T_READY;
+	}
+
+	if (wchan) {
+		curr->wchan = wchan;
+		curr->state |= T_PEND;
+	}
+
+	evl_set_resched(rq);
+}
+
+void evl_sleep_on(ktime_t timeout, enum evl_tmode timeout_mode,
+		struct evl_clock *clock,
+		struct evl_wait_channel *wchan)
+{
+	struct evl_thread *curr = evl_current();
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	oob_context_only();
+
+	rq = evl_get_thread_rq(curr, flags);
+	evl_sleep_on_locked(timeout, timeout_mode, clock, wchan);
+	evl_put_thread_rq(curr, rq, flags);
+}
+
+/* thread->lock + thread->rq->lock held, irqs off */
+static void evl_wakeup_thread_locked(struct evl_thread *thread,
+				int mask, int info)
+{
+	struct evl_rq *rq = thread->rq;
+	unsigned long oldstate;
+
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&thread->rq->lock);
+
+	if (EVL_WARN_ON(CORE, mask & ~(T_DELAY|T_PEND|T_WAIT)))
+		return;
+
+	trace_evl_wakeup_thread(thread, mask, info);
+
+	oldstate = thread->state;
+	if (likely(oldstate & mask)) {
+		/* Clear T_DELAY along w/ T_PEND in state. */
+		if (mask & T_PEND)
+			mask |= T_DELAY;
+
+		thread->state &= ~mask;
+
+		if (mask & (T_DELAY|T_PEND))
+			evl_stop_timer(&thread->rtimer);
+
+		if (mask & T_PEND & oldstate)
+			thread->wchan = NULL;
+
+		thread->info |= info;
+
+		if (!(thread->state & EVL_THREAD_BLOCK_BITS)) {
+			evl_enqueue_thread(thread);
+			thread->state |= T_READY;
+			evl_set_resched(rq);
+			if (rq != this_evl_rq())
+				evl_inc_counter(&thread->stat.rwa);
+		}
+	}
+}
+
+void evl_wakeup_thread(struct evl_thread *thread, int mask, int info)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	rq = evl_get_thread_rq(thread, flags);
+	evl_wakeup_thread_locked(thread, mask, info);
+	evl_put_thread_rq(thread, rq, flags);
+}
+
+void evl_hold_thread(struct evl_thread *thread, int mask)
+{
+	unsigned long oldstate, flags;
+	struct evl_rq *rq;
+
+	if (EVL_WARN_ON(CORE, mask & ~(T_SUSP|T_HALT|T_DORMANT)))
+		return;
+
+	trace_evl_hold_thread(thread, mask);
+
+	rq = evl_get_thread_rq(thread, flags);
+
+	oldstate = thread->state;
+
+	/*
+	 * If a request to switch to in-band context is pending for
+	 * the target thread (T_KICKED), raise T_BREAK for it then
+	 * return immediately.
+	 */
+	if (likely(!(oldstate & EVL_THREAD_BLOCK_BITS))) {
+		if (thread->info & T_KICKED) {
+			thread->info &= ~(T_RMID|T_TIMEO);
+			thread->info |= T_BREAK;
+			goto out;
+		}
+		if (thread == rq->curr)
+			thread->info &= ~EVL_THREAD_INFO_MASK;
+	}
+
+	if (oldstate & T_READY) {
+		evl_dequeue_thread(thread);
+		thread->state &= ~T_READY;
+	}
+
+	thread->state |= mask;
+
+	/*
+	 * If the thread is current on its CPU, we need to raise
+	 * RQ_SCHED on the target runqueue.
+	 *
+	 * If the target thread runs in-band in userland on a remote
+	 * CPU, force it back to OOB context by sending it a
+	 * SIGEVL_ACTION_HOME request.
+	 */
+	if (likely(thread == rq->curr))
+		evl_set_resched(rq);
+	else if (((oldstate & (EVL_THREAD_BLOCK_BITS|T_USER)) == (T_INBAND|T_USER)))
+		evl_signal_thread(thread, SIGEVL, SIGEVL_ACTION_HOME);
+ out:
+	evl_put_thread_rq(thread, rq, flags);
+}
+
+/* thread->lock + thread->rq->lock held, irqs off */
+static void evl_release_thread_locked(struct evl_thread *thread,
+				int mask, int info)
+{
+	struct evl_rq *rq = thread->rq;
+	unsigned long oldstate;
+
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&thread->rq->lock);
+
+	if (EVL_WARN_ON(CORE, mask & ~(T_SUSP|T_HALT|T_INBAND|T_DORMANT)))
+		return;
+
+	trace_evl_release_thread(thread, mask, info);
+
+	oldstate = thread->state;
+	if (oldstate & mask) {
+		thread->state &= ~mask;
+		thread->info |= info;
+
+		if (thread->state & EVL_THREAD_BLOCK_BITS)
+			return;
+
+		if (unlikely((oldstate & mask) & T_HALT)) {
+			/* Requeue at head of priority group. */
+			evl_requeue_thread(thread);
+			goto ready;
+		}
+	} else if (oldstate & T_READY)
+		/* Ends up in round-robin (group rotation). */
+		evl_dequeue_thread(thread);
+
+	/* Enqueue at the tail of priority group. */
+	evl_enqueue_thread(thread);
+ready:
+	thread->state |= T_READY;
+	evl_set_resched(rq);
+	if (rq != this_evl_rq())
+		evl_inc_counter(&thread->stat.rwa);
+}
+
+void evl_release_thread(struct evl_thread *thread, int mask, int info)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	rq = evl_get_thread_rq(thread, flags);
+	evl_release_thread_locked(thread, mask, info);
+	evl_put_thread_rq(thread, rq, flags);
+}
+
+static void inband_task_wakeup(struct irq_work *work)
+{
+	struct evl_thread *thread;
+	struct task_struct *p;
+
+	thread = container_of(work, struct evl_thread, inband_work);
+	p = thread->altsched.task;
+	trace_evl_inband_wakeup(p);
+	wake_up_process(p);
+}
+
+void evl_set_kthread_priority(struct evl_kthread *kthread, int priority)
+{
+	union evl_sched_param param = { .fifo = { .prio = priority } };
+
+	evl_set_thread_schedparam(&kthread->thread, &evl_sched_fifo, &param);
+	evl_schedule();
+}
+EXPORT_SYMBOL_GPL(evl_set_kthread_priority);
+
+ktime_t evl_get_thread_timeout(struct evl_thread *thread)
+{
+	struct evl_timer *timer;
+	ktime_t timeout, now;
+
+	if (!(thread->state & T_DELAY))
+		return 0LL;
+
+	if (evl_timer_is_running(&thread->rtimer))
+		timer = &thread->rtimer;
+	else if (evl_timer_is_running(&thread->ptimer))
+		timer = &thread->ptimer;
+	else
+		return 0;
+
+	now = evl_ktime_monotonic();
+	timeout = evl_get_timer_date(timer);
+	if (timeout <= now)
+		return ktime_set(0, 1);
+
+	return ktime_sub(timeout, now);
+}
+EXPORT_SYMBOL_GPL(evl_get_thread_timeout);
+
+ktime_t evl_get_thread_period(struct evl_thread *thread)
+{
+	ktime_t period = 0;
+	/*
+	 * The current thread period might be:
+	 * - the value of the timer interval for periodic threads (ns/ticks)
+	 * - or, the value of the alloted round-robin quantum (ticks)
+	 * - or zero, meaning "no periodic activity".
+	 */
+	if (evl_timer_is_running(&thread->ptimer))
+		period = thread->ptimer.interval;
+	else if (thread->state & T_RRB)
+		period = thread->rrperiod;
+
+	return period;
+}
+EXPORT_SYMBOL_GPL(evl_get_thread_period);
+
+ktime_t evl_delay_thread(ktime_t timeout, enum evl_tmode timeout_mode,
+			struct evl_clock *clock)
+{
+	struct evl_thread *curr = evl_current();
+	ktime_t rem = 0;
+
+	evl_sleep_on(timeout, timeout_mode, clock, NULL);
+	evl_schedule();
+
+	if (curr->info & T_BREAK)
+		rem = __evl_get_stopped_timer_delta(&curr->rtimer);
+
+	return rem;
+}
+EXPORT_SYMBOL_GPL(evl_delay_thread);
+
+int evl_sleep_until(ktime_t timeout)
+{
+	ktime_t rem;
+
+	if (!EVL_ASSERT(CORE, !evl_cannot_block()))
+		return -EPERM;
+
+	rem = evl_delay_thread(timeout, EVL_ABS, &evl_mono_clock);
+
+	return rem ? -EINTR : 0;
+}
+EXPORT_SYMBOL_GPL(evl_sleep_until);
+
+int evl_sleep(ktime_t delay)
+{
+	ktime_t end = ktime_add(evl_read_clock(&evl_mono_clock), delay);
+	return evl_sleep_until(end);
+}
+EXPORT_SYMBOL_GPL(evl_sleep);
+
+int evl_set_thread_period(struct evl_clock *clock,
+			ktime_t idate, ktime_t period)
+{
+	struct evl_thread *curr = evl_current();
+	unsigned long flags;
+	int ret = 0;
+
+	if (curr == NULL)
+		return -EPERM;
+
+	if (clock == NULL || period == EVL_INFINITE) {
+		evl_stop_timer(&curr->ptimer);
+		return 0;
+	}
+
+	/*
+	 * LART: detect periods which are shorter than the target
+	 * clock gravity for kernel thread timers. This can't work,
+	 * caller must have messed up arguments.
+	 */
+	if (period < evl_get_clock_gravity(clock, kernel))
+		return -EINVAL;
+
+	evl_spin_lock_irqsave(&curr->lock, flags);
+
+	evl_prepare_timed_wait(&curr->ptimer, clock, evl_thread_rq(curr));
+
+	if (timeout_infinite(idate))
+		idate = evl_abs_timeout(&curr->ptimer, period);
+
+	evl_start_timer(&curr->ptimer, idate, period);
+
+	evl_spin_unlock_irqrestore(&curr->lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_set_thread_period);
+
+int evl_wait_thread_period(unsigned long *overruns_r)
+{
+	unsigned long overruns, flags;
+	struct evl_thread *curr;
+	struct evl_clock *clock;
+	ktime_t now;
+
+	curr = evl_current();
+	if (unlikely(!evl_timer_is_running(&curr->ptimer)))
+		return -EAGAIN;
+
+	trace_evl_thread_wait_period(curr);
+
+	flags = hard_local_irq_save();
+	clock = curr->ptimer.clock;
+	now = evl_read_clock(clock);
+	if (likely(now < evl_get_timer_next_date(&curr->ptimer))) {
+		evl_sleep_on(EVL_INFINITE, EVL_REL, clock, NULL); /* T_WAIT */
+		hard_local_irq_restore(flags);
+		evl_schedule();
+		if (unlikely(curr->info & T_BREAK))
+			return -EINTR;
+	} else
+		hard_local_irq_restore(flags);
+
+	overruns = evl_get_timer_overruns(&curr->ptimer);
+	if (overruns) {
+		if (likely(overruns_r != NULL))
+			*overruns_r = overruns;
+		trace_evl_thread_missed_period(curr);
+		return -ETIMEDOUT;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_wait_thread_period);
+
+void evl_cancel_thread(struct evl_thread *thread)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	if (EVL_WARN_ON(CORE, thread->state & T_ROOT))
+		return;
+
+	rq = evl_get_thread_rq(thread, flags);
+
+	if (thread->state & T_ZOMBIE) {
+		evl_put_thread_rq(thread, rq, flags);
+		return;
+	}
+
+	if (thread->info & T_CANCELD)
+		goto check_self_cancel;
+
+	trace_evl_thread_cancel(thread);
+
+	thread->info |= T_CANCELD;
+
+	/*
+	 * If @thread is not started yet, fake a start request,
+	 * raising the kicked condition bit to make sure it reaches
+	 * evl_test_cancel() on its wakeup path.
+	 *
+	 * NOTE: if T_DORMANT and !T_INBAND, then some not-yet-mapped
+	 * emerging thread is self-cancelling due to an early error in
+	 * the prep work.
+	 */
+	if ((thread->state & (T_DORMANT|T_INBAND)) == (T_DORMANT|T_INBAND)) {
+		evl_release_thread_locked(thread, T_DORMANT, T_KICKED);
+		evl_put_thread_rq(thread, rq, flags);
+		goto out;
+	}
+
+check_self_cancel:
+	evl_put_thread_rq(thread, rq, flags);
+
+	if (evl_current() == thread) {
+		evl_test_cancel();
+		/*
+		 * May return if on behalf of some IRQ handler which
+		 * interrupted @thread.
+		 */
+		return;
+	}
+
+	/*
+	 * Force the non-current thread to exit:
+	 *
+	 * - unblock a user thread, switch it to weak scheduling,
+	 * then send it SIGTERM.
+	 *
+	 * - just unblock a kernel thread, it is expected to reach a
+	 * cancellation point soon after (i.e. evl_test_cancel()).
+	 */
+	if (thread->state & T_USER) {
+		evl_demote_thread(thread);
+		evl_signal_thread(thread, SIGTERM, 0);
+	} else
+		evl_kick_thread(thread);
+out:
+	evl_schedule();
+}
+EXPORT_SYMBOL_GPL(evl_cancel_thread);
+
+int evl_detach_self(void)
+{
+	if (evl_current() == NULL)
+		return -EPERM;
+
+	put_current_thread();
+
+	return 0;
+}
+
+int evl_join_thread(struct evl_thread *thread, bool uninterruptible)
+{
+	struct evl_thread *curr = evl_current();
+	bool switched = false;
+	unsigned long flags;
+	struct evl_rq *rq;
+	int ret = 0;
+
+	if (EVL_WARN_ON(CORE, thread->state & T_ROOT))
+		return -EINVAL;
+
+	if (thread == curr)
+		return -EDEADLK;
+
+	rq = evl_get_thread_rq(thread, flags);
+
+	/*
+	 * We allow multiple callers to join @thread, this is purely a
+	 * synchronization mechanism with no resource collection.
+	 */
+	if (thread->info & T_DORMANT) {
+		evl_put_thread_rq(thread, rq, flags);
+		return 0;
+	}
+
+	trace_evl_thread_join(thread);
+
+	if (curr && !(curr->state & T_INBAND)) {
+		evl_put_thread_rq(thread, rq, flags);
+		evl_switch_inband(SIGDEBUG_NONE);
+		switched = true;
+	} else {
+		evl_put_thread_rq(thread, rq, flags);
+	}
+
+	/*
+	 * Wait until the joinee is fully dismantled in
+	 * thread_factory_dispose(), which guarantees safe module
+	 * removal afterwards if applicable. After this point, @thread
+	 * is invalid.
+	 */
+	if (uninterruptible)
+		wait_for_completion(&thread->exited);
+	else {
+		ret = wait_for_completion_interruptible(&thread->exited);
+		if (ret < 0)
+			return -EINTR;
+	}
+
+	if (switched)
+		ret = evl_switch_oob();
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_join_thread);
+
+int evl_set_thread_schedparam(struct evl_thread *thread,
+			struct evl_sched_class *sched_class,
+			const union evl_sched_param *sched_param)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+	int ret;
+
+	rq = evl_get_thread_rq(thread, flags);
+	ret = evl_set_thread_schedparam_locked(thread, sched_class, sched_param);
+	evl_put_thread_rq(thread, rq, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_set_thread_schedparam);
+
+int evl_set_thread_schedparam_locked(struct evl_thread *thread,
+				     struct evl_sched_class *sched_class,
+				     const union evl_sched_param *sched_param)
+{
+	int old_wprio, new_wprio, ret;
+
+	assert_thread_pinned(thread);
+
+	old_wprio = thread->wprio;
+
+	ret = evl_set_thread_policy_locked(thread, sched_class, sched_param);
+	if (ret)
+		return ret;
+
+	new_wprio = thread->wprio;
+
+	/*
+	 * If the thread is sleeping on a wait channel, update its
+	 * position in the corresponding wait list, unless the
+	 * (weighted) priority has not changed (to prevent spurious
+	 * round-robin effects).
+	 */
+	if (old_wprio != new_wprio && (thread->state & T_PEND))
+		thread->wchan->reorder_wait(thread, thread);
+
+	thread->info |= T_SCHEDP;
+	/* Ask the target thread to call back if in-band. */
+	if (thread->state & T_INBAND)
+		evl_signal_thread(thread, SIGEVL, SIGEVL_ACTION_HOME);
+
+	return ret;
+}
+
+void __evl_test_cancel(struct evl_thread *curr)
+{
+	/*
+	 * Just in case evl_test_cancel() is called from an IRQ
+	 * handler, in which case we may not take the exit path.
+	 *
+	 * NOTE: curr->rq is stable from our POV and can't change
+	 * under our feet.
+	 */
+	if (curr->rq->local_flags & RQ_IRQ)
+		return;
+
+	if (!(curr->state & T_INBAND))
+		evl_switch_inband(SIGDEBUG_NONE);
+
+	do_exit(0);
+	/* ... won't return ... */
+	EVL_WARN_ON(CORE, 1);
+}
+EXPORT_SYMBOL_GPL(__evl_test_cancel);
+
+void __evl_propagate_schedparam_change(struct evl_thread *curr)
+{
+	int kpolicy = SCHED_FIFO, kprio, ret;
+	struct task_struct *p = current;
+	struct sched_param param;
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	/*
+	 * Test-set race for T_SCHEDP is ok, the propagation is meant
+	 * to be done asap but not guaranteed to be carried out
+	 * immediately, and the request will remain pending until it
+	 * is eventually handled. We just have to protect against a
+	 * set-clear race.
+	 */
+	rq = evl_get_thread_rq(curr, flags);
+	kprio = curr->bprio;
+	curr->info &= ~T_SCHEDP;
+
+	/*
+	 * Map our policies/priorities to the regular kernel's
+	 * (approximated).
+	 */
+	if ((curr->state & T_WEAK) && kprio == 0)
+		kpolicy = SCHED_NORMAL;
+	else if (kprio > EVL_FIFO_MAX_PRIO)
+		kprio = EVL_FIFO_MAX_PRIO;
+
+	evl_put_thread_rq(curr, rq, flags);
+
+	if (p->policy != kpolicy || (kprio > 0 && p->rt_priority != kprio)) {
+		param.sched_priority = kprio;
+		ret = sched_setscheduler_nocheck(p, kpolicy, &param);
+		EVL_WARN_ON(CORE, ret != 0);
+	}
+}
+
+void evl_unblock_thread(struct evl_thread *thread, int reason)
+{
+	trace_evl_unblock_thread(thread);
+
+	/*
+	 * We must not raise the T_BREAK bit if the target thread was
+	 * already runnable at the time of this call, so that
+	 * downstream code does not get confused by some "successful
+	 * but interrupted syscall" condition. IOW, a break state
+	 * raised here must always trigger an error code downstream,
+	 * and a wait which went to completion should not be marked as
+	 * interrupted.
+	 *
+	 * evl_wakeup_thread() guarantees this by updating the info
+	 * bits only if any of the mask bits is set.
+	 */
+	evl_wakeup_thread(thread, T_DELAY|T_PEND|T_WAIT, reason|T_BREAK);
+}
+EXPORT_SYMBOL_GPL(evl_unblock_thread);
+
+void evl_kick_thread(struct evl_thread *thread)
+{
+	struct task_struct *p = thread->altsched.task;
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	rq = evl_get_thread_rq(thread, flags);
+
+	if ((thread->info & T_KICKED) || (thread->state & T_INBAND))
+		goto out;
+
+	/* See comment in evl_unblock_thread(). */
+	evl_wakeup_thread_locked(thread, T_DELAY|T_PEND|T_WAIT,
+				T_KICKED|T_BREAK);
+	/*
+	 * CAUTION: we must NOT raise T_BREAK when clearing a forcible
+	 * block state, such as T_SUSP, T_HALT. The caller of
+	 * evl_sleep_on() we unblock shall proceed as for a normal
+	 * return, until it traverses a cancellation point if
+	 * T_CANCELD was raised earlier, or calls evl_sleep_on() again
+	 * which will detect T_KICKED and act accordingly.
+	 *
+	 * Rationale: callers of evl_sleep_on() may assume that
+	 * receiving T_BREAK implicitly means that the awaited event
+	 * was NOT received in the meantime. Therefore, in case only
+	 * T_SUSP remains set for the thread on entry to
+	 * evl_kick_thread(), after T_PEND was lifted earlier when the
+	 * wait went to successful completion (i.e. no timeout), then
+	 * we want the kicked thread to know that it did receive the
+	 * requested resource, not finding T_BREAK in its state word.
+	 *
+	 * Callers of evl_sleep_on() may inquire for T_KICKED locally
+	 * to detect forcible unblocks from T_SUSP, T_HALT, if they
+	 * should act upon this case specifically.
+	 */
+	evl_release_thread_locked(thread, T_SUSP|T_HALT, T_KICKED);
+
+	/*
+	 * Tricky cases:
+	 *
+	 * - a thread which was ready on entry wasn't actually
+	 * running, but nevertheless waits for the CPU in OOB context,
+	 * so we have to make sure that it will be notified of the
+	 * pending break condition as soon as it enters a blocking EVL
+	 * call.
+	 *
+	 * - a ready/readied thread on exit may be prevented from
+	 * running by the scheduling policy module it belongs
+	 * to. Typically, policies enforcing a runtime budget do not
+	 * block threads with no budget, but rather keep them out of
+	 * their run queue, so that ->sched_pick() won't elect
+	 * them. We tell the policy handler about the fact that we do
+	 * want such thread to run until it switches to in-band
+	 * context, whatever this entails internally for the
+	 * implementation.
+	 *
+	 * - if the thread was merely running on the CPU, it won't
+	 * bear the T_READY bit at this point: force a mayday trap by
+	 * raising T_KICKED manually in this case.
+	 */
+	if (thread->state & T_READY)
+		evl_force_thread(thread);
+	else
+		thread->info |= T_KICKED;
+
+	/*
+	 * We may send mayday signals to userland threads only.
+	 * However, no need to run a mayday trap if the current thread
+	 * kicks itself out of OOB context: it will switch to in-band
+	 * context on its way back to userland via the current syscall
+	 * epilogue. Otherwise, we want that thread to enter the
+	 * mayday trap asap.
+	 */
+	if ((thread->state & T_USER) && thread != this_evl_rq_thread())
+		dovetail_send_mayday(p);
+out:
+	evl_put_thread_rq(thread, rq, flags);
+}
+EXPORT_SYMBOL_GPL(evl_kick_thread);
+
+void evl_demote_thread(struct evl_thread *thread)
+{
+	struct evl_sched_class *sched_class;
+	union evl_sched_param param;
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	rq = evl_get_thread_rq(thread, flags);
+
+	/*
+	 * First demote @thread to the weak class, which still has
+	 * access to EVL resources, but won't compete for real-time
+	 * scheduling anymore. This will prevent @thread from keeping
+	 * the CPU busy in out-of-band context once kicked out from
+	 * wait.
+	 */
+	param.weak.prio = 0;
+	sched_class = &evl_sched_weak;
+	evl_set_thread_schedparam_locked(thread, sched_class, &param);
+
+	evl_put_thread_rq(thread, rq, flags);
+
+	/* Then unblock it from any wait state. */
+	evl_kick_thread(thread);
+}
+EXPORT_SYMBOL_GPL(evl_demote_thread);
+
+struct inband_signal {
+	fundle_t fundle;
+	int signo, sigval;
+	struct irq_work work;
+};
+
+static void inband_task_signal(struct irq_work *work)
+{
+	struct evl_thread *thread;
+	struct inband_signal *req;
+	struct kernel_siginfo si;
+	struct task_struct *p;
+	int signo;
+
+	req = container_of(work, struct inband_signal, work);
+	thread = evl_get_element_by_fundle(&evl_thread_factory,
+					req->fundle, struct evl_thread);
+	if (thread == NULL)
+		goto done;
+
+	p = thread->altsched.task;
+	signo = req->signo;
+	trace_evl_inband_signal(p, signo);
+
+	if (signo == SIGEVL || signo == SIGDEBUG) {
+		memset(&si, '\0', sizeof(si));
+		si.si_signo = signo;
+		si.si_code = SI_QUEUE;
+		si.si_int = req->sigval;
+		send_sig_info(signo, &si, p);
+	} else
+		send_sig(signo, p, 1);
+
+	evl_put_element(&thread->element);
+done:
+	evl_free(req);
+}
+
+void evl_signal_thread(struct evl_thread *thread, int sig, int arg)
+{
+	struct inband_signal *req;
+
+	if (EVL_WARN_ON(CORE, !(thread->state & T_USER)))
+		return;
+
+	req = evl_alloc(sizeof(*req));
+	init_irq_work(&req->work, inband_task_signal);
+	req->fundle = fundle_of(thread);
+	req->signo = sig;
+	req->sigval = sig == SIGDEBUG ? arg | sigdebug_marker : arg;
+	irq_work_queue(&req->work);
+}
+EXPORT_SYMBOL_GPL(evl_signal_thread);
+
+#ifdef CONFIG_MMU
+
+static inline int commit_process_memory(void)
+{
+	struct task_struct *p = current;
+
+	if (!(p->mm->def_flags & VM_LOCKED))
+		return -EINVAL;
+
+	return force_commit_memory();
+}
+
+#else /* !CONFIG_MMU */
+
+static inline int commit_process_memory(void)
+{
+	return 0;
+}
+
+#endif /* !CONFIG_MMU */
+
+int evl_killall(int mask)
+{
+	int nrkilled = 0, nrthreads, count;
+	struct evl_thread *t, *n;
+	LIST_HEAD(kill_list);
+	unsigned long flags;
+	long ret;
+
+	inband_context_only();
+
+	if (evl_current())
+		return -EPERM;
+
+	raw_spin_lock_irqsave(&thread_list_lock, flags);
+
+	nrthreads = evl_nrthreads;
+
+	for_each_evl_thread(t) {
+		if ((t->state & T_ROOT) || (t->state & mask) != mask)
+			continue;
+
+		if (EVL_DEBUG(CORE))
+			printk(EVL_INFO "terminating %s[%d]\n",
+				t->name, evl_get_inband_pid(t));
+
+		evl_get_element(&t->element);
+		list_add(&t->kill_next, &kill_list);
+	}
+
+	raw_spin_unlock_irqrestore(&thread_list_lock, flags);
+
+	list_for_each_entry_safe(t, n, &kill_list, kill_next) {
+		list_del(&t->kill_next);
+		nrkilled++;
+		evl_cancel_thread(t);
+		evl_put_element(&t->element);
+	}
+
+	count = nrthreads - nrkilled;
+	if (EVL_DEBUG(CORE))
+		printk(EVL_INFO "waiting for %d threads to exit\n",
+			nrkilled);
+
+	ret = wait_event_interruptible(join_all,
+				evl_nrthreads == count);
+
+	if (EVL_DEBUG(CORE))
+		printk(EVL_INFO "joined %d threads\n",
+			count + nrkilled - evl_nrthreads);
+
+	return ret < 0 ? -EINTR : 0;
+}
+EXPORT_SYMBOL_GPL(evl_killall);
+
+int evl_update_mode(__u32 mask, bool set)
+{
+	struct evl_thread *curr = evl_current();
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	if (curr == NULL)
+		return -EPERM;
+
+	if (mask & ~(T_WOSS|T_WOLI))
+		return -EINVAL;
+
+	trace_evl_thread_update_mode(mask, set);
+
+	rq = evl_get_thread_rq(curr, flags);
+
+	if (set)
+		curr->state |= mask;
+	else
+		curr->state &= ~mask;
+
+	evl_put_thread_rq(curr, rq, flags);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_update_mode);
+
+pid_t evl_get_inband_pid(struct evl_thread *thread)
+{
+	if (thread->state & (T_ROOT|T_DORMANT|T_ZOMBIE))
+		return 0;
+
+	if (thread->altsched.task == NULL)
+		return -1;	/* weird */
+
+	return task_pid_nr(thread->altsched.task);
+}
+
+void arch_inband_task_init(struct task_struct *tsk)
+{
+	struct oob_thread_state *p = dovetail_task_state(tsk);
+
+	evl_init_thread_state(p);
+}
+
+static inline void note_trap(struct evl_thread *curr,
+		unsigned int trapnr, struct pt_regs *regs,
+		const char *msg)
+{
+	if (user_mode(regs))
+		printk(EVL_WARNING
+			"%s %s [pid=%d, excpt=%d, user_pc=%#lx]\n",
+			curr->name, msg,
+			evl_get_inband_pid(curr),
+			trapnr,
+			instruction_pointer(regs));
+	else
+		printk(EVL_WARNING
+			"%s %s [pid=%d, excpt=%d, %pS]\n",
+			curr->name, msg,
+			evl_get_inband_pid(curr),
+			trapnr,
+			(void *)instruction_pointer(regs));
+}
+
+/* oob stalled. */
+void handle_oob_trap(unsigned int trapnr, struct pt_regs *regs)
+{
+	struct evl_thread *curr;
+	bool is_bp = false;
+
+	oob_context_only();
+
+	curr = evl_current();
+	if (curr->local_info & T_INFAULT) {
+		note_trap(curr, trapnr, regs, "recursive fault");
+		return;
+	}
+
+	curr->local_info |= T_INFAULT;
+
+	trace_evl_thread_fault(trapnr, regs);
+
+	if (current->ptrace & PT_PTRACED)
+		is_bp = evl_is_breakpoint(trapnr);
+
+	if ((EVL_DEBUG(CORE) || (curr->state & T_WOSS)) && !is_bp)
+		note_trap(curr, trapnr, regs, "switching in-band");
+
+	/*
+	 * We received a trap on the oob stage, switch to in-band
+	 * before handling the exception. Don't emit SIGDEBUG if the
+	 * fault was caused by a debugger breakpoint.
+	 */
+	evl_switch_inband(is_bp ? SIGDEBUG_NONE : SIGDEBUG_MIGRATE_FAULT);
+
+	curr->local_info &= ~T_INFAULT;
+}
+
+void handle_oob_mayday(struct pt_regs *regs)
+{
+	struct evl_thread *curr = evl_current();
+
+	if (EVL_WARN_ON(CORE, !(curr->state & T_USER)))
+		return;
+
+	/*
+	 * It might happen that a thread gets a mayday trap right
+	 * after it switched to in-band mode while returning from a
+	 * syscall. Filter this case out.
+	 */
+	if (!(curr->state & T_INBAND))
+		evl_switch_inband(SIGDEBUG_NONE);
+}
+
+#ifdef CONFIG_SMP
+
+static void handle_migration_event(struct dovetail_migration_data *d)
+{
+	struct task_struct *p = d->task;
+	struct evl_thread *thread;
+
+	thread = evl_thread_from_task(p);
+	if (thread == NULL)
+		return;
+
+	/*
+	 * Detect an EVL thread sleeping in OOB context which is
+	 * required to migrate to another CPU by the in-band kernel.
+	 *
+	 * We may NOT fix up thread->sched immediately using the
+	 * migration call, because the latter always has to take place
+	 * on behalf of the target thread itself while running
+	 * in-band. Therefore, that thread needs to switch to in-band
+	 * context first, then move back to OOB, so that check_cpu_affinity()
+	 * does the fixup work.
+	 *
+	 * We force this by sending a SIGEVL signal to the migrated
+	 * thread, asking it to switch back to OOB context from the
+	 * handler, at which point the interrupted syscall may be
+	 * restarted.
+	 */
+	if (thread->state & (EVL_THREAD_BLOCK_BITS & ~T_INBAND))
+		evl_signal_thread(thread, SIGEVL, SIGEVL_ACTION_HOME);
+}
+
+#else /* !CONFIG_SMP */
+
+static void handle_migration_event(struct dovetail_migration_data *d)
+{
+}
+
+#endif /* CONFIG_SMP */
+
+static void handle_schedule_event(struct task_struct *next_task)
+{
+	struct task_struct *prev_task;
+	struct evl_thread *next;
+	unsigned long flags;
+	sigset_t pending;
+
+	prev_task = current;
+	next = evl_thread_from_task(next_task);
+	if (next == NULL)
+		return;
+
+	/*
+	 * Check whether we need to unlock the timers, each time a
+	 * Linux task resumes from a stopped state, excluding tasks
+	 * resuming shortly for entering a stopped state asap due to
+	 * ptracing. To identify the latter, we need to check for
+	 * SIGSTOP and SIGINT in order to encompass both the NPTL and
+	 * LinuxThreads behaviours.
+	 */
+	evl_spin_lock_irqsave(&next->lock, flags);
+	if (next->state & T_SSTEP) {
+		if (signal_pending(next_task)) {
+			/*
+			 * Do not grab the sighand lock here: it's
+			 * useless, and we already own the runqueue
+			 * lock, so this would expose us to deadlock
+			 * situations on SMP.
+			 */
+			sigorsets(&pending,
+				&next_task->pending.signal,
+				&next_task->signal->shared_pending.signal);
+			if (sigismember(&pending, SIGSTOP) ||
+				sigismember(&pending, SIGINT))
+				goto check;
+		}
+		evl_spin_lock(&next->rq->lock);
+		next->state &= ~T_SSTEP;
+		evl_spin_unlock(&next->rq->lock);
+		next->local_info |= T_HICCUP;
+	}
+	evl_spin_unlock_irqrestore(&next->lock, flags);
+
+check:
+	/*
+	 * Do basic sanity checks on the incoming thread state.
+	 * NOTE: we allow ptraced threads to run shortly in order to
+	 * properly recover from a stopped state.
+	 */
+	if (!EVL_WARN(CORE, !(next->state & T_INBAND),
+			"Ouch: out-of-band thread %s[%d] running on the in-band stage"
+			"(status=0x%x, sig=%d, prev=%s[%d])",
+			next->name, task_pid_nr(next_task),
+			next->state,
+			signal_pending(next_task),
+			prev_task->comm, task_pid_nr(prev_task)))
+		EVL_WARN(CORE,
+			!(next_task->ptrace & PT_PTRACED) &&
+			!(next->state & T_DORMANT)
+			&& (next->state & T_PEND),
+			"Ouch: blocked EVL thread %s[%d] rescheduled in-band"
+			"(status=0x%x, sig=%d, prev=%s[%d])",
+			next->name, task_pid_nr(next_task),
+			next->state,
+			signal_pending(next_task), prev_task->comm,
+			task_pid_nr(prev_task));
+}
+
+static void handle_sigwake_event(struct task_struct *p)
+{
+	struct evl_thread *thread;
+	unsigned long flags;
+	sigset_t pending;
+
+	thread = evl_thread_from_task(p);
+	if (thread == NULL)
+		return;
+
+	evl_spin_lock_irqsave(&thread->lock, flags);
+
+	/*
+	 * CAUTION: __TASK_TRACED is not set in p->state yet. This
+	 * state bit will be set right after we return, when the task
+	 * is woken up.
+	 */
+	if ((p->ptrace & PT_PTRACED) && !(thread->state & T_SSTEP)) {
+		/* We already own the siglock. */
+		sigorsets(&pending,
+			&p->pending.signal,
+			&p->signal->shared_pending.signal);
+
+		if (sigismember(&pending, SIGTRAP) ||
+			sigismember(&pending, SIGSTOP)
+			|| sigismember(&pending, SIGINT))
+			evl_spin_lock(&thread->rq->lock);
+			thread->state &= ~T_SSTEP;
+			evl_spin_unlock(&thread->rq->lock);
+	}
+
+	evl_spin_unlock_irqrestore(&thread->lock, flags);
+
+	/*
+	 * A thread running on the oob stage may not be picked by the
+	 * in-band scheduler as it bears the _TLF_OFFSTAGE flag. We
+	 * need to force that thread to switch to in-band context,
+	 * which will clear that flag.
+	 */
+	evl_kick_thread(thread);
+
+	evl_schedule();
+}
+
+static void handle_cleanup_event(struct mm_struct *mm)
+{
+	struct evl_thread *curr = evl_current();
+
+	/*
+	 * Detect an EVL thread running exec(), i.e. still attached to
+	 * the current Linux task (PF_EXITING is cleared for a task
+	 * which did not explicitly run do_exit()). In this case, we
+	 * emulate a task exit, since the EVL binding shall not
+	 * survive the exec() syscall.
+	 *
+	 * NOTE: We are called for every userland task exiting from
+	 * in-band context. We are NOT called for exiting kernel
+	 * threads since they have no mm proper. We may get there
+	 * after cleanup_current_thread() already ran though, so check
+	 * @curr.
+	 */
+	if (curr && !(current->flags & PF_EXITING))
+		put_current_thread();
+}
+
+void handle_inband_event(enum inband_event_type event, void *data)
+{
+	switch (event) {
+	case INBAND_TASK_SCHEDULE:
+		handle_schedule_event(data);
+		break;
+	case INBAND_TASK_SIGNAL:
+		handle_sigwake_event(data);
+		break;
+	case INBAND_TASK_EXIT:
+		put_current_thread();
+		break;
+	case INBAND_TASK_MIGRATION:
+		handle_migration_event(data);
+		break;
+	case INBAND_PROCESS_CLEANUP:
+		handle_cleanup_event(data);
+		break;
+	}
+}
+
+/* thread->lock + thread->rq->lock held, irqs off */
+static int set_time_slice(struct evl_thread *thread, ktime_t quantum)
+{
+	struct evl_rq *rq = thread->rq;
+
+	assert_evl_lock(&thread->lock);
+	assert_evl_lock(&rq->lock);
+
+	thread->rrperiod = quantum;
+
+	if (!timeout_infinite(quantum)) {
+		if (quantum <= evl_get_clock_gravity(&evl_mono_clock, user))
+			return -EINVAL;
+
+		if (thread->base_class->sched_tick == NULL)
+			return -EINVAL;
+
+		thread->state |= T_RRB;
+		if (rq->curr == thread)
+			evl_start_timer(&rq->rrbtimer,
+					evl_abs_timeout(&rq->rrbtimer, quantum),
+					EVL_INFINITE);
+	} else {
+		thread->state &= ~T_RRB;
+		if (rq->curr == thread)
+			evl_stop_timer(&rq->rrbtimer);
+	}
+
+	return 0;
+}
+
+static int set_sched_attrs(struct evl_thread *thread,
+			const struct evl_sched_attrs *attrs)
+{
+	struct evl_sched_class *sched_class;
+	union evl_sched_param param;
+	unsigned long flags;
+	struct evl_rq *rq;
+	int ret = -EINVAL;
+	ktime_t tslice;
+
+	trace_evl_thread_setsched(thread, attrs);
+
+	rq = evl_get_thread_rq(thread, flags);
+
+	tslice = thread->rrperiod;
+	sched_class = evl_find_sched_class(&param, attrs, &tslice);
+	if (sched_class == NULL)
+		goto out;
+
+	ret = set_time_slice(thread, tslice);
+	if (ret)
+		goto out;
+
+	ret = evl_set_thread_schedparam_locked(thread, sched_class, &param);
+out:
+	evl_put_thread_rq(thread, rq, flags);
+
+	evl_schedule();
+
+	return ret;
+}
+
+static void __get_sched_attrs(struct evl_sched_class *sched_class,
+			struct evl_thread *thread,
+			struct evl_sched_attrs *attrs)
+{
+	union evl_sched_param param;
+
+	assert_thread_pinned(thread);
+
+	attrs->sched_policy = sched_class->policy;
+
+	sched_class->sched_getparam(thread, &param);
+
+	if (sched_class == &evl_sched_fifo) {
+		if (thread->state & T_RRB) {
+			attrs->sched_rr_quantum =
+				ktime_to_timespec(thread->rrperiod);
+			attrs->sched_policy = SCHED_RR;
+		}
+		goto out;
+	}
+
+#ifdef CONFIG_EVL_SCHED_QUOTA
+	if (sched_class == &evl_sched_quota) {
+		attrs->sched_quota_group = param.quota.tgid;
+		goto out;
+	}
+#endif
+
+#ifdef CONFIG_EVL_SCHED_TP
+	if (sched_class == &evl_sched_tp) {
+		attrs->sched_tp_partition = param.tp.ptid;
+		goto out;
+	}
+#endif
+
+out:
+	trace_evl_thread_getsched(thread, attrs);
+}
+
+static void get_sched_attrs(struct evl_thread *thread,
+			struct evl_sched_attrs *attrs)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	rq = evl_get_thread_rq(thread, flags);
+	/* Get the base scheduling attributes. */
+	attrs->sched_priority = thread->bprio;
+	__get_sched_attrs(thread->base_class, thread, attrs);
+	evl_put_thread_rq(thread, rq, flags);
+}
+
+void evl_get_thread_state(struct evl_thread *thread,
+			struct evl_thread_state *statebuf)
+{
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	rq = evl_get_thread_rq(thread, flags);
+	/* Get the effective scheduling attributes. */
+	statebuf->eattrs.sched_priority = thread->cprio;
+	__get_sched_attrs(thread->sched_class, thread, &statebuf->eattrs);
+	statebuf->cpu = evl_rq_cpu(thread->rq);
+	statebuf->state = evl_rq_cpu(thread->rq);
+	statebuf->isw = evl_get_counter(&thread->stat.isw);
+	statebuf->csw = evl_get_counter(&thread->stat.csw);
+	statebuf->sc = evl_get_counter(&thread->stat.sc);
+	statebuf->rwa = evl_get_counter(&thread->stat.rwa);
+	statebuf->xtime = ktime_to_ns(evl_get_account_total(
+					&thread->stat.account));
+	evl_put_thread_rq(thread, rq, flags);
+}
+EXPORT_SYMBOL_GPL(evl_get_thread_state);
+
+static long thread_common_ioctl(struct evl_thread *thread,
+				unsigned int cmd, unsigned long arg)
+{
+	struct evl_thread_state statebuf;
+	struct evl_sched_attrs attrs;
+	long ret;
+
+	switch (cmd) {
+	case EVL_THRIOC_SET_SCHEDPARAM:
+		ret = raw_copy_from_user(&attrs,
+					(struct evl_sched_attrs *)arg, sizeof(attrs));
+		if (ret)
+			return -EFAULT;
+		ret = set_sched_attrs(thread, &attrs);
+		break;
+	case EVL_THRIOC_GET_SCHEDPARAM:
+		get_sched_attrs(thread, &attrs);
+		ret = raw_copy_to_user((struct evl_sched_attrs *)arg,
+				&attrs, sizeof(attrs));
+		if (ret)
+			return -EFAULT;
+		break;
+	case EVL_THRIOC_GET_STATE:
+		evl_get_thread_state(thread, &statebuf);
+		ret = raw_copy_to_user((struct evl_thread_state *)arg,
+				&statebuf, sizeof(statebuf));
+		if (ret)
+			return -EFAULT;
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static long thread_oob_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_thread *thread = element_of(filp, struct evl_thread);
+	struct evl_thread *curr = evl_current();
+	long ret = -EPERM;
+	__u32 monfd, mask;
+
+	if (thread->state & T_ZOMBIE)
+		return -ESTALE;
+
+	switch (cmd) {
+	case EVL_THRIOC_SWITCH_OOB:
+		if (thread == curr)
+			ret = 0;	/* Already there. */
+		break;
+	case EVL_THRIOC_SWITCH_INBAND:
+		if (thread == curr) {
+			evl_switch_inband(SIGDEBUG_NONE);
+			ret = 0;
+		}
+		break;
+	case EVL_THRIOC_SIGNAL:
+		ret = raw_get_user(monfd, (__u32 *)arg);
+		if (ret)
+			return -EFAULT;
+		ret = evl_signal_monitor_targeted(thread, monfd);
+		break;
+	case EVL_THRIOC_SET_MODE:
+	case EVL_THRIOC_CLEAR_MODE:
+		if (thread == curr) {
+			ret = raw_get_user(mask, (__u32 *)arg);
+			if (ret)
+				return -EFAULT;
+			ret = evl_update_mode(mask, cmd == EVL_THRIOC_SET_MODE);
+		}
+		break;
+	default:
+		ret = thread_common_ioctl(thread, cmd, arg);
+	}
+
+	return ret;
+}
+
+static long thread_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	struct evl_thread *thread = element_of(filp, struct evl_thread);
+	struct evl_thread *curr = evl_current();
+	long ret = -EPERM;
+
+	if (thread->state & T_ZOMBIE)
+		return -ESTALE;
+
+	switch (cmd) {
+	case EVL_THRIOC_SWITCH_INBAND:
+		if (thread == curr)
+			ret = 0;
+		break;
+	case EVL_THRIOC_DETACH_SELF:
+		ret = evl_detach_self();
+		break;
+	case EVL_THRIOC_JOIN:
+		ret = evl_join_thread(thread, false);
+		break;
+	default:
+		ret = thread_common_ioctl(thread, cmd, arg);
+	}
+
+	return ret;
+}
+
+static const struct file_operations thread_fops = {
+	.open		= evl_open_element,
+	.release	= evl_release_element,
+	.unlocked_ioctl	= thread_ioctl,
+	.oob_ioctl	= thread_oob_ioctl,
+};
+
+static int map_uthread_self(struct evl_thread *thread)
+{
+	struct evl_user_window *u_window;
+	struct cred *newcap;
+	int ret;
+
+	ret = commit_process_memory();
+	if (ret)
+		return ret;
+
+	u_window = evl_zalloc_chunk(&evl_shared_heap, sizeof(*u_window));
+	if (u_window == NULL)
+		return -ENOMEM;
+
+	/*
+	 * Raise capababilities of user threads when attached to the
+	 * core. Filtering access to /dev/evl/control can be used to
+	 * restrict attachment.
+	 */
+	thread->raised_cap = CAP_EMPTY_SET;
+	newcap = prepare_creds();
+	if (newcap == NULL)
+		return -ENOMEM;
+
+	add_u_cap(thread, newcap, CAP_SYS_NICE);
+	add_u_cap(thread, newcap, CAP_IPC_LOCK);
+	add_u_cap(thread, newcap, CAP_SYS_RAWIO);
+	commit_creds(newcap);
+
+	/*
+	 * CAUTION: From that point, we assume the mapping won't fail,
+	 * therefore there is no added capability to drop in
+	 * discard_unmapped_uthread().
+	 */
+	thread->u_window = u_window;
+	pin_to_initial_cpu(thread);
+	trace_evl_thread_map(thread);
+
+	dovetail_init_altsched(&thread->altsched);
+	set_oob_threadinfo(thread);
+
+	/*
+	 * CAUTION: we enable dovetailing only when *thread is
+	 * consistent, so that we won't trigger false positive in
+	 * debug code from handle_schedule_event() and friends.
+	 */
+	dovetail_start_altsched();
+
+	/*
+	 * A user-space thread is already started EVL-wise since we
+	 * have an underlying in-band context for it, so we can
+	 * enqueue it now.
+	 */
+	enqueue_new_thread(thread);
+	evl_release_thread(thread, T_DORMANT, 0);
+	evl_sync_uwindow(thread);
+
+	return 0;
+}
+
+/*
+ * Deconstruct a thread we just failed to map over a userland task.
+ * Since the former must be dormant, it can't be part of any runqueue.
+ */
+static void discard_unmapped_uthread(struct evl_thread *thread)
+{
+	evl_destroy_timer(&thread->rtimer);
+	evl_destroy_timer(&thread->ptimer);
+	dequeue_old_thread(thread);
+
+	if (thread->u_window)
+		evl_free_chunk(&evl_shared_heap, thread->u_window);
+
+	kfree(thread);
+}
+
+static struct evl_element *
+thread_factory_build(struct evl_factory *fac, const char *name,
+		void __user *u_attrs, u32 *state_offp)
+{
+	struct task_struct *tsk = current;
+	struct evl_init_thread_attr iattr;
+	struct evl_thread *curr;
+	int ret;
+
+	if (evl_current())
+		return ERR_PTR(-EBUSY);
+
+	curr = kzalloc(sizeof(*curr), GFP_KERNEL);
+	if (curr == NULL)
+		return ERR_PTR(-ENOMEM);
+
+	ret = evl_init_element(&curr->element, &evl_thread_factory);
+	if (ret) {
+		kfree(curr);
+		return ERR_PTR(ret);
+	}
+
+	iattr.flags = T_USER;
+	iattr.affinity = CPU_MASK_ALL;
+	iattr.sched_class = &evl_sched_weak;
+	iattr.sched_param.weak.prio = 0;
+	ret = evl_init_thread(curr, &iattr, NULL, "%s", name);
+	if (ret) {
+		evl_destroy_element(&curr->element);
+		kfree(curr);
+		return ERR_PTR(ret);
+	}
+
+	ret = map_uthread_self(curr);
+	if (ret) {
+		evl_destroy_element(&curr->element);
+		discard_unmapped_uthread(curr);
+		return ERR_PTR(ret);
+	}
+
+	*state_offp = evl_shared_offset(curr->u_window);
+	evl_index_element(&curr->element);
+
+	/*
+	 * Unlike most elements, a thread may exist in absence of any
+	 * file reference, so we get a reference on the emerging
+	 * thread here to block automatic disposal on last file
+	 * release. put_current_thread() drops this reference when the
+	 * thread exits, or voluntarily detaches by sending the
+	 * EVL_THRIOC_DETACH_SELF control request.
+	 */
+	evl_get_element(&curr->element);
+
+	strncpy(tsk->comm, name, sizeof(tsk->comm));
+	tsk->comm[sizeof(tsk->comm) - 1] = '\0';
+
+	return &curr->element;
+}
+
+static void thread_factory_dispose(struct evl_element *e)
+{
+	struct evl_thread *thread;
+	int state;
+
+	thread = container_of(e, struct evl_thread, element);
+	state = thread->state;
+
+	/*
+	 * Two ways to get into the disposal handler: either
+	 * open_factory_node() failed creating a device for @thread
+	 * which is current, or after the last file reference to
+	 * @thread was dropped after exit. T_ZOMBIE cleared denotes
+	 * the first case, otherwise @thread has existed, is now dead
+	 * and no more reachable, so we can wakeup joiners if any.
+	 */
+	if (likely(state & T_ZOMBIE)) {
+		evl_destroy_element(&thread->element);
+		complete_all(&thread->exited);	 /* evl_join_thread() */
+		if (waitqueue_active(&join_all)) /* evl_killall() */
+			wake_up(&join_all);
+	} else {
+		if (EVL_WARN_ON(CORE, evl_current() != thread))
+			return;
+		cleanup_current_thread();
+		evl_destroy_element(&thread->element);
+	}
+
+	if (state & T_USER)
+		kfree_rcu(thread, element.rcu);
+}
+
+static ssize_t state_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_thread *thread;
+	ssize_t ret;
+
+	thread = evl_get_element_by_dev(dev, struct evl_thread);
+	ret = snprintf(buf, PAGE_SIZE, "%#x\n", thread->state);
+	evl_put_element(&thread->element);
+
+	return ret;
+}
+static DEVICE_ATTR_RO(state);
+
+static ssize_t sched_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_sched_class *sched_class;
+	struct evl_thread *thread;
+	int bprio, cprio, cpu;
+	unsigned long flags;
+	ssize_t ret, _ret;
+
+	thread = evl_get_element_by_dev(dev, struct evl_thread);
+
+	evl_spin_lock_irqsave(&thread->lock, flags);
+
+	sched_class = thread->sched_class;
+	bprio = thread->bprio;
+	cprio = thread->cprio;
+	cpu = evl_rq_cpu(thread->rq);
+
+	ret = snprintf(buf, PAGE_SIZE, "%d %d %d %s ",
+		cpu, bprio, cprio, sched_class->name);
+
+	if (sched_class->sched_show) {
+		_ret = sched_class->sched_show(thread, buf + ret,
+					PAGE_SIZE - ret);
+		if (_ret > 0) {
+			ret += _ret;
+			goto out;
+		}
+	}
+
+	/* overwrites trailing whitespace */
+	buf[ret - 1] = '\n';
+out:
+	evl_spin_unlock_irqrestore(&thread->lock, flags);
+	evl_put_element(&thread->element);
+
+	return ret;
+}
+static DEVICE_ATTR_RO(sched);
+
+#ifdef CONFIG_EVL_RUNSTATS
+
+static ssize_t stats_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	ktime_t period, exectime, account, total;
+	struct evl_thread *thread;
+	unsigned long flags;
+	struct evl_rq *rq;
+	ssize_t ret;
+	int usage;
+
+	thread = evl_get_element_by_dev(dev, struct evl_thread);
+
+	evl_spin_lock_irqsave(&thread->lock, flags);
+
+	rq = evl_thread_rq(thread);
+
+	period = rq->last_account_switch - thread->stat.lastperiod.start;
+	if (period == 0 && thread == rq->curr) {
+		exectime = ktime_set(0, 1);
+		account = ktime_set(0, 1);
+	} else {
+		exectime = thread->stat.account.total -
+			thread->stat.lastperiod.total;
+		account = period;
+	}
+
+	total = thread->stat.account.total;
+	thread->stat.lastperiod.total = total;
+	thread->stat.lastperiod.start = rq->last_account_switch;
+
+	evl_spin_unlock_irqrestore(&thread->lock, flags);
+
+	if (account) {
+		while (account > 0xffffffffUL) {
+			exectime >>= 16;
+			account >>= 16;
+		}
+
+		exectime = ns_to_ktime(ktime_to_ns(exectime) * 1000LL +
+				ktime_to_ns(account) / 2);
+		usage = ktime_divns(exectime, ktime_to_ns(account));
+	} else
+		usage = 0;
+
+	ret = snprintf(buf, PAGE_SIZE, "%lu %lu %lu %lu %Lu %d\n",
+		thread->stat.isw.counter,
+		thread->stat.csw.counter,
+		thread->stat.sc.counter,
+		thread->stat.rwa.counter,
+		total,
+		usage);
+
+	evl_put_element(&thread->element);
+
+	return ret;
+}
+
+#else
+
+static ssize_t stats_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	return snprintf(buf, PAGE_SIZE, "0 0 0 0 0\n");
+}
+
+#endif	/* !CONFIG_EVL_RUNSTATS */
+
+static DEVICE_ATTR_RO(stats);
+
+static ssize_t timeout_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_thread *thread;
+	ssize_t ret;
+
+	thread = evl_get_element_by_dev(dev, struct evl_thread);
+	ret = snprintf(buf, PAGE_SIZE, "%Lu\n",
+		ktime_to_ns(evl_get_thread_timeout(thread)));
+	evl_put_element(&thread->element);
+
+	return ret;
+}
+static DEVICE_ATTR_RO(timeout);
+
+static ssize_t pid_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_thread *thread;
+	ssize_t ret;
+
+	thread = evl_get_element_by_dev(dev, struct evl_thread);
+	ret = snprintf(buf, PAGE_SIZE, "%d\n", evl_get_inband_pid(thread));
+	evl_put_element(&thread->element);
+
+	return ret;
+}
+static DEVICE_ATTR_RO(pid);
+
+static struct attribute *thread_attrs[] = {
+	&dev_attr_state.attr,
+	&dev_attr_sched.attr,
+	&dev_attr_timeout.attr,
+	&dev_attr_stats.attr,
+	&dev_attr_pid.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(thread);
+
+struct evl_factory evl_thread_factory = {
+	.name	=	EVL_THREAD_DEV,
+	.fops	=	&thread_fops,
+	.build	=	thread_factory_build,
+	.dispose =	thread_factory_dispose,
+	.nrdev	=	CONFIG_EVL_NR_THREADS,
+	.attrs	=	thread_groups,
+	.flags	=	EVL_FACTORY_CLONE,
+};
diff --git a/kernel/evl/tick.c b/kernel/evl/tick.c
new file mode 100644
index 000000000000..1a82d8d46b22
--- /dev/null
+++ b/kernel/evl/tick.c
@@ -0,0 +1,253 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/percpu.h>
+#include <linux/cpumask.h>
+#include <linux/clockchips.h>
+#include <linux/tick.h>
+#include <linux/irqdomain.h>
+#include <linux/ktime.h>
+#include <linux/kernel.h>
+#include <linux/timekeeping.h>
+#include <linux/irq_pipeline.h>
+#include <linux/slab.h>
+#include <evl/sched.h>
+#include <evl/timer.h>
+#include <evl/clock.h>
+#include <evl/tick.h>
+#include <evl/control.h>
+#include <trace/events/evl.h>
+
+static DEFINE_PER_CPU(struct clock_proxy_device *, proxy_tick_device);
+
+static int proxy_set_next_ktime(ktime_t expires,
+				struct clock_event_device *proxy_dev)
+{
+	struct evl_rq *rq;
+	unsigned long flags;
+	ktime_t delta;
+
+	/*
+	 * Negative delta have been observed. evl_start_timer()
+	 * will trigger an immediate shot in such an event.
+	 */
+	delta = ktime_sub(expires, ktime_get());
+
+	flags = hard_local_irq_save(); /* Prevent CPU migration. */
+	rq = this_evl_rq();
+	evl_start_timer(&rq->inband_timer,
+			evl_abs_timeout(&rq->inband_timer, delta),
+			EVL_INFINITE);
+	hard_local_irq_restore(flags);
+
+	return 0;
+}
+
+static int proxy_set_oneshot_stopped(struct clock_event_device *proxy_dev)
+{
+	struct clock_event_device *real_dev;
+	struct clock_proxy_device *dev;
+	unsigned long flags;
+	struct evl_rq *rq;
+
+	dev = container_of(proxy_dev, struct clock_proxy_device, proxy_device);
+
+	/*
+	 * In-band wants to disable the clock hardware on entering a
+	 * tickless state, so we have to stop our in-band tick
+	 * emulation. Propagate the request for shutting down the
+	 * hardware to the real device only if we have no outstanding
+	 * OOB timers. CAUTION: the in-band timer is counted when
+	 * assessing the RQ_IDLE condition, so we need to stop it
+	 * prior to testing the latter.
+	 */
+	flags = hard_local_irq_save();
+
+	rq = this_evl_rq();
+	evl_stop_timer(&rq->inband_timer);
+	rq->local_flags |= RQ_TSTOPPED;
+
+	if (rq->local_flags & RQ_IDLE) {
+		real_dev = dev->real_device;
+		real_dev->set_state_oneshot_stopped(real_dev);
+	}
+
+	hard_local_irq_restore(flags);
+
+	return 0;
+}
+
+#ifdef CONFIG_SMP
+
+static irqreturn_t clock_ipi_handler(int irq, void *dev_id)
+{
+	evl_core_tick(NULL);
+
+	return IRQ_HANDLED;
+}
+
+#endif
+
+static void setup_proxy(struct clock_proxy_device *dev)
+{
+	struct clock_event_device *proxy_dev = &dev->proxy_device;
+
+	dev->handle_oob_event = evl_core_tick;
+	proxy_dev->features |= CLOCK_EVT_FEAT_KTIME;
+	proxy_dev->set_next_ktime = proxy_set_next_ktime;
+	if (proxy_dev->set_state_oneshot_stopped)
+		proxy_dev->set_state_oneshot_stopped = proxy_set_oneshot_stopped;
+
+	__this_cpu_write(proxy_tick_device, dev);
+}
+
+int evl_enable_tick(void)
+{
+	int ret;
+
+#ifdef CONFIG_SMP
+	ret = __request_percpu_irq(TIMER_OOB_IPI,
+				clock_ipi_handler,
+				IRQF_OOB, "EVL timer IPI",
+				&evl_machine_cpudata);
+	if (ret)
+		return ret;
+#endif
+
+	/*
+	 * CAUTION:
+	 *
+	 * - EVL timers may be started only _after_ the proxy clock
+	 * device has been set up for the target CPU.
+	 *
+	 * - do not hold any lock across calls to evl_enable_tick().
+	 *
+	 * - tick_install_proxy() guarantees that the real clock
+	 * device supports oneshot mode, or fails.
+	 */
+	ret = tick_install_proxy(setup_proxy, &evl_oob_cpus);
+	if (ret) {
+#ifdef CONFIG_SMP
+		free_percpu_irq(TIMER_OOB_IPI,
+				&evl_machine_cpudata);
+#endif
+		return ret;
+	}
+
+	return 0;
+}
+
+void evl_disable_tick(void)
+{
+	tick_uninstall_proxy(&evl_oob_cpus);
+#ifdef CONFIG_SMP
+	free_percpu_irq(TIMER_OOB_IPI, &evl_machine_cpudata);
+#endif
+	/*
+	 * When the kernel is swapping clock event devices on behalf
+	 * of enable_clock_devices(), it may end up calling
+	 * program_timer() via the synthetic device's
+	 * ->set_next_event() handler for resuming the in-band timer.
+	 * Therefore, no timer should remain queued before
+	 * enable_clock_devices() is called, or unpleasant hangs may
+	 * happen if the in-band timer is not at front of the
+	 * queue. You have been warned.
+	 */
+	evl_stop_timers(&evl_mono_clock);
+}
+
+/* per-cpu timer queue locked. */
+void evl_program_proxy_tick(struct evl_clock *clock)
+{
+	struct clock_proxy_device *dev = __this_cpu_read(proxy_tick_device);
+	struct clock_event_device *real_dev = dev->real_device;
+	struct evl_rq *this_rq = this_evl_rq();
+	struct evl_timerbase *tmb;
+	struct evl_timer *timer;
+	struct evl_tnode *tn;
+	int64_t delta;
+	u64 cycles;
+	ktime_t t;
+	int ret;
+
+	/*
+	 * Do not reprogram locally when inside the tick handler -
+	 * will be done on exit anyway. Also exit if there is no
+	 * pending timer.
+	 */
+	if (this_rq->local_flags & RQ_TIMER)
+		return;
+
+	tmb = evl_this_cpu_timers(clock);
+	tn = evl_get_tqueue_head(&tmb->q);
+	if (tn == NULL) {
+		this_rq->local_flags |= RQ_IDLE;
+		return;
+	}
+
+	/*
+	 * Try to defer the next in-band tick, so that it does not
+	 * preempt an OOB activity uselessly, in two cases:
+	 *
+	 * 1) a rescheduling is pending for the current CPU. We may
+	 * assume that an EVL thread is about to resume, so we want to
+	 * move the in-band tick out of the way until in-band activity
+	 * resumes, unless there is no other outstanding timers.
+	 *
+	 * 2) the current EVL thread is running OOB, in which case we
+	 * may defer the in-band tick until the in-band activity
+	 * resumes.
+	 *
+	 * The in-band tick deferral is cleared whenever EVL is about
+	 * to yield control to the in-band code (see
+	 * __evl_schedule()), or a timer with an earlier timeout date
+	 * is scheduled, whichever comes first.
+	 */
+	this_rq->local_flags &= ~(RQ_TDEFER|RQ_IDLE|RQ_TSTOPPED);
+	timer = container_of(tn, struct evl_timer, node);
+	if (timer == &this_rq->inband_timer) {
+		if (evl_need_resched(this_rq) ||
+			!(this_rq->curr->state & T_ROOT)) {
+			tn = evl_get_tqueue_next(&tmb->q, tn);
+			if (tn) {
+				this_rq->local_flags |= RQ_TDEFER;
+				timer = container_of(tn, struct evl_timer, node);
+			}
+		}
+	}
+
+	t = evl_tdate(timer);
+	delta = ktime_to_ns(ktime_sub(t, evl_read_clock(clock)));
+
+	if (real_dev->features & CLOCK_EVT_FEAT_KTIME) {
+		real_dev->set_next_ktime(t, real_dev);
+		trace_evl_timer_shot(timer, delta, t);
+	} else {
+		if (delta <= 0)
+			delta = real_dev->min_delta_ns;
+		else {
+			delta = min(delta, (int64_t)real_dev->max_delta_ns);
+			delta = max(delta, (int64_t)real_dev->min_delta_ns);
+		}
+		cycles = ((u64)delta * real_dev->mult) >> real_dev->shift;
+		ret = real_dev->set_next_event(cycles, real_dev);
+		trace_evl_timer_shot(timer, delta, cycles);
+		if (ret) {
+			real_dev->set_next_event(real_dev->min_delta_ticks,
+						real_dev);
+			trace_evl_timer_shot(timer, real_dev->min_delta_ns,
+					real_dev->min_delta_ticks);
+		}
+	}
+}
+
+#ifdef CONFIG_SMP
+void evl_send_timer_ipi(struct evl_clock *clock, struct evl_rq *rq)
+{
+	irq_pipeline_send_remote(TIMER_OOB_IPI,
+				cpumask_of(evl_rq_cpu(rq)));
+}
+#endif
diff --git a/kernel/evl/timer.c b/kernel/evl/timer.c
new file mode 100644
index 000000000000..640dccb67e30
--- /dev/null
+++ b/kernel/evl/timer.c
@@ -0,0 +1,490 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2004 Gilles Chanteperdrix  <gilles.chanteperdrix@xenomai.org>
+ * Copyright (C) 2001, 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/sched.h>
+#include <linux/cred.h>
+#include <linux/err.h>
+#include <evl/sched.h>
+#include <evl/thread.h>
+#include <evl/timer.h>
+#include <evl/clock.h>
+#include <evl/tick.h>
+#include <asm/div64.h>
+#include <trace/events/evl.h>
+
+#ifdef CONFIG_SMP
+
+static struct evl_timerbase *
+lock_timer_base(struct evl_timer *timer, unsigned long *flags)
+{
+	struct evl_timerbase *base;
+
+	for (;;) {
+		base = timer->base;
+		raw_spin_lock_irqsave(&base->lock, *flags);
+		/*
+		 * Careful about a bolting of the same timer happening
+		 * concurrently from a different CPU.
+		 */
+		if (base == timer->base)
+			break;
+		raw_spin_unlock_irqrestore(&base->lock, *flags);
+	}
+
+	return base;
+}
+
+static inline void unlock_timer_base(struct evl_timerbase *base,
+				unsigned long flags)
+{
+	raw_spin_unlock_irqrestore(&base->lock, flags);
+}
+
+#else
+
+static inline struct evl_timerbase *
+lock_timer_base(struct evl_timer *timer, unsigned long *flags)
+{
+	*flags = hard_local_irq_save();
+
+	return timer->base;
+}
+
+static inline void unlock_timer_base(struct evl_timerbase *base,
+				unsigned long flags)
+{
+	hard_local_irq_restore(flags);
+}
+
+#endif
+
+/* hard irqs off */
+static inline void double_timer_base_lock(struct evl_timerbase *tb1,
+					struct evl_timerbase *tb2)
+{
+	if (tb1 == tb2)
+		raw_spin_lock(&tb1->lock);
+	else if (tb1 < tb2) {
+		raw_spin_lock(&tb1->lock);
+		raw_spin_lock_nested(&tb2->lock, SINGLE_DEPTH_NESTING);
+	} else {
+		raw_spin_lock(&tb2->lock);
+		raw_spin_lock_nested(&tb1->lock, SINGLE_DEPTH_NESTING);
+	}
+}
+
+static inline void double_timer_base_unlock(struct evl_timerbase *tb1,
+					struct evl_timerbase *tb2)
+{
+	raw_spin_unlock(&tb1->lock);
+	if (tb1 != tb2)
+		raw_spin_unlock(&tb2->lock);
+}
+
+/* timer base locked. */
+static bool timer_at_front(struct evl_timer *timer)
+{
+	struct evl_rq *rq = evl_get_timer_rq(timer);
+	struct evl_tqueue *tq;
+	struct evl_tnode *tn;
+
+	tq = &timer->base->q;
+	tn = evl_get_tqueue_head(tq);
+	if (tn == &timer->node)
+		return true;
+
+	if (rq->local_flags & RQ_TDEFER) {
+		tn = evl_get_tqueue_next(tq, tn);
+		if (tn == &timer->node)
+			return true;
+	}
+
+	return false;
+}
+
+/* timer base locked. */
+static void program_timer(struct evl_timer *timer,
+			struct evl_tqueue *tq)
+{
+	struct evl_rq *rq;
+
+	evl_enqueue_timer(timer, tq);
+
+	rq = evl_get_timer_rq(timer);
+	if (!(rq->local_flags & RQ_TSTOPPED) && !timer_at_front(timer))
+		return;
+
+	if (rq != this_evl_rq())
+		evl_program_remote_tick(timer->clock, rq);
+	else
+		evl_program_local_tick(timer->clock);
+}
+
+void evl_start_timer(struct evl_timer *timer,
+		ktime_t value, ktime_t interval)
+{
+	struct evl_timerbase *base;
+	struct evl_tqueue *tq;
+	ktime_t date, gravity;
+	unsigned long flags;
+
+	trace_evl_timer_start(timer, value, interval);
+
+	base = lock_timer_base(timer, &flags);
+	tq = &base->q;
+
+	if ((timer->status & EVL_TIMER_DEQUEUED) == 0)
+		evl_dequeue_timer(timer, tq);
+
+	timer->status &= ~(EVL_TIMER_FIRED | EVL_TIMER_PERIODIC);
+
+	date = ktime_sub(value, timer->clock->offset);
+
+	/*
+	 * To cope with the basic system latency, we apply a clock
+	 * gravity value, which is the amount of time expressed in
+	 * nanoseconds by which we should anticipate the shot for the
+	 * timer. The gravity value varies with the type of context
+	 * the timer wakes up, i.e. irq handler, kernel or user
+	 * thread.
+	 */
+	gravity = evl_get_timer_gravity(timer);
+	evl_tdate(timer) = ktime_sub(date, gravity);
+
+	timer->interval = EVL_INFINITE;
+	if (!timeout_infinite(interval)) {
+		timer->interval = interval;
+		timer->start_date = value;
+		timer->pexpect_ticks = 0;
+		timer->periodic_ticks = 0;
+		timer->status |= EVL_TIMER_PERIODIC;
+	}
+
+	timer->status |= EVL_TIMER_RUNNING;
+	program_timer(timer, tq);
+
+	unlock_timer_base(base, flags);
+}
+EXPORT_SYMBOL_GPL(evl_start_timer);
+
+/* timer base locked. */
+bool evl_timer_deactivate(struct evl_timer *timer)
+{
+	struct evl_tqueue *tq = &timer->base->q;
+	bool heading = true;
+
+	if (!(timer->status & EVL_TIMER_DEQUEUED)) {
+		heading = timer_at_front(timer);
+		evl_dequeue_timer(timer, tq);
+	}
+
+	timer->status &= ~(EVL_TIMER_FIRED|EVL_TIMER_RUNNING);
+
+	return heading;
+}
+
+/* timerbase locked, hard irqs off */
+static void stop_timer_locked(struct evl_timer *timer)
+{
+	bool heading;
+
+	/*
+	 * If we removed the heading timer, reprogram the next shot if
+	 * any. If the timer was running on another CPU, let it tick.
+	 */
+	if (evl_timer_is_running(timer)) {
+		heading = evl_timer_deactivate(timer);
+		if (heading && evl_timer_on_rq(timer, this_evl_rq()))
+			evl_program_local_tick(timer->clock);
+	}
+}
+
+void __evl_stop_timer(struct evl_timer *timer)
+{
+	struct evl_timerbase *base;
+	unsigned long flags;
+
+	trace_evl_timer_stop(timer);
+	base = lock_timer_base(timer, &flags);
+	stop_timer_locked(timer);
+	unlock_timer_base(base, flags);
+}
+EXPORT_SYMBOL_GPL(__evl_stop_timer);
+
+ktime_t evl_get_timer_date(struct evl_timer *timer)
+{
+	struct evl_timerbase *base;
+	unsigned long flags;
+	ktime_t expiry;
+
+	base = lock_timer_base(timer, &flags);
+
+	if (!evl_timer_is_running(timer))
+		expiry = EVL_INFINITE;
+	else
+		expiry = evl_get_timer_expiry(timer);
+
+	unlock_timer_base(base, flags);
+
+	return expiry;
+}
+EXPORT_SYMBOL_GPL(evl_get_timer_date);
+
+ktime_t __evl_get_timer_delta(struct evl_timer *timer)
+{
+	struct evl_timerbase *base;
+	ktime_t expiry, now;
+	unsigned long flags;
+
+	base = lock_timer_base(timer, &flags);
+	expiry = evl_get_timer_expiry(timer);
+	unlock_timer_base(base, flags);
+	now = evl_read_clock(timer->clock);
+	if (expiry <= now)
+		return ktime_set(0, 1);  /* Will elapse shortly. */
+
+	return ktime_sub(expiry, now);
+}
+EXPORT_SYMBOL_GPL(__evl_get_timer_delta);
+
+#ifdef CONFIG_SMP
+
+static inline int get_clock_cpu(struct evl_clock *clock, int cpu)
+{
+	/*
+	 * Check a CPU number against the possible set of CPUs
+	 * receiving events from the underlying clock device. If the
+	 * suggested CPU does not receive events from this device,
+	 * return the first one which does instead.
+	 *
+	 * NOTE: we have run queues initialized for all online CPUs,
+	 * we can program and receive clock ticks on any of them. So
+	 * there is no point in restricting the valid CPU set to
+	 * evl_cpu_affinity, which specifically refers to the set of
+	 * CPUs which may run EVL threads. Although receiving a clock
+	 * tick for waking up a thread living on a remote CPU is not
+	 * optimal since this involves IPI-signaled rescheds, this is
+	 * still acceptable.
+	 */
+	if (cpumask_test_cpu(cpu, &clock->affinity))
+		return cpu;
+
+	return cpumask_first(&clock->affinity);
+}
+
+#else
+
+static inline int get_clock_cpu(struct evl_clock *clock, int cpu)
+{
+	return 0;
+}
+
+#endif /* CONFIG_SMP */
+
+void __evl_init_timer(struct evl_timer *timer,
+		struct evl_clock *clock,
+		void (*handler)(struct evl_timer *timer),
+		struct evl_rq *rq,
+		const char *name,
+		int flags)
+{
+	int cpu;
+
+	timer->clock = clock;
+	evl_tdate(timer) = EVL_INFINITE;
+	evl_set_timer_priority(timer, EVL_TIMER_STDPRIO);
+	timer->status = EVL_TIMER_DEQUEUED|(flags & EVL_TIMER_INIT_MASK);
+	timer->handler = handler;
+	timer->interval = EVL_INFINITE;
+
+	/*
+	 * Set the timer affinity to the CPU rq is on if given, or the
+	 * first CPU which may run EVL threads otherwise.
+	 */
+	cpu = rq ?
+		get_clock_cpu(clock->master, evl_rq_cpu(rq)) :
+		cpumask_first(&evl_cpu_affinity);
+#ifdef CONFIG_SMP
+	timer->rq = evl_cpu_rq(cpu);
+#endif
+	timer->base = evl_percpu_timers(clock, cpu);
+	timer->clock = clock;
+	timer->name = name ?: "<timer>";
+	evl_reset_timer_stats(timer);
+}
+EXPORT_SYMBOL_GPL(__evl_init_timer);
+
+void evl_set_timer_gravity(struct evl_timer *timer, int gravity)
+{
+	struct evl_timerbase *base;
+	unsigned long flags;
+
+	base = lock_timer_base(timer, &flags);
+	timer->status &= ~EVL_TIMER_GRAVITY_MASK;
+	timer->status |= gravity;
+	unlock_timer_base(base, flags);
+
+}
+EXPORT_SYMBOL_GPL(evl_set_timer_gravity);
+
+void evl_destroy_timer(struct evl_timer *timer)
+{
+	evl_stop_timer(timer);
+	timer->status |= EVL_TIMER_KILLED;
+#ifdef CONFIG_SMP
+	timer->rq = NULL;
+#endif
+	timer->base = NULL;
+}
+EXPORT_SYMBOL_GPL(evl_destroy_timer);
+
+/*
+ * evl_move_timer - change the reference clock and/or the CPU
+ *                  affinity of a timer
+ * @timer:      timer to modify
+ * @clock:      reference clock
+ * @rq:         runqueue to assign the timer to
+ *
+ * oob stage stalled on entry.
+ */
+void evl_move_timer(struct evl_timer *timer,
+		struct evl_clock *clock, struct evl_rq *rq)
+{
+	struct evl_timerbase *old_base, *new_base;
+	struct evl_clock *master = clock->master;
+	unsigned long flags;
+	int cpu;
+
+	EVL_WARN_ON_ONCE(CORE, !oob_irqs_disabled());
+
+	trace_evl_timer_move(timer, clock, evl_rq_cpu(rq));
+
+	/*
+	 * Find out which CPU is best suited for managing this timer,
+	 * preferably picking evl_rq_cpu(rq) if the ticking device
+	 * moving the timer clock beats on that CPU. Otherwise, pick
+	 * the first CPU from the clock affinity mask if set.
+	 */
+	cpu = get_clock_cpu(clock->master, evl_rq_cpu(rq));
+	rq = evl_cpu_rq(cpu);
+
+	old_base = lock_timer_base(timer, &flags);
+
+	if (evl_timer_on_rq(timer, rq) && clock == timer->clock) {
+		unlock_timer_base(old_base, flags);
+		return;
+	}
+
+	new_base = evl_percpu_timers(master, cpu);
+
+	if (timer->status & EVL_TIMER_RUNNING) {
+		stop_timer_locked(timer);
+		unlock_timer_base(old_base, flags);
+		flags = hard_local_irq_save();
+		double_timer_base_lock(old_base, new_base);
+#ifdef CONFIG_SMP
+		timer->rq = rq;
+#endif
+		timer->base = new_base;
+		timer->clock = clock;
+		evl_enqueue_timer(timer, &new_base->q);
+		if (timer_at_front(timer))
+			evl_program_remote_tick(clock, rq);
+		double_timer_base_unlock(old_base, new_base);
+		hard_local_irq_restore(flags);
+	} else {
+#ifdef CONFIG_SMP
+		timer->rq = rq;
+#endif
+		timer->base = new_base;
+		timer->clock = clock;
+		unlock_timer_base(old_base, flags);
+	}
+}
+EXPORT_SYMBOL_GPL(evl_move_timer);
+
+unsigned long evl_get_timer_overruns(struct evl_timer *timer)
+{
+	unsigned long overruns = 0, flags;
+	struct evl_timerbase *base;
+	struct evl_thread *thread;
+	struct evl_tqueue *tq;
+	ktime_t now, delta;
+
+	now = evl_read_clock(timer->clock);
+	base = lock_timer_base(timer, &flags);
+
+	delta = ktime_sub(now, evl_get_timer_next_date(timer));
+	if (likely(delta < timer->interval))
+		goto done;
+
+	overruns = ktime_divns(delta, ktime_to_ns(timer->interval));
+	timer->pexpect_ticks += overruns;
+	if (!evl_timer_is_running(timer))
+		goto done;
+
+	EVL_WARN_ON_ONCE(CORE, (timer->status &
+						(EVL_TIMER_DEQUEUED|EVL_TIMER_PERIODIC))
+			!= EVL_TIMER_PERIODIC);
+	tq = &base->q;
+	evl_dequeue_timer(timer, tq);
+	while (evl_tdate(timer) < now) {
+		timer->periodic_ticks++;
+		evl_update_timer_date(timer);
+	}
+
+	program_timer(timer, tq);
+done:
+	timer->pexpect_ticks++;
+
+	unlock_timer_base(base, flags);
+
+	/*
+	 * Hide overruns due to the most recent ptracing session from
+	 * the caller.
+	 */
+	thread = evl_current();
+	if (thread->local_info & T_HICCUP)
+		return 0;
+
+	return overruns;
+}
+EXPORT_SYMBOL_GPL(evl_get_timer_overruns);
+
+static __always_inline
+bool date_is_earlier(struct evl_tnode *left,
+		struct evl_tnode *right)
+{
+	return left->date < right->date
+		|| (left->date == right->date && left->prio > right->prio);
+}
+
+void evl_insert_tnode(struct evl_tqueue *tq, struct evl_tnode *node)
+{
+	struct rb_node **new = &tq->root.rb_node, *parent = NULL;
+
+	if (!tq->head)
+		tq->head = node;
+	else if (date_is_earlier(node, tq->head)) {
+		parent = &tq->head->rb;
+		new = &parent->rb_left;
+		tq->head = node;
+	} else while (*new) {
+			struct evl_tnode *i = container_of(*new, struct evl_tnode, rb);
+
+			parent = *new;
+			if (date_is_earlier(node, i))
+				new = &((*new)->rb_left);
+			else
+				new = &((*new)->rb_right);
+		}
+
+	rb_link_node(&node->rb, parent, new);
+	rb_insert_color(&node->rb, &tq->root);
+}
+EXPORT_SYMBOL_GPL(evl_insert_tnode);
diff --git a/kernel/evl/trace.c b/kernel/evl/trace.c
new file mode 100644
index 000000000000..ee9a7122a46f
--- /dev/null
+++ b/kernel/evl/trace.c
@@ -0,0 +1,89 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/uaccess.h>
+#include <evl/factory.h>
+#include <uapi/evl/trace.h>
+#include <trace/events/evl.h>
+
+static long trace_common_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	long ret = 0;
+
+	switch (cmd) {
+	case EVL_TRCIOC_SNAPSHOT:
+#ifdef CONFIG_TRACER_SNAPSHOT
+		tracing_snapshot();
+#endif
+		break;
+	default:
+		ret = -ENOTTY;
+	}
+
+	return ret;
+}
+
+static long trace_oob_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	return trace_common_ioctl(filp, cmd, arg);
+}
+
+static notrace ssize_t
+trace_oob_write(struct file *filp,
+		const char __user *u_buf, size_t count)
+{
+	char buf[128];
+	int ret;
+
+	if (count >= sizeof(buf))
+		count = sizeof(buf) - 1;
+
+	/* May be called from in-band context too. */
+	ret = raw_copy_from_user(buf, u_buf, count);
+	if (ret)
+		return -EFAULT;
+
+	buf[count] = '\0';
+
+	/*
+	 * trace_printk() is slow and triggers a scary and noisy
+	 * warning at boot. Prefer a common tracepoint for issuing the
+	 * message to the log.
+	 */
+	trace_evl_trace(buf);
+
+	return count;
+}
+
+static long trace_ioctl(struct file *filp, unsigned int cmd,
+			unsigned long arg)
+{
+	return trace_common_ioctl(filp, cmd, arg);
+}
+
+static notrace
+ssize_t trace_write(struct file *filp,
+		const char __user *u_buf, size_t count,
+		loff_t *ppos)
+{
+	return trace_oob_write(filp, u_buf, count);
+}
+
+static const struct file_operations trace_fops = {
+	.unlocked_ioctl	=	trace_ioctl,
+	.write		=	trace_write,
+	.oob_ioctl	=	trace_oob_ioctl,
+	.oob_write	=	trace_oob_write,
+};
+
+struct evl_factory evl_trace_factory = {
+	.name	=	"trace",
+	.fops	=	&trace_fops,
+	.flags	=	EVL_FACTORY_SINGLE,
+};
diff --git a/kernel/evl/wait.c b/kernel/evl/wait.c
new file mode 100644
index 000000000000..d3a3e0a7fdaa
--- /dev/null
+++ b/kernel/evl/wait.c
@@ -0,0 +1,207 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Derived from Xenomai Cobalt, https://xenomai.org/
+ * Copyright (C) 2001, 2019 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <evl/sched.h>
+#include <evl/wait.h>
+#include <evl/thread.h>
+#include <evl/clock.h>
+#include <uapi/evl/signal.h>
+#include <trace/events/evl.h>
+
+void __evl_init_wait(struct evl_wait_queue *wq,
+		struct evl_clock *clock, int flags,
+		const char *name, struct lock_class_key *key)
+{
+	wq->flags = flags;
+	wq->clock = clock;
+	evl_spin_lock_init(&wq->lock);
+	wq->wchan.reorder_wait = evl_reorder_wait;
+	wq->wchan.follow_depend = evl_follow_wait_depend;
+	INIT_LIST_HEAD(&wq->wchan.wait_list);
+	lockdep_set_class_and_name(&wq->lock._lock, key, name);
+}
+EXPORT_SYMBOL_GPL(__evl_init_wait);
+
+void evl_destroy_wait(struct evl_wait_queue *wq)
+{
+	evl_flush_wait(wq, T_RMID);
+	evl_schedule();
+}
+EXPORT_SYMBOL_GPL(evl_destroy_wait);
+
+/* wq->lock held, irqs off */
+void evl_add_wait_queue(struct evl_wait_queue *wq, ktime_t timeout,
+			enum evl_tmode timeout_mode)
+{
+	struct evl_thread *curr = evl_current();
+
+	assert_evl_lock(&wq->lock);
+
+	trace_evl_wait(wq);
+
+	if ((curr->state & T_WOLI) &&
+		atomic_read(&curr->inband_disable_count) > 0)
+		evl_signal_thread(curr, SIGDEBUG, SIGDEBUG_MUTEX_SLEEP);
+
+	if (!(wq->flags & EVL_WAIT_PRIO))
+		list_add_tail(&curr->wait_next, &wq->wchan.wait_list);
+	else
+		list_add_priff(curr, &wq->wchan.wait_list, wprio, wait_next);
+
+	evl_sleep_on(timeout, timeout_mode, wq->clock, &wq->wchan);
+}
+EXPORT_SYMBOL_GPL(evl_add_wait_queue);
+
+/* wq->lock held, irqs off */
+struct evl_thread *evl_wake_up(struct evl_wait_queue *wq,
+			struct evl_thread *waiter)
+{
+	assert_evl_lock(&wq->lock);
+
+	trace_evl_wake_up(wq);
+
+	if (list_empty(&wq->wchan.wait_list))
+		waiter = NULL;
+	else {
+		if (waiter == NULL)
+			waiter = list_first_entry(&wq->wchan.wait_list,
+						struct evl_thread, wait_next);
+		list_del_init(&waiter->wait_next);
+		evl_wakeup_thread(waiter, T_PEND, 0);
+	}
+
+	return waiter;
+}
+EXPORT_SYMBOL_GPL(evl_wake_up);
+
+/* wq->lock held, irqs off */
+void evl_flush_wait_locked(struct evl_wait_queue *wq, int reason)
+{
+	struct evl_thread *waiter, *tmp;
+
+	assert_evl_lock(&wq->lock);
+
+	trace_evl_flush_wait(wq);
+
+	list_for_each_entry_safe(waiter, tmp, &wq->wchan.wait_list, wait_next) {
+		list_del_init(&waiter->wait_next);
+		evl_wakeup_thread(waiter, T_PEND, reason);
+	}
+}
+EXPORT_SYMBOL_GPL(evl_flush_wait_locked);
+
+void evl_flush_wait(struct evl_wait_queue *wq, int reason)
+{
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&wq->lock, flags);
+	evl_flush_wait_locked(wq, reason);
+	evl_spin_unlock_irqrestore(&wq->lock, flags);
+}
+EXPORT_SYMBOL_GPL(evl_flush_wait);
+
+static inline struct evl_wait_queue *
+wchan_to_wait_queue(struct evl_wait_channel *wchan)
+{
+	return container_of(wchan, struct evl_wait_queue, wchan);
+}
+
+/* thread->lock held, irqs off */
+int evl_reorder_wait(struct evl_thread *waiter, struct evl_thread *originator)
+{
+	struct evl_wait_queue *wq = wchan_to_wait_queue(waiter->wchan);
+
+	assert_evl_lock(&waiter->lock);
+	assert_evl_lock(&originator->lock);
+
+	evl_spin_lock(&wq->lock);
+
+	if (wq->flags & EVL_WAIT_PRIO) {
+		list_del(&waiter->wait_next);
+		list_add_priff(waiter, &wq->wchan.wait_list, wprio, wait_next);
+	}
+
+	evl_spin_unlock(&wq->lock);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_reorder_wait);
+
+/* originator->lock held, irqs off */
+int evl_follow_wait_depend(struct evl_wait_channel *wchan,
+			struct evl_thread *originator)
+{
+	return 0;
+}
+EXPORT_SYMBOL_GPL(evl_follow_wait_depend);
+
+int evl_wait_schedule(struct evl_wait_queue *wq)
+{
+	struct evl_thread *curr = evl_current();
+	unsigned long flags;
+	int ret = 0, info;
+
+	evl_schedule();
+
+	/*
+	 * Upon return from schedule, we may or may not have been
+	 * unlinked from the wait channel, depending on whether we
+	 * actually resumed as a result of receiving a wakeup signal
+	 * from evl_wake_up() or evl_flush_wait(). The following logic
+	 * applies in order, depending on the information flags:
+	 *
+	 * - if T_RMID is set, evl_flush_wait() removed us from the
+	 * waitqueue before the wait channel got destroyed, and
+	 * therefore cannot be referred to anymore since it may be
+	 * stale: -EIDRM is returned.
+	 *
+	 * - if neither T_TIMEO or T_BREAK are set, we got a wakeup
+	 * and success is returned (zero). In addition, the caller may
+	 * need to check for T_BCAST if the signal is not paired with
+	 * a condition but works as a pulse instead.
+	 *
+	 * - otherwise, if any of T_TIMEO or T_BREAK is set:
+	 *
+	 *   + if we are still linked to the waitqueue, the wait was
+	 * aborted prior to receiving any wakeup so we translate the
+	 * information bit to the corresponding error status,
+	 * i.e. -ETIMEDOUT or -EINTR respectively.
+	 *
+	 *  + in the rare case where we have been unlinked and we also
+	 * got any of T_TIMEO|T_BREAK, then both the wakeup signal and
+	 * some abort condition have occurred simultaneously on
+	 * different cores, in which case we ignore the latter. In the
+	 * particular case of T_BREAK caused by
+	 * handle_sigwake_event(), T_KICKED will be detected on the
+	 * return path from the OOB syscall, yielding -ERESTARTSYS as
+	 * expected.
+	 */
+	info = evl_current()->info;
+	if (info & T_RMID)
+		return -EIDRM;
+
+	if (info & (T_TIMEO|T_BREAK)) {
+		evl_spin_lock_irqsave(&wq->lock, flags);
+		if (!list_empty(&curr->wait_next)) {
+			list_del_init(&curr->wait_next);
+			if (info & T_TIMEO)
+				ret = -ETIMEDOUT;
+			else if (info & T_BREAK)
+				ret = -EINTR;
+		}
+		evl_spin_unlock_irqrestore(&wq->lock, flags);
+	} else if (IS_ENABLED(CONFIG_EVL_DEBUG_CORE)) {
+		bool empty;
+		evl_spin_lock_irqsave(&wq->lock, flags);
+		empty = list_empty(&curr->wait_next);
+		evl_spin_unlock_irqrestore(&wq->lock, flags);
+		EVL_WARN_ON_ONCE(CORE, !empty);
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(evl_wait_schedule);
diff --git a/kernel/evl/xbuf.c b/kernel/evl/xbuf.c
new file mode 100644
index 000000000000..7f01e74fb907
--- /dev/null
+++ b/kernel/evl/xbuf.c
@@ -0,0 +1,760 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2018 Philippe Gerum  <rpm@xenomai.org>
+ */
+
+#include <linux/types.h>
+#include <linux/slab.h>
+#include <linux/kernel.h>
+#include <linux/poll.h>
+#include <linux/irq_work.h>
+#include <linux/wait.h>
+#include <linux/log2.h>
+#include <linux/atomic.h>
+#include <evl/wait.h>
+#include <evl/thread.h>
+#include <evl/clock.h>
+#include <evl/xbuf.h>
+#include <evl/memory.h>
+#include <evl/lock.h>
+#include <evl/factory.h>
+#include <evl/sched.h>
+#include <evl/poll.h>
+#include <evl/flag.h>
+#include <uapi/evl/xbuf.h>
+
+struct xbuf_ring {
+	void *bufmem;
+	size_t bufsz;
+	size_t fillsz;
+	unsigned int rdoff;
+	unsigned int rdrsvd;
+	int rdpending;
+	unsigned int wroff;
+	unsigned int wrrsvd;
+	int wrpending;
+	unsigned long (*lock)(struct xbuf_ring *ring);
+	void (*unlock)(struct xbuf_ring *ring, unsigned long flags);
+	int (*wait_input)(struct xbuf_ring *ring, size_t len, size_t avail);
+	void (*signal_input)(struct xbuf_ring *ring, bool sigpoll);
+	int (*wait_output)(struct xbuf_ring *ring, size_t len);
+	void (*signal_output)(struct xbuf_ring *ring, bool sigpoll);
+};
+
+struct xbuf_inbound {		/* oob_write->read */
+	struct wait_queue_head i_event;
+	struct evl_flag o_event;
+	struct irq_work irq_work;
+	struct xbuf_ring ring;
+	evl_spinlock_t lock;
+};
+
+struct xbuf_outbound {		/* write->oob_read */
+	struct evl_wait_queue i_event;
+	struct wait_queue_head o_event;
+	struct irq_work irq_work;
+	struct xbuf_ring ring;
+};
+
+struct evl_xbuf {
+	struct evl_element element;
+	struct xbuf_inbound ibnd;
+	struct xbuf_outbound obnd;
+	struct evl_poll_head poll_head;
+};
+
+struct xbuf_rdesc {
+	char *buf;
+	char *buf_ptr;
+	size_t count;
+	int (*xfer)(struct xbuf_rdesc *dst, char *src, size_t len);
+};
+
+static int write_to_user(struct xbuf_rdesc *dst, char *src, size_t len)
+{
+	return raw_copy_to_user(dst->buf_ptr, src, len);
+}
+
+static int write_to_kernel(struct xbuf_rdesc *dst, char *src, size_t len)
+{
+	memcpy(dst->buf_ptr, src, len);
+
+	return 0;
+}
+
+struct xbuf_wdesc {
+	const char *buf;
+	const char *buf_ptr;
+	size_t count;
+	int (*xfer)(char *dst, struct xbuf_wdesc *src, size_t len);
+};
+
+static int read_from_user(char *dst, struct xbuf_wdesc *src, size_t len)
+{
+	return raw_copy_from_user(dst, src->buf_ptr, len);
+}
+
+static int read_from_kernel(char *dst, struct xbuf_wdesc *src, size_t len)
+{
+	memcpy(dst, src->buf_ptr, len);
+
+	return 0;
+}
+
+static ssize_t do_xbuf_read(struct xbuf_ring *ring,
+			struct xbuf_rdesc *rd, int f_flags)
+{
+	ssize_t len, ret, rbytes, n;
+	unsigned int rdoff, avail;
+	unsigned long flags;
+	bool sigpoll;
+	int xret;
+
+	len = rd->count;
+	if (len == 0)
+		return 0;
+
+	if (ring->bufsz == 0)
+		return -ENOBUFS;
+retry:
+	rd->buf_ptr = rd->buf;
+
+	for (;;) {
+		flags = ring->lock(ring);
+		/*
+		 * We should be able to read a complete message of the
+		 * requested length if O_NONBLOCK is clear. If set and
+		 * some bytes are available, return them. Otherwise,
+		 * send -EAGAIN. The actual count of bytes available
+		 * for reading excludes the data which might be in
+		 * flight to userland as we drop the lock during copy.
+		 */
+		avail = ring->fillsz - ring->rdrsvd;
+		if (avail < len) {
+			if (f_flags & O_NONBLOCK) {
+				if (avail == 0) {
+					ret = -EAGAIN;
+					break;
+				}
+				len = avail;
+			} else {
+				if (len > ring->bufsz) {
+					ret = -EINVAL;
+					break;
+				}
+				ring->unlock(ring, flags);
+				ret = ring->wait_input(ring, len, avail);
+				if (unlikely(ret)) {
+					if (ret == -EAGAIN) {
+						len = avail;
+						goto retry;
+					}
+					return ret;
+				}
+				continue;
+			}
+		}
+
+		/* Reserve a read slot into the circular buffer. */
+		rdoff = ring->rdoff;
+		ring->rdoff = (rdoff + len) % ring->bufsz;
+		ring->rdpending++;
+		ring->rdrsvd += len;
+		rbytes = ret = len;
+
+		do {
+			if (rdoff + rbytes > ring->bufsz)
+				n = ring->bufsz - rdoff;
+			else
+				n = rbytes;
+
+			/*
+			 * Drop the lock before copying data to
+			 * user. The read slot is consumed in any
+			 * case: the non-copied portion of the message
+			 * is lost on bad write.
+			 */
+			ring->unlock(ring, flags);
+
+			xret = rd->xfer(rd, ring->bufmem + rdoff, n);
+			if (xret)
+				return -EFAULT;
+
+			flags = ring->lock(ring);
+			rd->buf_ptr += n;
+			rbytes -= n;
+			rdoff = (rdoff + n) % ring->bufsz;
+		} while (rbytes > 0);
+
+		if (--ring->rdpending == 0) {
+			/* sigpoll := full -> non-full transition. */
+			sigpoll = ring->fillsz == ring->bufsz;
+			ring->fillsz -= ring->rdrsvd;
+			ring->rdrsvd = 0;
+			ring->signal_output(ring, sigpoll);
+		}
+		break;
+	}
+
+	ring->unlock(ring, flags);
+
+	evl_schedule();
+
+	return ret;
+}
+
+static ssize_t do_xbuf_write(struct xbuf_ring *ring,
+			struct xbuf_wdesc *wd, int f_flags)
+{
+	ssize_t len, ret, wbytes, n;
+	unsigned int wroff, avail;
+	unsigned long flags;
+	int xret;
+
+	len = wd->count;
+	if (len == 0)
+		return 0;
+
+	if (ring->bufsz == 0)
+		return -ENOBUFS;
+
+	wd->buf_ptr = wd->buf;
+
+	for (;;) {
+		flags = ring->lock(ring);
+		/*
+		 * No short or scattered writes: we should write the
+		 * entire message atomically or block.
+		 */
+		avail = ring->fillsz + ring->wrrsvd;
+		if (avail + len > ring->bufsz) {
+			ring->unlock(ring, flags);
+
+			if (f_flags & O_NONBLOCK)
+				return -EAGAIN;
+
+			ret = ring->wait_output(ring, len);
+			if (unlikely(ret))
+				return ret;
+
+			continue;
+		}
+
+		/* Reserve a write slot into the circular buffer. */
+		wroff = ring->wroff;
+		ring->wroff = (wroff + len) % ring->bufsz;
+		ring->wrpending++;
+		ring->wrrsvd += len;
+		wbytes = ret = len;
+
+		do {
+			if (wroff + wbytes > ring->bufsz)
+				n = ring->bufsz - wroff;
+			else
+				n = wbytes;
+
+			/*
+			 * We have to drop the lock while reading in
+			 * data, but we can't rollback on bad read
+			 * from user because some other thread might
+			 * have populated the memory ahead of our
+			 * write slot already: bluntly clear the
+			 * unavailable bytes on copy error.
+			 */
+			ring->unlock(ring, flags);
+			xret = wd->xfer(ring->bufmem + wroff, wd, n);
+			flags = ring->lock(ring);
+			if (xret) {
+				memset(ring->bufmem + wroff + n - xret, 0, xret);
+				ring->unlock(ring, flags);
+				return -EFAULT;
+			}
+
+			wd->buf_ptr += n;
+			wbytes -= n;
+			wroff = (wroff + n) % ring->bufsz;
+		} while (wbytes > 0);
+
+		if (--ring->wrpending == 0) {
+			ring->fillsz += ring->wrrsvd;
+			ring->wrrsvd = 0;
+			ring->signal_input(ring, ring->fillsz == len);
+		}
+
+		ring->unlock(ring, flags);
+		break;
+	}
+
+	evl_schedule();
+
+	return ret;
+}
+
+static unsigned long inbound_lock(struct xbuf_ring *ring)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, ibnd.ring);
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&xbuf->ibnd.lock, flags);
+
+	return flags;
+}
+
+static void inbound_unlock(struct xbuf_ring *ring, unsigned long flags)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, ibnd.ring);
+
+	evl_spin_unlock_irqrestore(&xbuf->ibnd.lock, flags);
+}
+
+static int inbound_wait_input(struct xbuf_ring *ring, size_t len, size_t avail)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, ibnd.ring);
+	struct xbuf_inbound *ibnd = &xbuf->ibnd;
+	unsigned long flags;
+	bool o_blocked;
+
+	/*
+	 * Check whether writers are already waiting for sending data,
+	 * while we are about to wait for receiving some. In such a
+	 * case, we have a pathological use of the buffer due to a
+	 * miscalculated size. We must allow for a short read to
+	 * prevent a deadlock.
+	 */
+	if (avail > 0) {
+		evl_lock_flag(&ibnd->o_event, flags);
+		o_blocked = !!evl_wait_flag_head(&ibnd->o_event);
+		evl_unlock_flag(&ibnd->o_event, flags);
+		if (o_blocked)
+			return -EAGAIN;
+	}
+
+	return wait_event_interruptible(ibnd->i_event, ring->fillsz >= len);
+}
+
+static void resume_inband_reader(struct irq_work *work)
+{
+	struct evl_xbuf *xbuf = container_of(work, struct evl_xbuf, ibnd.irq_work);
+
+	wake_up(&xbuf->ibnd.i_event);
+}
+
+/* ring locked, irqsoff */
+static void inbound_signal_input(struct xbuf_ring *ring, bool sigpoll)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, ibnd.ring);
+
+	irq_work_queue(&xbuf->ibnd.irq_work);
+}
+
+static int inbound_wait_output(struct xbuf_ring *ring, size_t len)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, ibnd.ring);
+
+	return evl_wait_flag(&xbuf->ibnd.o_event);
+}
+
+static void inbound_signal_output(struct xbuf_ring *ring, bool sigpoll)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, ibnd.ring);
+
+	if (sigpoll)
+		evl_signal_poll_events(&xbuf->poll_head, POLLOUT|POLLWRNORM);
+
+	evl_raise_flag(&xbuf->ibnd.o_event);
+}
+
+static ssize_t xbuf_read(struct file *filp, char __user *u_buf,
+			size_t count, loff_t *ppos)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+	struct xbuf_rdesc rd = {
+		.buf = u_buf,
+		.count = count,
+		.xfer = write_to_user,
+	};
+
+	return do_xbuf_read(&xbuf->ibnd.ring, &rd, filp->f_flags);
+}
+
+static ssize_t xbuf_write(struct file *filp, const char __user *u_buf,
+			size_t count, loff_t *ppos)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+	struct xbuf_wdesc wd = {
+		.buf = u_buf,
+		.count = count,
+		.xfer = read_from_user,
+	};
+
+	return do_xbuf_write(&xbuf->obnd.ring, &wd, filp->f_flags);
+}
+
+static long xbuf_ioctl(struct file *filp,
+		unsigned int cmd, unsigned long arg)
+{
+	return -ENOTTY;
+}
+
+static __poll_t xbuf_poll(struct file *filp, poll_table *wait)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+	struct xbuf_outbound *obnd = &xbuf->obnd;
+	struct xbuf_inbound *ibnd = &xbuf->ibnd;
+	unsigned long flags;
+	__poll_t ready = 0;
+
+	poll_wait(filp, &ibnd->i_event, wait);
+	poll_wait(filp, &obnd->o_event, wait);
+
+	flags = ibnd->ring.lock(&ibnd->ring);
+
+	if (ibnd->ring.fillsz > 0)
+		ready |= POLLIN|POLLRDNORM;
+
+	ibnd->ring.unlock(&ibnd->ring, flags);
+
+	flags = obnd->ring.lock(&obnd->ring);
+
+	if (obnd->ring.fillsz < obnd->ring.bufsz)
+		ready |= POLLOUT|POLLWRNORM;
+
+	obnd->ring.unlock(&obnd->ring, flags);
+
+	return ready;
+}
+
+static long xbuf_oob_ioctl(struct file *filp,
+			unsigned int cmd, unsigned long arg)
+{
+	return -ENOTTY;
+}
+
+static unsigned long outbound_lock(struct xbuf_ring *ring)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, obnd.ring);
+	unsigned long flags;
+
+	evl_spin_lock_irqsave(&xbuf->obnd.i_event.lock, flags);
+
+	return flags;
+}
+
+static void outbound_unlock(struct xbuf_ring *ring, unsigned long flags)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, obnd.ring);
+
+	evl_spin_unlock_irqrestore(&xbuf->obnd.i_event.lock, flags);
+}
+
+static int outbound_wait_input(struct xbuf_ring *ring, size_t len, size_t avail)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, obnd.ring);
+	struct xbuf_outbound *obnd = &xbuf->obnd;
+
+	if (avail > 0 && wq_has_sleeper(&obnd->o_event))
+		return -EAGAIN;
+
+	return evl_wait_event(&obnd->i_event, ring->fillsz >= len);
+}
+
+/* obnd.i_event locked, irqsoff */
+static void outbound_signal_input(struct xbuf_ring *ring, bool sigpoll)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, obnd.ring);
+
+	if (sigpoll)
+		evl_signal_poll_events(&xbuf->poll_head, POLLIN|POLLRDNORM);
+
+	evl_flush_wait_locked(&xbuf->obnd.i_event, 0);
+}
+
+static int outbound_wait_output(struct xbuf_ring *ring, size_t len)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, obnd.ring);
+
+	return wait_event_interruptible(xbuf->obnd.o_event,
+					ring->fillsz + len <= ring->bufsz);
+}
+
+static void resume_inband_writer(struct irq_work *work)
+{
+	struct evl_xbuf *xbuf = container_of(work, struct evl_xbuf, obnd.irq_work);
+
+	wake_up(&xbuf->obnd.o_event);
+}
+
+static void outbound_signal_output(struct xbuf_ring *ring, bool sigpoll)
+{
+	struct evl_xbuf *xbuf = container_of(ring, struct evl_xbuf, obnd.ring);
+
+	irq_work_queue(&xbuf->obnd.irq_work);
+}
+
+static ssize_t xbuf_oob_read(struct file *filp,
+			char __user *u_buf, size_t count)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+	struct xbuf_rdesc rd = {
+		.buf = u_buf,
+		.count = count,
+		.xfer = write_to_user,
+	};
+
+	return do_xbuf_read(&xbuf->obnd.ring, &rd, filp->f_flags);
+}
+
+static ssize_t xbuf_oob_write(struct file *filp,
+			const char __user *u_buf, size_t count)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+	struct xbuf_wdesc wd = {
+		.buf = u_buf,
+		.count = count,
+		.xfer = read_from_user,
+	};
+
+	return do_xbuf_write(&xbuf->ibnd.ring, &wd, filp->f_flags);
+}
+
+static __poll_t xbuf_oob_poll(struct file *filp,
+			struct oob_poll_wait *wait)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+	struct xbuf_outbound *obnd = &xbuf->obnd;
+	struct xbuf_inbound *ibnd = &xbuf->ibnd;
+	unsigned long flags;
+	__poll_t ready = 0;
+
+	evl_poll_watch(&xbuf->poll_head, wait, NULL);
+
+	flags = obnd->ring.lock(&obnd->ring);
+
+	if (obnd->ring.fillsz > 0)
+		ready |= POLLIN|POLLRDNORM;
+
+	obnd->ring.unlock(&obnd->ring, flags);
+
+	flags = ibnd->ring.lock(&ibnd->ring);
+
+	if (ibnd->ring.fillsz < ibnd->ring.bufsz)
+		ready |= POLLOUT|POLLWRNORM;
+
+	ibnd->ring.unlock(&ibnd->ring, flags);
+
+	return ready;
+}
+
+static int xbuf_release(struct inode *inode, struct file *filp)
+{
+	struct evl_xbuf *xbuf = element_of(filp, struct evl_xbuf);
+
+	evl_flush_wait(&xbuf->obnd.i_event, T_RMID);
+	evl_flush_flag(&xbuf->ibnd.o_event, T_RMID);
+
+	return evl_release_element(inode, filp);
+}
+
+static const struct file_operations xbuf_fops = {
+	.open		= evl_open_element,
+	.release	= xbuf_release,
+	.unlocked_ioctl	= xbuf_ioctl,
+	.read		= xbuf_read,
+	.write		= xbuf_write,
+	.poll		= xbuf_poll,
+	.oob_ioctl	= xbuf_oob_ioctl,
+	.oob_read	= xbuf_oob_read,
+	.oob_write	= xbuf_oob_write,
+	.oob_poll	= xbuf_oob_poll,
+};
+
+struct evl_xbuf *evl_get_xbuf(int efd, struct evl_file **efilpp)
+{
+	struct evl_file *efilp = evl_get_file(efd);
+
+	if (efilp && efilp->filp->f_op == &xbuf_fops) {
+		*efilpp = efilp;
+		return element_of(efilp->filp, struct evl_xbuf);
+	}
+
+	return NULL;
+}
+EXPORT_SYMBOL_GPL(evl_get_xbuf);
+
+void evl_put_xbuf(struct evl_file *efilp)
+{
+	evl_put_file(efilp);
+}
+EXPORT_SYMBOL_GPL(evl_put_xbuf);
+
+ssize_t evl_read_xbuf(struct evl_xbuf *xbuf, void *buf,
+		size_t count, int f_flags)
+{
+	struct xbuf_rdesc rd = {
+		.buf = buf,
+		.count = count,
+		.xfer = write_to_kernel,
+	};
+
+	if (!(f_flags & O_NONBLOCK) && evl_cannot_block())
+		return -EPERM;
+
+	return do_xbuf_read(&xbuf->obnd.ring, &rd, f_flags);
+}
+EXPORT_SYMBOL_GPL(evl_read_xbuf);
+
+ssize_t evl_write_xbuf(struct evl_xbuf *xbuf, const void *buf,
+		size_t count, int f_flags)
+{
+	struct xbuf_wdesc wd = {
+		.buf = buf,
+		.count = count,
+		.xfer = read_from_kernel,
+	};
+
+	if (!(f_flags & O_NONBLOCK) && evl_cannot_block())
+		return -EPERM;
+
+	return do_xbuf_write(&xbuf->ibnd.ring, &wd, f_flags);
+}
+EXPORT_SYMBOL_GPL(evl_write_xbuf);
+
+static struct evl_element *
+xbuf_factory_build(struct evl_factory *fac, const char *name,
+		void __user *u_attrs, u32 *state_offp)
+{
+	void *i_bufmem = NULL, *o_bufmem = NULL;
+	struct evl_xbuf_attrs attrs;
+	struct evl_xbuf *xbuf;
+	int ret;
+
+	ret = copy_from_user(&attrs, u_attrs, sizeof(attrs));
+	if (ret)
+		return ERR_PTR(-EFAULT);
+
+	/* LART */
+	if ((attrs.i_bufsz == 0 && attrs.o_bufsz == 0) ||
+		order_base_2(attrs.i_bufsz) > 30 ||
+		order_base_2(attrs.o_bufsz) > 30)
+		return ERR_PTR(-EINVAL);
+
+	xbuf = kzalloc(sizeof(*xbuf), GFP_KERNEL);
+	if (xbuf == NULL)
+		return ERR_PTR(-ENOMEM);
+
+	if (attrs.i_bufsz > 0) {
+		i_bufmem = kzalloc(attrs.i_bufsz, GFP_KERNEL);
+		if (i_bufmem == NULL) {
+			ret = -ENOMEM;
+			goto fail_ibufmem;
+		}
+	}
+
+	if (attrs.o_bufsz > 0) {
+		o_bufmem = kzalloc(attrs.o_bufsz, GFP_KERNEL);
+		if (o_bufmem == NULL) {
+			ret = -ENOMEM;
+			goto fail_obufmem;
+		}
+	}
+
+	ret = evl_init_element(&xbuf->element, &evl_xbuf_factory);
+	if (ret)
+		goto fail_element;
+
+	/* Inbound traffic: oob_write() -> read(). */
+	init_waitqueue_head(&xbuf->ibnd.i_event);
+	evl_init_flag(&xbuf->ibnd.o_event);
+	evl_spin_lock_init(&xbuf->ibnd.lock);
+	init_irq_work(&xbuf->ibnd.irq_work, resume_inband_reader);
+	xbuf->ibnd.ring.bufmem = i_bufmem;
+	xbuf->ibnd.ring.bufsz = attrs.i_bufsz;
+	xbuf->ibnd.ring.lock = inbound_lock;
+	xbuf->ibnd.ring.unlock = inbound_unlock;
+	xbuf->ibnd.ring.wait_input = inbound_wait_input;
+	xbuf->ibnd.ring.signal_input = inbound_signal_input;
+	xbuf->ibnd.ring.wait_output = inbound_wait_output;
+	xbuf->ibnd.ring.signal_output = inbound_signal_output;
+
+	/* Outbound traffic: write() -> oob_read(). */
+	evl_init_wait(&xbuf->obnd.i_event, &evl_mono_clock, EVL_WAIT_PRIO);
+	init_waitqueue_head(&xbuf->obnd.o_event);
+	init_irq_work(&xbuf->obnd.irq_work, resume_inband_writer);
+	xbuf->obnd.ring.bufmem = o_bufmem;
+	xbuf->obnd.ring.bufsz = attrs.o_bufsz;
+	xbuf->obnd.ring.lock = outbound_lock;
+	xbuf->obnd.ring.unlock = outbound_unlock;
+	xbuf->obnd.ring.wait_input = outbound_wait_input;
+	xbuf->obnd.ring.signal_input = outbound_signal_input;
+	xbuf->obnd.ring.wait_output = outbound_wait_output;
+	xbuf->obnd.ring.signal_output = outbound_signal_output;
+
+	evl_init_poll_head(&xbuf->poll_head);
+
+	return &xbuf->element;
+
+fail_element:
+	if (o_bufmem)
+		kfree(o_bufmem);
+fail_obufmem:
+	if (i_bufmem)
+		kfree(i_bufmem);
+fail_ibufmem:
+	kfree(xbuf);
+
+	return ERR_PTR(ret);
+}
+
+static void xbuf_factory_dispose(struct evl_element *e)
+{
+	struct evl_xbuf *xbuf;
+
+	xbuf = container_of(e, struct evl_xbuf, element);
+
+	evl_destroy_wait(&xbuf->obnd.i_event);
+	evl_destroy_flag(&xbuf->ibnd.o_event);
+	evl_destroy_element(&xbuf->element);
+	if (xbuf->ibnd.ring.bufmem)
+		kfree(xbuf->ibnd.ring.bufmem);
+	if (xbuf->obnd.ring.bufmem)
+		kfree(xbuf->obnd.ring.bufmem);
+	kfree_rcu(xbuf, element.rcu);
+}
+
+static ssize_t rings_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
+{
+	struct evl_xbuf *xbuf;
+	ssize_t ret;
+
+	xbuf = evl_get_element_by_dev(dev, struct evl_xbuf);
+
+	ret = snprintf(buf, PAGE_SIZE, "%zu %zu %zu %zu\n",
+		xbuf->ibnd.ring.fillsz,
+		xbuf->ibnd.ring.bufsz,
+		xbuf->obnd.ring.fillsz,
+		xbuf->obnd.ring.bufsz);
+
+	evl_put_element(&xbuf->element);
+
+	return ret;
+}
+static DEVICE_ATTR_RO(rings);
+
+static struct attribute *xbuf_attrs[] = {
+	&dev_attr_rings.attr,
+	NULL,
+};
+ATTRIBUTE_GROUPS(xbuf);
+
+struct evl_factory evl_xbuf_factory = {
+	.name	=	EVL_XBUF_DEV,
+	.fops	=	&xbuf_fops,
+	.build =	xbuf_factory_build,
+	.dispose =	xbuf_factory_dispose,
+	.nrdev	=	CONFIG_EVL_NR_XBUFS,
+	.attrs	=	xbuf_groups,
+	.flags	=	EVL_FACTORY_CLONE,
+};
diff --git a/kernel/exit.c b/kernel/exit.c
index a46a50d67002..a175b180efdd 100644
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -14,6 +14,7 @@
 #include <linux/sched/task_stack.h>
 #include <linux/sched/cputime.h>
 #include <linux/interrupt.h>
+#include <linux/irq_pipeline.h>
 #include <linux/module.h>
 #include <linux/capability.h>
 #include <linux/completion.h>
@@ -772,6 +773,7 @@ void __noreturn do_exit(long code)
 	 */
 	raw_spin_lock_irq(&tsk->pi_lock);
 	raw_spin_unlock_irq(&tsk->pi_lock);
+	inband_exit_notify();
 
 	if (unlikely(in_atomic())) {
 		pr_info("note: %s[%d] exited with preempt_count %d\n",
diff --git a/kernel/fork.c b/kernel/fork.c
index 55af6931c6ec..175ce21ce1d2 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -49,6 +49,7 @@
 #include <linux/cpu.h>
 #include <linux/cgroup.h>
 #include <linux/security.h>
+#include <linux/dovetail.h>
 #include <linux/hugetlb.h>
 #include <linux/seccomp.h>
 #include <linux/swap.h>
@@ -904,6 +905,7 @@ static struct task_struct *dup_task_struct(struct task_struct *orig, int node)
 #endif
 
 	setup_thread_stack(tsk, orig);
+	inband_task_init(tsk);
 	clear_user_return_notifier(tsk);
 	clear_tsk_need_resched(tsk);
 	set_task_stack_end_magic(tsk);
@@ -1076,6 +1078,7 @@ static inline void __mmput(struct mm_struct *mm)
 	exit_aio(mm);
 	ksm_exit(mm);
 	khugepaged_exit(mm); /* must run before exit_mmap */
+	inband_cleanup_notify(mm); /* ditto. */
 	exit_mmap(mm);
 	mm_put_huge_zero_page(mm);
 	set_mm_exe_file(mm, NULL);
diff --git a/kernel/irq/Kconfig b/kernel/irq/Kconfig
index f92d9a687372..6477561f6fe4 100644
--- a/kernel/irq/Kconfig
+++ b/kernel/irq/Kconfig
@@ -135,6 +135,20 @@ config GENERIC_IRQ_DEBUGFS
 
 	  If you don't know what to do here, say N.
 
+# Interrupt pipeline
+config HAVE_IRQ_PIPELINE
+	bool
+
+config IRQ_PIPELINE
+	bool "Interrupt pipeline"
+	depends on HAVE_IRQ_PIPELINE
+	select IRQ_DOMAIN
+	default n
+	---help---
+
+	  Activate this option if you want the interrupt pipeline to be
+	  compiled in.
+
 endmenu
 
 config GENERIC_IRQ_MULTI_HANDLER
diff --git a/kernel/irq/Makefile b/kernel/irq/Makefile
index b4f53717d143..b6e43ec9b267 100644
--- a/kernel/irq/Makefile
+++ b/kernel/irq/Makefile
@@ -9,6 +9,8 @@ obj-$(CONFIG_GENERIC_IRQ_CHIP) += generic-chip.o
 obj-$(CONFIG_GENERIC_IRQ_PROBE) += autoprobe.o
 obj-$(CONFIG_IRQ_DOMAIN) += irqdomain.o
 obj-$(CONFIG_IRQ_SIM) += irq_sim.o
+obj-$(CONFIG_IRQ_PIPELINE) += pipeline.o
+obj-$(CONFIG_IRQ_PIPELINE_TORTURE_TEST) += irqptorture.o
 obj-$(CONFIG_PROC_FS) += proc.o
 obj-$(CONFIG_GENERIC_PENDING_IRQ) += migration.o
 obj-$(CONFIG_GENERIC_IRQ_MIGRATION) += cpuhotplug.o
diff --git a/kernel/irq/chip.c b/kernel/irq/chip.c
index b76703b2c0af..c68034bb05dd 100644
--- a/kernel/irq/chip.c
+++ b/kernel/irq/chip.c
@@ -14,6 +14,7 @@
 #include <linux/interrupt.h>
 #include <linux/kernel_stat.h>
 #include <linux/irqdomain.h>
+#include <linux/irq_pipeline.h>
 
 #include <trace/events/irq.h>
 
@@ -48,6 +49,10 @@ int irq_set_chip(unsigned int irq, struct irq_chip *chip)
 
 	if (!chip)
 		chip = &no_irq_chip;
+	else
+		WARN_ONCE(irqs_pipelined() &&
+			  (chip->flags & IRQCHIP_PIPELINE_SAFE) == 0,
+			  "irqchip %s is not pipeline-safe!", chip->name);
 
 	desc->irq_data.chip = chip;
 	irq_put_desc_unlock(desc, flags);
@@ -155,14 +160,6 @@ int irq_set_chip_data(unsigned int irq, void *data)
 }
 EXPORT_SYMBOL(irq_set_chip_data);
 
-struct irq_data *irq_get_irq_data(unsigned int irq)
-{
-	struct irq_desc *desc = irq_to_desc(irq);
-
-	return desc ? &desc->irq_data : NULL;
-}
-EXPORT_SYMBOL_GPL(irq_get_irq_data);
-
 static void irq_state_clr_disabled(struct irq_desc *desc)
 {
 	irqd_clear(&desc->irq_data, IRQD_IRQ_DISABLED);
@@ -309,6 +306,7 @@ void irq_shutdown(struct irq_desc *desc)
 			desc->irq_data.chip->irq_shutdown(&desc->irq_data);
 			irq_state_set_disabled(desc);
 			irq_state_set_masked(desc);
+			irq_pipeline_clear(desc);
 		} else {
 			__irq_disable(desc, true);
 		}
@@ -358,6 +356,7 @@ static void __irq_disable(struct irq_desc *desc, bool mask)
 			mask_irq(desc);
 		}
 	}
+	irq_pipeline_clear(desc);
 }
 
 /**
@@ -382,7 +381,8 @@ static void __irq_disable(struct irq_desc *desc, bool mask)
  */
 void irq_disable(struct irq_desc *desc)
 {
-	__irq_disable(desc, irq_settings_disable_unlazy(desc));
+	__irq_disable(desc,
+	      irq_settings_disable_unlazy(desc) || irqs_pipelined());
 }
 
 void irq_percpu_enable(struct irq_desc *desc, unsigned int cpu)
@@ -401,6 +401,7 @@ void irq_percpu_disable(struct irq_desc *desc, unsigned int cpu)
 	else
 		desc->irq_data.chip->irq_mask(&desc->irq_data);
 	cpumask_clear_cpu(cpu, desc->percpu_enabled);
+	irq_pipeline_clear(desc);
 }
 
 static inline void mask_ack_irq(struct irq_desc *desc)
@@ -514,8 +515,22 @@ static bool irq_may_run(struct irq_desc *desc)
 	 * If the interrupt is an armed wakeup source, mark it pending
 	 * and suspended, disable it and notify the pm core about the
 	 * event.
+	 *
+	 * When pipelining, the logic is as follows:
+	 *
+	 * - from a pipeline entry context, we might have preempted
+	 * the oob stage, or irqs might be [virtually] off, so we may
+	 * not run the in-band PM code. Just make sure any wakeup
+	 * interrupt is detected later on when the flow handler
+	 * re-runs from the in-band stage.
+	 *
+	 * - from the in-band context, run the PM wakeup check.
 	 */
-	if (irq_pm_check_wakeup(desc))
+	if (irqs_pipelined()) {
+		WARN_ON_ONCE(irq_pipeline_debug() && !in_pipeline());
+		if (irqd_is_wakeup_armed(&desc->irq_data))
+			return true;
+	} else if (irq_pm_check_wakeup(desc))
 		return false;
 
 	/*
@@ -539,9 +554,14 @@ void handle_simple_irq(struct irq_desc *desc)
 {
 	raw_spin_lock(&desc->lock);
 
-	if (!irq_may_run(desc))
+	if (start_irq_flow() && !irq_may_run(desc))
 		goto out_unlock;
 
+	if (on_pipeline_entry()) {
+		handle_oob_irq(desc);
+		goto out_unlock;
+	}
+
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
 	if (unlikely(!desc->action || irqd_irq_disabled(&desc->irq_data))) {
@@ -576,8 +596,13 @@ void handle_untracked_irq(struct irq_desc *desc)
 
 	raw_spin_lock(&desc->lock);
 
-	if (!irq_may_run(desc))
+	if (start_irq_flow() && !irq_may_run(desc))
+		goto out_unlock;
+
+	if (on_pipeline_entry()) {
+		handle_oob_irq(desc);
 		goto out_unlock;
+	}
 
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
@@ -600,6 +625,20 @@ void handle_untracked_irq(struct irq_desc *desc)
 }
 EXPORT_SYMBOL_GPL(handle_untracked_irq);
 
+static inline void cond_eoi_irq(struct irq_desc *desc)
+{
+	struct irq_chip *chip = desc->irq_data.chip;
+
+	if (!(chip->flags & IRQCHIP_EOI_THREADED))
+		chip->irq_eoi(&desc->irq_data);
+}
+
+static inline void mask_cond_eoi_irq(struct irq_desc *desc)
+{
+	mask_irq(desc);
+	cond_eoi_irq(desc);
+}
+
 /*
  * Called unconditionally from handle_level_irq() and only for oneshot
  * interrupts from handle_fasteoi_irq()
@@ -630,10 +669,19 @@ static void cond_unmask_irq(struct irq_desc *desc)
 void handle_level_irq(struct irq_desc *desc)
 {
 	raw_spin_lock(&desc->lock);
-	mask_ack_irq(desc);
 
-	if (!irq_may_run(desc))
+	if (start_irq_flow()) {
+		mask_ack_irq(desc);
+
+		if (!irq_may_run(desc))
+			goto out_unlock;
+	}
+
+	if (on_pipeline_entry()) {
+		if (handle_oob_irq(desc))
+			goto out_unmask;
 		goto out_unlock;
+	}
 
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
@@ -648,7 +696,7 @@ void handle_level_irq(struct irq_desc *desc)
 
 	kstat_incr_irqs_this_cpu(desc);
 	handle_irq_event(desc);
-
+out_unmask:
 	cond_unmask_irq(desc);
 
 out_unlock:
@@ -669,7 +717,10 @@ static inline void preflow_handler(struct irq_desc *desc) { }
 static void cond_unmask_eoi_irq(struct irq_desc *desc, struct irq_chip *chip)
 {
 	if (!(desc->istate & IRQS_ONESHOT)) {
-		chip->irq_eoi(&desc->irq_data);
+		if (!irqs_pipelined())
+			chip->irq_eoi(&desc->irq_data);
+		else if (!irqd_irq_disabled(&desc->irq_data))
+			unmask_irq(desc);
 		return;
 	}
 	/*
@@ -680,9 +731,11 @@ static void cond_unmask_eoi_irq(struct irq_desc *desc, struct irq_chip *chip)
 	 */
 	if (!irqd_irq_disabled(&desc->irq_data) &&
 	    irqd_irq_masked(&desc->irq_data) && !desc->threads_oneshot) {
-		chip->irq_eoi(&desc->irq_data);
+		if (!irqs_pipelined())
+			chip->irq_eoi(&desc->irq_data);
 		unmask_irq(desc);
-	} else if (!(chip->flags & IRQCHIP_EOI_THREADED)) {
+	} else if (!irqs_pipelined() &&
+		   !(chip->flags & IRQCHIP_EOI_THREADED)) {
 		chip->irq_eoi(&desc->irq_data);
 	}
 }
@@ -702,9 +755,17 @@ void handle_fasteoi_irq(struct irq_desc *desc)
 
 	raw_spin_lock(&desc->lock);
 
-	if (!irq_may_run(desc))
+	if (start_irq_flow() && !irq_may_run(desc))
 		goto out;
 
+	if (on_pipeline_entry()) {
+		if (handle_oob_irq(desc))
+			chip->irq_eoi(&desc->irq_data);
+		else
+			mask_cond_eoi_irq(desc);
+		goto out_unlock;
+	}
+
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
 	/*
@@ -718,14 +779,14 @@ void handle_fasteoi_irq(struct irq_desc *desc)
 	}
 
 	kstat_incr_irqs_this_cpu(desc);
-	if (desc->istate & IRQS_ONESHOT)
+	if (!irqs_pipelined() && (desc->istate & IRQS_ONESHOT))
 		mask_irq(desc);
 
 	preflow_handler(desc);
 	handle_irq_event(desc);
 
 	cond_unmask_eoi_irq(desc, chip);
-
+out_unlock:
 	raw_spin_unlock(&desc->lock);
 	return;
 out:
@@ -785,30 +846,42 @@ EXPORT_SYMBOL_GPL(handle_fasteoi_nmi);
  */
 void handle_edge_irq(struct irq_desc *desc)
 {
+	struct irq_chip *chip = irq_desc_get_chip(desc);
+
 	raw_spin_lock(&desc->lock);
 
-	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
+	if (start_irq_flow()) {
+		desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
-	if (!irq_may_run(desc)) {
-		desc->istate |= IRQS_PENDING;
-		mask_ack_irq(desc);
-		goto out_unlock;
+		if (!irq_may_run(desc)) {
+			desc->istate |= IRQS_PENDING;
+			mask_ack_irq(desc);
+			goto out_unlock;
+		}
+
+		/*
+		 * If its disabled or no action available then mask it
+		 * and get out of here.
+		 */
+		if (irqd_irq_disabled(&desc->irq_data) || !desc->action) {
+			desc->istate |= IRQS_PENDING;
+			mask_ack_irq(desc);
+			goto out_unlock;
+		}
 	}
 
-	/*
-	 * If its disabled or no action available then mask it and get
-	 * out of here.
-	 */
-	if (irqd_irq_disabled(&desc->irq_data) || !desc->action) {
-		desc->istate |= IRQS_PENDING;
-		mask_ack_irq(desc);
+	if (on_pipeline_entry()) {
+		chip->irq_ack(&desc->irq_data);
+		desc->istate |= IRQS_EDGE;
+		handle_oob_irq(desc);
 		goto out_unlock;
 	}
 
 	kstat_incr_irqs_this_cpu(desc);
 
 	/* Start handling the irq */
-	desc->irq_data.chip->irq_ack(&desc->irq_data);
+	if (!irqs_pipelined())
+		chip->irq_ack(&desc->irq_data);
 
 	do {
 		if (unlikely(!desc->action)) {
@@ -833,6 +906,8 @@ void handle_edge_irq(struct irq_desc *desc)
 		 !irqd_irq_disabled(&desc->irq_data));
 
 out_unlock:
+	if (on_pipeline_entry())
+		desc->istate &= ~IRQS_EDGE;
 	raw_spin_unlock(&desc->lock);
 }
 EXPORT_SYMBOL(handle_edge_irq);
@@ -851,11 +926,20 @@ void handle_edge_eoi_irq(struct irq_desc *desc)
 
 	raw_spin_lock(&desc->lock);
 
-	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
+	if (start_irq_flow()) {
+		desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
-	if (!irq_may_run(desc)) {
-		desc->istate |= IRQS_PENDING;
-		goto out_eoi;
+		if (!irq_may_run(desc)) {
+			desc->istate |= IRQS_PENDING;
+			goto out_eoi;
+		}
+	}
+
+	if (on_pipeline_entry()) {
+		desc->istate |= IRQS_EDGE;
+		if (handle_oob_irq(desc))
+			goto out_eoi;
+		goto out;
 	}
 
 	/*
@@ -880,6 +964,9 @@ void handle_edge_eoi_irq(struct irq_desc *desc)
 
 out_eoi:
 	chip->irq_eoi(&desc->irq_data);
+out:
+	if (on_pipeline_entry())
+		desc->istate &= ~IRQS_EDGE;
 	raw_spin_unlock(&desc->lock);
 }
 #endif
@@ -893,6 +980,18 @@ void handle_edge_eoi_irq(struct irq_desc *desc)
 void handle_percpu_irq(struct irq_desc *desc)
 {
 	struct irq_chip *chip = irq_desc_get_chip(desc);
+	bool handled;
+
+	if (on_pipeline_entry()) {
+		if (chip->irq_ack)
+			chip->irq_ack(&desc->irq_data);
+		handled = handle_oob_irq(desc);
+		if (chip->irq_eoi)
+			chip->irq_eoi(&desc->irq_data);
+		if (!handled && chip->irq_mask)
+			chip->irq_mask(&desc->irq_data);
+		return;
+	}
 
 	/*
 	 * PER CPU interrupts are not serialized. Do not touch
@@ -900,13 +999,17 @@ void handle_percpu_irq(struct irq_desc *desc)
 	 */
 	__kstat_incr_irqs_this_cpu(desc);
 
-	if (chip->irq_ack)
-		chip->irq_ack(&desc->irq_data);
-
-	handle_irq_event_percpu(desc);
-
-	if (chip->irq_eoi)
-		chip->irq_eoi(&desc->irq_data);
+	if (irqs_pipelined()) {
+		handle_irq_event_percpu(desc);
+		if (chip->irq_unmask)
+			chip->irq_unmask(&desc->irq_data);
+	} else {
+		if (chip->irq_ack)
+			chip->irq_ack(&desc->irq_data);
+		handle_irq_event_percpu(desc);
+		if (chip->irq_eoi)
+			chip->irq_eoi(&desc->irq_data);
+	}
 }
 
 /**
@@ -926,6 +1029,18 @@ void handle_percpu_devid_irq(struct irq_desc *desc)
 	struct irqaction *action = desc->action;
 	unsigned int irq = irq_desc_get_irq(desc);
 	irqreturn_t res;
+	bool handled;
+
+	if (on_pipeline_entry()) {
+		if (chip->irq_ack)
+			chip->irq_ack(&desc->irq_data);
+		handled = handle_oob_irq(desc);
+		if (chip->irq_eoi)
+			chip->irq_eoi(&desc->irq_data);
+		if (!handled && chip->irq_mask)
+			chip->irq_mask(&desc->irq_data);
+		return;
+	}
 
 	/*
 	 * PER CPU interrupts are not serialized. Do not touch
@@ -933,7 +1048,7 @@ void handle_percpu_devid_irq(struct irq_desc *desc)
 	 */
 	__kstat_incr_irqs_this_cpu(desc);
 
-	if (chip->irq_ack)
+	if (!irqs_pipelined() && chip->irq_ack)
 		chip->irq_ack(&desc->irq_data);
 
 	if (likely(action)) {
@@ -951,8 +1066,11 @@ void handle_percpu_devid_irq(struct irq_desc *desc)
 			    enabled ? " and unmasked" : "", irq, cpu);
 	}
 
-	if (chip->irq_eoi)
-		chip->irq_eoi(&desc->irq_data);
+	if (irqs_pipelined()) {
+		if (chip->irq_unmask)
+			chip->irq_unmask(&desc->irq_data);
+	} else if (chip->irq_eoi)
+			chip->irq_eoi(&desc->irq_data);
 }
 
 /**
@@ -1042,6 +1160,7 @@ __irq_do_set_handler(struct irq_desc *desc, irq_flow_handler_t handle,
 			desc->handle_irq = handle;
 		}
 
+		irq_settings_set_chained(desc);
 		irq_settings_set_noprobe(desc);
 		irq_settings_set_norequest(desc);
 		irq_settings_set_nothread(desc);
@@ -1209,9 +1328,18 @@ void handle_fasteoi_ack_irq(struct irq_desc *desc)
 
 	raw_spin_lock(&desc->lock);
 
-	if (!irq_may_run(desc))
+	if (start_irq_flow() && !irq_may_run(desc))
 		goto out;
 
+	if (on_pipeline_entry()) {
+		chip->irq_ack(&desc->irq_data);
+		if (handle_oob_irq(desc))
+			chip->irq_eoi(&desc->irq_data);
+		else
+			mask_cond_eoi_irq(desc);
+		goto out_unlock;
+	}
+
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
 	/*
@@ -1225,11 +1353,13 @@ void handle_fasteoi_ack_irq(struct irq_desc *desc)
 	}
 
 	kstat_incr_irqs_this_cpu(desc);
-	if (desc->istate & IRQS_ONESHOT)
-		mask_irq(desc);
+	if (!irqs_pipelined()) {
+		if (desc->istate & IRQS_ONESHOT)
+			mask_irq(desc);
 
-	/* Start handling the irq */
-	desc->irq_data.chip->irq_ack(&desc->irq_data);
+		/* Start handling the irq */
+		chip->irq_ack(&desc->irq_data);
+	}
 
 	preflow_handler(desc);
 	handle_irq_event(desc);
@@ -1241,6 +1371,7 @@ void handle_fasteoi_ack_irq(struct irq_desc *desc)
 out:
 	if (!(chip->flags & IRQCHIP_EOI_IF_HANDLED))
 		chip->irq_eoi(&desc->irq_data);
+out_unlock:
 	raw_spin_unlock(&desc->lock);
 }
 EXPORT_SYMBOL_GPL(handle_fasteoi_ack_irq);
@@ -1260,10 +1391,21 @@ void handle_fasteoi_mask_irq(struct irq_desc *desc)
 	struct irq_chip *chip = desc->irq_data.chip;
 
 	raw_spin_lock(&desc->lock);
-	mask_ack_irq(desc);
 
-	if (!irq_may_run(desc))
-		goto out;
+	if (start_irq_flow()) {
+		mask_ack_irq(desc);
+
+		if (!irq_may_run(desc))
+			goto out;
+	}
+
+	if (on_pipeline_entry()) {
+		if (handle_oob_irq(desc))
+			chip->irq_eoi(&desc->irq_data);
+		else
+			cond_eoi_irq(desc);
+		goto out_unlock;
+	}
 
 	desc->istate &= ~(IRQS_REPLAY | IRQS_WAITING);
 
@@ -1278,7 +1420,7 @@ void handle_fasteoi_mask_irq(struct irq_desc *desc)
 	}
 
 	kstat_incr_irqs_this_cpu(desc);
-	if (desc->istate & IRQS_ONESHOT)
+	if (!irqs_pipelined() && (desc->istate & IRQS_ONESHOT))
 		mask_irq(desc);
 
 	preflow_handler(desc);
@@ -1291,6 +1433,7 @@ void handle_fasteoi_mask_irq(struct irq_desc *desc)
 out:
 	if (!(chip->flags & IRQCHIP_EOI_IF_HANDLED))
 		chip->irq_eoi(&desc->irq_data);
+out_unlock:
 	raw_spin_unlock(&desc->lock);
 }
 EXPORT_SYMBOL_GPL(handle_fasteoi_mask_irq);
diff --git a/kernel/irq/cpuhotplug.c b/kernel/irq/cpuhotplug.c
index 6c7ca2e983a5..08b171a518b7 100644
--- a/kernel/irq/cpuhotplug.c
+++ b/kernel/irq/cpuhotplug.c
@@ -155,6 +155,9 @@ void irq_migrate_all_off_this_cpu(void)
 {
 	struct irq_desc *desc;
 	unsigned int irq;
+	unsigned long flags;
+
+	flags = hard_local_irq_save();
 
 	for_each_active_irq(irq) {
 		bool affinity_broken;
@@ -169,6 +172,8 @@ void irq_migrate_all_off_this_cpu(void)
 					    irq, smp_processor_id());
 		}
 	}
+
+	hard_local_irq_restore(flags);
 }
 
 static void irq_restore_affinity_of_irq(struct irq_desc *desc, unsigned int cpu)
diff --git a/kernel/irq/debug.h b/kernel/irq/debug.h
index 8ccb326d2977..40f726845748 100644
--- a/kernel/irq/debug.h
+++ b/kernel/irq/debug.h
@@ -33,6 +33,8 @@ static inline void print_irq_desc(unsigned int irq, struct irq_desc *desc)
 	___P(IRQ_NOREQUEST);
 	___P(IRQ_NOTHREAD);
 	___P(IRQ_NOAUTOEN);
+	___P(IRQ_OOB);
+	___P(IRQ_CHAINED);
 
 	___PS(IRQS_AUTODETECT);
 	___PS(IRQS_REPLAY);
diff --git a/kernel/irq/dummychip.c b/kernel/irq/dummychip.c
index 0b0cdf206dc4..7bf8cbee1b87 100644
--- a/kernel/irq/dummychip.c
+++ b/kernel/irq/dummychip.c
@@ -43,7 +43,7 @@ struct irq_chip no_irq_chip = {
 	.irq_enable	= noop,
 	.irq_disable	= noop,
 	.irq_ack	= ack_bad,
-	.flags		= IRQCHIP_SKIP_SET_WAKE,
+	.flags		= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 
 /*
@@ -59,6 +59,6 @@ struct irq_chip dummy_irq_chip = {
 	.irq_ack	= noop,
 	.irq_mask	= noop,
 	.irq_unmask	= noop,
-	.flags		= IRQCHIP_SKIP_SET_WAKE,
+	.flags		= IRQCHIP_SKIP_SET_WAKE | IRQCHIP_PIPELINE_SAFE,
 };
 EXPORT_SYMBOL_GPL(dummy_irq_chip);
diff --git a/kernel/irq/handle.c b/kernel/irq/handle.c
index a4ace611f47f..e3f249fef88d 100644
--- a/kernel/irq/handle.c
+++ b/kernel/irq/handle.c
@@ -32,9 +32,16 @@ void handle_bad_irq(struct irq_desc *desc)
 {
 	unsigned int irq = irq_desc_get_irq(desc);
 
+	/* Let the in-band stage report the issue. */
+	if (on_pipeline_entry()) {
+		ack_bad_irq(irq);
+		return;
+	}
+
 	print_irq_desc(irq, desc);
 	kstat_incr_irqs_this_cpu(desc);
-	ack_bad_irq(irq);
+	if (!irqs_pipelined())
+		ack_bad_irq(irq);
 }
 EXPORT_SYMBOL_GPL(handle_bad_irq);
 
diff --git a/kernel/irq/internals.h b/kernel/irq/internals.h
index 3924fbe829d4..df228c99f995 100644
--- a/kernel/irq/internals.h
+++ b/kernel/irq/internals.h
@@ -50,6 +50,7 @@ enum {
  * IRQS_PENDING			- irq is pending and replayed later
  * IRQS_SUSPENDED		- irq is suspended
  * IRQS_NMI			- irq line is used to deliver NMIs
+ * IRQS_EDGE			- irq line received an edge event
  */
 enum {
 	IRQS_AUTODETECT		= 0x00000001,
@@ -62,6 +63,7 @@ enum {
 	IRQS_SUSPENDED		= 0x00000800,
 	IRQS_TIMINGS		= 0x00001000,
 	IRQS_NMI		= 0x00002000,
+	IRQS_EDGE		= 0x00004000,
 };
 
 #include "debug.h"
diff --git a/kernel/irq/irqdesc.c b/kernel/irq/irqdesc.c
index 9be995fc3c5a..790237998823 100644
--- a/kernel/irq/irqdesc.c
+++ b/kernel/irq/irqdesc.c
@@ -16,6 +16,7 @@
 #include <linux/bitmap.h>
 #include <linux/irqdomain.h>
 #include <linux/sysfs.h>
+#include <linux/irq_pipeline.h>
 
 #include "internals.h"
 
@@ -452,6 +453,7 @@ static void free_desc(unsigned int irq)
 	 * irq_sysfs_init() as well.
 	 */
 	irq_sysfs_del(desc);
+	uncache_irq_desc(irq);
 	delete_irq_desc(irq);
 
 	/*
@@ -631,9 +633,12 @@ void irq_init_desc(unsigned int irq)
 #endif /* !CONFIG_SPARSE_IRQ */
 
 /**
- * generic_handle_irq - Invoke the handler for a particular irq
+ * generic_handle_irq - Handle a particular irq
  * @irq:	The irq number to handle
  *
+ * The handler is invoked, unless we are entering the interrupt
+ * pipeline, in which case the incoming IRQ is only scheduled for
+ * deferred delivery.
  */
 int generic_handle_irq(unsigned int irq)
 {
diff --git a/kernel/irq/irqptorture.c b/kernel/irq/irqptorture.c
new file mode 100644
index 000000000000..4ba0f28b9211
--- /dev/null
+++ b/kernel/irq/irqptorture.c
@@ -0,0 +1,253 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2017 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/kernel.h>
+#include <linux/torture.h>
+#include <linux/printk.h>
+#include <linux/delay.h>
+#include <linux/tick.h>
+#include <linux/smp.h>
+#include <linux/cpumask.h>
+#include <linux/clockchips.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/irq_pipeline.h>
+#include <linux/stop_machine.h>
+#include <linux/irq_work.h>
+#include <linux/completion.h>
+#include <linux/slab.h>
+#include "settings.h"
+
+static void torture_event_handler(struct clock_event_device *dev)
+{
+	/*
+	 * We are running on the oob stage, in NMI-like mode. Schedule
+	 * a tick on the proxy device to satisfy the corresponding
+	 * timing request asap.
+	 */
+	tick_notify_proxy();
+}
+
+static void setup_proxy(struct clock_proxy_device *dev)
+{
+	dev->handle_oob_event = torture_event_handler;
+}
+
+static int start_tick_takeover_test(void)
+{
+	return tick_install_proxy(setup_proxy, cpu_online_mask);
+}
+
+static void stop_tick_takeover_test(void)
+{
+	tick_uninstall_proxy(cpu_online_mask);
+}
+
+struct stop_machine_p_data {
+	int origin_cpu;
+	cpumask_var_t disable_mask;
+};
+
+static int stop_machine_handler(void *arg)
+{
+	struct stop_machine_p_data *p = arg;
+	int cpu = raw_smp_processor_id();
+
+	/*
+	 * The stop_machine() handler must run with hard
+	 * IRQs off, note the current state in the result mask.
+	 */
+	if (hard_irqs_disabled())
+		cpumask_set_cpu(cpu, p->disable_mask);
+
+	if (cpu != p->origin_cpu)
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d responds to stop_machine()\n", cpu);
+	return 0;
+}
+
+/*
+ * We test stop_machine() as a way to validate IPI handling in a
+ * pipelined interrupt context.
+ */
+static int test_stop_machine(void)
+{
+	struct stop_machine_p_data d;
+	cpumask_var_t tmp_mask;
+	int ret = -EINVAL, cpu;
+
+	if (!zalloc_cpumask_var(&d.disable_mask, GFP_KERNEL)) {
+		WARN_ON(1);
+		return -EINVAL;
+	}
+
+	if (!alloc_cpumask_var(&tmp_mask, GFP_KERNEL)) {
+		WARN_ON(1);
+		goto fail;
+	}
+
+	d.origin_cpu = raw_smp_processor_id();
+	pr_alert("irq_pipeline" TORTURE_FLAG
+		 " CPU%d initiates stop_machine()\n",
+		 d.origin_cpu);
+
+	ret = stop_machine(stop_machine_handler, &d, cpu_online_mask);
+	WARN_ON(ret);
+	if (ret)
+		goto fail;
+
+	/*
+	 * Check whether all handlers did run with hard IRQs off. If
+	 * some of them did not, then we have a problem with the stop
+	 * IRQ delivery.
+	 */
+	cpumask_xor(tmp_mask, cpu_online_mask, d.disable_mask);
+	if (!cpumask_empty(tmp_mask)) {
+		for_each_cpu(cpu, tmp_mask)
+			pr_alert("irq_pipeline" TORTURE_FLAG
+				 " CPU%d: hard IRQs ON in stop_machine()"
+				 " handler!\n", cpu);
+	}
+
+	free_cpumask_var(tmp_mask);
+fail:
+	free_cpumask_var(d.disable_mask);
+
+	return ret;
+}
+
+static struct irq_work_tester {
+	struct irq_work work;
+	struct completion done;
+} irq_work_tester;
+
+static void irq_work_handler(struct irq_work *work)
+{
+	int cpu = raw_smp_processor_id();
+
+	if (!running_inband()) {
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: irq_work handler not running on"
+			 " in-band stage?!\n", cpu);
+		return;
+	}
+
+	if (work != &irq_work_tester.work)
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: irq_work handler received broken"
+			 " arg?!\n", cpu);
+	else {
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: irq_work handled\n", cpu);
+		complete(&irq_work_tester.done);
+	}
+}
+
+static int trigger_oob_work(void *arg)
+{
+	int cpu = raw_smp_processor_id();
+
+	if (!running_oob()) {
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: escalated request not running on"
+			 " oob stage?!\n", cpu);
+		return -EINVAL;
+	}
+
+	if ((struct irq_work_tester *)arg != &irq_work_tester) {
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: escalation handler received broken"
+			 " arg?!\n", cpu);
+		return -EINVAL;
+	}
+
+	irq_work_queue(&irq_work_tester.work);
+	pr_alert("irq_pipeline" TORTURE_FLAG
+		 " CPU%d: stage escalation request works\n",
+		 cpu);
+
+	return 0;
+}
+
+static int test_interstage_work_injection(void)
+{
+	struct irq_work_tester *p = &irq_work_tester;
+	int ret, cpu = raw_smp_processor_id();
+	unsigned long rem;
+
+	init_completion(&p->done);
+	init_irq_work(&p->work, irq_work_handler);
+
+	/* Trigger over the in-band stage. */
+	irq_work_queue(&p->work);
+	rem = wait_for_completion_timeout(&p->done, HZ / 10);
+	if (!rem) {
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: irq_work trigger from in-band stage not handled!\n",
+			 cpu);
+		return -EINVAL;
+	}
+
+	pr_alert("irq_pipeline" TORTURE_FLAG
+		 " CPU%d: in-band->in-band irq_work trigger works\n", cpu);
+
+	reinit_completion(&p->done);
+
+	/* Now try over the oob stage. */
+	ret = run_oob_call(trigger_oob_work, p);
+	if (ret)
+		return ret;
+
+	ret = wait_for_completion_timeout(&p->done, HZ / 10);
+	if (!rem) {
+		pr_alert("irq_pipeline" TORTURE_FLAG
+			 " CPU%d: irq_work trigger from oob"
+			 " stage not handled!\n", cpu);
+		return -EINVAL;
+	}
+
+	pr_alert("irq_pipeline" TORTURE_FLAG
+		 " CPU%d: oob->in-band irq_work trigger works\n",
+		 cpu);
+
+	return 0;
+}
+
+static int __init irqp_torture_init(void)
+{
+	int ret;
+
+	pr_info("Starting IRQ pipeline tests...");
+
+	ret = enable_oob_stage("torture");
+	if (ret) {
+		if (ret == -EBUSY)
+			pr_alert("irq_pipeline" TORTURE_FLAG
+			 " won't run, oob stage '%s' is already installed",
+			 oob_stage.name);
+
+		return ret;
+	}
+
+	ret = test_stop_machine();
+	if (ret)
+		goto out;
+
+	ret = start_tick_takeover_test();
+	if (ret)
+		goto out;
+
+	ret = test_interstage_work_injection();
+	if (!ret)
+		msleep(1000);
+
+	stop_tick_takeover_test();
+out:
+	disable_oob_stage();
+	pr_info("IRQ pipeline tests %s.", ret ? "FAILED" : "OK");
+
+	return 0;
+}
+late_initcall(irqp_torture_init);
diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c
index 1753486b440c..121fe833e837 100644
--- a/kernel/irq/manage.c
+++ b/kernel/irq/manage.c
@@ -10,6 +10,7 @@
 
 #include <linux/irq.h>
 #include <linux/kthread.h>
+#include <linux/kconfig.h>
 #include <linux/module.h>
 #include <linux/random.h>
 #include <linux/interrupt.h>
@@ -737,6 +738,50 @@ int irq_set_irq_wake(unsigned int irq, unsigned int on)
 }
 EXPORT_SYMBOL(irq_set_irq_wake);
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+/**
+ *	irq_switch_oob - Control out-of-band setting for a registered IRQ descriptor
+ *	@irq:	interrupt to control
+ *	@on:	enable/disable pipelining
+ *
+ *	Enable/disable out-of-band handling for an IRQ. At least one
+ *	action must have been previously registered for such
+ *	interrupt.
+ *
+ *      The previously registered action(s) need(s) not bearing the
+ *      IRQF_OOB flag for the IRQ to be switched to out-of-band
+ *      handling. This call enables switching pre-installed IRQs from
+ *      in-band to out-of-band handling.
+ *
+ *      NOTE: This routine affects all action handlers sharing the
+ *      IRQ.
+ */
+int irq_switch_oob(unsigned int irq, bool on)
+{
+	struct irq_desc *desc;
+	unsigned long flags;
+	int ret = 0;
+
+	desc = irq_get_desc_lock(irq, &flags, 0);
+	if (!desc)
+		return -EINVAL;
+
+	if (!desc->action)
+		ret = -EINVAL;
+	else if (on)
+		irq_settings_set_oob(desc);
+	else
+		irq_settings_clr_oob(desc);
+
+	irq_put_desc_unlock(desc, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(irq_switch_oob);
+
+#endif /* CONFIG_IRQ_PIPELINE */
+
 /*
  * Internal function that tells the architecture code whether a
  * particular irq has been exclusively allocated or is available
@@ -753,7 +798,8 @@ int can_request_irq(unsigned int irq, unsigned long irqflags)
 
 	if (irq_settings_can_request(desc)) {
 		if (!desc->action ||
-		    irqflags & desc->action->flags & IRQF_SHARED)
+		    ((irqflags & desc->action->flags & IRQF_SHARED) &&
+		     !((irqflags ^ desc->action->flags) & IRQF_OOB)))
 			canrequest = 1;
 	}
 	irq_put_desc_unlock(desc, flags);
@@ -1300,6 +1346,21 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 
 	new->irq = irq;
 
+	ret = -EINVAL;
+	/*
+	 *  Out-of-band interrupts can be shared but not threaded.  We
+	 *  silently ignore the OOB setting if interrupt pipelining is
+	 *  disabled.
+	 */
+	if (!irqs_pipelined())
+		new->flags &= ~IRQF_OOB;
+	else if (new->flags & IRQF_OOB) {
+		if (new->thread_fn)
+			goto out_mput;
+		new->flags |= IRQF_NO_THREAD;
+		new->flags &= ~IRQF_ONESHOT;
+	}
+
 	/*
 	 * If the trigger type is not specified by the caller,
 	 * then use the default for this interrupt.
@@ -1313,10 +1374,8 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 	 */
 	nested = irq_settings_is_nested_thread(desc);
 	if (nested) {
-		if (!new->thread_fn) {
-			ret = -EINVAL;
+		if (!new->thread_fn)
 			goto out_mput;
-		}
 		/*
 		 * Replace the primary handler which was provided from
 		 * the driver for non nested interrupt handling by the
@@ -1400,7 +1459,7 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 		 * the same type (level, edge, polarity). So both flag
 		 * fields must have IRQF_SHARED set and the bits which
 		 * set the trigger type must match. Also all must
-		 * agree on ONESHOT.
+		 * agree on ONESHOT and OOB.
 		 * Interrupt lines used for NMIs cannot be shared.
 		 */
 		unsigned int oldtype;
@@ -1425,7 +1484,7 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 
 		if (!((old->flags & new->flags) & IRQF_SHARED) ||
 		    (oldtype != (new->flags & IRQF_TRIGGER_MASK)) ||
-		    ((old->flags ^ new->flags) & IRQF_ONESHOT))
+		    ((old->flags ^ new->flags) & (IRQF_OOB|IRQF_ONESHOT)))
 			goto mismatch;
 
 		/* All handlers must agree on per-cpuness */
@@ -1545,6 +1604,9 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 		if (new->flags & IRQF_ONESHOT)
 			desc->istate |= IRQS_ONESHOT;
 
+		if (new->flags & IRQF_OOB)
+			irq_settings_set_oob(desc);
+
 		/* Exclude IRQ from balancing if requested */
 		if (new->flags & IRQF_NOBALANCING) {
 			irq_settings_set_no_balancing(desc);
@@ -1726,6 +1788,8 @@ static struct irqaction *__free_irq(struct irq_desc *desc, void *dev_id)
 		irq_settings_clr_disable_unlazy(desc);
 		/* Only shutdown. Deactivate after synchronize_hardirq() */
 		irq_shutdown(desc);
+		/* Turn off OOB handling (after shutdown). */
+		irq_settings_clr_oob(desc);
 	}
 
 #ifdef CONFIG_SMP
@@ -1762,14 +1826,15 @@ static struct irqaction *__free_irq(struct irq_desc *desc, void *dev_id)
 
 #ifdef CONFIG_DEBUG_SHIRQ
 	/*
-	 * It's a shared IRQ -- the driver ought to be prepared for an IRQ
-	 * event to happen even now it's being freed, so let's make sure that
-	 * is so by doing an extra call to the handler ....
+	 * It's a shared IRQ (with in-band handler) -- the driver
+	 * ought to be prepared for an IRQ event to happen even now
+	 * it's being freed, so let's make sure that is so by doing an
+	 * extra call to the handler ....
 	 *
 	 * ( We do this after actually deregistering it, to make sure that a
 	 *   'real' IRQ doesn't run in parallel with our fake. )
 	 */
-	if (action->flags & IRQF_SHARED) {
+	if ((action->flags & (IRQF_SHARED|IRQF_OOB)) == IRQF_SHARED) {
 		local_irq_save(flags);
 		action->handler(irq, dev_id);
 		local_irq_restore(flags);
@@ -2406,7 +2471,7 @@ int setup_percpu_irq(unsigned int irq, struct irqaction *act)
  *	__request_percpu_irq - allocate a percpu interrupt line
  *	@irq: Interrupt line to allocate
  *	@handler: Function to be called when the IRQ occurs.
- *	@flags: Interrupt type flags (IRQF_TIMER only)
+ *	@flags: Interrupt type flags (IRQF_TIMER and/or IRQF_OOB only)
  *	@devname: An ascii name for the claiming device
  *	@dev_id: A percpu cookie passed back to the handler function
  *
@@ -2435,7 +2500,7 @@ int __request_percpu_irq(unsigned int irq, irq_handler_t handler,
 	    !irq_settings_is_per_cpu_devid(desc))
 		return -EINVAL;
 
-	if (flags && flags != IRQF_TIMER)
+	if (flags & ~(IRQF_TIMER|IRQF_OOB))
 		return -EINVAL;
 
 	action = kzalloc(sizeof(struct irqaction), GFP_KERNEL);
diff --git a/kernel/irq/msi.c b/kernel/irq/msi.c
index ad26fbcfbfc8..c30b3faa828a 100644
--- a/kernel/irq/msi.c
+++ b/kernel/irq/msi.c
@@ -268,6 +268,9 @@ static void msi_domain_update_chip_ops(struct msi_domain_info *info)
 	struct irq_chip *chip = info->chip;
 
 	BUG_ON(!chip || !chip->irq_mask || !chip->irq_unmask);
+	WARN_ONCE(IS_ENABLED(CONFIG_IRQ_PIPELINE) &&
+		  (chip->flags & IRQCHIP_PIPELINE_SAFE) == 0,
+		  "MSI domain irqchip %s is not pipeline-safe!", chip->name);
 	if (!chip->irq_set_affinity)
 		chip->irq_set_affinity = msi_domain_set_affinity;
 }
diff --git a/kernel/irq/pipeline.c b/kernel/irq/pipeline.c
new file mode 100644
index 000000000000..4dcff9c50adc
--- /dev/null
+++ b/kernel/irq/pipeline.c
@@ -0,0 +1,1648 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/irqdomain.h>
+#include <linux/irq_pipeline.h>
+#include <linux/irq_work.h>
+#include <linux/jhash.h>
+#include <linux/debug_locks.h>
+#include <dovetail/irq.h>
+#include <trace/events/irq.h>
+#include "internals.h"
+
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+#define trace_on_debug
+#else
+#define trace_on_debug  notrace
+#endif
+
+struct irq_stage inband_stage = {
+	.name = "Linux",
+};
+EXPORT_SYMBOL_GPL(inband_stage);
+
+struct irq_stage oob_stage;
+EXPORT_SYMBOL_GPL(oob_stage);
+
+struct irq_domain *synthetic_irq_domain;
+EXPORT_SYMBOL_GPL(synthetic_irq_domain);
+
+bool irq_pipeline_oopsing;
+EXPORT_SYMBOL_GPL(irq_pipeline_oopsing);
+
+bool irq_pipeline_active;
+EXPORT_SYMBOL_GPL(irq_pipeline_active);
+
+#define IRQ_LOW_MAPSZ	DIV_ROUND_UP(IRQ_BITMAP_BITS, BITS_PER_LONG)
+
+#if IRQ_LOW_MAPSZ > BITS_PER_LONG
+/*
+ * We need a 3-level mapping. This allows us to handle up to 32k IRQ
+ * vectors on 32bit machines, 256k on 64bit ones.
+ */
+#define __IRQ_STAGE_MAP_LEVELS	3
+#define IRQ_MID_MAPSZ	DIV_ROUND_UP(IRQ_LOW_MAPSZ, BITS_PER_LONG)
+#else
+/*
+ * 2-level mapping is enough. This allows us to handle up to 1024 IRQ
+ * vectors on 32bit machines, 4096 on 64bit ones.
+ */
+#define __IRQ_STAGE_MAP_LEVELS	2
+#endif
+
+struct irq_event_map {
+#if __IRQ_STAGE_MAP_LEVELS == 3
+	unsigned long mdmap[IRQ_MID_MAPSZ];
+#endif
+	unsigned long lomap[IRQ_LOW_MAPSZ];
+};
+
+#ifdef CONFIG_SMP
+
+static struct irq_event_map bootup_irq_map __initdata;
+
+static DEFINE_PER_CPU(struct irq_event_map, irq_map_array[2]);
+
+DEFINE_PER_CPU(struct irq_pipeline_data, irq_pipeline) = {
+	.stages = {
+		[0] = {
+			.log = {
+				.map = &bootup_irq_map,
+			},
+			.stage = &inband_stage,
+			.status = (1 << STAGE_STALL_BIT),
+		},
+	},
+};
+
+#else /* !CONFIG_SMP */
+
+static struct irq_event_map inband_irq_map;
+
+static struct irq_event_map oob_irq_map;
+
+DEFINE_PER_CPU(struct irq_pipeline_data, irq_pipeline) = {
+	.stages = {
+		[0] = {
+			.log = {
+				.map = &inband_irq_map,
+			},
+			.stage = &inband_stage,
+			.status = (1 << STAGE_STALL_BIT),
+		},
+		[1] = {
+			.log = {
+				.map = &oob_irq_map,
+			},
+		},
+	},
+};
+
+#endif /* !CONFIG_SMP */
+
+EXPORT_PER_CPU_SYMBOL(irq_pipeline);
+
+static void sirq_noop(struct irq_data *data) { }
+
+/* Virtual interrupt controller for synthetic IRQs. */
+static struct irq_chip sirq_chip = {
+	.name		= "SIRQC",
+	.irq_enable	= sirq_noop,
+	.irq_disable	= sirq_noop,
+	.flags		= IRQCHIP_PIPELINE_SAFE | IRQCHIP_SKIP_SET_WAKE,
+};
+
+static int sirq_map(struct irq_domain *d, unsigned int irq,
+		    irq_hw_number_t hwirq)
+{
+	irq_set_percpu_devid(irq);
+	irq_set_chip_and_handler(irq, &sirq_chip, handle_synthetic_irq);
+
+	return 0;
+}
+
+static struct irq_domain_ops sirq_domain_ops = {
+	.map	= sirq_map,
+};
+
+#ifdef CONFIG_SPARSE_IRQ
+/*
+ * The performances of the radix tree in sparse mode are really ugly
+ * under mm stress on some hw, use a local descriptor cache to ease
+ * the pain.
+ */
+#define DESC_CACHE_SZ  128
+
+static struct irq_desc *desc_cache[DESC_CACHE_SZ] __cacheline_aligned;
+
+static inline u32 hash_irq(unsigned int irq)
+{
+	return jhash(&irq, sizeof(irq), irq) % DESC_CACHE_SZ;
+}
+
+static __always_inline
+struct irq_desc *cached_irq_to_desc(unsigned int irq)
+{
+	int hval = hash_irq(irq);
+	struct irq_desc *desc = desc_cache[hval];
+
+	if (unlikely(desc == NULL || irq_desc_get_irq(desc) != irq)) {
+		desc = irq_to_desc(irq);
+		desc_cache[hval] = desc;
+	}
+
+	return desc;
+}
+
+void uncache_irq_desc(unsigned int irq)
+{
+	int hval = hash_irq(irq);
+
+	desc_cache[hval] = NULL;
+}
+
+#else
+
+static struct irq_desc *cached_irq_to_desc(unsigned int irq)
+{
+	return irq_to_desc(irq);
+}
+
+#endif
+
+/**
+ *	handle_synthetic_irq -  synthetic irq handler
+ *	@desc:	the interrupt description structure for this irq
+ *
+ *	Handles synthetic interrupts flowing down the IRQ pipeline
+ *	with per-CPU semantics.
+ *
+ *      CAUTION: synthetic IRQs may be used to map hardware-generated
+ *      events (e.g. IPIs or traps), we must start handling them as
+ *      common interrupts.
+ */
+void handle_synthetic_irq(struct irq_desc *desc)
+{
+	unsigned int irq = irq_desc_get_irq(desc);
+	struct irqaction *action;
+	irqreturn_t ret;
+
+	if (on_pipeline_entry()) {
+		handle_oob_irq(desc);
+		return;
+	}
+
+	action = desc->action;
+	if (action == NULL) {
+		if (printk_ratelimit())
+			printk(KERN_WARNING
+			       "CPU%d: WARNING: synthetic IRQ%d has no action.\n",
+			       smp_processor_id(), irq);
+		return;
+	}
+
+	__kstat_incr_irqs_this_cpu(desc);
+	trace_irq_handler_entry(irq, action);
+	ret = action->handler(irq, action->dev_id);
+	trace_irq_handler_exit(irq, action, ret);
+}
+
+void sync_irq_stage(struct irq_stage *top)
+{
+	struct irq_stage_data *p;
+	struct irq_stage *stage;
+
+	/* We must enter over the inband stage with hardirqs off. */
+	if (irq_pipeline_debug()) {
+		WARN_ON_ONCE(!hard_irqs_disabled());
+		WARN_ON_ONCE(current_irq_stage != &inband_stage);
+	}
+
+	stage = top;
+
+	for (;;) {
+		p = this_staged(stage);
+		if (test_stage_bit(STAGE_STALL_BIT, p))
+			break;
+
+		if (stage_irqs_pending(p)) {
+			if (stage == &inband_stage)
+				sync_current_irq_stage();
+			else {
+				/* Switch to oob before synchronizing. */
+				switch_oob(p);
+				sync_current_irq_stage();
+				/* Then back to the inband stage. */
+				switch_inband(this_inband_staged());
+			}
+		}
+
+		if (stage == &inband_stage)
+			break;
+
+		stage = &inband_stage;
+	}
+}
+
+void synchronize_pipeline(void) /* hardirqs off */
+{
+	struct irq_stage *top = &oob_stage;
+
+	if (unlikely(!oob_stage_present()))
+		top = &inband_stage;
+
+	if (current_irq_stage != top)
+		sync_irq_stage(top);
+	else if (!test_stage_bit(STAGE_STALL_BIT, this_staged(top)))
+		sync_current_irq_stage();
+}
+
+trace_on_debug void __inband_irq_enable(void)
+{
+	struct irq_stage_data *p;
+	unsigned long flags;
+
+	/* This helps catching bad usage from assembly call sites. */
+	check_inband_stage();
+
+	flags = hard_local_irq_save();
+
+	p = this_inband_staged();
+	trace_hardirqs_on();
+	clear_stage_bit(STAGE_STALL_BIT, p);
+	if (unlikely(stage_irqs_pending(p))) {
+		sync_current_irq_stage();
+		hard_local_irq_restore(flags);
+		preempt_check_resched();
+	} else
+		hard_local_irq_restore(flags);
+}
+EXPORT_SYMBOL(__inband_irq_enable);
+
+/**
+ *	inband_irq_enable - enable interrupts for the inband stage
+ *
+ *	Enable interrupts for the inband stage, allowing interrupts to
+ *	preempt the in-band code. If in-band IRQs are pending for the
+ *	inband stage in the per-CPU log at the time of this call, they
+ *	are played back.
+ */
+notrace void inband_irq_enable(void)
+{
+	/*
+	 * We are NOT supposed to enter this code with hard IRQs off.
+	 * If we do, then the caller might be wrongly assuming that
+	 * invoking local_irq_enable() implies enabling hard
+	 * interrupts like the legacy I-pipe did, which is not the
+	 * case anymore. Relax this requirement when oopsing, since
+	 * the kernel may be in a weird state.
+	 */
+	WARN_ON_ONCE(irq_pipeline_debug() && hard_irqs_disabled());
+	__inband_irq_enable();
+}
+EXPORT_SYMBOL(inband_irq_enable);
+
+/**
+ *	inband_irq_disable - disable interrupts for the inband stage
+ *
+ *	Disable interrupts for the inband stage, disabling in-band
+ *	interrupts. Out-of-band interrupts can still be taken and
+ *	delivered to their respective handlers though.
+ */
+trace_on_debug void inband_irq_disable(void)
+{
+	unsigned long flags;
+
+	check_inband_stage();
+	flags = hard_local_irq_save();
+	set_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+	trace_hardirqs_off();
+	hard_local_irq_restore(flags);
+}
+EXPORT_SYMBOL(inband_irq_disable);
+
+/**
+ *	inband_irqs_disabled - test the virtual interrupt state
+ *
+ *	Returns non-zero if interrupts are currently disabled for the
+ *	inband stage, zero otherwise.
+ *
+ *	May be used from the oob stage too (e.g. for tracing
+ *	purpose).
+ */
+notrace unsigned long inband_irqs_disabled(void)
+{
+	unsigned long flags;
+	int ret;
+
+	flags = hard_smp_local_irq_save();
+	ret =  __test_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+	hard_smp_local_irq_restore(flags);
+
+	return ret;
+}
+EXPORT_SYMBOL(inband_irqs_disabled);
+
+/**
+ *	inband_irq_save - test and disable (virtual) interrupts
+ *
+ *	Save the virtual interrupt state then disables interrupts for
+ *	the inband stage.
+ *
+ *      Returns the original interrupt state.
+ */
+trace_on_debug unsigned long inband_irq_save(void)
+{
+	unsigned long flags, x;
+
+	check_inband_stage();
+	flags = hard_local_irq_save();
+	x = test_and_set_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+	trace_hardirqs_off();
+	hard_local_irq_restore(flags);
+
+	return x;
+}
+EXPORT_SYMBOL(inband_irq_save);
+
+/**
+ *	inband_irq_restore - restore the (virtual) interrupt state
+ *      @x:	Interrupt state to restore
+ *
+ *	Restore the virtual interrupt state from x. If the inband
+ *	stage is unstalled as a consequence of this operation, any
+ *	interrupt pending for the inband stage in the per-CPU log is
+ *	played back.
+ */
+trace_on_debug void inband_irq_restore(unsigned long flags)
+{
+	if (flags)
+		inband_irq_disable();
+	else
+		__inband_irq_enable();
+}
+EXPORT_SYMBOL(inband_irq_restore);
+
+/**
+ *	inband_irq_restore_nosync - restore the (virtual) interrupt state
+ *      @x:	Interrupt state to restore
+ *
+ *	Restore the virtual interrupt state from x. Unlike
+ *	inband_irq_restore(), pending interrupts are not played back.
+ *
+ *	Hard irqs must be disabled on entry.
+ */
+trace_on_debug void inband_irq_restore_nosync(unsigned long flags)
+{
+	struct irq_stage_data *p = this_inband_staged();
+
+	check_hard_irqs_disabled();
+
+	if (raw_irqs_disabled_flags(flags)) {
+		set_stage_bit(STAGE_STALL_BIT, p);
+		trace_hardirqs_off();
+	} else {
+		trace_hardirqs_on();
+		clear_stage_bit(STAGE_STALL_BIT, p);
+	}
+}
+
+/**
+ *	oob_irq_enable - enable interrupts in the CPU
+ *
+ *	Enable interrupts in the CPU, allowing out-of-band interrupts
+ *	to preempt any code. If out-of-band IRQs are pending in the
+ *	per-CPU log for the oob stage at the time of this call, they
+ *	are played back.
+ */
+trace_on_debug void oob_irq_enable(void)
+{
+	struct irq_stage_data *p;
+
+	hard_local_irq_disable();
+
+	p = this_oob_staged();
+	clear_stage_bit(STAGE_STALL_BIT, p);
+
+	if (unlikely(stage_irqs_pending(p)))
+		synchronize_pipeline();
+
+	hard_local_irq_enable();
+}
+EXPORT_SYMBOL(oob_irq_enable);
+
+/**
+ *	oob_irq_restore - restore the hardware interrupt state
+ *      @x:	Interrupt state to restore
+ *
+ *	Restore the harware interrupt state from x. If the oob stage
+ *	is unstalled as a consequence of this operation, any interrupt
+ *	pending for the oob stage in the per-CPU log is played back
+ *	prior to turning IRQs on.
+ *
+ *      NOTE: Stalling the oob stage must always be paired with
+ *      disabling hard irqs and conversely when calling
+ *      oob_irq_restore(), otherwise the latter would badly misbehave
+ *      in unbalanced conditions.
+ */
+trace_on_debug void __oob_irq_restore(unsigned long flags) /* hw interrupt off */
+{
+	struct irq_stage_data *p = this_oob_staged();
+
+	check_hard_irqs_disabled();
+
+	if (!flags) {
+		clear_stage_bit(STAGE_STALL_BIT, p);
+		if (unlikely(stage_irqs_pending(p)))
+			synchronize_pipeline();
+		hard_local_irq_enable();
+	}
+}
+EXPORT_SYMBOL(__oob_irq_restore);
+
+/**
+ *	stage_disabled - test the interrupt state of the current stage
+ *
+ *	Returns non-zero if interrupts are currently disabled for the
+ *	current interrupt stage, zero otherwise.
+ *      In other words, returns non-zero either if:
+ *      - interrupts are disabled for the OOB context (i.e. hard disabled),
+ *      - the inband stage is current and inband interrupts are disabled.
+ */
+notrace bool stage_disabled(void)
+{
+	bool ret = true;
+
+	if (!hard_irqs_disabled()) {
+		ret = false;
+		if (running_inband())
+			ret = inband_irqs_disabled();
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(stage_disabled);
+
+/**
+ *	test_and_disable_stage - test and disable interrupts for
+ *                                   the current stage
+ *	@irqsoff:	Pointer to boolean denoting stage_disabled()
+ *                      on entry
+ *
+ *	Fully disables interrupts for the current stage. When the
+ *	inband stage is current, the stall bit is raised and hardware
+ *	IRQs are masked as well. Only the latter operation is
+ *	performed when the oob stage is current.
+ *
+ *      Returns the combined interrupt state on entry including the
+ *      real/hardware (in CPU) and virtual (inband stage) states. For
+ *      this reason, irq_stage_[test_and_]disable() must be paired
+ *      with restore_stage() exclusively. The combo state returned by
+ *      the former may NOT be passed to hard_local_irq_restore().
+ *
+ *      The interrupt state of the current stage in the return value
+ *      (i.e. stall bit for the inband stage, hardware interrupt bit
+ *      for the oob stage) must be testable using
+ *      arch_irqs_disabled_flags().
+ */
+trace_on_debug unsigned long test_and_disable_stage(int *irqsoff)
+{
+	unsigned long flags;
+	int stalled, dummy;
+
+	if (irqsoff == NULL)
+		irqsoff = &dummy;
+
+	/*
+	 * Forge flags combining the hardware and virtual IRQ
+	 * states. We need to fill in the virtual state only if the
+	 * inband stage is current, otherwise it is not relevant.
+	 */
+	flags = hard_local_irq_save();
+	*irqsoff = hard_irqs_disabled_flags(flags);
+	if (running_inband()) {
+		stalled = test_and_set_stage_bit(STAGE_STALL_BIT,
+						 this_inband_staged());
+		if (!irq_pipeline_debug_locking()) {
+			trace_hardirqs_off();
+			if (!*irqsoff)
+				hard_local_irq_enable();
+		}
+		flags = irqs_merge_flags(flags, stalled);
+		if (stalled)
+			*irqsoff = 1;
+	}
+
+	/*
+	 * CAUTION: don't ever pass this verbatim to
+	 * hard_local_irq_restore(). Only restore_stage() knows how to
+	 * decode and use a combo state word.
+	 */
+	return flags;
+}
+EXPORT_SYMBOL_GPL(test_and_disable_stage);
+
+/**
+ *	restore_stage - restore interrupts for the current stage
+ *	@flags: 	Combined interrupt state to restore as received from
+ *              	test_and_disable_stage()
+ *
+ *	Restore the virtual interrupt state if the inband stage is
+ *      current, and the hardware interrupt state unconditionally.
+ *      The per-CPU log is not played for any stage.
+ */
+trace_on_debug void restore_stage(unsigned long combo)
+{
+	unsigned long flags = combo;
+	int stalled;
+
+	WARN_ON_ONCE(irq_pipeline_debug_locking() && !hard_irqs_disabled());
+
+	if (running_inband()) {
+		flags = irqs_split_flags(combo, &stalled);
+		if (!stalled) {
+			if (!irq_pipeline_debug_locking()) {
+				hard_local_irq_disable();
+				trace_hardirqs_on();
+			}
+			clear_stage_bit(STAGE_STALL_BIT,
+					this_inband_staged());
+		}
+	}
+
+	/*
+	 * The hardware interrupt bit is the only flag which may be
+	 * present in the combo state at this point, all other status
+	 * bits have been cleared by irqs_merge_flags(), so don't ever
+	 * try to reload the hardware status register with such value
+	 * directly!
+	 */
+	if (!hard_irqs_disabled_flags(flags))
+		hard_local_irq_enable();
+}
+EXPORT_SYMBOL_GPL(restore_stage);
+
+#if __IRQ_STAGE_MAP_LEVELS == 3
+
+/* Must be called hw IRQs off. */
+void irq_post_stage(struct irq_stage *stage, unsigned int irq)
+{
+	struct irq_stage_data *p = this_staged(stage);
+	int l0b, l1b;
+
+	if (WARN_ON_ONCE(irq_pipeline_debug() &&
+			 (!hard_irqs_disabled() || irq >= IRQ_BITMAP_BITS)))
+		return;
+
+	l0b = irq / (BITS_PER_LONG * BITS_PER_LONG);
+	l1b = irq / BITS_PER_LONG;
+
+	__set_bit(irq, p->log.map->lomap);
+	__set_bit(l1b, p->log.map->mdmap);
+	__set_bit(l0b, &p->log.himap);
+}
+EXPORT_SYMBOL_GPL(irq_post_stage);
+
+static void __clear_pending_irq(struct irq_stage_data *p, unsigned int irq)
+{
+	int l0b, l1b;
+
+	l0b = irq / (BITS_PER_LONG * BITS_PER_LONG);
+	l1b = irq / BITS_PER_LONG;
+
+	__clear_bit(irq, p->log.map->lomap);
+	__clear_bit(l1b, p->log.map->mdmap);
+	__clear_bit(l0b, &p->log.himap);
+}
+
+static void clear_pending_irq(struct irq_stage *stage, unsigned int irq)
+{
+	struct irq_stage_data *p = this_staged(stage);
+	__clear_pending_irq(p, irq);
+}
+
+static inline int pull_next_irq(struct irq_stage_data *p)
+{
+	unsigned long l0m, l1m, l2m;
+	int l0b, l1b, l2b, irq;
+
+	l0m = p->log.himap;
+	if (unlikely(l0m == 0))
+		return -1;
+
+	l0b = __ffs(l0m);
+	l1m = p->log.map->mdmap[l0b];
+	if (unlikely(l1m == 0))
+		return -1;
+
+	l1b = __ffs(l1m) + l0b * BITS_PER_LONG;
+	l2m = p->log.map->lomap[l1b];
+	if (unlikely(l2m == 0))
+		return -1;
+
+	l2b = __ffs(l2m);
+	irq = l1b * BITS_PER_LONG + l2b;
+
+	__clear_bit(irq, p->log.map->lomap);
+	if (p->log.map->lomap[l1b] == 0) {
+		__clear_bit(l1b, p->log.map->mdmap);
+		if (p->log.map->mdmap[l0b] == 0)
+			__clear_bit(l0b, &p->log.himap);
+	}
+
+	return irq;
+}
+
+#else /* __IRQ_STAGE_MAP_LEVELS == 2 */
+
+static void __clear_pending_irq(struct irq_stage_data *p, unsigned int irq)
+{
+	int l0b = irq / BITS_PER_LONG;
+
+	__clear_bit(irq, p->log.map->lomap);
+	__clear_bit(l0b, &p->log.himap);
+}
+
+static void clear_pending_irq(struct irq_stage *stage, unsigned int irq)
+{
+	struct irq_stage_data *p = this_staged(stage);
+	__clear_pending_irq(p, irq);
+}
+
+/* Must be called hw IRQs off. */
+void irq_post_stage(struct irq_stage *stage, unsigned int irq)
+{
+	struct irq_stage_data *p = this_staged(stage);
+	int l0b = irq / BITS_PER_LONG;
+
+	if (WARN_ON_ONCE(irq_pipeline_debug() &&
+			 (!hard_irqs_disabled() || irq >= IRQ_BITMAP_BITS)))
+		return;
+
+	__set_bit(irq, p->log.map->lomap);
+	__set_bit(l0b, &p->log.himap);
+}
+EXPORT_SYMBOL_GPL(irq_post_stage);
+
+static inline int pull_next_irq(struct irq_stage_data *p)
+{
+	unsigned long l0m, l1m;
+	int l0b, l1b;
+
+	l0m = p->log.himap;
+	if (unlikely(l0m == 0))
+		return -1;
+
+	l0b = __ffs(l0m);
+	l1m = p->log.map->lomap[l0b];
+	if (unlikely(l1m == 0))
+		return -1;
+
+	l1b = __ffs(l1m);
+	__clear_bit(l1b, &p->log.map->lomap[l0b]);
+	if (p->log.map->lomap[l0b] == 0)
+		__clear_bit(l0b, &p->log.himap);
+
+	return l0b * BITS_PER_LONG + l1b;
+}
+
+#endif  /* __IRQ_STAGE_MAP_LEVELS == 2 */
+
+/**
+ *	irq_pipeline_clear - clear IRQ event from all per-CPU logs
+ *	@desc: IRQ descriptor
+ *
+ *      Clear any event of the specified IRQ pending from the relevant
+ *      interrupt logs, for both the inband and oob stages.
+ *
+ *      All per-CPU logs are considered for device IRQs, per-CPU IRQ
+ *      events are only looked up into the log of the current CPU.
+ *
+ *      Genirq should be the exclusive user of that code. The only
+ *      safe context for running this code is when the corresponding
+ *      IRQ line is masked, and the matching IRQ descriptor locked.
+ *
+ *      Hard irqs must be off on entry (which has to be the case since
+ *      the IRQ descriptor lock is a mutable beast when pipelining).
+ */
+void irq_pipeline_clear(struct irq_desc *desc)
+{
+	unsigned int irq = irq_desc_get_irq(desc);
+	struct irq_stage_data *p;
+	int cpu;
+
+	check_hard_irqs_disabled();
+
+	if (irq_settings_is_per_cpu_devid(desc)) {
+		clear_pending_irq(&inband_stage, irq);
+		if (oob_stage_present())
+			clear_pending_irq(&oob_stage, irq);
+	} else {
+		for_each_online_cpu(cpu) {
+			p = percpu_inband_staged(&inband_stage, cpu);
+			__clear_pending_irq(p, irq);
+			if (oob_stage_present()) {
+				p = percpu_inband_staged(&oob_stage, cpu);
+				__clear_pending_irq(p, irq);
+			}
+		}
+	}
+}
+
+/**
+ *	hard_preempt_disable - Disable preemption the hard way
+ *
+ *      Disable hardware interrupts in the CPU, and disable preemption
+ *      if currently running in-band code on the inband stage.
+ *
+ *      Return the hardware interrupt state.
+ */
+unsigned long hard_preempt_disable(void)
+{
+	unsigned long flags = hard_local_irq_save();
+
+	if (running_inband())
+		preempt_disable();
+
+	return flags;
+}
+EXPORT_SYMBOL_GPL(hard_preempt_disable);
+
+/**
+ *	hard_preempt_enable - Enable preemption the hard way
+ *
+ *      Enable preemption if currently running in-band code on the
+ *      inband stage, restoring the hardware interrupt state in the CPU.
+ *      The per-CPU log is not played for the oob stage.
+ */
+void hard_preempt_enable(unsigned long flags)
+{
+	if (running_inband()) {
+		preempt_enable_no_resched();
+		hard_local_irq_restore(flags);
+		if (!hard_irqs_disabled_flags(flags))
+			preempt_check_resched();
+	} else
+		hard_local_irq_restore(flags);
+}
+EXPORT_SYMBOL_GPL(hard_preempt_enable);
+
+static void handle_unexpected_irq(struct irq_desc *desc, irqreturn_t ret)
+{
+	unsigned int irq = irq_desc_get_irq(desc);
+	struct irqaction *action;
+
+	/*
+	 * Since IRQ_HANDLED was not received from any handler, we may
+	 * have a problem dealing with an OOB interrupt. The error
+	 * detection logic is as follows:
+	 *
+	 * - check and complain about any bogus return value from a
+	 * out-of-band IRQ handler: we only allow IRQ_HANDLED and
+	 * IRQ_NONE from those routines.
+	 *
+	 * - filter out spurious IRQs which may have been due to bus
+	 * asynchronicity, those tend to happen infrequently and
+	 * should not cause us to pull the break (see
+	 * note_interrupt()).
+	 *
+	 * - otherwise, stop pipelining the IRQ line after a thousand
+	 * consecutive unhandled events.
+	 *
+	 * NOTE: we should already be holding desc->lock for non
+	 * per-cpu IRQs, since we should only get there from the
+	 * pipeline entry context.
+	 */
+
+	WARN_ON_ONCE(irq_pipeline_debug() &&
+		     !irq_settings_is_per_cpu(desc) &&
+		     !raw_spin_is_locked(&desc->lock));
+
+	if (ret != IRQ_NONE) {
+		printk(KERN_ERR "out-of-band irq event %d: bogus return value %x\n",
+		       irq, ret);
+		for_each_action_of_desc(desc, action)
+			printk(KERN_ERR "[<%p>] %pf",
+			       action->handler, action->handler);
+		printk(KERN_CONT "\n");
+		return;
+	}
+
+	if (time_after(jiffies, desc->last_unhandled + HZ/10))
+		desc->irqs_unhandled = 0;
+	else
+		desc->irqs_unhandled++;
+
+	desc->last_unhandled = jiffies;
+
+	if (unlikely(desc->irqs_unhandled > 1000)) {
+		printk(KERN_ERR "out-of-band irq %d: stuck or unexpected\n", irq);
+		irq_settings_clr_oob(desc);
+		desc->istate |= IRQS_SPURIOUS_DISABLED;
+		irq_disable(desc);
+	}
+}
+
+/*
+ * do_oob_irq() - Handles interrupts over the oob stage. Hard irqs
+ * off.
+ */
+static void do_oob_irq(struct irq_desc *desc)
+{
+	bool percpu_devid = irq_settings_is_per_cpu_devid(desc);
+	unsigned int irq = irq_desc_get_irq(desc);
+	irqreturn_t ret = IRQ_NONE, res;
+	struct irqaction *action;
+	void *dev_id;
+
+	action = desc->action;
+	if (unlikely(action == NULL))
+		goto done;
+
+	if (percpu_devid) {
+		trace_irq_handler_entry(irq, action);
+		dev_id = raw_cpu_ptr(action->percpu_dev_id);
+		ret = action->handler(irq, dev_id);
+		trace_irq_handler_exit(irq, action, ret);
+	} else {
+		desc->istate &= ~IRQS_PENDING;
+		irqd_set(&desc->irq_data, IRQD_IRQ_INPROGRESS);
+		raw_spin_unlock(&desc->lock);
+		for_each_action_of_desc(desc, action) {
+			trace_irq_handler_entry(irq, action);
+			dev_id = action->dev_id;
+			res = action->handler(irq, dev_id);
+			trace_irq_handler_exit(irq, action, res);
+			ret |= res;
+		}
+		raw_spin_lock(&desc->lock);
+		irqd_clear(&desc->irq_data, IRQD_IRQ_INPROGRESS);
+	}
+done:
+	if (likely(ret & IRQ_HANDLED)) {
+		desc->irqs_unhandled = 0;
+		return;
+	}
+
+	handle_unexpected_irq(desc, ret);
+}
+
+/*
+ * Over the inband stage, IRQs must be dispatched by the arch-specific
+ * arch_do_IRQ_pipelined() routine.
+ *
+ * Entered with hardirqs on, inband stalled.
+ */
+static inline
+void do_inband_irq(struct irq_desc *desc)
+{
+	arch_do_IRQ_pipelined(desc);
+	WARN_ON_ONCE(irq_pipeline_debug() && !irqs_disabled());
+}
+
+static inline void incr_irq_kstat(struct irq_desc *desc)
+{
+	if (irq_settings_is_per_cpu_devid(desc))
+		__kstat_incr_irqs_this_cpu(desc);
+	else
+		kstat_incr_irqs_this_cpu(desc);
+}
+
+static inline bool is_active_edge_event(struct irq_desc *desc)
+{
+	return (desc->istate & IRQS_PENDING) &&
+		!irqd_irq_disabled(&desc->irq_data);
+}
+
+bool handle_oob_irq(struct irq_desc *desc) /* hardirqs off, oob */
+{
+	struct irq_stage_data *oobd = this_oob_staged();
+	unsigned int irq = irq_desc_get_irq(desc);
+
+	/*
+	 * Flow handlers of chained interrupts have no business
+	 * running here: they should decode the event, invoking
+	 * generic_handle_irq() for each cascaded IRQ.
+	 */
+	if (WARN_ON_ONCE(irq_pipeline_debug() &&
+			 irq_settings_is_chained(desc)))
+		return false;
+
+	/*
+	 * If no oob stage is present, all interrupts must go to the
+	 * inband stage through the interrupt log.
+	 *
+	 * Otherwise, out-of-band IRQs are immediately delivered
+	 * (dispatch_oob_irq()) to the oob stage, while in-band IRQs
+	 * still go through the inband stage log.
+	 *
+	 * This routine returns a boolean status telling the caller
+	 * whether an out-of-band interrupt was delivered.
+	 */
+	if (!oob_stage_present() || !irq_settings_is_oob(desc)) {
+		irq_post_stage(&inband_stage, irq);
+		return false;
+	}
+
+	if (WARN_ON_ONCE(irq_pipeline_debug() && running_inband()))
+		return false;
+	/*
+	 * Running with the oob stage stalled implies hardirqs off, so
+	 * we should have never gotten here for handling an external
+	 * IRQ in the first place: something is badly broken in our
+	 * interrupt state. Pretend the event has been handled, which
+	 * may end up with the device hammering us with more
+	 * interrupts, but there is no safe option at this point.
+	 */
+	if (WARN_ON_ONCE(irq_pipeline_debug() &&
+				on_pipeline_entry() &&
+				test_stage_bit(STAGE_STALL_BIT, oobd)))
+		return true;
+
+	set_stage_bit(STAGE_STALL_BIT, oobd);
+
+	if (unlikely(desc->istate & IRQS_EDGE)) {
+		do {
+			if (is_active_edge_event(desc))  {
+				if (irqd_irq_masked(&desc->irq_data))
+					unmask_irq(desc);
+			}
+			do_oob_irq(desc);
+		} while (is_active_edge_event(desc));
+	} else
+		do_oob_irq(desc);
+
+	clear_stage_bit(STAGE_STALL_BIT, oobd);
+
+	/*
+	 * CPU migration and/or stage switching over the handler are
+	 * NOT allowed. These should take place over
+	 * irq_exit_pipeline().
+	 */
+	if (irq_pipeline_debug()) {
+		/* No CPU migration allowed. */
+		WARN_ON_ONCE(this_oob_staged() != oobd);
+		/* No stage migration allowed. */
+		WARN_ON_ONCE(current_irq_staged != oobd);
+	}
+
+	return true;
+}
+
+static inline
+void copy_timer_regs(struct irq_desc *desc, struct pt_regs *regs)
+{
+	struct irq_pipeline_data *p;
+
+	if (desc->action == NULL || !(desc->action->flags & __IRQF_TIMER))
+		return;
+	/*
+	 * Given our deferred dispatching model for regular IRQs, we
+	 * record the preempted context registers only for the latest
+	 * timer interrupt, so that the regular tick handler charges
+	 * CPU times properly. It is assumed that no other interrupt
+	 * handler cares for such information.
+	 */
+	p = raw_cpu_ptr(&irq_pipeline);
+	arch_save_timer_regs(&p->tick_regs, regs, running_oob());
+}
+
+static __always_inline
+struct irq_stage_data *switch_stage_on_irq(void)
+{
+	struct irq_stage_data *prevd = current_irq_staged, *nextd;
+
+	if (oob_stage_present()) {
+		nextd = this_oob_staged();
+		if (prevd != nextd)
+			switch_oob(nextd);
+	}
+
+	return prevd;
+}
+
+static __always_inline
+void restore_stage_on_irq(struct irq_stage_data *prevd)
+{
+	/*
+	 * CPU migration and/or stage switching over
+	 * irq_exit_pipeline() are allowed.  Our exit logic is as
+	 * follows:
+	 *
+	 *    ENTRY      EXIT      EPILOGUE
+	 *
+	 *    oob        oob       nop
+	 *    inband     oob       switch inband
+	 *    oob        inband    nop
+	 *    inband     inband    nop
+	 */
+	if (prevd->stage == &inband_stage &&
+		current_irq_staged == this_oob_staged())
+		switch_inband(this_inband_staged());
+}
+
+/**
+ *	generic_pipeline_irq - Pass an IRQ to the pipeline
+ *	@irq:	IRQ to pass
+ *	@regs:	Register file coming from the low-level handling code
+ *
+ *	Inject an IRQ into the pipeline from a CPU interrupt or trap
+ *	context.  A flow handler runs for this IRQ.
+ *
+ *      Hard irqs must be off on entry.
+ */
+int generic_pipeline_irq(unsigned int irq, struct pt_regs *regs)
+{
+	struct pt_regs *old_regs;
+	struct irq_desc *desc;
+	int ret = 0;
+
+	trace_irq_pipeline_entry(irq);
+
+	old_regs = set_irq_regs(regs);
+	desc = cached_irq_to_desc(irq);
+
+	if (irq_pipeline_debug()) {
+		if (!hard_irqs_disabled()) {
+			hard_local_irq_disable();
+			pr_err("IRQ pipeline: interrupts enabled on entry (IRQ%u)\n",
+			       irq);
+		}
+		if (unlikely(desc == NULL)) {
+			pr_err("IRQ pipeline: received unhandled IRQ%u\n",
+			       irq);
+			ret = -EINVAL;
+			goto out;
+		}
+	}
+
+	/*
+	 * We may re-enter this routine either legitimately due to
+	 * stacked IRQ domains, or because some chained IRQ handler is
+	 * abusing the API, and should have called
+	 * generic_handle_irq() instead of us. In any case, deal with
+	 * re-entry gracefully.
+	 */
+	if (unlikely(on_pipeline_entry())) {
+		if (WARN_ON_ONCE(irq_pipeline_debug() &&
+				 irq_settings_is_chained(desc)))
+			generic_handle_irq_desc(desc);
+		goto out;
+	}
+
+	/*
+	 * We switch eagerly to the oob stage if present, so that a
+	 * companion kernel readily runs on the right stage when we
+	 * call its out-of-band IRQ handler from handle_oob_irq(),
+	 * then irq_exit_pipeline() to unwind the interrupt context.
+	 */
+	copy_timer_regs(desc, regs);
+	preempt_count_add(PIPELINE_OFFSET);
+	generic_handle_irq_desc(desc);
+	preempt_count_sub(PIPELINE_OFFSET);
+	incr_irq_kstat(desc);
+out:
+	set_irq_regs(old_regs);
+	trace_irq_pipeline_exit(irq);
+
+	return ret;
+}
+
+int handle_irq_pipelined(struct pt_regs *regs)
+{
+	struct irq_stage_data *prevd;
+
+	prevd = switch_stage_on_irq();
+	irq_enter_pipeline();
+	handle_arch_irq(regs);
+	irq_exit_pipeline();
+	restore_stage_on_irq(prevd);
+	/*
+	 * We have to synchronize the logs because interrupts might
+	 * have been logged while we were busy handling an OOB event
+	 * coming from the hardware:
+	 *
+	 * - as a result of calling an OOB handler which in turned
+	 * posted them.
+	 *
+	 * - because we posted them directly for scheduling the
+	 * interrupt to happen from the inband stage.
+	 *
+	 * This also means that hardware-originated OOB events have
+	 * higher precedence when received than software-originated
+	 * ones, which are synced once all IRQ flow handlers involved
+	 * in the interrupt have run.
+	 */
+	synchronize_pipeline_on_irq();
+
+#ifdef CONFIG_DOVETAIL
+	/*
+	 * Sending MAYDAY is in essence a rare case, so prefer test
+	 * then maybe clear over test_and_clear.
+	 */
+	if (user_mode(regs) && test_thread_flag(TIF_MAYDAY))
+		dovetail_call_mayday(current_thread_info(), regs);
+#endif
+
+	return running_inband() && !irqs_disabled();
+}
+
+/**
+ *	irq_inject_pipeline - Inject a software-generated IRQ into the
+ *	pipeline @irq: IRQ to inject
+ *
+ *	Inject an IRQ into the pipeline by software as if such
+ *	hardware event had happened on the current CPU.
+ */
+int irq_inject_pipeline(unsigned int irq)
+{
+	struct irq_stage_data *oobd, *prevd;
+	struct irq_desc *desc;
+	unsigned long flags;
+
+	desc = cached_irq_to_desc(irq);
+	if (desc == NULL)
+		return -EINVAL;
+
+	flags = hard_local_irq_save();
+
+	/*
+	 * Handle the case of an IRQ sent to a stalled oob stage here,
+	 * which allows to trap the same condition in handle_oob_irq()
+	 * in a debug check (see comment there).
+	 */
+	oobd = this_oob_staged();
+	if (oob_stage_present() &&
+		irq_settings_is_oob(desc) &&
+		test_stage_bit(STAGE_STALL_BIT, oobd)) {
+		irq_post_stage(&oob_stage, irq);
+	} else {
+		prevd = switch_stage_on_irq();
+		irq_enter_pipeline();
+		handle_oob_irq(desc);
+		irq_exit_pipeline();
+		incr_irq_kstat(desc);
+		restore_stage_on_irq(prevd);
+		synchronize_pipeline_on_irq();
+	}
+
+	hard_local_irq_restore(flags);
+
+	return 0;
+
+}
+EXPORT_SYMBOL_GPL(irq_inject_pipeline);
+
+/*
+ * sync_current_irq_stage() -- Flush the pending IRQs for the current
+ * stage (and processor). This routine flushes the interrupt log (see
+ * "Optimistic interrupt protection" from D. Stodolsky et al. for more
+ * on the deferred interrupt scheme). Every interrupt that occurred
+ * while the pipeline was stalled gets played.
+ *
+ * CAUTION: CPU migration may occur over this routine if running over
+ * the inband stage.
+ */
+void sync_current_irq_stage(void) /* hw IRQs off */
+{
+	struct irq_stage_data *p;
+	struct irq_stage *stage;
+	struct irq_desc *desc;
+	int irq;
+
+	WARN_ON_ONCE(irq_pipeline_debug() && on_pipeline_entry());
+	check_hard_irqs_disabled();
+
+	p = current_irq_staged;
+respin:
+	stage = p->stage;
+	set_stage_bit(STAGE_STALL_BIT, p);
+	smp_wmb();
+
+	if (stage == &inband_stage)
+		trace_hardirqs_off();
+
+	for (;;) {
+		irq = pull_next_irq(p);
+		if (irq < 0)
+			break;
+		/*
+		 * Make sure the compiler does not reorder wrongly, so
+		 * that all updates to maps are done before the
+		 * handler gets called.
+		 */
+		barrier();
+
+		desc = cached_irq_to_desc(irq);
+
+		if (stage == &inband_stage) {
+			hard_local_irq_enable();
+			do_inband_irq(desc);
+			hard_local_irq_disable();
+		} else {
+			do_oob_irq(desc);
+			incr_irq_kstat(desc);
+		}
+
+		/*
+		 * We may have migrated to a different CPU (1) upon
+		 * return from the handler, or downgraded from the oob
+		 * stage to the inband one (2), the opposite way is
+		 * NOT allowed though.
+		 *
+		 * (1) reload the current per-cpu context pointer, so
+		 * that we further pull pending interrupts from the
+		 * proper per-cpu log.
+		 *
+		 * (2) check the stall bit to know whether we may
+		 * dispatch any interrupt pending for the inband
+		 * stage, and respin the entire dispatch loop if
+		 * so. Otherwise, immediately return to the caller,
+		 * _without_ affecting the stall state for the inband
+		 * stage, since we do not own it at this stage.  This
+		 * case is basically reflecting what may happen in
+		 * dispatch_oob_irq() for the fast path.
+		 */
+		p = current_irq_staged;
+		if (p->stage != stage) {
+			WARN_ON_ONCE(irq_pipeline_debug() &&
+				     stage == &inband_stage);
+			if (test_stage_bit(STAGE_STALL_BIT, p))
+				return;
+			goto respin;
+		}
+	}
+
+	if (stage == &inband_stage)
+		trace_hardirqs_on();
+
+	clear_stage_bit(STAGE_STALL_BIT, p);
+}
+
+/**
+ *      run_oob_call - escalate function call to the oob stage
+ *      @fn:    address of routine
+ *      @arg:   routine argument
+ *
+ *      Make the specified function run on the oob stage, switching
+ *      the current stage accordingly if needed. The escalated call is
+ *      allowed to perform a stage migration in the process.
+ */
+int notrace run_oob_call(int (*fn)(void *arg), void *arg)
+{
+	struct irq_stage_data *p, *old;
+	struct irq_stage *oob;
+	unsigned long flags;
+	int ret, s;
+
+	flags = hard_local_irq_save();
+
+	/* Switch to the oob stage if not current. */
+	p = this_oob_staged();
+	oob = p->stage;
+	old = current_irq_staged;
+	if (old != p)
+		switch_oob(p);
+
+	s = test_and_set_stage_bit(STAGE_STALL_BIT, p);
+	barrier();
+	ret = fn(arg);
+	hard_local_irq_disable();
+	p = this_oob_staged();
+	if (!s)
+		clear_stage_bit(STAGE_STALL_BIT, p);
+
+	/*
+	 * The exit logic is as follows:
+	 *
+	 *    ON-ENTRY  AFTER-CALL  EPILOGUE
+	 *
+	 *    oob       oob         sync current stage if !stalled
+	 *    inband    oob         switch to inband + sync all stages
+	 *    oob       inband      sync all stages
+	 *    inband    inband      sync all stages
+	 *
+	 * Each path which has stalled the oob stage while running on
+	 * the inband stage at some point during the escalation
+	 * process must synchronize all stages of the pipeline on
+	 * exit. Otherwise, we may restrict the synchronization scope
+	 * to the current stage when the whole process runs on the oob
+	 * stage.
+	 */
+	if (likely(current_irq_staged == p)) {
+		if (old->stage == oob) {
+			if (!s && stage_irqs_pending(p))
+				sync_current_irq_stage();
+			goto out;
+		}
+		switch_inband(this_inband_staged());
+	}
+
+	sync_irq_stage(oob);
+out:
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(run_oob_call);
+
+int enable_oob_stage(const char *name)
+{
+	struct irq_event_map *map;
+	struct irq_stage_data *p;
+	int cpu, ret;
+
+	if (oob_stage_present())
+		return -EBUSY;
+
+	/* Set up the out-of-band interrupt stage on all CPUs. */
+
+	for_each_possible_cpu(cpu) {
+		p = &per_cpu(irq_pipeline.stages, cpu)[1];
+		map = p->log.map; /* save/restore after memset(). */
+		memset(p, 0, sizeof(*p));
+		p->stage = &oob_stage;
+		memset(map, 0, sizeof(struct irq_event_map));
+		p->log.map = map;
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+		p->cpu = cpu;
+#endif
+	}
+
+	ret = arch_enable_oob_stage();
+	if (ret)
+		return ret;
+
+	oob_stage.name = name;
+	smp_wmb();
+	oob_stage.index = 1;
+
+	pr_info("IRQ pipeline: high-priority %s stage added.\n", name);
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(enable_oob_stage);
+
+void disable_oob_stage(void)
+{
+	const char *name = oob_stage.name;
+
+	WARN_ON(!running_inband() || !oob_stage_present());
+
+	oob_stage.index = 0;
+	smp_wmb();
+
+	pr_info("IRQ pipeline: %s stage removed.\n", name);
+}
+EXPORT_SYMBOL_GPL(disable_oob_stage);
+
+void irq_pipeline_oops(void)
+{
+	irq_pipeline_oopsing = true;
+	inband_irq_disable();
+	hard_local_irq_disable();
+}
+
+/*
+ * Used to save/restore the status bits of the inband stage across runs
+ * of NMI-triggered code, so that we can restore the original pipeline
+ * state before leaving NMI context.
+ */
+static DEFINE_PER_CPU(unsigned long, nmi_saved_status);
+
+void irq_pipeline_nmi_enter(void)
+{
+	struct irq_stage_data *p = this_inband_staged();
+	raw_cpu_write(nmi_saved_status, p->status);
+
+}
+EXPORT_SYMBOL(irq_pipeline_nmi_enter);
+
+void irq_pipeline_nmi_exit(void)
+{
+	struct irq_stage_data *p = this_inband_staged();
+	p->status = raw_cpu_read(nmi_saved_status);
+}
+EXPORT_SYMBOL(irq_pipeline_nmi_exit);
+
+bool irq_pipeline_steal_tick(void) /* Preemption disabled. */
+{
+	struct irq_pipeline_data *p;
+
+	p = raw_cpu_ptr(&irq_pipeline);
+
+	return arch_steal_pipelined_tick(&p->tick_regs);
+}
+
+bool __weak irq_cpuidle_control(struct cpuidle_device *dev,
+				struct cpuidle_state *state)
+{
+	/*
+	 * Allow entering the idle state by default, matching the
+	 * original behavior when CPU_IDLE is turned
+	 * on. irq_cpuidle_control() may be overriden by an
+	 * out-of-band code for determining whether the CPU may
+	 * actually enter the idle state.
+	 */
+	return true;
+}
+
+bool irq_cpuidle_enter(struct cpuidle_device *dev,
+		       struct cpuidle_state *state)
+{
+	struct irq_stage_data *p;
+
+	WARN_ON_ONCE(irq_pipeline_debug() && !irqs_disabled());
+
+	hard_local_irq_disable();
+	p = this_inband_staged();
+
+	/*
+	 * Pending IRQ(s) waiting for delivery to the inband stage, or
+	 * the arbitrary decision of a co-kernel may deny the
+	 * transition to a deeper C-state. Note that we return from
+	 * this call with hard irqs off, so that we won't allow any
+	 * interrupt to sneak into the IRQ log until we reach the
+	 * processor idling code, or leave the CPU idle framework
+	 * without sleeping.
+	 */
+	return !stage_irqs_pending(p) && irq_cpuidle_control(dev, state);
+}
+
+static unsigned int inband_work_sirq;
+
+static irqreturn_t inband_work_interrupt(int sirq, void *dev_id)
+{
+	irq_work_run();
+
+	return IRQ_HANDLED;
+}
+
+static struct irqaction inband_work = {
+	.handler = inband_work_interrupt,
+	.name = "in-band work",
+	.flags = IRQF_NO_THREAD,
+};
+
+void irq_local_work_raise(void)
+{
+	unsigned long flags;
+
+	/*
+	 * irq_work_queue() may be called from the in-band stage too
+	 * in case we want to delay a work until the hard irqs are on
+	 * again, so we may only sync the in-band log when unstalled,
+	 * with hard irqs on.
+	 */
+	flags = hard_local_irq_save();
+	irq_post_inband(inband_work_sirq);
+	if (running_inband() &&
+	    !hard_irqs_disabled_flags(flags) && !irqs_disabled())
+		sync_current_irq_stage();
+	hard_local_irq_restore(flags);
+}
+
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+
+#ifdef CONFIG_LOCKDEP
+static inline bool lockdep_on_error(void)
+{
+	return !debug_locks;
+}
+#else
+static inline bool lockdep_on_error(void)
+{
+	return false;
+}
+#endif
+
+notrace void check_inband_stage(void)
+{
+	struct irq_stage *this_stage;
+	unsigned long flags;
+
+	flags = hard_smp_local_irq_save();
+
+	this_stage = current_irq_stage;
+	if (likely(this_stage == &inband_stage &&
+		   !test_stage_bit(STAGE_STALL_BIT, this_oob_staged()))) {
+		hard_smp_local_irq_restore(flags);
+		return;
+	}
+
+	if (in_nmi() || irq_pipeline_oopsing || lockdep_on_error()) {
+		hard_smp_local_irq_restore(flags);
+		return;
+	}
+
+	/*
+	 * This will disable all further pipeline debug checks, since
+	 * a wrecked interrupt state is likely to trigger many of
+	 * them, ending up in a terrible mess. IOW, the current
+	 * situation must be fixed prior to investigating any
+	 * subsequent issue that might still exist.
+	 */
+	irq_pipeline_oopsing = true;
+
+	hard_smp_local_irq_restore(flags);
+
+	if (this_stage != &inband_stage)
+		pr_err("IRQ pipeline: some code running in oob context '%s'\n"
+		       "              called an in-band only routine\n",
+		       this_stage->name);
+	else
+		pr_err("IRQ pipeline: oob stage found stalled while modifying in-band\n"
+		       "              interrupt state and/or running sleeping code\n");
+
+	dump_stack();
+}
+EXPORT_SYMBOL(check_inband_stage);
+
+#endif /* CONFIG_DEBUG_IRQ_PIPELINE */
+
+static inline void fixup_percpu_data(void)
+{
+#ifdef CONFIG_SMP
+	struct irq_pipeline_data *p;
+	int cpu;
+
+	/*
+	 * A temporary event log is used by the inband stage during the
+	 * early boot up (bootup_irq_map), until the per-cpu areas
+	 * have been set up.
+	 *
+	 * Obviously, this code must run over the boot CPU, before SMP
+	 * operations start, with hard IRQs off so that nothing can
+	 * change under our feet.
+	 */
+	WARN_ON(smp_processor_id() || !hard_irqs_disabled());
+
+	memcpy(&per_cpu(irq_map_array, 0)[0], &bootup_irq_map,
+	       sizeof(struct irq_event_map));
+
+	for_each_possible_cpu(cpu) {
+		p = &per_cpu(irq_pipeline, cpu);
+		p->stages[0].stage = &inband_stage;
+		p->stages[0].log.map = &per_cpu(irq_map_array, cpu)[0];
+		p->stages[1].log.map = &per_cpu(irq_map_array, cpu)[1];
+#ifdef CONFIG_DEBUG_IRQ_PIPELINE
+		p->stages[0].cpu = cpu;
+		p->stages[1].cpu = cpu;
+#endif
+	}
+#endif
+}
+
+void __init irq_pipeline_init_early(void)
+{
+	/*
+	 * This is called early from start_kernel(), even before the
+	 * actual number of IRQs is known. We are running on the boot
+	 * CPU, hw interrupts are off, and secondary CPUs are still
+	 * lost in space. Careful.
+	 */
+	fixup_percpu_data();
+}
+
+/**
+ *	irq_pipeline_init - Main pipeline core inits
+ *
+ *	This is step #2 of the 3-step pipeline initialization, which
+ *	should happen right after init_IRQ() has run. The internal
+ *	service interrupts are created along with the synthetic IRQ
+ *	domain, and the arch-specific init chores are performed too.
+ *
+ *	Interrupt pipelining should be fully functional when this
+ *	routine returns.
+ */
+void __init irq_pipeline_init(void)
+{
+	WARN_ON(!hard_irqs_disabled());
+
+	synthetic_irq_domain = irq_domain_add_nomap(NULL, ~0,
+						    &sirq_domain_ops,
+						    NULL);
+	inband_work_sirq = irq_create_direct_mapping(synthetic_irq_domain);
+	setup_percpu_irq(inband_work_sirq, &inband_work);
+
+	/*
+	 * We are running on the boot CPU, hw interrupts are off, and
+	 * secondary CPUs are still lost in space. Now we may run
+	 * arch-specific code for enabling the pipeline.
+	 */
+	arch_irq_pipeline_init();
+
+	irq_pipeline_active = true;
+
+	pr_info("IRQ pipeline enabled\n");
+}
+
+#ifndef CONFIG_SPARSE_IRQ
+EXPORT_SYMBOL_GPL(irq_desc);
+#endif
diff --git a/kernel/irq/resend.c b/kernel/irq/resend.c
index 98c04ca5fa43..3c608e540d7a 100644
--- a/kernel/irq/resend.c
+++ b/kernel/irq/resend.c
@@ -16,10 +16,11 @@
 #include <linux/module.h>
 #include <linux/random.h>
 #include <linux/interrupt.h>
+#include <linux/irq_pipeline.h>
 
 #include "internals.h"
 
-#ifdef CONFIG_HARDIRQS_SW_RESEND
+#if defined(CONFIG_HARDIRQS_SW_RESEND) && !defined(CONFIG_IRQ_PIPELINE)
 
 /* Bitmap to handle software resend of interrupts: */
 static DECLARE_BITMAP(irqs_resend, IRQ_BITMAP_BITS);
@@ -70,6 +71,9 @@ void check_irq_resend(struct irq_desc *desc)
 		return;
 	if (desc->istate & IRQS_PENDING) {
 		desc->istate &= ~IRQS_PENDING;
+#ifdef CONFIG_IRQ_PIPELINE
+		irq_inject_pipeline(irq_desc_get_irq(desc));
+#else
 		desc->istate |= IRQS_REPLAY;
 
 		if (!desc->irq_data.chip->irq_retrigger ||
@@ -98,5 +102,6 @@ void check_irq_resend(struct irq_desc *desc)
 			tasklet_schedule(&resend_tasklet);
 #endif
 		}
+#endif	/* CONFIG_IRQ_PIPELINE */
 	}
 }
diff --git a/kernel/irq/settings.h b/kernel/irq/settings.h
index e43795cd2ccf..adc2fd0ed47b 100644
--- a/kernel/irq/settings.h
+++ b/kernel/irq/settings.h
@@ -17,6 +17,8 @@ enum {
 	_IRQ_PER_CPU_DEVID	= IRQ_PER_CPU_DEVID,
 	_IRQ_IS_POLLED		= IRQ_IS_POLLED,
 	_IRQ_DISABLE_UNLAZY	= IRQ_DISABLE_UNLAZY,
+	_IRQ_OOB		= IRQ_OOB,
+	_IRQ_CHAINED		= IRQ_CHAINED,
 	_IRQF_MODIFY_MASK	= IRQF_MODIFY_MASK,
 };
 
@@ -31,6 +33,8 @@ enum {
 #define IRQ_PER_CPU_DEVID	GOT_YOU_MORON
 #define IRQ_IS_POLLED		GOT_YOU_MORON
 #define IRQ_DISABLE_UNLAZY	GOT_YOU_MORON
+#define IRQ_OOB			GOT_YOU_MORON
+#define IRQ_CHAINED		GOT_YOU_MORON
 #undef IRQF_MODIFY_MASK
 #define IRQF_MODIFY_MASK	GOT_YOU_MORON
 
@@ -167,3 +171,33 @@ static inline void irq_settings_clr_disable_unlazy(struct irq_desc *desc)
 {
 	desc->status_use_accessors &= ~_IRQ_DISABLE_UNLAZY;
 }
+
+static inline bool irq_settings_is_oob(struct irq_desc *desc)
+{
+	return desc->status_use_accessors & _IRQ_OOB;
+}
+
+static inline void irq_settings_clr_oob(struct irq_desc *desc)
+{
+	desc->status_use_accessors &= ~_IRQ_OOB;
+}
+
+static inline void irq_settings_set_oob(struct irq_desc *desc)
+{
+	desc->status_use_accessors |= _IRQ_OOB;
+}
+
+static inline bool irq_settings_is_chained(struct irq_desc *desc)
+{
+	return desc->status_use_accessors & _IRQ_CHAINED;
+}
+
+static inline void irq_settings_set_chained(struct irq_desc *desc)
+{
+	desc->status_use_accessors |= _IRQ_CHAINED;
+}
+
+static inline void irq_settings_clr_chained(struct irq_desc *desc)
+{
+	desc->status_use_accessors &= ~_IRQ_CHAINED;
+}
diff --git a/kernel/irq_work.c b/kernel/irq_work.c
index d42acaf81886..332994d90d9f 100644
--- a/kernel/irq_work.c
+++ b/kernel/irq_work.c
@@ -57,6 +57,11 @@ void __weak arch_irq_work_raise(void)
 	 */
 }
 
+void __weak irq_local_work_raise(void)
+{
+	arch_irq_work_raise();
+}
+
 /* Enqueue on current CPU, work must already be claimed and preempt disabled */
 static void __irq_work_queue_local(struct irq_work *work)
 {
@@ -64,10 +69,10 @@ static void __irq_work_queue_local(struct irq_work *work)
 	if (work->flags & IRQ_WORK_LAZY) {
 		if (llist_add(&work->llnode, this_cpu_ptr(&lazy_list)) &&
 		    tick_nohz_tick_stopped())
-			arch_irq_work_raise();
+			irq_local_work_raise();
 	} else {
 		if (llist_add(&work->llnode, this_cpu_ptr(&raised_list)))
-			arch_irq_work_raise();
+			irq_local_work_raise();
 	}
 }
 
diff --git a/kernel/locking/Makefile b/kernel/locking/Makefile
index 45452facff3b..b875192f9774 100644
--- a/kernel/locking/Makefile
+++ b/kernel/locking/Makefile
@@ -25,6 +25,7 @@ obj-$(CONFIG_RT_MUTEXES) += rtmutex.o
 obj-$(CONFIG_DEBUG_RT_MUTEXES) += rtmutex-debug.o
 obj-$(CONFIG_DEBUG_SPINLOCK) += spinlock.o
 obj-$(CONFIG_DEBUG_SPINLOCK) += spinlock_debug.o
+obj-$(CONFIG_IRQ_PIPELINE) += pipeline.o
 obj-$(CONFIG_QUEUED_RWLOCKS) += qrwlock.o
 obj-$(CONFIG_LOCK_TORTURE_TEST) += locktorture.o
 obj-$(CONFIG_WW_MUTEX_SELFTEST) += test-ww_mutex.o
diff --git a/kernel/locking/lockdep.c b/kernel/locking/lockdep.c
index 233459c03b5a..7bb244f618f9 100644
--- a/kernel/locking/lockdep.c
+++ b/kernel/locking/lockdep.c
@@ -42,6 +42,7 @@
 #include <linux/stacktrace.h>
 #include <linux/debug_locks.h>
 #include <linux/irqflags.h>
+#include <linux/irqstage.h>
 #include <linux/utsname.h>
 #include <linux/hash.h>
 #include <linux/ftrace.h>
@@ -765,6 +766,53 @@ static int static_obj(const void *obj)
 }
 #endif
 
+static inline bool lockdep_stage_disabled(void)
+{
+	return stage_disabled();
+}
+
+#ifdef CONFIG_IRQ_PIPELINE
+/*
+ * If LOCKDEP is enabled, we want irqs to be disabled for both stages
+ * when traversing the lockdep code for hard and mutable locks (at the
+ * expense of massive latency overhead though).
+ */
+static inline unsigned long lockdep_stage_test_and_disable(int *irqsoff)
+{
+	return test_and_disable_stage(irqsoff);
+}
+
+static inline unsigned long lockdep_stage_disable(void)
+{
+	return lockdep_stage_test_and_disable(NULL);
+}
+
+static inline void lockdep_stage_restore(unsigned long flags)
+{
+	restore_stage(flags);
+}
+
+#else
+
+#define lockdep_stage_test_and_disable(__irqsoff)		\
+	({							\
+		unsigned long __flags;				\
+		raw_local_irq_save(__flags);			\
+		*(__irqsoff) = irqs_disabled_flags(__flags);	\
+		__flags;					\
+	})
+
+#define lockdep_stage_disable()					\
+	({							\
+		unsigned long __flags;				\
+		raw_local_irq_save(__flags);			\
+		__flags;					\
+	})
+
+#define lockdep_stage_restore(__flags)		raw_local_irq_restore(__flags)
+
+#endif /* !CONFIG_IRQ_PIPELINE */
+
 /*
  * To make lock name printouts unique, we calculate a unique
  * class->name_version generation counter. The caller must hold the graph
@@ -828,7 +876,7 @@ look_up_lock_class(const struct lockdep_map *lock, unsigned int subclass)
 	/*
 	 * We do an RCU walk of the hash, see lockdep_free_key_range().
 	 */
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return NULL;
 
 	hlist_for_each_entry_rcu(class, hash_head, hash_entry) {
@@ -1180,7 +1228,7 @@ register_lock_class(struct lockdep_map *lock, unsigned int subclass, int force)
 	struct hlist_head *hash_head;
 	struct lock_class *class;
 
-	DEBUG_LOCKS_WARN_ON(!irqs_disabled());
+	DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled());
 
 	class = look_up_lock_class(lock, subclass);
 	if (likely(class))
@@ -1492,7 +1540,7 @@ static int __bfs(struct lock_list *source_entry,
 
 		head = get_dep_list(lock, offset);
 
-		DEBUG_LOCKS_WARN_ON(!irqs_disabled());
+		DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled());
 
 		list_for_each_entry_rcu(entry, head, entry) {
 			if (!lock_accessed(entry)) {
@@ -2804,7 +2852,7 @@ static inline int add_chain_cache(struct task_struct *curr,
 	 * disabled to make this an IRQ-safe lock.. for recursion reasons
 	 * lockdep won't complain about its own locking errors.
 	 */
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return 0;
 
 	chain = alloc_lock_chain();
@@ -3414,7 +3462,7 @@ void lockdep_hardirqs_on(unsigned long ip)
 	 * already enabled, yet we find the hardware thinks they are in fact
 	 * enabled.. someone messed up their IRQ state tracing.
 	 */
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return;
 
 	/*
@@ -3450,7 +3498,7 @@ void lockdep_hardirqs_off(unsigned long ip)
 	 * So we're supposed to get called after you mask local IRQs, but for
 	 * some reason the hardware doesn't quite think you did a proper job.
 	 */
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return;
 
 	if (curr->hardirqs_enabled) {
@@ -3480,7 +3528,7 @@ void trace_softirqs_on(unsigned long ip)
 	 * We fancy IRQs being disabled here, see softirq.c, avoids
 	 * funny state and nesting things.
 	 */
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return;
 
 	if (curr->softirqs_enabled) {
@@ -3519,7 +3567,7 @@ void trace_softirqs_off(unsigned long ip)
 	/*
 	 * We fancy IRQs being disabled here, see softirq.c
 	 */
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return;
 
 	if (curr->softirqs_enabled) {
@@ -4086,7 +4134,7 @@ static int reacquire_held_locks(struct task_struct *curr, unsigned int depth,
 	struct held_lock *hlock;
 	int first_idx = idx;
 
-	if (DEBUG_LOCKS_WARN_ON(!irqs_disabled()))
+	if (DEBUG_LOCKS_WARN_ON(!lockdep_stage_disabled()))
 		return 0;
 
 	for (hlock = curr->held_locks + idx; idx < depth; idx++, hlock++) {
@@ -4397,7 +4445,13 @@ static void __lock_unpin_lock(struct lockdep_map *lock, struct pin_cookie cookie
 static void check_flags(unsigned long flags)
 {
 #if defined(CONFIG_PROVE_LOCKING) && defined(CONFIG_DEBUG_LOCKDEP)
-	if (!debug_locks)
+	/*
+	 * irq_pipeline: we can't and don't want to check the
+	 * consistency of the irq tracer when running over the
+	 * pipeline entry or oob stage contexts, since the inband
+	 * stall bit does not reflect the current irq state there.
+	 */
+	if (on_pipeline_entry() || running_oob() || !debug_locks)
 		return;
 
 	if (irqs_disabled_flags(flags)) {
@@ -4475,19 +4529,20 @@ void lock_acquire(struct lockdep_map *lock, unsigned int subclass,
 			  struct lockdep_map *nest_lock, unsigned long ip)
 {
 	unsigned long flags;
+	int irqsoff;
 
 	if (unlikely(current->lockdep_recursion))
 		return;
 
-	raw_local_irq_save(flags);
+	flags = lockdep_stage_test_and_disable(&irqsoff);
 	check_flags(flags);
 
 	current->lockdep_recursion = 1;
 	trace_lock_acquire(lock, subclass, trylock, read, check, nest_lock, ip);
 	__lock_acquire(lock, subclass, trylock, read, check,
-		       irqs_disabled_flags(flags), nest_lock, ip, 0, 0);
+		       irqsoff, nest_lock, ip, 0, 0);
 	current->lockdep_recursion = 0;
-	raw_local_irq_restore(flags);
+	lockdep_stage_restore(flags);
 }
 EXPORT_SYMBOL_GPL(lock_acquire);
 
@@ -4499,14 +4554,14 @@ void lock_release(struct lockdep_map *lock, int nested,
 	if (unlikely(current->lockdep_recursion))
 		return;
 
-	raw_local_irq_save(flags);
+	flags = lockdep_stage_disable();
 	check_flags(flags);
 	current->lockdep_recursion = 1;
 	trace_lock_release(lock, ip);
 	if (__lock_release(lock, ip))
 		check_chain_key(current);
 	current->lockdep_recursion = 0;
-	raw_local_irq_restore(flags);
+	lockdep_stage_restore(flags);
 }
 EXPORT_SYMBOL_GPL(lock_release);
 
@@ -4518,13 +4573,13 @@ int lock_is_held_type(const struct lockdep_map *lock, int read)
 	if (unlikely(current->lockdep_recursion))
 		return 1; /* avoid false negative lockdep_assert_held() */
 
-	raw_local_irq_save(flags);
+	flags = lockdep_stage_disable();
 	check_flags(flags);
 
 	current->lockdep_recursion = 1;
 	ret = __lock_is_held(lock, read);
 	current->lockdep_recursion = 0;
-	raw_local_irq_restore(flags);
+	lockdep_stage_restore(flags);
 
 	return ret;
 }
@@ -4714,13 +4769,13 @@ void lock_contended(struct lockdep_map *lock, unsigned long ip)
 	if (unlikely(current->lockdep_recursion))
 		return;
 
-	raw_local_irq_save(flags);
+	flags = lockdep_stage_disable();
 	check_flags(flags);
 	current->lockdep_recursion = 1;
 	trace_lock_contended(lock, ip);
 	__lock_contended(lock, ip);
 	current->lockdep_recursion = 0;
-	raw_local_irq_restore(flags);
+	lockdep_stage_restore(flags);
 }
 EXPORT_SYMBOL_GPL(lock_contended);
 
@@ -4734,12 +4789,12 @@ void lock_acquired(struct lockdep_map *lock, unsigned long ip)
 	if (unlikely(current->lockdep_recursion))
 		return;
 
-	raw_local_irq_save(flags);
+	flags = lockdep_stage_disable();
 	check_flags(flags);
 	current->lockdep_recursion = 1;
 	__lock_acquired(lock, ip);
 	current->lockdep_recursion = 0;
-	raw_local_irq_restore(flags);
+	lockdep_stage_restore(flags);
 }
 EXPORT_SYMBOL_GPL(lock_acquired);
 #endif
@@ -5287,7 +5342,7 @@ void debug_check_no_locks_freed(const void *mem_from, unsigned long mem_len)
 	if (unlikely(!debug_locks))
 		return;
 
-	raw_local_irq_save(flags);
+	flags = lockdep_stage_disable();
 	for (i = 0; i < curr->lockdep_depth; i++) {
 		hlock = curr->held_locks + i;
 
@@ -5298,7 +5353,7 @@ void debug_check_no_locks_freed(const void *mem_from, unsigned long mem_len)
 		print_freed_lock_bug(curr, mem_from, mem_from + mem_len, hlock);
 		break;
 	}
-	raw_local_irq_restore(flags);
+	lockdep_stage_restore(flags);
 }
 EXPORT_SYMBOL_GPL(debug_check_no_locks_freed);
 
diff --git a/kernel/locking/lockdep_internals.h b/kernel/locking/lockdep_internals.h
index 18d85aebbb57..accaa7f35cdd 100644
--- a/kernel/locking/lockdep_internals.h
+++ b/kernel/locking/lockdep_internals.h
@@ -196,12 +196,12 @@ extern struct lock_class lock_classes[MAX_LOCKDEP_KEYS];
 	this_cpu_inc(lockdep_stats.ptr);
 
 #define debug_atomic_inc(ptr)			{		\
-	WARN_ON_ONCE(!irqs_disabled());				\
+	WARN_ON_ONCE(!hard_irqs_disabled() && !irqs_disabled());\
 	__this_cpu_inc(lockdep_stats.ptr);			\
 }
 
 #define debug_atomic_dec(ptr)			{		\
-	WARN_ON_ONCE(!irqs_disabled());				\
+	WARN_ON_ONCE(!hard_irqs_disabled() && !irqs_disabled());\
 	__this_cpu_dec(lockdep_stats.ptr);			\
 }
 
diff --git a/kernel/locking/pipeline.c b/kernel/locking/pipeline.c
new file mode 100644
index 000000000000..61190ab5e0e4
--- /dev/null
+++ b/kernel/locking/pipeline.c
@@ -0,0 +1,230 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2016 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/linkage.h>
+#include <linux/preempt.h>
+#include <linux/spinlock.h>
+#include <linux/interrupt.h>
+#include <linux/irq_pipeline.h>
+#include <linux/kconfig.h>
+
+/*
+ * A mutable spinlock behaves in different ways depending on the
+ * current interrupt stage on entry.
+ *
+ * Such spinlock always leaves hard IRQs disabled once locked. In
+ * addition, it stalls the in-band stage when protecting a critical
+ * section there, disabling preemption like regular spinlocks do as
+ * well. This combination preserves the regular locking logic when
+ * called from the in-band stage, while fully disabling preemption by
+ * other interrupt stages.
+ *
+ * When taken from the pipeline entry context, a mutable lock behaves
+ * like a hard spinlock, assuming that hard IRQs are already disabled.
+ *
+ * The irq descriptor lock (struct irq_desc) is a typical example of
+ * such lock, which properly serializes accesses regardless of the
+ * calling context.
+ */
+void __mutable_spin_lock(struct raw_spinlock *rlock)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	if (running_inband())
+		preempt_disable();
+
+	__flags = hard_local_irq_save();
+	hard_lock_acquire(rlock, 0, _RET_IP_);
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	lock->hwflags = __flags;
+}
+EXPORT_SYMBOL(__mutable_spin_lock);
+
+void __mutable_spin_lock_nested(struct raw_spinlock *rlock, int subclass)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	if (running_inband())
+		preempt_disable();
+
+	__flags = hard_local_irq_save();
+	hard_lock_acquire_nested(rlock, subclass, _RET_IP_);
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	lock->hwflags = __flags;
+}
+EXPORT_SYMBOL(__mutable_spin_lock_nested);
+
+void __mutable_spin_unlock(struct raw_spinlock *rlock)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	/* Pick the flags before releasing the lock. */
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	__flags = lock->hwflags;
+	hard_lock_release(rlock, _RET_IP_);
+	hard_local_irq_restore(__flags);
+
+	if (running_inband())
+		preempt_enable();
+}
+EXPORT_SYMBOL(__mutable_spin_unlock);
+
+void __mutable_spin_lock_irq(struct raw_spinlock *rlock)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	__flags = hard_local_irq_save();
+
+	if (running_inband()) {
+		set_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+		trace_hardirqs_off();
+		preempt_disable();
+	}
+
+	hard_lock_acquire(rlock, 0, _RET_IP_);
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	lock->hwflags = __flags;
+}
+EXPORT_SYMBOL(__mutable_spin_lock_irq);
+
+void __mutable_spin_unlock_irq(struct raw_spinlock *rlock)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	/* Pick the flags before releasing the lock. */
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	__flags = lock->hwflags;
+	hard_lock_release(rlock, _RET_IP_);
+
+	if (running_inband()) {
+		trace_hardirqs_on();
+		clear_stage_bit(STAGE_STALL_BIT, this_inband_staged());
+		hard_local_irq_restore(__flags);
+		preempt_enable();
+		return;
+	}
+
+	hard_local_irq_restore(__flags);
+}
+EXPORT_SYMBOL(__mutable_spin_unlock_irq);
+
+unsigned long __mutable_spin_lock_irqsave(struct raw_spinlock *rlock)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags, flags;
+
+	__flags = flags = hard_local_irq_save();
+
+	if (running_inband()) {
+		flags = test_and_set_stage_bit(STAGE_STALL_BIT,
+				       this_inband_staged());
+		trace_hardirqs_off();
+		preempt_disable();
+	}
+
+	hard_lock_acquire(rlock, 0, _RET_IP_);
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	lock->hwflags = __flags;
+
+	return flags;
+}
+EXPORT_SYMBOL(__mutable_spin_lock_irqsave);
+
+void __mutable_spin_unlock_irqrestore(struct raw_spinlock *rlock,
+				      unsigned long flags)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	/* Pick the flags before releasing the lock. */
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	__flags = lock->hwflags;
+	hard_lock_release(rlock, _RET_IP_);
+
+	if (running_inband()) {
+		if (!flags) {
+			trace_hardirqs_on();
+			clear_stage_bit(STAGE_STALL_BIT,
+					this_inband_staged());
+		}
+		hard_local_irq_restore(__flags);
+		preempt_enable();
+		return;
+	}
+
+	hard_local_irq_restore(__flags);
+}
+EXPORT_SYMBOL(__mutable_spin_unlock_irqrestore);
+
+int __mutable_spin_trylock(struct raw_spinlock *rlock)
+{
+	struct mutable_spinlock *lock;
+	unsigned long __flags;
+
+	if (running_inband())
+		preempt_disable();
+
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	__flags = hard_local_irq_save();
+
+	if (do_raw_spin_trylock(rlock)) {
+		lock->hwflags = __flags;
+		hard_trylock_acquire(rlock, 1, _RET_IP_);
+		return 1;
+	}
+
+	hard_local_irq_restore(__flags);
+
+	if (running_inband())
+		preempt_enable();
+
+	return 0;
+}
+EXPORT_SYMBOL(__mutable_spin_trylock);
+
+int __mutable_spin_trylock_irqsave(struct raw_spinlock *rlock,
+				   unsigned long *flags)
+{
+	struct mutable_spinlock *lock;
+	struct irq_stage_data *p;
+	unsigned long __flags;
+	bool inband;
+
+	inband = running_inband();
+
+	__flags = *flags = hard_local_irq_save();
+
+	p = this_inband_staged();
+	lock = container_of(rlock, struct mutable_spinlock, rlock);
+	if (inband) {
+		*flags = test_and_set_stage_bit(STAGE_STALL_BIT, p);
+		trace_hardirqs_off();
+		preempt_disable();
+	}
+
+	if (do_raw_spin_trylock(rlock)) {
+		hard_trylock_acquire(rlock, 1, _RET_IP_);
+		lock->hwflags = __flags;
+		return 1;
+	}
+
+	if (inband && !*flags) {
+		trace_hardirqs_on();
+		clear_stage_bit(STAGE_STALL_BIT, p);
+	}
+
+	hard_local_irq_restore(__flags);
+
+	if (inband)
+		preempt_enable();
+
+	return 0;
+}
+EXPORT_SYMBOL(__mutable_spin_trylock_irqsave);
diff --git a/kernel/locking/spinlock_debug.c b/kernel/locking/spinlock_debug.c
index 399669f7eba8..a6b3a703f93c 100644
--- a/kernel/locking/spinlock_debug.c
+++ b/kernel/locking/spinlock_debug.c
@@ -114,6 +114,7 @@ void do_raw_spin_lock(raw_spinlock_t *lock)
 	mmiowb_spin_lock();
 	debug_spin_lock_after(lock);
 }
+EXPORT_SYMBOL_GPL(do_raw_spin_lock);
 
 int do_raw_spin_trylock(raw_spinlock_t *lock)
 {
@@ -131,6 +132,7 @@ int do_raw_spin_trylock(raw_spinlock_t *lock)
 #endif
 	return ret;
 }
+EXPORT_SYMBOL_GPL(do_raw_spin_trylock);
 
 void do_raw_spin_unlock(raw_spinlock_t *lock)
 {
@@ -138,6 +140,7 @@ void do_raw_spin_unlock(raw_spinlock_t *lock)
 	debug_spin_unlock(lock);
 	arch_spin_unlock(&lock->raw_lock);
 }
+EXPORT_SYMBOL_GPL(do_raw_spin_unlock);
 
 static void rwlock_bug(rwlock_t *lock, const char *msg)
 {
diff --git a/kernel/notifier.c b/kernel/notifier.c
index d9f5081d578d..1da0eb3e2102 100644
--- a/kernel/notifier.c
+++ b/kernel/notifier.c
@@ -192,6 +192,9 @@ NOKPROBE_SYMBOL(__atomic_notifier_call_chain);
 int atomic_notifier_call_chain(struct atomic_notifier_head *nh,
 			       unsigned long val, void *v)
 {
+	if (!running_inband())
+		return notifier_call_chain(&nh->head, val, v, -1, NULL);
+
 	return __atomic_notifier_call_chain(nh, val, v, -1, NULL);
 }
 EXPORT_SYMBOL_GPL(atomic_notifier_call_chain);
diff --git a/kernel/panic.c b/kernel/panic.c
index f470a038b05b..6a73816b9903 100644
--- a/kernel/panic.c
+++ b/kernel/panic.c
@@ -27,6 +27,7 @@
 #include <linux/sysrq.h>
 #include <linux/init.h>
 #include <linux/nmi.h>
+#include <linux/irq_pipeline.h>
 #include <linux/console.h>
 #include <linux/bug.h>
 #include <linux/ratelimit.h>
@@ -41,7 +42,7 @@ static unsigned long tainted_mask =
 	IS_ENABLED(CONFIG_GCC_PLUGIN_RANDSTRUCT) ? (1 << TAINT_RANDSTRUCT) : 0;
 static int pause_on_oops;
 static int pause_on_oops_flag;
-static DEFINE_SPINLOCK(pause_on_oops_lock);
+static DEFINE_HARD_SPINLOCK(pause_on_oops_lock);
 bool crash_kexec_post_notifiers;
 int panic_on_warn __read_mostly;
 
@@ -179,8 +180,9 @@ void panic(const char *fmt, ...)
 	 * there is nothing to prevent an interrupt handler (that runs
 	 * after setting panic_cpu) from invoking panic() again.
 	 */
-	local_irq_disable();
+	hard_local_irq_disable();
 	preempt_disable_notrace();
+	irq_pipeline_oops();
 
 	/*
 	 * It's possible to come here directly from a panic-assertion and
@@ -257,9 +259,12 @@ void panic(const char *fmt, ...)
 
 	/*
 	 * Run any panic handlers, including those that might need to
-	 * add information to the kmsg dump output.
+	 * add information to the kmsg dump output. Skip panic
+	 * handlers if running over the oob stage, as they would most
+	 * likely break.
 	 */
-	atomic_notifier_call_chain(&panic_notifier_list, 0, buf);
+	if (running_inband())
+		atomic_notifier_call_chain(&panic_notifier_list, 0, buf);
 
 	/* Call flush even twice. It tries harder with a single online CPU */
 	printk_safe_flush_on_panic();
@@ -459,7 +464,7 @@ static void do_oops_enter_exit(void)
 	if (!pause_on_oops)
 		return;
 
-	spin_lock_irqsave(&pause_on_oops_lock, flags);
+	raw_spin_lock_irqsave(&pause_on_oops_lock, flags);
 	if (pause_on_oops_flag == 0) {
 		/* This CPU may now print the oops message */
 		pause_on_oops_flag = 1;
@@ -469,21 +474,21 @@ static void do_oops_enter_exit(void)
 			/* This CPU gets to do the counting */
 			spin_counter = pause_on_oops;
 			do {
-				spin_unlock(&pause_on_oops_lock);
+				raw_spin_unlock(&pause_on_oops_lock);
 				spin_msec(MSEC_PER_SEC);
-				spin_lock(&pause_on_oops_lock);
+				raw_spin_lock(&pause_on_oops_lock);
 			} while (--spin_counter);
 			pause_on_oops_flag = 0;
 		} else {
 			/* This CPU waits for a different one */
 			while (spin_counter) {
-				spin_unlock(&pause_on_oops_lock);
+				raw_spin_unlock(&pause_on_oops_lock);
 				spin_msec(1);
-				spin_lock(&pause_on_oops_lock);
+				raw_spin_lock(&pause_on_oops_lock);
 			}
 		}
 	}
-	spin_unlock_irqrestore(&pause_on_oops_lock, flags);
+	raw_spin_unlock_irqrestore(&pause_on_oops_lock, flags);
 }
 
 /*
@@ -513,6 +518,7 @@ void oops_enter(void)
 {
 	tracing_off();
 	/* can't trust the integrity of the kernel anymore: */
+	irq_pipeline_oops();
 	debug_locks_off();
 	do_oops_enter_exit();
 }
diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
index 3c0a5a8170b0..463f9b785da0 100644
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@ -290,6 +290,7 @@ static int create_image(int platform_mode)
 		goto Enable_cpus;
 
 	local_irq_disable();
+	hard_cond_local_irq_disable();
 
 	system_state = SYSTEM_SUSPEND;
 
@@ -457,6 +458,7 @@ static int resume_target_kernel(bool platform_mode)
 
 	local_irq_disable();
 	system_state = SYSTEM_SUSPEND;
+	hard_cond_local_irq_disable();
 
 	error = syscore_suspend();
 	if (error)
@@ -578,6 +580,7 @@ int hibernation_platform_enter(void)
 
 	local_irq_disable();
 	system_state = SYSTEM_SUSPEND;
+	hard_cond_local_irq_disable();
 	syscore_suspend();
 	if (pm_wakeup_pending()) {
 		error = -EAGAIN;
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index ca65327a6de8..47ddbbf3901d 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -48,6 +48,7 @@
 #include <linux/sched/clock.h>
 #include <linux/sched/debug.h>
 #include <linux/sched/task_stack.h>
+#include <linux/irqstage.h>
 
 #include <linux/uaccess.h>
 #include <asm/sections.h>
@@ -2114,6 +2115,73 @@ asmlinkage __visible void early_printk(const char *fmt, ...)
 }
 #endif
 
+#ifdef CONFIG_RAW_PRINTK
+static struct console *raw_console;
+static DEFINE_HARD_SPINLOCK(raw_console_lock);
+
+void raw_puts(const char *s, size_t len)
+{
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&raw_console_lock, flags);
+	if (raw_console)
+		raw_console->write_raw(raw_console, s, len);
+	raw_spin_unlock_irqrestore(&raw_console_lock, flags);
+}
+EXPORT_SYMBOL(raw_puts);
+
+void raw_vprintk(const char *fmt, va_list ap)
+{
+	char buf[256];
+	size_t n;
+
+	if (raw_console == NULL || console_suspended)
+		return;
+
+        touch_nmi_watchdog();
+	n = vscnprintf(buf, sizeof(buf), fmt, ap);
+	raw_puts(buf, n);
+}
+EXPORT_SYMBOL(raw_vprintk);
+
+asmlinkage __visible void raw_printk(const char *fmt, ...)
+{
+	va_list ap;
+
+	va_start(ap, fmt);
+	raw_vprintk(fmt, ap);
+	va_end(ap);
+}
+EXPORT_SYMBOL(raw_printk);
+
+static inline void register_raw_console(struct console *newcon)
+{
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&raw_console_lock, flags);
+	if (newcon->write_raw)
+		raw_console = newcon;
+	raw_spin_unlock_irqrestore(&raw_console_lock, flags);
+}
+
+static inline void unregister_raw_console(struct console *oldcon)
+{
+	unsigned long flags;
+
+	raw_spin_lock_irqsave(&raw_console_lock, flags);
+	if (oldcon == raw_console)
+		raw_console = NULL;
+	raw_spin_unlock_irqrestore(&raw_console_lock, flags);
+}
+
+#else
+
+static inline void register_raw_console(struct console *newcon) { }
+
+static inline void unregister_raw_console(struct console *oldcon) { }
+
+#endif
+
 static int __add_preferred_console(char *name, int idx, char *options,
 				   char *brl_options)
 {
@@ -2737,6 +2805,9 @@ void register_console(struct console *newcon)
 	if (!(newcon->flags & CON_ENABLED))
 		return;
 
+	/* The latest raw console to register is current. */
+	register_raw_console(newcon);
+
 	/*
 	 * If we have a bootconsole, and are switching to a real console,
 	 * don't print everything out again, since when the boot console, and
@@ -2820,6 +2891,8 @@ int unregister_console(struct console *console)
 		(console->flags & CON_BOOT) ? "boot" : "" ,
 		console->name, console->index);
 
+	unregister_raw_console(console);
+
 	res = _braille_unregister_console(console);
 	if (res)
 		return res;
diff --git a/kernel/printk/printk_safe.c b/kernel/printk/printk_safe.c
index b4045e782743..ef231ed589d3 100644
--- a/kernel/printk/printk_safe.c
+++ b/kernel/printk/printk_safe.c
@@ -10,6 +10,7 @@
 #include <linux/cpumask.h>
 #include <linux/irq_work.h>
 #include <linux/printk.h>
+#include <linux/irq_pipeline.h>
 
 #include "internal.h"
 
@@ -360,6 +361,9 @@ void __printk_safe_exit(void)
 
 __printf(1, 0) int vprintk_func(const char *fmt, va_list args)
 {
+	if (inband_unsafe())
+		return vprintk_nmi(fmt, args);
+
 	/*
 	 * Try to use the main logbuf even in NMI. But avoid calling console
 	 * drivers that might have their own locks.
diff --git a/kernel/rcu/tree.c b/kernel/rcu/tree.c
index 81105141b6a8..956763448678 100644
--- a/kernel/rcu/tree.c
+++ b/kernel/rcu/tree.c
@@ -897,6 +897,9 @@ bool notrace rcu_is_watching(void)
 {
 	bool ret;
 
+	if (running_oob())
+		return true;
+
 	preempt_disable_notrace();
 	ret = !rcu_dynticks_curr_cpu_in_eqs();
 	preempt_enable_notrace();
diff --git a/kernel/rcu/update.c b/kernel/rcu/update.c
index 1861103662db..74e09509a7ff 100644
--- a/kernel/rcu/update.c
+++ b/kernel/rcu/update.c
@@ -117,6 +117,9 @@ int rcu_read_lock_sched_held(void)
 {
 	bool ret;
 
+	if (irqs_pipelined() &&
+	    (hard_irqs_disabled() || !running_inband()))
+		return true;
 	if (rcu_read_lock_held_common(&ret))
 		return ret;
 	return lock_is_held(&rcu_sched_lock_map) || !preemptible();
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 0f2eb3629070..6fb1e78b39d7 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1678,6 +1678,7 @@ static int __set_cpus_allowed_ptr(struct task_struct *p,
 	if (cpumask_test_cpu(task_cpu(p), new_mask))
 		goto out;
 
+	inband_migration_notify(p, dest_cpu);
 	if (task_running(rq, p) || p->state == TASK_WAKING) {
 		struct migration_arg arg = { p, dest_cpu };
 		/* Need help from migration thread: drop lock and wait. */
@@ -2531,7 +2532,7 @@ try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
 		 *  - we're serialized against set_special_state() by virtue of
 		 *    it disabling IRQs (this allows not taking ->pi_lock).
 		 */
-		if (!(p->state & state))
+		if (!(p->state & state) || task_is_off_stage(p))
 			goto out;
 
 		success = 1;
@@ -2550,7 +2551,7 @@ try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
 	 */
 	raw_spin_lock_irqsave(&p->pi_lock, flags);
 	smp_mb__after_spinlock();
-	if (!(p->state & state))
+	if (!(p->state & state) || task_is_off_stage(p))
 		goto unlock;
 
 	trace_sched_waking(p);
@@ -3158,6 +3159,7 @@ prepare_task_switch(struct rq *rq, struct task_struct *prev,
 	rseq_preempt(prev);
 	fire_sched_out_preempt_notifiers(prev, next);
 	prepare_task(next);
+	prepare_inband_switch(next);
 	prepare_arch_switch(next);
 }
 
@@ -3314,8 +3316,15 @@ asmlinkage __visible void schedule_tail(struct task_struct *prev)
 	 * finish_task_switch() will drop rq->lock() and lower preempt_count
 	 * and the preempt_enable() will end up enabling preemption (on
 	 * PREEMPT_COUNT kernels).
+	 *
+	 * When dovetailing is enabled, schedule_tail() is the place
+	 * where transitions of tasks from the in-band to the oob
+	 * stage completes. The co-kernel is notified that 'prev' is
+	 * now suspended in the in-band stage, and can be safely
+	 * resumed in the oob stage.
 	 */
 
+	oob_trampoline();
 	rq = finish_task_switch(prev);
 	balance_callback(rq);
 	preempt_enable();
@@ -3369,6 +3378,20 @@ context_switch(struct rq *rq, struct task_struct *prev,
 		 */
 		switch_mm_irqs_off(prev->active_mm, next->mm, next);
 
+		/*
+		 * If dovetail is enabled, insert a short window of
+		 * opportunity for preemption by out-of-band IRQs
+		 * before finalizing the context switch.
+		 * dovetail_context_switch() can deal with preempting
+		 * partially switched in-band contexts.
+		 */
+		if (dovetailing()) {
+			struct mm_struct *oldmm = prev->active_mm;
+			prev->active_mm = next->mm;
+			hard_local_irq_sync();
+			prev->active_mm = oldmm;
+		}
+
 		if (!prev->mm) {                        // from kernel
 			/* will mmdrop() in finish_task_switch(). */
 			rq->prev_mm = prev->active_mm;
@@ -3384,6 +3407,15 @@ context_switch(struct rq *rq, struct task_struct *prev,
 	switch_to(prev, next, prev);
 	barrier();
 
+	/*
+	 * If 'next' is on its way to the oob stage, don't run the
+	 * context switch epilogue just yet. We will do that at some
+	 * point later, when the task switches back to the in-band
+	 * stage.
+	 */
+	if (unlikely(inband_switch_tail()))
+		return NULL;
+
 	return finish_task_switch(prev);
 }
 
@@ -3878,6 +3910,8 @@ static inline void schedule_debug(struct task_struct *prev, bool preempt)
 		panic("corrupted stack end detected inside scheduler\n");
 #endif
 
+	check_inband_stage();
+
 #ifdef CONFIG_DEBUG_ATOMIC_SLEEP
 	if (!preempt && prev->state && prev->non_block_count) {
 		printk(KERN_ERR "BUG: scheduling in a non-blocking section: %s/%d/%i\n",
@@ -3995,7 +4029,7 @@ pick_next_task(struct rq *rq, struct task_struct *prev, struct rq_flags *rf)
  *
  * WARNING: must be called with preemption disabled!
  */
-static void __sched notrace __schedule(bool preempt)
+static int __sched notrace __schedule(bool preempt)
 {
 	struct task_struct *prev, *next;
 	unsigned long *switch_count;
@@ -4076,12 +4110,17 @@ static void __sched notrace __schedule(bool preempt)
 
 		/* Also unlocks the rq: */
 		rq = context_switch(rq, prev, next, &rf);
+		if (dovetailing() && rq == NULL)
+			/* Task moved to the oob stage. */
+			return 1;
 	} else {
 		rq->clock_update_flags &= ~(RQCF_ACT_SKIP|RQCF_REQ_SKIP);
 		rq_unlock_irq(rq, &rf);
 	}
 
 	balance_callback(rq);
+
+	return 0;
 }
 
 void __noreturn do_task_dead(void)
@@ -4142,7 +4181,8 @@ asmlinkage __visible void __sched schedule(void)
 	sched_submit_work(tsk);
 	do {
 		preempt_disable();
-		__schedule(false);
+		if (__schedule(false))
+			return;
 		sched_preempt_enable_no_resched();
 	} while (need_resched());
 	sched_update_worker(tsk);
@@ -4223,7 +4263,8 @@ static void __sched notrace preempt_schedule_common(void)
 		 */
 		preempt_disable_notrace();
 		preempt_latency_start(1);
-		__schedule(true);
+		if (__schedule(true))
+			return;
 		preempt_latency_stop(1);
 		preempt_enable_no_resched_notrace();
 
@@ -4245,7 +4286,7 @@ asmlinkage __visible void __sched notrace preempt_schedule(void)
 	 * If there is a non-zero preempt_count or interrupts are disabled,
 	 * we do not want to preempt the current task. Just return..
 	 */
-	if (likely(!preemptible()))
+	if (likely(!running_inband() || !preemptible()))
 		return;
 
 	preempt_schedule_common();
@@ -4271,7 +4312,7 @@ asmlinkage __visible void __sched notrace preempt_schedule_notrace(void)
 {
 	enum ctx_state prev_ctx;
 
-	if (likely(!preemptible()))
+	if (likely(!running_inband() || !preemptible()))
 		return;
 
 	do {
@@ -4307,6 +4348,28 @@ EXPORT_SYMBOL_GPL(preempt_schedule_notrace);
 
 #endif /* CONFIG_PREEMPTION */
 
+#ifdef CONFIG_IRQ_PIPELINE
+static inline void preempt_sync_inband_irqs(void)
+{
+	struct irq_stage_data *p;
+
+	hard_local_irq_disable();
+	p = this_inband_staged();
+	if (unlikely(stage_irqs_pending(p))) {
+		preempt_disable();
+		trace_hardirqs_on();
+		clear_stage_bit(STAGE_STALL_BIT, p);
+		sync_current_irq_stage();
+		preempt_enable_no_resched_notrace();
+	} else
+		clear_stage_bit(STAGE_STALL_BIT, p);
+
+	/* hard IRQs are left disabled. */
+}
+#else
+static inline void preempt_sync_inband_irqs(void) { }
+#endif
+
 /*
  * This is the entry point to schedule() from kernel preemption
  * off of irq context.
@@ -4317,6 +4380,16 @@ asmlinkage __visible void __sched preempt_schedule_irq(void)
 {
 	enum ctx_state prev_state;
 
+	if (irqs_pipelined()) {
+		if (irq_pipeline_debug()) {
+			WARN_ON_ONCE(!running_inband());
+			WARN_ON_ONCE(!hard_irqs_disabled());
+			WARN_ON_ONCE(irqs_disabled());
+		}
+		local_irq_disable();
+		hard_local_irq_enable();
+	}
+
 	/* Catch callers which need to be fixed */
 	BUG_ON(preempt_count() || !irqs_disabled());
 
@@ -4330,6 +4403,15 @@ asmlinkage __visible void __sched preempt_schedule_irq(void)
 		sched_preempt_enable_no_resched();
 	} while (need_resched());
 
+	/*
+	 * If pipelining interrupts, flush any pending IRQ that might
+	 * have been logged since the last time we stalled the in-band
+	 * stage. The caller is expected to call us back again until
+	 * need_resched is clear, so we just need to synchronize the
+	 * in-band stage log.
+	 */
+	preempt_sync_inband_irqs();
+
 	exception_exit(prev_state);
 }
 
@@ -7898,6 +7980,183 @@ struct cgroup_subsys cpu_cgrp_subsys = {
 
 #endif	/* CONFIG_CGROUP_SCHED */
 
+#ifdef CONFIG_DOVETAIL
+
+int dovetail_leave_inband(void)
+{
+	struct task_struct *p = current;
+	struct irq_pipeline_data *pd;
+	unsigned long flags;
+
+	preempt_disable();
+
+	pd = raw_cpu_ptr(&irq_pipeline);
+
+	if (WARN_ON_ONCE(dovetail_debug() && pd->task_inflight))
+		goto out;	/* Paranoid. */
+
+	raw_spin_lock_irqsave(&p->pi_lock, flags);
+	pd->task_inflight = p;
+	/*
+	 * The scope of the off-stage state is broader than _TLF_OOB,
+	 * in that it includes the transition path from the in-band
+	 * context to the oob stage.
+	 */
+	set_thread_local_flags(_TLF_OFFSTAGE);
+	set_current_state(TASK_INTERRUPTIBLE);
+	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
+	sched_submit_work(p);
+	/*
+	 * The current task is scheduled out from the inband stage,
+	 * before resuming on the oob stage. Since this code stands
+	 * for the scheduling tail of the oob scheduler,
+	 * arch_dovetail_switch_finish() is called to perform
+	 * architecture-specific fixups (e.g. fpu context reload).
+	 */
+	if (likely(__schedule(false))) {
+		arch_dovetail_switch_finish(false);
+		return 0;
+	}
+
+	clear_thread_local_flags(_TLF_OFFSTAGE);
+	pd->task_inflight = NULL;
+out:
+	preempt_enable();
+
+	return -ERESTARTSYS;
+}
+EXPORT_SYMBOL_GPL(dovetail_leave_inband);
+
+void dovetail_resume_inband(void)
+{
+	struct task_struct *p;
+	struct rq *rq;
+
+	p = __this_cpu_read(irq_pipeline.rqlock_owner);
+	if (WARN_ON_ONCE(dovetail_debug() && p == NULL))
+		return;
+
+	if (WARN_ON_ONCE(dovetail_debug() && (preempt_count() & STAGE_MASK)))
+		return;
+
+	rq = finish_task_switch(p);
+	balance_callback(rq);
+	preempt_enable();
+	oob_trampoline();
+}
+EXPORT_SYMBOL_GPL(dovetail_resume_inband);
+
+bool dovetail_context_switch(struct dovetail_altsched_context *out,
+			struct dovetail_altsched_context *in,
+			bool leave_inband)
+{
+	struct task_struct *next, *prev, *last;
+	struct mm_struct *prev_mm, *next_mm;
+	unsigned long pc __maybe_unused;
+	bool inband = false;
+
+	if (leave_inband) {
+		struct task_struct *tsk = current;
+		/*
+		 * We are about to leave the current inband context
+		 * for switching to an out-of-band task, save the
+		 * preempted context information.
+		 */
+		out->task = tsk;
+		out->active_mm = tsk->active_mm;
+
+		if (IS_ENABLED(CONFIG_KVM))
+			oob_notify_kvm();
+	}
+
+	arch_dovetail_switch_prepare(leave_inband);
+
+	next = in->task;
+	prev = out->task;
+	prev_mm = out->active_mm;
+	next_mm = in->active_mm;
+
+	if (next_mm == NULL) {
+		in->active_mm = prev_mm;
+		in->borrowed_mm = true;
+		enter_lazy_tlb(prev_mm, next);
+	} else {
+		switch_oob_mm(prev_mm, next_mm, next);
+		/*
+		 * We might be switching back to the inband context
+		 * which we preempted earlier, shortly after "current"
+		 * dropped its mm context in the do_exit() path
+		 * (next->mm == NULL). In such a case, a lazy TLB
+		 * state is expected when leaving the mm.
+		 */
+		if (next->mm == NULL)
+			enter_lazy_tlb(prev_mm, next);
+	}
+
+	if (out->borrowed_mm) {
+		out->borrowed_mm = false;
+		out->active_mm = NULL;
+	}
+
+	/*
+	 * Tasks running out-of-band may alter the (in-band)
+	 * preemption count as long as they don't trigger an in-band
+	 * rescheduling, which Dovetail properly blocks.
+	 *
+	 * If the preemption count is not stack-based but a global
+	 * per-cpu variable instead, changing it has a globally
+	 * visible side-effect though, which is a problem if the
+	 * out-of-band task is preempted and schedules away before the
+	 * change is rolled back: this may cause the in-band context
+	 * to later resume with a broken preemption count.
+	 *
+	 * For this reason, the preemption count of any context which
+	 * blocks from the out-of-band stage is carried over and
+	 * restored across switches, emulating a stack-based
+	 * storage.
+	 *
+	 * Eventually, the count is reset to FORK_PREEMPT_COUNT upon
+	 * transition from out-of-band to in-band stage, reinstating
+	 * the value in effect when the converse transition happened
+	 * at some point before.
+	 */
+	if (IS_ENABLED(CONFIG_HAVE_PERCPU_PREEMPT_COUNT))
+		pc = preempt_count();
+
+	switch_to(prev, next, last);
+	barrier();
+
+	if (check_hard_irqs_disabled())
+		hard_irqs_disabled();
+
+	/*
+	 * If we entered this routine for switching to an out-of-band
+	 * task but don't have _TLF_OOB set for the current context
+	 * when resuming, this portion of code is the switch tail of
+	 * the inband schedule() routine, finalizing a transition to
+	 * the inband stage for the current task. Update the stage
+	 * level as/if required.
+	 */
+	if (unlikely(!leave_inband && !test_thread_local_flags(_TLF_OOB))) {
+		if (IS_ENABLED(CONFIG_HAVE_PERCPU_PREEMPT_COUNT))
+			preempt_count_set(FORK_PREEMPT_COUNT);
+		else if (unlikely(dovetail_debug() &&
+					!(preempt_count() & STAGE_MASK)))
+			WARN_ON_ONCE(1);
+		else
+			preempt_count_sub(STAGE_OFFSET);
+		inband = true;
+	} else if (IS_ENABLED(CONFIG_HAVE_PERCPU_PREEMPT_COUNT))
+		preempt_count_set(pc);
+
+	arch_dovetail_switch_finish(leave_inband);
+
+	return inband;
+}
+EXPORT_SYMBOL_GPL(dovetail_context_switch);
+
+#endif /* CONFIG_DOVETAIL */
+
 void dump_cpu_task(int cpu)
 {
 	pr_info("Task dump for CPU %d:\n", cpu);
diff --git a/kernel/sched/cputime.c b/kernel/sched/cputime.c
index 46ed4e1383e2..9905f5192bfa 100644
--- a/kernel/sched/cputime.c
+++ b/kernel/sched/cputime.c
@@ -245,6 +245,10 @@ static __always_inline u64 steal_account_process_time(u64 maxtime)
 
 		return steal;
 	}
+#endif
+#ifdef CONFIG_IRQ_PIPELINE
+	if (irq_pipeline_steal_tick())
+		return maxtime;
 #endif
 	return 0;
 }
diff --git a/kernel/sched/idle.c b/kernel/sched/idle.c
index f65ef1e2f204..ddeaf8e96596 100644
--- a/kernel/sched/idle.c
+++ b/kernel/sched/idle.c
@@ -77,22 +77,29 @@ void __weak arch_cpu_idle_dead(void) { }
 void __weak arch_cpu_idle(void)
 {
 	cpu_idle_force_poll = 1;
-	local_irq_enable();
+	local_irq_enable_full();
 }
 
 /**
  * default_idle_call - Default CPU idle routine.
  *
  * To use when the cpuidle framework cannot be used.
+ *
+ * When interrupts are pipelined, this call is entered with hard irqs
+ * on and the in-band stage stalled, returns with hard irqs on, and
+ * the in-band stage unstalled.
  */
 void __cpuidle default_idle_call(void)
 {
 	if (current_clr_polling_and_test()) {
-		local_irq_enable();
+		local_irq_enable_full();
 	} else {
-		stop_critical_timings();
-		arch_cpu_idle();
-		start_critical_timings();
+		if (irq_cpuidle_enter(NULL, NULL)) {
+			stop_critical_timings();
+			arch_cpu_idle();
+			start_critical_timings();
+		} else
+			local_irq_enable_full();
 	}
 }
 
@@ -208,6 +215,13 @@ static void cpuidle_idle_call(void)
 exit_idle:
 	__current_set_polling();
 
+	/*
+	 *  Catch mishandling of the CPU's interrupt disable flag when
+	 *  pipelining IRQs.
+	 */
+	if (WARN_ON_ONCE(irq_pipeline_debug() && hard_irqs_disabled()))
+		hard_local_irq_enable();
+
 	/*
 	 * It is up to the idle functions to reenable local interrupts
 	 */
@@ -261,6 +275,7 @@ static void do_idle(void)
 			cpu_idle_poll();
 		} else {
 			cpuidle_idle_call();
+			WARN_ON_ONCE(irq_pipeline_debug() && hard_irqs_disabled());
 		}
 		arch_cpu_idle_exit();
 	}
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index c8870c5bd7df..f0b76db02cf8 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -52,6 +52,8 @@
 #include <linux/membarrier.h>
 #include <linux/migrate.h>
 #include <linux/mmu_context.h>
+#include <linux/irq_pipeline.h>
+#include <linux/dovetail.h>
 #include <linux/nmi.h>
 #include <linux/proc_fs.h>
 #include <linux/prefetch.h>
diff --git a/kernel/sched/wait.c b/kernel/sched/wait.c
index c1e566a114ca..c0b0b6e17f69 100644
--- a/kernel/sched/wait.c
+++ b/kernel/sched/wait.c
@@ -70,6 +70,8 @@ static int __wake_up_common(struct wait_queue_head *wq_head, unsigned int mode,
 	wait_queue_entry_t *curr, *next;
 	int cnt = 0;
 
+	check_inband_stage();
+
 	lockdep_assert_held(&wq_head->lock);
 
 	if (bookmark && (bookmark->flags & WQ_FLAG_BOOKMARK)) {
diff --git a/kernel/signal.c b/kernel/signal.c
index c4da1ef56fdf..176f08151e0d 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -754,6 +754,10 @@ static int dequeue_synchronous_signal(kernel_siginfo_t *info)
 void signal_wake_up_state(struct task_struct *t, unsigned int state)
 {
 	set_tsk_thread_flag(t, TIF_SIGPENDING);
+
+	/* TIF_SIGPENDING must be set prior to notifying. */
+	inband_signal_notify(t);
+
 	/*
 	 * TASK_WAKEKILL also means wake it up in the stopped/traced/killable
 	 * case. We don't check t->state here because there is a race with it
@@ -975,8 +979,11 @@ static inline bool wants_signal(int sig, struct task_struct *p)
 	if (sig == SIGKILL)
 		return true;
 
-	if (task_is_stopped_or_traced(p))
+	if (task_is_stopped_or_traced(p)) {
+		if (!signal_pending(p))
+			inband_signal_notify(p);
 		return false;
+	}
 
 	return task_curr(p) || !signal_pending(p);
 }
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 0427a86743a4..8027a6d5c464 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -417,6 +417,18 @@ void irq_exit(void)
 	trace_hardirq_exit(); /* must be last! */
 }
 
+void irq_enter_if_inband(void)
+{
+	if (running_inband())
+		irq_enter();
+}
+
+void irq_exit_if_inband(void)
+{
+	if (running_inband())
+		irq_exit();
+}
+
 /*
  * This function must run with irqs disabled!
  */
diff --git a/kernel/stop_machine.c b/kernel/stop_machine.c
index 998d50ee2d9b..a665d13d67d7 100644
--- a/kernel/stop_machine.c
+++ b/kernel/stop_machine.c
@@ -216,8 +216,8 @@ static int multi_cpu_stop(void *data)
 			curstate = newstate;
 			switch (curstate) {
 			case MULTI_STOP_DISABLE_IRQ:
-				local_irq_disable();
 				hard_irq_disable();
+				local_irq_disable();
 				break;
 			case MULTI_STOP_RUN:
 				if (is_active)
@@ -237,6 +237,7 @@ static int multi_cpu_stop(void *data)
 		}
 	} while (curstate != MULTI_STOP_EXIT);
 
+	hard_irq_enable();
 	local_irq_restore(flags);
 	return err;
 }
@@ -618,6 +619,7 @@ int stop_machine_cpuslocked(cpu_stop_fn_t fn, void *data,
 		local_irq_save(flags);
 		hard_irq_disable();
 		ret = (*fn)(data);
+		hard_irq_enable();
 		local_irq_restore(flags);
 
 		return ret;
diff --git a/kernel/time/Makefile b/kernel/time/Makefile
index 1867044800bb..4e336980bd2d 100644
--- a/kernel/time/Makefile
+++ b/kernel/time/Makefile
@@ -19,3 +19,4 @@ obj-$(CONFIG_TICK_ONESHOT)			+= tick-oneshot.o tick-sched.o
 obj-$(CONFIG_HAVE_GENERIC_VDSO)			+= vsyscall.o
 obj-$(CONFIG_DEBUG_FS)				+= timekeeping_debug.o
 obj-$(CONFIG_TEST_UDELAY)			+= test_udelay.o
+obj-$(CONFIG_IRQ_PIPELINE)			+= tick-proxy.o
diff --git a/kernel/time/clockevents.c b/kernel/time/clockevents.c
index f5490222e134..fbe9ef4c6930 100644
--- a/kernel/time/clockevents.c
+++ b/kernel/time/clockevents.c
@@ -97,6 +97,7 @@ static int __clockevents_switch_state(struct clock_event_device *dev,
 	/* Transition with new state-specific callbacks */
 	switch (state) {
 	case CLOCK_EVT_STATE_DETACHED:
+	case CLOCK_EVT_STATE_RESERVED:
 		/* The clockevent device is getting replaced. Shut it down. */
 
 	case CLOCK_EVT_STATE_SHUTDOWN:
@@ -437,6 +438,69 @@ int clockevents_unbind_device(struct clock_event_device *ced, int cpu)
 }
 EXPORT_SYMBOL_GPL(clockevents_unbind_device);
 
+#ifdef CONFIG_IRQ_PIPELINE
+
+/**
+ * clockevents_register_proxy - register a proxy device on the current CPU
+ * @dev:	proxy to register
+ */
+int clockevents_register_proxy(struct clock_proxy_device *dev)
+{
+	struct clock_event_device *proxy_dev, *real_dev;
+	unsigned long flags;
+	u32 freq;
+	int ret;
+
+	raw_spin_lock_irqsave(&clockevents_lock, flags);
+
+	ret = tick_setup_proxy(dev);
+	if (ret)  {
+		raw_spin_unlock_irqrestore(&clockevents_lock, flags);
+		return ret;
+	}
+
+	proxy_dev = &dev->proxy_device;
+	clockevent_set_state(proxy_dev, CLOCK_EVT_STATE_DETACHED);
+
+	list_add(&proxy_dev->list, &clockevent_devices);
+	tick_check_new_device(proxy_dev);
+	clockevents_notify_released();
+
+	raw_spin_unlock_irqrestore(&clockevents_lock, flags);
+
+	real_dev = dev->real_device;
+	freq = (1000000000ULL * real_dev->mult) >> real_dev->shift;
+	printk(KERN_INFO "CPU%d: proxy tick device registered (%u.%02uMHz)\n",
+		 smp_processor_id(), freq / 1000000, (freq / 10000) % 100);
+
+	return ret;
+}
+
+void clockevents_unregister_proxy(struct clock_proxy_device *dev)
+{
+	unsigned long flags;
+	int ret;
+
+	clockevents_register_device(dev->real_device);
+	clockevents_switch_state(dev->real_device, CLOCK_EVT_STATE_DETACHED);
+
+	/*
+	 *  Pop the proxy device, do not give it back to the
+	 *  framework.
+	 */
+	raw_spin_lock_irqsave(&clockevents_lock, flags);
+	ret = clockevents_replace(&dev->proxy_device);
+	raw_spin_unlock_irqrestore(&clockevents_lock, flags);
+
+	if (WARN_ON(ret))
+		return;
+
+	printk(KERN_INFO "CPU%d: proxy tick device unregistered\n",
+		smp_processor_id());
+}
+
+#endif
+
 /**
  * clockevents_register_device - register a clock event device
  * @dev:	device to register
@@ -575,9 +639,13 @@ void clockevents_exchange_device(struct clock_event_device *old,
 	 */
 	if (old) {
 		module_put(old->owner);
-		clockevents_switch_state(old, CLOCK_EVT_STATE_DETACHED);
 		list_del(&old->list);
-		list_add(&old->list, &clockevents_released);
+		if (new && new->features & CLOCK_EVT_FEAT_PROXY) {
+			clockevents_switch_state(old, CLOCK_EVT_STATE_RESERVED);
+		} else {
+			clockevents_switch_state(old, CLOCK_EVT_STATE_DETACHED);
+			list_add(&old->list, &clockevents_released);
+		}
 	}
 
 	if (new) {
diff --git a/kernel/time/clocksource.c b/kernel/time/clocksource.c
index fff5f64981c6..49b55a38fea1 100644
--- a/kernel/time/clocksource.c
+++ b/kernel/time/clocksource.c
@@ -899,8 +899,8 @@ void __clocksource_update_freq_scale(struct clocksource *cs, u32 scale, u32 freq
 
 	clocksource_update_max_deferment(cs);
 
-	pr_info("%s: mask: 0x%llx max_cycles: 0x%llx, max_idle_ns: %lld ns\n",
-		cs->name, cs->mask, cs->max_cycles, cs->max_idle_ns);
+	pr_info("%s: freq: %Lu Hz, mask: 0x%llx max_cycles: 0x%llx, max_idle_ns: %lld ns\n",
+		cs->name, (u64)freq * scale, cs->mask, cs->max_cycles, cs->max_idle_ns);
 }
 EXPORT_SYMBOL_GPL(__clocksource_update_freq_scale);
 
diff --git a/kernel/time/hrtimer.c b/kernel/time/hrtimer.c
index 65605530ee34..bdb96ce57a70 100644
--- a/kernel/time/hrtimer.c
+++ b/kernel/time/hrtimer.c
@@ -872,6 +872,7 @@ void clock_was_set(void)
 	on_each_cpu(retrigger_next_event, NULL, 1);
 #endif
 	timerfd_clock_was_set();
+	inband_clock_was_set();
 }
 
 /*
diff --git a/kernel/time/tick-common.c b/kernel/time/tick-common.c
index 59225b484e4e..660e77431503 100644
--- a/kernel/time/tick-common.c
+++ b/kernel/time/tick-common.c
@@ -243,7 +243,8 @@ static void tick_setup_device(struct tick_device *td,
 	} else {
 		handler = td->evtdev->event_handler;
 		next_event = td->evtdev->next_event;
-		td->evtdev->event_handler = clockevents_handle_noop;
+		if (!clockevent_state_reserved(td->evtdev))
+			td->evtdev->event_handler = clockevents_handle_noop;
 	}
 
 	td->evtdev = newdev;
@@ -318,6 +319,17 @@ static bool tick_check_preferred(struct clock_event_device *curdev,
 	       !cpumask_equal(curdev->cpumask, newdev->cpumask);
 }
 
+static bool tick_check_is_proxy(struct clock_event_device *curdev)
+{
+	if (!irqs_pipelined())
+		return false;
+
+	/*
+	 * Never replace an active proxy except when unregistering it.
+	 */
+	return curdev && curdev->features & CLOCK_EVT_FEAT_PROXY;
+}
+
 /*
  * Check whether the new device is a better fit than curdev. curdev
  * can be NULL !
@@ -325,6 +337,9 @@ static bool tick_check_preferred(struct clock_event_device *curdev,
 bool tick_check_replacement(struct clock_event_device *curdev,
 			    struct clock_event_device *newdev)
 {
+	if (tick_check_is_proxy(curdev))
+		return false;
+
 	if (!tick_check_percpu(curdev, newdev, smp_processor_id()))
 		return false;
 
@@ -345,6 +360,9 @@ void tick_check_new_device(struct clock_event_device *newdev)
 	td = &per_cpu(tick_cpu_device, cpu);
 	curdev = td->evtdev;
 
+	if (tick_check_is_proxy(curdev))
+		goto out_bc;
+
 	/* cpu local device ? */
 	if (!tick_check_percpu(curdev, newdev, cpu))
 		goto out_bc;
diff --git a/kernel/time/tick-internal.h b/kernel/time/tick-internal.h
index 7b2496136729..2c6c0f4ab199 100644
--- a/kernel/time/tick-internal.h
+++ b/kernel/time/tick-internal.h
@@ -51,12 +51,15 @@ static inline void clockevent_set_state(struct clock_event_device *dev,
 extern void clockevents_shutdown(struct clock_event_device *dev);
 extern void clockevents_exchange_device(struct clock_event_device *old,
 					struct clock_event_device *new);
-extern void clockevents_switch_state(struct clock_event_device *dev,
-				     enum clock_event_state state);
 extern int clockevents_program_event(struct clock_event_device *dev,
 				     ktime_t expires, bool force);
 extern void clockevents_handle_noop(struct clock_event_device *dev);
 extern int __clockevents_update_freq(struct clock_event_device *dev, u32 freq);
+#ifdef CONFIG_IRQ_PIPELINE
+int clockevents_register_proxy(struct clock_proxy_device *dev);
+extern void clockevents_unregister_proxy(struct clock_proxy_device *dev);
+int tick_setup_proxy(struct clock_proxy_device *dev);
+#endif
 extern ssize_t sysfs_get_uname(const char *buf, char *dst, size_t cnt);
 
 /* Broadcasting support */
diff --git a/kernel/time/tick-proxy.c b/kernel/time/tick-proxy.c
new file mode 100644
index 000000000000..ee7799a38d98
--- /dev/null
+++ b/kernel/time/tick-proxy.c
@@ -0,0 +1,455 @@
+/*
+ * SPDX-License-Identifier: GPL-2.0
+ *
+ * Copyright (C) 2017 Philippe Gerum  <rpm@xenomai.org>.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/printk.h>
+#include <linux/delay.h>
+#include <linux/smp.h>
+#include <linux/err.h>
+#include <linux/cpumask.h>
+#include <linux/clockchips.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/irq_pipeline.h>
+#include <linux/stop_machine.h>
+#include <linux/slab.h>
+#include "tick-internal.h"
+
+static unsigned int proxy_tick_irq;
+
+static DEFINE_MUTEX(proxy_mutex);
+
+static DEFINE_PER_CPU(struct clock_proxy_device, proxy_tick_device);
+
+static inline struct clock_event_device *
+get_real_tick_device(struct clock_event_device *proxy_dev)
+{
+	return container_of(proxy_dev, struct clock_proxy_device, proxy_device)->real_device;
+}
+
+static void proxy_event_handler(struct clock_event_device *real_dev)
+{
+	struct clock_proxy_device *dev = raw_cpu_ptr(&proxy_tick_device);
+	struct clock_event_device *proxy_dev = &dev->proxy_device;
+
+	proxy_dev->event_handler(proxy_dev);
+}
+
+static int proxy_set_state_oneshot(struct clock_event_device *dev)
+{
+	struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->set_state_oneshot(real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static int proxy_set_state_periodic(struct clock_event_device *dev)
+{
+	struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->set_state_periodic(real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static int proxy_set_state_oneshot_stopped(struct clock_event_device *dev)
+{
+        struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->set_state_oneshot_stopped(real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static int proxy_set_state_shutdown(struct clock_event_device *dev)
+{
+        struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->set_state_shutdown(real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static void proxy_suspend(struct clock_event_device *dev)
+{
+        struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+
+	flags = hard_local_irq_save();
+	real_dev->suspend(real_dev);
+	hard_local_irq_restore(flags);
+}
+
+static void proxy_resume(struct clock_event_device *dev)
+{
+        struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+
+	flags = hard_local_irq_save();
+	real_dev->resume(real_dev);
+	hard_local_irq_restore(flags);
+}
+
+static int proxy_tick_resume(struct clock_event_device *dev)
+{
+        struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->tick_resume(real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static int proxy_set_next_event(unsigned long delay,
+				struct clock_event_device *dev)
+{
+	struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->set_next_event(delay, real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static int proxy_set_next_ktime(ktime_t expires,
+				struct clock_event_device *dev)
+{
+	struct clock_event_device *real_dev = get_real_tick_device(dev);
+	unsigned long flags;
+	int ret;
+
+	flags = hard_local_irq_save();
+	ret = real_dev->set_next_ktime(expires, real_dev);
+	hard_local_irq_restore(flags);
+
+	return ret;
+}
+
+static irqreturn_t proxy_irq_handler(int sirq, void *dev_id)
+{
+	struct clock_event_device *evt;
+
+	/*
+	 * Tricky: we may end up running this in-band IRQ handler
+	 * because tick_notify_proxy() was posted either:
+	 *
+	 * - from the out-of-band stage via ->handle_oob_event() for
+	 * emulating an in-band tick.  In this case, the active tick
+	 * device for the in-band timing core is the proxy device,
+	 * whose event handler is still the same than the real tick
+	 * device's.
+	 *
+	 * - directly by the clock chip driver on the local CPU via
+	 * clockevents_handle_event(), for propagating a tick to the
+	 * in-band stage nobody from the out-of-band stage is
+	 * interested on i.e. no proxy device was registered on the
+	 * receiving CPU, which was excluded from @cpumask in the call
+	 * to tick_install_proxy(). In this case, the active tick
+	 * device for the in-band timing core is a real clock event
+	 * device.
+	 *
+	 * In both cases, we are running on the in-band stage, and we
+	 * should fire the event handler of the currently active tick
+	 * device for the in-band timing core.
+	 */
+	evt = raw_cpu_ptr(&tick_cpu_device)->evtdev;
+	evt->event_handler(evt);
+
+	return IRQ_HANDLED;
+}
+
+#define interpose_proxy_handler(__proxy, __real, __h)		\
+	do {							\
+		if ((__real)->__h)				\
+			(__proxy)->__h = proxy_ ## __h;		\
+	} while (0)
+
+/*
+ * Setup a proxy which is about to override the tick device on the
+ * current CPU. Called with clockevents_lock held and irqs off so that
+ * the tick device does not change under our feet.
+ */
+int tick_setup_proxy(struct clock_proxy_device *dev)
+{
+	struct clock_event_device *proxy_dev, *real_dev;
+
+	real_dev = raw_cpu_ptr(&tick_cpu_device)->evtdev;
+	if ((real_dev->features &
+			(CLOCK_EVT_FEAT_PIPELINE|CLOCK_EVT_FEAT_ONESHOT))
+		!= (CLOCK_EVT_FEAT_PIPELINE|CLOCK_EVT_FEAT_ONESHOT)) {
+		WARN(1, "cannot use clockevent device %s in proxy mode!",
+			real_dev->name);
+		return -ENODEV;
+	}
+
+ 	/*
+ 	 * The assumption is that neither us nor clockevents_register_proxy()
+	 * can fail afterwards, so this is ok to advertise the new proxy as
+	 * built by setting dev->real_device early.
+ 	 */
+	dev->real_device = real_dev;
+	dev->__original_handler = real_dev->event_handler;
+
+	/*
+	 * Inherit the feature bits since the proxy device has the
+	 * same capabilities than the real one we are overriding
+	 * (including CLOCK_EVT_FEAT_C3STOP if present).
+	 */
+	proxy_dev = &dev->proxy_device;
+	memset(proxy_dev, 0, sizeof(*proxy_dev));
+	proxy_dev->features = real_dev->features |
+		CLOCK_EVT_FEAT_PERCPU | CLOCK_EVT_FEAT_PROXY;
+	proxy_dev->name = "proxy";
+	proxy_dev->irq = real_dev->irq;
+	proxy_dev->bound_on = -1;
+	proxy_dev->cpumask = cpumask_of(smp_processor_id());
+	proxy_dev->rating = real_dev->rating + 1;
+	proxy_dev->mult = real_dev->mult;
+	proxy_dev->shift = real_dev->shift;
+	proxy_dev->max_delta_ticks = real_dev->max_delta_ticks;
+	proxy_dev->min_delta_ticks = real_dev->min_delta_ticks;
+	proxy_dev->max_delta_ns = real_dev->max_delta_ns;
+	proxy_dev->min_delta_ns = real_dev->min_delta_ns;
+	/*
+	 * Interpose default handlers which are safe wrt preemption by
+	 * the out-of-band stage.
+	 */
+	interpose_proxy_handler(proxy_dev, real_dev, set_state_oneshot);
+	interpose_proxy_handler(proxy_dev, real_dev, set_state_oneshot_stopped);
+	interpose_proxy_handler(proxy_dev, real_dev, set_state_periodic);
+	interpose_proxy_handler(proxy_dev, real_dev, set_state_shutdown);
+	interpose_proxy_handler(proxy_dev, real_dev, suspend);
+	interpose_proxy_handler(proxy_dev, real_dev, resume);
+	interpose_proxy_handler(proxy_dev, real_dev, tick_resume);
+	interpose_proxy_handler(proxy_dev, real_dev, set_next_event);
+	interpose_proxy_handler(proxy_dev, real_dev, set_next_ktime);
+
+	dev->__setup_handler(dev);
+
+	return 0;
+}
+
+static int enable_oob_timer(void *arg) /* hard_irqs_disabled() */
+{
+	struct clock_proxy_device *dev = raw_cpu_ptr(&proxy_tick_device);
+	struct clock_event_device *real_dev;
+
+	/*
+	 * Install the out-of-band handler on this CPU's real clock
+	 * device, then turn on out-of-band mode for the associated
+	 * IRQ (duplicates are silently ignored if the IRQ is common
+	 * to multiple CPUs).
+	 */
+	real_dev = dev->real_device;
+	real_dev->event_handler = dev->handle_oob_event;
+	real_dev->features |= CLOCK_EVT_FEAT_OOB;
+	barrier();
+
+	/*
+	 * irq_switch_oob() grabs the IRQ descriptor lock which is
+	 * mutable, so that is fine to invoke this routine with hard
+	 * IRQs off.
+	 */
+	irq_switch_oob(real_dev->irq, true);
+
+	return 0;
+}
+
+struct proxy_install_arg {
+	void (*setup_proxy)(struct clock_proxy_device *dev);
+	int result;
+};
+
+static void register_proxy_device(void *arg) /* irqs_disabled() */
+{
+	struct clock_proxy_device *dev = raw_cpu_ptr(&proxy_tick_device);
+	struct proxy_install_arg *req = arg;
+	int ret;
+
+	dev->__setup_handler = req->setup_proxy;
+	ret = clockevents_register_proxy(dev);
+	if (ret) {
+		if (!req->result)
+			req->result = ret;
+	} else {
+		dev->real_device->event_handler = proxy_event_handler;
+	}
+}
+
+int tick_install_proxy(void (*setup_proxy)(struct clock_proxy_device *dev),
+		const struct cpumask *cpumask)
+{
+	struct proxy_install_arg arg;
+	int ret, sirq;
+
+	mutex_lock(&proxy_mutex);
+
+	ret = -EAGAIN;
+	if (proxy_tick_irq)
+		goto out;
+
+	sirq = irq_create_direct_mapping(synthetic_irq_domain);
+	if (WARN_ON(sirq == 0))
+		goto out;
+
+	ret = __request_percpu_irq(sirq, proxy_irq_handler,
+				   IRQF_NO_THREAD, /* no IRQF_TIMER here. */
+				   "proxy tick",
+				   &proxy_tick_device);
+	if (WARN_ON(ret)) {
+		irq_dispose_mapping(sirq);
+		goto out;
+	}
+
+	proxy_tick_irq = sirq;
+	barrier();
+
+	/*
+	 * Install a proxy tick device on each CPU. As the proxy
+	 * device is picked, the previous (real) tick device is
+	 * switched to reserved state by the clockevent core.
+	 * Immediately after, the proxy device starts controlling the
+	 * real device under the hood to carry out the timing requests
+	 * it receives.
+	 *
+	 * For a short period of time, after the proxy device is
+	 * installed, and until the real device IRQ is switched to
+	 * out-of-band mode, the flow is as follows:
+	 *
+	 *    [inband timing request]
+	 *        proxy_dev->set_next_event(proxy_dev)
+	 *            oob_program_event(proxy_dev)
+	 *                real_dev->set_next_event(real_dev)
+	 *        ...
+	 *        <tick event>
+	 *        original_timer_handler() [in-band stage]
+	 *            clockevents_handle_event(real_dev)
+	 *               proxy_event_handler(real_dev)
+	 *                  inband_event_handler(proxy_dev)
+	 *
+	 * Eventually, we substitute the original (in-band) clock
+	 * event handler with the out-of-band handler for the real
+	 * clock event device, then turn on out-of-band mode for the
+	 * timer IRQ associated to the latter. These two steps are
+	 * performed over a stop_machine() context, so that no tick
+	 * can race with this code while we swap handlers.
+	 *
+	 * Once the hand over is complete, the flow is as follows:
+	 *
+	 *    [inband timing request]
+	 *        proxy_dev->set_next_event(proxy_dev)
+	 *            oob_program_event(proxy_dev)
+	 *                real_dev->set_next_event(real_dev)
+	 *        ...
+	 *        <tick event>
+	 *        inband_event_handler() [out-of-band stage]
+	 *            clockevents_handle_event(real_dev)
+	 *                handle_oob_event(proxy_dev)
+	 *                    ...(inband tick emulation)...
+	 *                         tick_notify_proxy()
+	 *        ...
+	 *        proxy_irq_handler(proxy_dev) [in-band stage]
+	 *            clockevents_handle_event(proxy_dev)
+	 *                inband_event_handler(proxy_dev)
+	 */
+	arg.setup_proxy = setup_proxy;
+	arg.result = 0;
+	on_each_cpu_mask(cpumask, register_proxy_device, &arg, true);
+	if (arg.result) {
+		tick_uninstall_proxy(cpumask);
+		return arg.result;
+	}
+
+	/*
+	 * Start ticking from the out-of-band interrupt stage upon
+	 * receipt of out-of-band timer events.
+	 */
+	stop_machine(enable_oob_timer, NULL, cpumask);
+out:
+	mutex_unlock(&proxy_mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(tick_install_proxy);
+
+static int disable_oob_timer(void *arg) /* hard_irqs_disabled() */
+{
+	struct clock_proxy_device *dev = raw_cpu_ptr(&proxy_tick_device);
+	struct clock_event_device *real_dev;
+
+	dev = raw_cpu_ptr(&proxy_tick_device);
+	real_dev = dev->real_device;
+	real_dev->event_handler = dev->__original_handler;
+	real_dev->features &= ~CLOCK_EVT_FEAT_OOB;
+	barrier();
+
+	dev->proxy_device.set_next_event = real_dev->set_next_event;
+	irq_switch_oob(real_dev->irq, false);
+
+	return 0;
+}
+
+static void unregister_proxy_device(void *arg) /* irqs_disabled() */
+{
+	struct clock_proxy_device *dev = raw_cpu_ptr(&proxy_tick_device);
+
+	if (dev->real_device) {
+		clockevents_unregister_proxy(dev);
+		dev->real_device = NULL;
+	}
+}
+
+void tick_uninstall_proxy(const struct cpumask *cpumask)
+{
+	/*
+	 * Undo all we did in tick_install_proxy(), handing over
+	 * control of the tick device back to the inband code.
+	 */
+	mutex_lock(&proxy_mutex);
+	stop_machine(disable_oob_timer, NULL, cpu_online_mask);
+	on_each_cpu_mask(cpumask, unregister_proxy_device, NULL, true);
+	free_percpu_irq(proxy_tick_irq, &proxy_tick_device);
+	irq_dispose_mapping(proxy_tick_irq);
+	proxy_tick_irq = 0;
+	mutex_unlock(&proxy_mutex);
+}
+EXPORT_SYMBOL_GPL(tick_uninstall_proxy);
+
+void tick_notify_proxy(void)
+{
+	/*
+	 * Schedule a tick on the proxy device to occur from the
+	 * in-band stage, which will trigger proxy_irq_handler() at
+	 * some point (i.e. when the in-band stage is back in control
+	 * and not stalled). Note that we might be called from the
+	 * in-band stage in some cases (see proxy_irq_handler()).
+	 */
+	irq_post_inband(proxy_tick_irq);
+}
+EXPORT_SYMBOL_GPL(tick_notify_proxy);
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index ca69290bee2a..c13489d2e890 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -89,6 +89,8 @@ static struct tk_fast tk_fast_raw  ____cacheline_aligned = {
 	.base[1] = { .clock = &dummy_clock, },
 };
 
+static struct timespec64 fast_wall_to_monotonic ____cacheline_aligned;
+
 /* flag for if timekeeping is suspended */
 int __read_mostly timekeeping_suspended;
 
@@ -510,6 +512,16 @@ u64 notrace ktime_get_boot_fast_ns(void)
 }
 EXPORT_SYMBOL_GPL(ktime_get_boot_fast_ns);
 
+ktime_t ktime_get_real_fast(void)
+{
+	ktime_t mono, wtm;
+
+	mono = ns_to_ktime(ktime_get_mono_fast_ns());
+	wtm = timespec64_to_ktime(fast_wall_to_monotonic);
+
+	return ktime_sub(mono, wtm);
+}
+EXPORT_SYMBOL_GPL(ktime_get_real_fast);
 
 /*
  * See comment for __ktime_get_fast_ns() vs. timestamp ordering
@@ -569,6 +581,8 @@ static void halt_fast_timekeeper(const struct timekeeper *tk)
 	memcpy(&tkr_dummy, tkr, sizeof(tkr_dummy));
 	tkr_dummy.clock = &dummy_clock;
 	update_fast_timekeeper(&tkr_dummy, &tk_fast_raw);
+
+	fast_wall_to_monotonic = tk->wall_to_monotonic;
 }
 
 static RAW_NOTIFIER_HEAD(pvclock_gtod_chain);
@@ -674,6 +688,7 @@ static void timekeeping_update(struct timekeeper *tk, unsigned int action)
 	tk->tkr_mono.base_real = tk->tkr_mono.base + tk->offs_real;
 	update_fast_timekeeper(&tk->tkr_mono, &tk_fast_mono);
 	update_fast_timekeeper(&tk->tkr_raw,  &tk_fast_raw);
+	fast_wall_to_monotonic = tk->wall_to_monotonic;
 
 	if (action & TK_CLOCK_WAS_SET)
 		tk->clock_was_set_seq++;
diff --git a/kernel/trace/ftrace.c b/kernel/trace/ftrace.c
index f296d89be757..d539a44821b6 100644
--- a/kernel/trace/ftrace.c
+++ b/kernel/trace/ftrace.c
@@ -5652,10 +5652,10 @@ static int ftrace_process_locs(struct module *mod,
 	 * reason to cause large interrupt latencies while we do it.
 	 */
 	if (!mod)
-		local_irq_save(flags);
+		flags = hard_local_irq_save();
 	ftrace_update_code(mod, start_pg);
 	if (!mod)
-		local_irq_restore(flags);
+		hard_local_irq_restore(flags);
 	ret = 0;
  out:
 	mutex_unlock(&ftrace_lock);
@@ -6193,9 +6193,9 @@ void __init ftrace_init(void)
 	unsigned long count, flags;
 	int ret;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	ret = ftrace_dyn_arch_init();
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 	if (ret)
 		goto failed;
 
@@ -6330,7 +6330,15 @@ __ftrace_ops_list_func(unsigned long ip, unsigned long parent_ip,
 		}
 	} while_for_each_ftrace_op(op);
 out:
-	preempt_enable_notrace();
+	if (irqs_pipelined() && (hard_irqs_disabled() || !running_inband()))
+		/*
+		 * Nothing urgent to schedule here. At latest the
+		 * timer tick will pick up whatever the tracing
+		 * functions kicked off.
+		 */
+		preempt_enable_no_resched_notrace();
+	else
+		preempt_enable_notrace();
 	trace_clear_recursion(bit);
 }
 
diff --git a/kernel/trace/ring_buffer.c b/kernel/trace/ring_buffer.c
index 66358d66c933..3af2d6661a54 100644
--- a/kernel/trace/ring_buffer.c
+++ b/kernel/trace/ring_buffer.c
@@ -2690,8 +2690,8 @@ rb_wakeups(struct ring_buffer *buffer, struct ring_buffer_per_cpu *cpu_buffer)
 static __always_inline int
 trace_recursive_lock(struct ring_buffer_per_cpu *cpu_buffer)
 {
-	unsigned int val = cpu_buffer->current_context;
-	unsigned long pc = preempt_count();
+	unsigned int val;
+	unsigned long pc = preempt_count(), flags;
 	int bit;
 
 	if (!(pc & (NMI_MASK | HARDIRQ_MASK | SOFTIRQ_OFFSET)))
@@ -2700,20 +2700,31 @@ trace_recursive_lock(struct ring_buffer_per_cpu *cpu_buffer)
 		bit = pc & NMI_MASK ? RB_CTX_NMI :
 			pc & HARDIRQ_MASK ? RB_CTX_IRQ : RB_CTX_SOFTIRQ;
 
-	if (unlikely(val & (1 << (bit + cpu_buffer->nest))))
+	flags = hard_local_irq_save();
+
+	val = cpu_buffer->current_context;
+	if (unlikely(val & (1 << (bit + cpu_buffer->nest)))) {
+		hard_local_irq_restore(flags);
 		return 1;
+	}
 
 	val |= (1 << (bit + cpu_buffer->nest));
 	cpu_buffer->current_context = val;
 
+	hard_local_irq_restore(flags);
+
 	return 0;
 }
 
 static __always_inline void
 trace_recursive_unlock(struct ring_buffer_per_cpu *cpu_buffer)
 {
+	unsigned long flags;
+
+	flags = hard_local_irq_save();
 	cpu_buffer->current_context &=
 		cpu_buffer->current_context - (1 << cpu_buffer->nest);
+	hard_local_irq_restore(flags);
 }
 
 /* The recursive locking above uses 4 bits */
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index 6a0ee9178365..affcfd50f83c 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -941,9 +941,9 @@ void tracing_snapshot_instance_cond(struct trace_array *tr, void *cond_data)
 		return;
 	}
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	update_max_tr(tr, current, smp_processor_id(), cond_data);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 void tracing_snapshot_instance(struct trace_array *tr)
@@ -1555,7 +1555,7 @@ update_max_tr(struct trace_array *tr, struct task_struct *tsk, int cpu,
 	if (tr->stop_count)
 		return;
 
-	WARN_ON_ONCE(!irqs_disabled());
+	WARN_ON_ONCE(!hard_irqs_disabled());
 
 	if (!tr->allocated_snapshot) {
 		/* Only the nop tracer should hit this when disabling */
@@ -1599,7 +1599,7 @@ update_max_tr_single(struct trace_array *tr, struct task_struct *tsk, int cpu)
 	if (tr->stop_count)
 		return;
 
-	WARN_ON_ONCE(!irqs_disabled());
+	WARN_ON_ONCE(!hard_irqs_disabled());
 	if (!tr->allocated_snapshot) {
 		/* Only the nop tracer should hit this when disabling */
 		WARN_ON_ONCE(tr->current_trace != &nop_trace);
@@ -2340,12 +2340,14 @@ tracing_generic_entry_update(struct trace_entry *entry, unsigned short type,
 	entry->flags =
 #ifdef CONFIG_TRACE_IRQFLAGS_SUPPORT
 		(irqs_disabled_flags(flags) ? TRACE_FLAG_IRQS_OFF : 0) |
-#else
+		(hard_irqs_disabled() ? TRACE_FLAG_IRQS_HARDOFF : 0) |
+#elif !defined(CONFIG_IRQ_PIPELINE)
 		TRACE_FLAG_IRQS_NOSUPPORT |
 #endif
 		((pc & NMI_MASK    ) ? TRACE_FLAG_NMI     : 0) |
 		((pc & HARDIRQ_MASK) ? TRACE_FLAG_HARDIRQ : 0) |
 		((pc & SOFTIRQ_OFFSET) ? TRACE_FLAG_SOFTIRQ : 0) |
+		(running_oob() ? TRACE_FLAG_OOB_STAGE : 0) |
 		(tif_need_resched() ? TRACE_FLAG_NEED_RESCHED : 0) |
 		(test_preempt_need_resched() ? TRACE_FLAG_PREEMPT_RESCHED : 0);
 }
@@ -6764,13 +6766,13 @@ tracing_snapshot_write(struct file *filp, const char __user *ubuf, size_t cnt,
 			ret = tracing_alloc_snapshot_instance(tr);
 		if (ret < 0)
 			break;
-		local_irq_disable();
+		hard_local_irq_disable();
 		/* Now, we're going to swap */
 		if (iter->cpu_file == RING_BUFFER_ALL_CPUS)
 			update_max_tr(tr, current, smp_processor_id(), NULL);
 		else
 			update_max_tr_single(tr, current, iter->cpu_file);
-		local_irq_enable();
+		hard_local_irq_enable();
 		break;
 	default:
 		if (tr->allocated_snapshot) {
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index d685c61085c0..95da79982574 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -121,11 +121,14 @@ struct kretprobe_trace_entry_head {
 /*
  * trace_flag_type is an enumeration that holds different
  * states when a trace occurs. These are:
- *  IRQS_OFF		- interrupts were disabled
+ *  IRQS_OFF		- interrupts were off (only virtually if pipelining)
  *  IRQS_NOSUPPORT	- arch does not support irqs_disabled_flags
  *  NEED_RESCHED	- reschedule is requested
  *  HARDIRQ		- inside an interrupt handler
  *  SOFTIRQ		- inside a softirq handler
+ *  IRQS_HARDOFF	- interrupts were hard disabled
+ *  OOB_STAGE		- running over the oob stage (assume IRQ tracing
+ *                        support is always available w/ pipelining).
  */
 enum trace_flag_type {
 	TRACE_FLAG_IRQS_OFF		= 0x01,
@@ -135,6 +138,8 @@ enum trace_flag_type {
 	TRACE_FLAG_SOFTIRQ		= 0x10,
 	TRACE_FLAG_PREEMPT_RESCHED	= 0x20,
 	TRACE_FLAG_NMI			= 0x40,
+	TRACE_FLAG_IRQS_HARDOFF		= 0x80,
+	TRACE_FLAG_OOB_STAGE		= TRACE_FLAG_IRQS_NOSUPPORT,
 };
 
 #define TRACE_BUF_SIZE		1024
diff --git a/kernel/trace/trace_branch.c b/kernel/trace/trace_branch.c
index 3ea65cdff30d..10d680e3239c 100644
--- a/kernel/trace/trace_branch.c
+++ b/kernel/trace/trace_branch.c
@@ -53,7 +53,7 @@ probe_likely_condition(struct ftrace_likely_data *f, int val, int expect)
 	if (unlikely(!tr))
 		return;
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 	current->trace_recursion |= TRACE_BRANCH_BIT;
 	data = this_cpu_ptr(tr->trace_buffer.data);
 	if (atomic_read(&data->disabled))
@@ -87,7 +87,7 @@ probe_likely_condition(struct ftrace_likely_data *f, int val, int expect)
 
  out:
 	current->trace_recursion &= ~TRACE_BRANCH_BIT;
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static inline
diff --git a/kernel/trace/trace_clock.c b/kernel/trace/trace_clock.c
index aaf6793ededa..9903dc66e708 100644
--- a/kernel/trace/trace_clock.c
+++ b/kernel/trace/trace_clock.c
@@ -97,7 +97,7 @@ u64 notrace trace_clock_global(void)
 	int this_cpu;
 	u64 now;
 
-	raw_local_irq_save(flags);
+	flags = hard_local_irq_save();
 
 	this_cpu = raw_smp_processor_id();
 	now = sched_clock_cpu(this_cpu);
@@ -123,7 +123,7 @@ u64 notrace trace_clock_global(void)
 	arch_spin_unlock(&trace_clock_struct.lock);
 
  out:
-	raw_local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return now;
 }
diff --git a/kernel/trace/trace_functions.c b/kernel/trace/trace_functions.c
index b611cd36e22d..57c1fc375b3b 100644
--- a/kernel/trace/trace_functions.c
+++ b/kernel/trace/trace_functions.c
@@ -190,7 +190,7 @@ function_stack_trace_call(unsigned long ip, unsigned long parent_ip,
 	 * Need to use raw, since this must be called before the
 	 * recursive protection is performed.
 	 */
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	cpu = raw_smp_processor_id();
 	data = per_cpu_ptr(tr->trace_buffer.data, cpu);
 	disabled = atomic_inc_return(&data->disabled);
@@ -202,7 +202,7 @@ function_stack_trace_call(unsigned long ip, unsigned long parent_ip,
 	}
 
 	atomic_dec(&data->disabled);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 static struct tracer_opt func_opts[] = {
diff --git a/kernel/trace/trace_functions_graph.c b/kernel/trace/trace_functions_graph.c
index 78af97163147..4fea7d44070d 100644
--- a/kernel/trace/trace_functions_graph.c
+++ b/kernel/trace/trace_functions_graph.c
@@ -169,7 +169,7 @@ int trace_graph_entry(struct ftrace_graph_ent *trace)
 	if (tracing_thresh)
 		return 1;
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	cpu = raw_smp_processor_id();
 	data = per_cpu_ptr(tr->trace_buffer.data, cpu);
 	disabled = atomic_inc_return(&data->disabled);
@@ -181,7 +181,7 @@ int trace_graph_entry(struct ftrace_graph_ent *trace)
 	}
 
 	atomic_dec(&data->disabled);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 
 	return ret;
 }
@@ -250,7 +250,7 @@ void trace_graph_return(struct ftrace_graph_ret *trace)
 		return;
 	}
 
-	local_irq_save(flags);
+	flags = hard_local_irq_save();
 	cpu = raw_smp_processor_id();
 	data = per_cpu_ptr(tr->trace_buffer.data, cpu);
 	disabled = atomic_inc_return(&data->disabled);
@@ -259,7 +259,7 @@ void trace_graph_return(struct ftrace_graph_ret *trace)
 		__trace_graph_return(tr, trace, flags, pc);
 	}
 	atomic_dec(&data->disabled);
-	local_irq_restore(flags);
+	hard_local_irq_restore(flags);
 }
 
 void set_graph_array(struct trace_array *tr)
diff --git a/kernel/trace/trace_irqsoff.c b/kernel/trace/trace_irqsoff.c
index a745b0cee5d3..780a529f3984 100644
--- a/kernel/trace/trace_irqsoff.c
+++ b/kernel/trace/trace_irqsoff.c
@@ -26,7 +26,7 @@ static int				tracer_enabled __read_mostly;
 
 static DEFINE_PER_CPU(int, tracing_cpu);
 
-static DEFINE_RAW_SPINLOCK(max_trace_lock);
+static DEFINE_HARD_SPINLOCK(max_trace_lock);
 
 enum {
 	TRACER_IRQS_OFF		= (1 << 1),
@@ -44,7 +44,7 @@ static int start_irqsoff_tracer(struct trace_array *tr, int graph);
 static inline int
 preempt_trace(int pc)
 {
-	return ((trace_type & TRACER_PREEMPT_OFF) && pc);
+	return (running_inband() && (trace_type & TRACER_PREEMPT_OFF) && pc);
 }
 #else
 # define preempt_trace(pc) (0)
@@ -55,7 +55,7 @@ static inline int
 irq_trace(void)
 {
 	return ((trace_type & TRACER_IRQS_OFF) &&
-		irqs_disabled());
+		(hard_irqs_disabled() || (running_inband() && irqs_disabled())));
 }
 #else
 # define irq_trace() (0)
@@ -393,7 +393,7 @@ start_critical_timing(unsigned long ip, unsigned long parent_ip, int pc)
 	data->preempt_timestamp = ftrace_now(cpu);
 	data->critical_start = parent_ip ? : ip;
 
-	local_save_flags(flags);
+	stage_save_flags(flags);
 
 	__trace_function(tr, ip, parent_ip, flags, pc);
 
@@ -428,7 +428,7 @@ stop_critical_timing(unsigned long ip, unsigned long parent_ip, int pc)
 
 	atomic_inc(&data->disabled);
 
-	local_save_flags(flags);
+	stage_save_flags(flags);
 	__trace_function(tr, ip, parent_ip, flags, pc);
 	check_critical_timing(tr, data, parent_ip ? : ip, cpu);
 	data->critical_start = 0;
diff --git a/kernel/trace/trace_output.c b/kernel/trace/trace_output.c
index d54ce252b05a..9230fb4478bc 100644
--- a/kernel/trace/trace_output.c
+++ b/kernel/trace/trace_output.c
@@ -430,14 +430,19 @@ int trace_print_lat_fmt(struct trace_seq *s, struct trace_entry *entry)
 	int hardirq;
 	int softirq;
 	int nmi;
+	int oob;
 
 	nmi = entry->flags & TRACE_FLAG_NMI;
 	hardirq = entry->flags & TRACE_FLAG_HARDIRQ;
 	softirq = entry->flags & TRACE_FLAG_SOFTIRQ;
+	oob = irqs_pipelined() && (entry->flags & TRACE_FLAG_OOB_STAGE);
 
 	irqs_off =
+		(entry->flags & (TRACE_FLAG_IRQS_OFF|TRACE_FLAG_IRQS_HARDOFF)) ==
+		(TRACE_FLAG_IRQS_OFF|TRACE_FLAG_IRQS_HARDOFF) ? '*' :
+		(entry->flags & TRACE_FLAG_IRQS_HARDOFF) ? 'D' :
 		(entry->flags & TRACE_FLAG_IRQS_OFF) ? 'd' :
-		(entry->flags & TRACE_FLAG_IRQS_NOSUPPORT) ? 'X' :
+		!irqs_pipelined() && (entry->flags & TRACE_FLAG_IRQS_NOSUPPORT) ? 'X' :
 		'.';
 
 	switch (entry->flags & (TRACE_FLAG_NEED_RESCHED |
@@ -457,6 +462,8 @@ int trace_print_lat_fmt(struct trace_seq *s, struct trace_entry *entry)
 	}
 
 	hardsoft_irq =
+		(nmi && oob)  ? '#' :
+		oob           ? '~' :
 		(nmi && hardirq)     ? 'Z' :
 		nmi                  ? 'z' :
 		(hardirq && softirq) ? 'H' :
diff --git a/kernel/trace/trace_preemptirq.c b/kernel/trace/trace_preemptirq.c
index 4d8e99fdbbbe..0e6537bc3056 100644
--- a/kernel/trace/trace_preemptirq.c
+++ b/kernel/trace/trace_preemptirq.c
@@ -10,6 +10,7 @@
 #include <linux/module.h>
 #include <linux/ftrace.h>
 #include <linux/kprobes.h>
+#include <linux/irq_pipeline.h>
 #include "trace.h"
 
 #define CREATE_TRACE_POINTS
@@ -74,6 +75,23 @@ __visible void trace_hardirqs_off_caller(unsigned long caller_addr)
 }
 EXPORT_SYMBOL(trace_hardirqs_off_caller);
 NOKPROBE_SYMBOL(trace_hardirqs_off_caller);
+
+void trace_hardirqs_on_pipelined(void)
+{
+	/*
+	 * If the IRQ was not delivered to the kernel, keep the
+	 * tracing logic unaware of the receipt, so that no false
+	 * positive is triggered in lockdep (e.g. IN-HARDIRQ-W ->
+	 * HARDIRQ-ON-W).
+	 */
+	if (irqs_pipelined() && (!running_inband() || irqs_disabled())) {
+		WARN_ON(irq_pipeline_debug() && !hard_irqs_disabled());
+		return;
+	}
+
+	trace_hardirqs_on();
+}
+
 #endif /* CONFIG_TRACE_IRQFLAGS */
 
 #ifdef CONFIG_TRACE_PREEMPT_TOGGLE
diff --git a/kernel/trace/trace_sched_wakeup.c b/kernel/trace/trace_sched_wakeup.c
index 5e43b9664eca..c399d762383a 100644
--- a/kernel/trace/trace_sched_wakeup.c
+++ b/kernel/trace/trace_sched_wakeup.c
@@ -486,7 +486,9 @@ probe_wakeup_sched_switch(void *ignore, bool preempt,
 
 	if (likely(!is_tracing_stopped())) {
 		wakeup_trace->max_latency = delta;
+		hard_local_irq_disable();
 		update_max_tr(wakeup_trace, wakeup_task, wakeup_cpu, NULL);
+		hard_local_irq_enable();
 	}
 
 out_unlock:
diff --git a/kernel/trace/trace_stack.c b/kernel/trace/trace_stack.c
index 4df9a209f7ca..62cbd27f4002 100644
--- a/kernel/trace/trace_stack.c
+++ b/kernel/trace/trace_stack.c
@@ -171,8 +171,9 @@ static void check_stack(unsigned long ip, unsigned long *stack)
 	if (!object_is_on_stack(stack))
 		return;
 
-	/* Can't do this from NMI context (can cause deadlocks) */
-	if (in_nmi())
+	/* Can't do this from NMI or oob stage contexts (can cause
+	   deadlocks) */
+	if (in_nmi() || !running_inband())
 		return;
 
 	local_irq_save(flags);
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index 93d97f9b0157..79e57977a001 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -814,6 +814,38 @@ config DEBUG_SHIRQ
 	  Drivers ought to be able to handle interrupts coming in at those
 	  points; some don't and need to be caught.
 
+config DEBUG_IRQ_PIPELINE
+	bool "Debug IRQ pipeline"
+	depends on IRQ_PIPELINE && DEBUG_KERNEL
+	---help---
+	  Turn on this option for enabling debug checks related to
+	  interrupt pipelining, like interrupt state consistency and
+	  proper context isolation between the in-band and oob stages.
+
+	  If unsure, say N.
+
+config IRQ_PIPELINE_TORTURE_TEST
+	bool "Torture tests for IRQ pipeline"
+	depends on DEBUG_IRQ_PIPELINE && DEBUG_KERNEL
+	select TORTURE_TEST
+	default n
+	help
+	  This option provides a kernel module that runs torture tests
+	  on the IRQ pipeline mechanism.
+
+	  Say Y here if you want the IRQ pipeline torture tests to run
+	  when the kernel starts. Say N if you are unsure.
+
+config DEBUG_DOVETAIL
+	bool "Debug Dovetail interface"
+	depends on DOVETAIL
+	select DEBUG_IRQ_PIPELINE
+	---help---
+	  Turn on this option for enabling debug checks related to
+	  running a dual kernel configuration, aka dovetailing. This
+	  option implicitly enables the interrupt pipeline debugging
+	  features.
+
 menu "Debug Lockups and Hangs"
 
 config LOCKUP_DETECTOR
@@ -1199,6 +1231,27 @@ config DEBUG_LOCK_ALLOC
 	 spin_lock_init()/mutex_init()/etc., or whether there is any lock
 	 held during task exit.
 
+config DEBUG_HARD_LOCKS
+	bool "Debug hard spinlocks"
+	depends on DEBUG_IRQ_PIPELINE && LOCKDEP
+	---help---
+	  Turn on this option for enabling LOCKDEP for hard spinlock
+	  types used in interrupt pipelining.
+
+	  Keep in mind that enabling such feature will ruin the
+	  latency figures for any out-of-band code, this is merely
+	  useful for proving the correctness of the locking scheme of
+	  such code without any consideration for real-time
+	  guarantees. You have been warned.
+
+	  If unsure, say N.
+
+if DEBUG_HARD_LOCKS
+comment "WARNING! DEBUG_HARD_LOCKS induces **massive** latency"
+comment "overhead for the code running on the out-of-band"
+comment "interrupt stage."
+endif
+
 config LOCKDEP
 	bool
 	depends on DEBUG_KERNEL && LOCK_DEBUGGING_SUPPORT
diff --git a/lib/atomic64.c b/lib/atomic64.c
index e98c85a99787..bf7d0409e916 100644
--- a/lib/atomic64.c
+++ b/lib/atomic64.c
@@ -25,15 +25,15 @@
  * Ensure each lock is in a separate cacheline.
  */
 static union {
-	raw_spinlock_t lock;
+	hard_spinlock_t lock;
 	char pad[L1_CACHE_BYTES];
 } atomic64_lock[NR_LOCKS] __cacheline_aligned_in_smp = {
 	[0 ... (NR_LOCKS - 1)] = {
-		.lock =  __RAW_SPIN_LOCK_UNLOCKED(atomic64_lock.lock),
+		.lock =  __HARD_SPIN_LOCK_INITIALIZER(atomic64_lock.lock),
 	},
 };
 
-static inline raw_spinlock_t *lock_addr(const atomic64_t *v)
+static inline hard_spinlock_t *lock_addr(const atomic64_t *v)
 {
 	unsigned long addr = (unsigned long) v;
 
@@ -45,7 +45,7 @@ static inline raw_spinlock_t *lock_addr(const atomic64_t *v)
 s64 atomic64_read(const atomic64_t *v)
 {
 	unsigned long flags;
-	raw_spinlock_t *lock = lock_addr(v);
+	hard_spinlock_t *lock = lock_addr(v);
 	s64 val;
 
 	raw_spin_lock_irqsave(lock, flags);
@@ -58,7 +58,7 @@ EXPORT_SYMBOL(atomic64_read);
 void atomic64_set(atomic64_t *v, s64 i)
 {
 	unsigned long flags;
-	raw_spinlock_t *lock = lock_addr(v);
+	hard_spinlock_t *lock = lock_addr(v);
 
 	raw_spin_lock_irqsave(lock, flags);
 	v->counter = i;
@@ -70,7 +70,7 @@ EXPORT_SYMBOL(atomic64_set);
 void atomic64_##op(s64 a, atomic64_t *v)				\
 {									\
 	unsigned long flags;						\
-	raw_spinlock_t *lock = lock_addr(v);				\
+	hard_spinlock_t *lock = lock_addr(v);				\
 									\
 	raw_spin_lock_irqsave(lock, flags);				\
 	v->counter c_op a;						\
@@ -82,7 +82,7 @@ EXPORT_SYMBOL(atomic64_##op);
 s64 atomic64_##op##_return(s64 a, atomic64_t *v)			\
 {									\
 	unsigned long flags;						\
-	raw_spinlock_t *lock = lock_addr(v);				\
+	hard_spinlock_t *lock = lock_addr(v);				\
 	s64 val;							\
 									\
 	raw_spin_lock_irqsave(lock, flags);				\
@@ -96,7 +96,7 @@ EXPORT_SYMBOL(atomic64_##op##_return);
 s64 atomic64_fetch_##op(s64 a, atomic64_t *v)				\
 {									\
 	unsigned long flags;						\
-	raw_spinlock_t *lock = lock_addr(v);				\
+	hard_spinlock_t *lock = lock_addr(v);				\
 	s64 val;							\
 									\
 	raw_spin_lock_irqsave(lock, flags);				\
@@ -133,7 +133,7 @@ ATOMIC64_OPS(xor, ^=)
 s64 atomic64_dec_if_positive(atomic64_t *v)
 {
 	unsigned long flags;
-	raw_spinlock_t *lock = lock_addr(v);
+	hard_spinlock_t *lock = lock_addr(v);
 	s64 val;
 
 	raw_spin_lock_irqsave(lock, flags);
@@ -148,7 +148,7 @@ EXPORT_SYMBOL(atomic64_dec_if_positive);
 s64 atomic64_cmpxchg(atomic64_t *v, s64 o, s64 n)
 {
 	unsigned long flags;
-	raw_spinlock_t *lock = lock_addr(v);
+	hard_spinlock_t *lock = lock_addr(v);
 	s64 val;
 
 	raw_spin_lock_irqsave(lock, flags);
@@ -163,7 +163,7 @@ EXPORT_SYMBOL(atomic64_cmpxchg);
 s64 atomic64_xchg(atomic64_t *v, s64 new)
 {
 	unsigned long flags;
-	raw_spinlock_t *lock = lock_addr(v);
+	hard_spinlock_t *lock = lock_addr(v);
 	s64 val;
 
 	raw_spin_lock_irqsave(lock, flags);
@@ -177,7 +177,7 @@ EXPORT_SYMBOL(atomic64_xchg);
 s64 atomic64_fetch_add_unless(atomic64_t *v, s64 a, s64 u)
 {
 	unsigned long flags;
-	raw_spinlock_t *lock = lock_addr(v);
+	hard_spinlock_t *lock = lock_addr(v);
 	s64 val;
 
 	raw_spin_lock_irqsave(lock, flags);
diff --git a/lib/dump_stack.c b/lib/dump_stack.c
index 33ffbf308853..b9e688851148 100644
--- a/lib/dump_stack.c
+++ b/lib/dump_stack.c
@@ -9,6 +9,7 @@
 #include <linux/sched.h>
 #include <linux/sched/debug.h>
 #include <linux/smp.h>
+#include <linux/irqstage.h>
 #include <linux/atomic.h>
 #include <linux/kexec.h>
 #include <linux/utsname.h>
@@ -56,6 +57,11 @@ void dump_stack_print_info(const char *log_lvl)
 		printk("%sHardware name: %s\n",
 		       log_lvl, dump_stack_arch_desc_str);
 
+#ifdef CONFIG_IRQ_PIPELINE
+	printk("%sIRQ stage: %s\n",
+	       log_lvl, current_irq_stage->name);
+#endif
+
 	print_worker_info(log_lvl, current);
 }
 
@@ -85,6 +91,29 @@ static void __dump_stack(void)
 #ifdef CONFIG_SMP
 static atomic_t dump_lock = ATOMIC_INIT(-1);
 
+static unsigned long disable_local_irqs(void)
+{
+	unsigned long flags = 0; /* only to trick the UMR detection */
+
+	/*
+	 * We neither need nor want to disable in-band IRQs over the
+	 * oob stage, where CPU migration can't happen. Conversely, we
+	 * neither need nor want to disable hard IRQs from the oob
+	 * stage, so that latency won't skyrocket as a result of
+	 * dumping the stack backtrace.
+	 */
+	if (running_inband())
+		local_irq_save(flags);
+
+	return flags;
+}
+
+static void restore_local_irqs(unsigned long flags)
+{
+	if (running_inband())
+		local_irq_restore(flags);
+}
+
 asmlinkage __visible void dump_stack(void)
 {
 	unsigned long flags;
@@ -97,7 +126,7 @@ asmlinkage __visible void dump_stack(void)
 	 * against other CPUs
 	 */
 retry:
-	local_irq_save(flags);
+	flags = disable_local_irqs();
 	cpu = smp_processor_id();
 	old = atomic_cmpxchg(&dump_lock, -1, cpu);
 	if (old == -1) {
@@ -105,7 +134,7 @@ asmlinkage __visible void dump_stack(void)
 	} else if (old == cpu) {
 		was_locked = 1;
 	} else {
-		local_irq_restore(flags);
+		restore_local_irqs(flags);
 		/*
 		 * Wait for the lock to release before jumping to
 		 * atomic_cmpxchg() in order to mitigate the thundering herd
@@ -120,7 +149,7 @@ asmlinkage __visible void dump_stack(void)
 	if (!was_locked)
 		atomic_set(&dump_lock, -1);
 
-	local_irq_restore(flags);
+	restore_local_irqs(flags);
 }
 #else
 asmlinkage __visible void dump_stack(void)
diff --git a/lib/ioremap.c b/lib/ioremap.c
index 0a2ffadc6d71..831540bdf5ea 100644
--- a/lib/ioremap.c
+++ b/lib/ioremap.c
@@ -227,6 +227,7 @@ int ioremap_page_range(unsigned long addr,
 			break;
 	} while (pgd++, phys_addr += (next - addr), addr = next, addr != end);
 
+	arch_advertise_page_mapping(start, end);
 	flush_cache_vmap(start, end);
 
 	return err;
diff --git a/lib/smp_processor_id.c b/lib/smp_processor_id.c
index 60ba93fc42ce..c95015aaeaa3 100644
--- a/lib/smp_processor_id.c
+++ b/lib/smp_processor_id.c
@@ -7,12 +7,16 @@
 #include <linux/export.h>
 #include <linux/kprobes.h>
 #include <linux/sched.h>
+#include <linux/irqstage.h>
 
 notrace static nokprobe_inline
 unsigned int check_preemption_disabled(const char *what1, const char *what2)
 {
 	int this_cpu = raw_smp_processor_id();
 
+	if (hard_irqs_disabled() || !running_inband())
+		goto out;
+
 	if (likely(preempt_count()))
 		goto out;
 
diff --git a/mm/kasan/report.c b/mm/kasan/report.c
index 621782100eaa..ce23ba7ad68a 100644
--- a/mm/kasan/report.c
+++ b/mm/kasan/report.c
@@ -75,7 +75,7 @@ static void print_error_description(struct kasan_access_info *info)
 		info->access_addr, current->comm, task_pid_nr(current));
 }
 
-static DEFINE_SPINLOCK(report_lock);
+static DEFINE_HARD_SPINLOCK(report_lock);
 
 static void start_report(unsigned long *flags)
 {
@@ -83,7 +83,7 @@ static void start_report(unsigned long *flags)
 	 * Make sure we don't end up in loop.
 	 */
 	kasan_disable_current();
-	spin_lock_irqsave(&report_lock, *flags);
+	raw_spin_lock_irqsave(&report_lock, *flags);
 	pr_err("==================================================================\n");
 }
 
@@ -91,7 +91,7 @@ static void end_report(unsigned long *flags)
 {
 	pr_err("==================================================================\n");
 	add_taint(TAINT_BAD_PAGE, LOCKDEP_NOW_UNRELIABLE);
-	spin_unlock_irqrestore(&report_lock, *flags);
+	raw_spin_unlock_irqrestore(&report_lock, *flags);
 	if (panic_on_warn)
 		panic("panic_on_warn set ...\n");
 	kasan_enable_current();
diff --git a/mm/memory.c b/mm/memory.c
index b1ca51a079f2..298594747eed 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -4434,6 +4434,15 @@ void print_vma_addr(char *prefix, unsigned long ip)
 #if defined(CONFIG_PROVE_LOCKING) || defined(CONFIG_DEBUG_ATOMIC_SLEEP)
 void __might_fault(const char *file, int line)
 {
+	/*
+	 * When running over the oob stage (e.g. some co-kernel's own
+	 * thread), we should only make sure to run with hw IRQs
+	 * enabled before accessing the memory.
+	 */
+	if (running_oob()) {
+		WARN_ON_ONCE(hard_irqs_disabled());
+		return;
+	}
 	/*
 	 * Some code (nfs/sunrpc) uses socket ops on kernel memory while
 	 * holding the mmap_sem, this is safe because kernel memory doesn't
@@ -4628,6 +4637,66 @@ long copy_huge_page_from_user(struct page *dst_page,
 }
 #endif /* CONFIG_TRANSPARENT_HUGEPAGE || CONFIG_HUGETLBFS */
 
+#ifdef CONFIG_DOVETAIL
+
+int commit_vma(struct mm_struct *mm, struct vm_area_struct *vma)
+{
+	unsigned int gup_flags;
+	int ret, npages;
+
+	if (vma->vm_flags & (VM_IO | VM_PFNMAP))
+		return 0;
+
+	if (!((vma->vm_flags & VM_DONTEXPAND) ||
+	    is_vm_hugetlb_page(vma) || vma == get_gate_vma(mm))) {
+		ret = populate_vma_page_range(vma, vma->vm_start, vma->vm_end,
+					      NULL);
+		return ret < 0 ? ret : 0;
+	}
+
+	gup_flags = (vma->vm_flags & (VM_WRITE | VM_SHARED)) == VM_WRITE
+		? FOLL_WRITE : 0;
+	npages = DIV_ROUND_UP(vma->vm_end, PAGE_SIZE) - vma->vm_start/PAGE_SIZE;
+	ret = get_user_pages(vma->vm_start, npages, gup_flags, NULL, NULL);
+	if (ret < 0)
+		return ret;
+
+	return ret == npages ? 0 : -EFAULT;
+}
+
+int force_commit_memory(void)
+{
+	struct task_struct *tsk = current;
+	struct vm_area_struct *vma;
+	struct mm_struct *mm;
+	int ret = 0;
+
+	mm = get_task_mm(tsk);
+	if (!mm)
+		return -EPERM;
+
+	down_write(&mm->mmap_sem);
+	if (test_bit(MMF_VM_PINNED, &mm->flags))
+		goto done_mm;
+
+	for (vma = mm->mmap; vma; vma = vma->vm_next) {
+		if (is_cow_mapping(vma->vm_flags) &&
+		    (vma->vm_flags & VM_WRITE)) {
+			ret = commit_vma(mm, vma);
+			if (ret < 0)
+				goto done_mm;
+		}
+	}
+	set_bit(MMF_VM_PINNED, &mm->flags);
+done_mm:
+	up_write(&mm->mmap_sem);
+	mmput(mm);
+
+	return ret;
+}
+
+#endif
+
 #if USE_SPLIT_PTE_PTLOCKS && ALLOC_SPLIT_PTLOCKS
 
 static struct kmem_cache *page_ptl_cachep;
diff --git a/mm/mmu_context.c b/mm/mmu_context.c
index 3e612ae748e9..1a6fa10052c1 100644
--- a/mm/mmu_context.c
+++ b/mm/mmu_context.c
@@ -23,15 +23,18 @@ void use_mm(struct mm_struct *mm)
 {
 	struct mm_struct *active_mm;
 	struct task_struct *tsk = current;
+	unsigned long flags;
 
 	task_lock(tsk);
 	active_mm = tsk->active_mm;
+	protect_inband_mm(flags);
 	if (active_mm != mm) {
 		mmgrab(mm);
 		tsk->active_mm = mm;
 	}
 	tsk->mm = mm;
 	switch_mm(active_mm, mm, tsk);
+	unprotect_inband_mm(flags);
 	task_unlock(tsk);
 #ifdef finish_arch_post_lock_switch
 	finish_arch_post_lock_switch();
diff --git a/mm/mprotect.c b/mm/mprotect.c
index 7967825f6d33..78e39629436c 100644
--- a/mm/mprotect.c
+++ b/mm/mprotect.c
@@ -23,6 +23,7 @@
 #include <linux/swapops.h>
 #include <linux/mmu_notifier.h>
 #include <linux/migrate.h>
+#include <linux/dovetail.h>
 #include <linux/perf_event.h>
 #include <linux/pkeys.h>
 #include <linux/ksm.h>
@@ -41,7 +42,7 @@ static unsigned long change_pte_range(struct vm_area_struct *vma, pmd_t *pmd,
 {
 	pte_t *pte, oldpte;
 	spinlock_t *ptl;
-	unsigned long pages = 0;
+	unsigned long pages = 0, flags;
 	int target_node = NUMA_NO_NODE;
 
 	/*
@@ -109,6 +110,7 @@ static unsigned long change_pte_range(struct vm_area_struct *vma, pmd_t *pmd,
 					continue;
 			}
 
+			flags = hard_local_irq_save();
 			oldpte = ptep_modify_prot_start(vma, addr, pte);
 			ptent = pte_modify(oldpte, newprot);
 			if (preserve_write)
@@ -121,6 +123,7 @@ static unsigned long change_pte_range(struct vm_area_struct *vma, pmd_t *pmd,
 				ptent = pte_mkwrite(ptent);
 			}
 			ptep_modify_prot_commit(vma, addr, pte, oldpte, ptent);
+			hard_local_irq_restore(flags);
 			pages++;
 		} else if (IS_ENABLED(CONFIG_MIGRATION)) {
 			swp_entry_t entry = pte_to_swp_entry(oldpte);
@@ -305,6 +308,12 @@ unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,
 	else
 		pages = change_protection_range(vma, start, end, newprot, dirty_accountable, prot_numa);
 
+	if (dovetailing() && !prot_numa &&
+	    test_bit(MMF_VM_PINNED, &vma->vm_mm->flags) &&
+	    ((vma->vm_flags | vma->vm_mm->def_flags) & VM_LOCKED) &&
+	    (vma->vm_flags & (VM_READ | VM_WRITE | VM_EXEC)))
+		commit_vma(vma->vm_mm, vma);
+
 	return pages;
 }
 
diff --git a/mm/vmalloc.c b/mm/vmalloc.c
index a3c70e275f4e..4441275f2bf0 100644
--- a/mm/vmalloc.c
+++ b/mm/vmalloc.c
@@ -211,6 +211,10 @@ static int vmap_p4d_range(pgd_t *pgd, unsigned long addr,
 	return 0;
 }
 
+void __weak arch_advertise_page_mapping(unsigned long start, unsigned long end)
+{
+}
+
 /*
  * Set up page tables in kva (addr, end). The ptes shall have prot "prot", and
  * will have pfns corresponding to the "pages" array.
@@ -235,6 +239,8 @@ static int vmap_page_range_noflush(unsigned long start, unsigned long end,
 			return err;
 	} while (pgd++, addr = next, addr != end);
 
+	arch_advertise_page_mapping(start, end);
+
 	return nr;
 }
 
diff --git a/scripts/mkcompile_h b/scripts/mkcompile_h
index d1d757c6edf4..9103227ae82d 100755
--- a/scripts/mkcompile_h
+++ b/scripts/mkcompile_h
@@ -6,7 +6,8 @@ ARCH=$2
 SMP=$3
 PREEMPT=$4
 PREEMPT_RT=$5
-CC=$6
+IRQPIPE=$6
+CC=$7
 
 vecho() { [ "${quiet}" = "silent_" ] || echo "$@" ; }
 
@@ -55,6 +56,7 @@ CONFIG_FLAGS=""
 if [ -n "$SMP" ] ; then CONFIG_FLAGS="SMP"; fi
 if [ -n "$PREEMPT" ] ; then CONFIG_FLAGS="$CONFIG_FLAGS PREEMPT"; fi
 if [ -n "$PREEMPT_RT" ] ; then CONFIG_FLAGS="$CONFIG_FLAGS PREEMPT_RT"; fi
+if [ -n "$IRQPIPE" ] ; then CONFIG_FLAGS="$CONFIG_FLAGS IRQPIPE"; fi
 UTS_VERSION="$UTS_VERSION $CONFIG_FLAGS $TIMESTAMP"
 
 # Truncate to maximum length
